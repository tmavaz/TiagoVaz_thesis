
memoria.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08005d88  08005d88  00006d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f68  08005f68  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f68  08005f68  00006f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f70  08005f70  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f70  08005f70  00006f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f74  08005f74  00006f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005f78  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  2000005c  08005fd4  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08005fd4  00007550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4d4  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e22  00000000  00000000  00013560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00015388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f2  00000000  00000000  00015de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002205e  00000000  00000000  000165da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5d7  00000000  00000000  00038638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cde6b  00000000  00000000  00045c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113a7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fb8  00000000  00000000  00113ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00116a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005d70 	.word	0x08005d70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005d70 	.word	0x08005d70

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	f5ad 6daa 	sub.w	sp, sp, #1360	@ 0x550
 80005b6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fd36 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f9a0 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 fa84 	bl	8000acc <MX_GPIO_Init>
  MX_DMA_Init();
 80005c4:	f000 fa5a 	bl	8000a7c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005c8:	f000 fa2e 	bl	8000a28 <MX_USART2_UART_Init>
  MX_SDIO_MMC_Init();
 80005cc:	f000 fa06 	bl	80009dc <MX_SDIO_MMC_Init>
  /* USER CODE BEGIN 2 */
  char startingMsg[] = "\r\n Starting...\r\n";
 80005d0:	4bbd      	ldr	r3, [pc, #756]	@ (80008c8 <main+0x318>)
 80005d2:	f207 542c 	addw	r4, r7, #1324	@ 0x52c
 80005d6:	461d      	mov	r5, r3
 80005d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005dc:	682b      	ldr	r3, [r5, #0]
 80005de:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)startingMsg, strlen(startingMsg), HAL_MAX_DELAY);
 80005e0:	f207 532c 	addw	r3, r7, #1324	@ 0x52c
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fe13 	bl	8000210 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	f207 512c 	addw	r1, r7, #1324	@ 0x52c
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	48b5      	ldr	r0, [pc, #724]	@ (80008cc <main+0x31c>)
 80005f8:	f003 fedc 	bl	80043b4 <HAL_UART_Transmit>

  HAL_MMC_CardInfoTypeDef mmcInfo;
  uint8_t txBuffer[512];
  uint8_t rxBuffer[512];
  uint32_t testBlock = 0;  // endereço do bloco/setor a ser testado (a eMMC usa endereços de 512B por padrão)
 80005fc:	2300      	movs	r3, #0
 80005fe:	f8c7 3540 	str.w	r3, [r7, #1344]	@ 0x540

  // Preenche buffer de escrita com um padrão conhecido
  for (int i = 0; i < 512; ++i) {
 8000602:	2300      	movs	r3, #0
 8000604:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
 8000608:	e010      	b.n	800062c <main+0x7c>
      txBuffer[i] = (uint8_t)(i & 0xFF);
 800060a:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 800060e:	b2d9      	uxtb	r1, r3
 8000610:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8000614:	f5a3 720e 	sub.w	r2, r3, #568	@ 0x238
 8000618:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 800061c:	4413      	add	r3, r2
 800061e:	460a      	mov	r2, r1
 8000620:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 512; ++i) {
 8000622:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 8000626:	3301      	adds	r3, #1
 8000628:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
 800062c:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 8000630:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000634:	dbe9      	blt.n	800060a <main+0x5a>
  }

  // Inicializa a eMMC via HAL (já configurado pelo CubeMX)
  if (HAL_MMC_Init(&hmmc) != HAL_OK) {
 8000636:	48a6      	ldr	r0, [pc, #664]	@ (80008d0 <main+0x320>)
 8000638:	f001 fbe1 	bl	8001dfe <HAL_MMC_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d01b      	beq.n	800067a <main+0xca>
      char errorMsg[] = "Erro na inicialização da eMMC\r\n";
 8000642:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8000646:	f5a3 63a9 	sub.w	r3, r3, #1352	@ 0x548
 800064a:	4aa2      	ldr	r2, [pc, #648]	@ (80008d4 <main+0x324>)
 800064c:	461c      	mov	r4, r3
 800064e:	4615      	mov	r5, r2
 8000650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000658:	682b      	ldr	r3, [r5, #0]
 800065a:	8023      	strh	r3, [r4, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)errorMsg, strlen(errorMsg), HAL_MAX_DELAY);
 800065c:	463b      	mov	r3, r7
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fdd6 	bl	8000210 <strlen>
 8000664:	4603      	mov	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	4639      	mov	r1, r7
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	4897      	ldr	r0, [pc, #604]	@ (80008cc <main+0x31c>)
 8000670:	f003 fea0 	bl	80043b4 <HAL_UART_Transmit>
      Error_Handler();
 8000674:	f000 faa6 	bl	8000bc4 <Error_Handler>
 8000678:	e01a      	b.n	80006b0 <main+0x100>
  } else {
      char okMsg[] = "inicialização da eMMC ok\r\n";
 800067a:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800067e:	f5a3 639a 	sub.w	r3, r3, #1232	@ 0x4d0
 8000682:	4a95      	ldr	r2, [pc, #596]	@ (80008d8 <main+0x328>)
 8000684:	461c      	mov	r4, r3
 8000686:	4615      	mov	r5, r2
 8000688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000690:	c407      	stmia	r4!, {r0, r1, r2}
 8000692:	7023      	strb	r3, [r4, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)okMsg, strlen(okMsg), HAL_MAX_DELAY);
 8000694:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff fdb9 	bl	8000210 <strlen>
 800069e:	4603      	mov	r3, r0
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	4888      	ldr	r0, [pc, #544]	@ (80008cc <main+0x31c>)
 80006ac:	f003 fe82 	bl	80043b4 <HAL_UART_Transmit>
  }

  // (Opcional) Obtém informações do cartão, como número de blocos, tamanho:
  HAL_MMC_GetCardInfo(&hmmc, &mmcInfo);
 80006b0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80006b4:	4619      	mov	r1, r3
 80006b6:	4886      	ldr	r0, [pc, #536]	@ (80008d0 <main+0x320>)
 80006b8:	f001 ffe6 	bl	8002688 <HAL_MMC_GetCardInfo>
  char infoMsg[100];
  snprintf((char *)infoMsg, sizeof(infoMsg),
		  "eMMC inicializada: %lu MB, %lu blocos de %lu bytes\r\n",
		  mmcInfo.LogBlockNbr / 2048, // converte blocos de 512B em MB
 80006bc:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
  snprintf((char *)infoMsg, sizeof(infoMsg),
 80006c0:	0ad9      	lsrs	r1, r3, #11
 80006c2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80006c6:	f8d7 2528 	ldr.w	r2, [r7, #1320]	@ 0x528
 80006ca:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 80006ce:	9201      	str	r2, [sp, #4]
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	460b      	mov	r3, r1
 80006d4:	4a81      	ldr	r2, [pc, #516]	@ (80008dc <main+0x32c>)
 80006d6:	2164      	movs	r1, #100	@ 0x64
 80006d8:	f004 fe86 	bl	80053e8 <sniprintf>
		  mmcInfo.LogBlockNbr, mmcInfo.LogBlockSize);
  HAL_UART_Transmit(&huart2, (uint8_t*)infoMsg, strlen(infoMsg), HAL_MAX_DELAY);
 80006dc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fd95 	bl	8000210 <strlen>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
 80006f2:	4876      	ldr	r0, [pc, #472]	@ (80008cc <main+0x31c>)
 80006f4:	f003 fe5e 	bl	80043b4 <HAL_UART_Transmit>

  // Configura barramento de 4 bits, caso ainda não esteja configurado
  HAL_MMC_ConfigWideBusOperation(&hmmc, SDIO_BUS_WIDE_4B);
 80006f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006fc:	4874      	ldr	r0, [pc, #464]	@ (80008d0 <main+0x320>)
 80006fe:	f002 f8d5 	bl	80028ac <HAL_MMC_ConfigWideBusOperation>

  // --- Escrita de um bloco via DMA ---
  if (HAL_MMC_WriteBlocks_DMA(&hmmc, txBuffer, testBlock, 1) != HAL_OK) {
 8000702:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 8000706:	2301      	movs	r3, #1
 8000708:	f8d7 2540 	ldr.w	r2, [r7, #1344]	@ 0x540
 800070c:	4870      	ldr	r0, [pc, #448]	@ (80008d0 <main+0x320>)
 800070e:	f001 fd1f 	bl	8002150 <HAL_MMC_WriteBlocks_DMA>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d01e      	beq.n	8000756 <main+0x1a6>
      char okMsg[] = "Falha ao iniciar escrita DMA\r\n";
 8000718:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800071c:	f5a3 639e 	sub.w	r3, r3, #1264	@ 0x4f0
 8000720:	4a6f      	ldr	r2, [pc, #444]	@ (80008e0 <main+0x330>)
 8000722:	461c      	mov	r4, r3
 8000724:	4615      	mov	r5, r2
 8000726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800072e:	c407      	stmia	r4!, {r0, r1, r2}
 8000730:	8023      	strh	r3, [r4, #0]
 8000732:	3402      	adds	r4, #2
 8000734:	0c1b      	lsrs	r3, r3, #16
 8000736:	7023      	strb	r3, [r4, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)okMsg, strlen(okMsg), HAL_MAX_DELAY);
 8000738:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fd67 	bl	8000210 <strlen>
 8000742:	4603      	mov	r3, r0
 8000744:	b29a      	uxth	r2, r3
 8000746:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	485f      	ldr	r0, [pc, #380]	@ (80008cc <main+0x31c>)
 8000750:	f003 fe30 	bl	80043b4 <HAL_UART_Transmit>
 8000754:	e019      	b.n	800078a <main+0x1da>
  } else {
      // Aguarda transferência terminar
      while (HAL_MMC_GetCardState(&hmmc) != HAL_MMC_CARD_TRANSFER) {
 8000756:	bf00      	nop
 8000758:	485d      	ldr	r0, [pc, #372]	@ (80008d0 <main+0x320>)
 800075a:	f002 f959 	bl	8002a10 <HAL_MMC_GetCardState>
 800075e:	4603      	mov	r3, r0
 8000760:	2b04      	cmp	r3, #4
 8000762:	d1f9      	bne.n	8000758 <main+0x1a8>
          // Aguarde até o cartão estar em estado pronto (TRANSFER OK):contentReference[oaicite:16]{index=16}
          // Poderia-se checar timeout aqui para evitar loop travado
      }
      char okMsg[50];
      snprintf((char *)okMsg, sizeof(okMsg),"Bloco %lu escrito com sucesso\r\n", testBlock);
 8000764:	4638      	mov	r0, r7
 8000766:	f8d7 3540 	ldr.w	r3, [r7, #1344]	@ 0x540
 800076a:	4a5e      	ldr	r2, [pc, #376]	@ (80008e4 <main+0x334>)
 800076c:	2132      	movs	r1, #50	@ 0x32
 800076e:	f004 fe3b 	bl	80053e8 <sniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)okMsg, strlen(okMsg), HAL_MAX_DELAY);
 8000772:	463b      	mov	r3, r7
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fd4b 	bl	8000210 <strlen>
 800077a:	4603      	mov	r3, r0
 800077c:	b29a      	uxth	r2, r3
 800077e:	4639      	mov	r1, r7
 8000780:	f04f 33ff 	mov.w	r3, #4294967295
 8000784:	4851      	ldr	r0, [pc, #324]	@ (80008cc <main+0x31c>)
 8000786:	f003 fe15 	bl	80043b4 <HAL_UART_Transmit>
  }

  HAL_Delay(1000);
 800078a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800078e:	f000 fcbd 	bl	800110c <HAL_Delay>

  // --- Leitura do bloco de volta via DMA ---
  if (HAL_MMC_ReadBlocks_DMA(&hmmc, rxBuffer, testBlock, 1) != HAL_OK) {
 8000792:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000796:	2301      	movs	r3, #1
 8000798:	f8d7 2540 	ldr.w	r2, [r7, #1344]	@ 0x540
 800079c:	484c      	ldr	r0, [pc, #304]	@ (80008d0 <main+0x320>)
 800079e:	f001 fbf7 	bl	8001f90 <HAL_MMC_ReadBlocks_DMA>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d01e      	beq.n	80007e6 <main+0x236>
      char okMsg[] = "Falha ao iniciar leitura DMA\r\n";
 80007a8:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80007ac:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 80007b0:	4a4d      	ldr	r2, [pc, #308]	@ (80008e8 <main+0x338>)
 80007b2:	461c      	mov	r4, r3
 80007b4:	4615      	mov	r5, r2
 80007b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007be:	c407      	stmia	r4!, {r0, r1, r2}
 80007c0:	8023      	strh	r3, [r4, #0]
 80007c2:	3402      	adds	r4, #2
 80007c4:	0c1b      	lsrs	r3, r3, #16
 80007c6:	7023      	strb	r3, [r4, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)okMsg, strlen(okMsg), HAL_MAX_DELAY);
 80007c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fd1f 	bl	8000210 <strlen>
 80007d2:	4603      	mov	r3, r0
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	483b      	ldr	r0, [pc, #236]	@ (80008cc <main+0x31c>)
 80007e0:	f003 fde8 	bl	80043b4 <HAL_UART_Transmit>
 80007e4:	e019      	b.n	800081a <main+0x26a>
  } else {
      while (HAL_MMC_GetCardState(&hmmc) != HAL_MMC_CARD_TRANSFER) {
 80007e6:	bf00      	nop
 80007e8:	4839      	ldr	r0, [pc, #228]	@ (80008d0 <main+0x320>)
 80007ea:	f002 f911 	bl	8002a10 <HAL_MMC_GetCardState>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d1f9      	bne.n	80007e8 <main+0x238>
          // Espera fim da leitura (estado TRANSFER):contentReference[oaicite:17]{index=17}
      }
      char okMsg[50];
      snprintf((char *)okMsg, sizeof(okMsg),"Bloco %lu lido com sucesso\r\n", testBlock);
 80007f4:	4638      	mov	r0, r7
 80007f6:	f8d7 3540 	ldr.w	r3, [r7, #1344]	@ 0x540
 80007fa:	4a3c      	ldr	r2, [pc, #240]	@ (80008ec <main+0x33c>)
 80007fc:	2132      	movs	r1, #50	@ 0x32
 80007fe:	f004 fdf3 	bl	80053e8 <sniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)okMsg, strlen(okMsg), HAL_MAX_DELAY);
 8000802:	463b      	mov	r3, r7
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fd03 	bl	8000210 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29a      	uxth	r2, r3
 800080e:	4639      	mov	r1, r7
 8000810:	f04f 33ff 	mov.w	r3, #4294967295
 8000814:	482d      	ldr	r0, [pc, #180]	@ (80008cc <main+0x31c>)
 8000816:	f003 fdcd 	bl	80043b4 <HAL_UART_Transmit>
  }

  // --- Verificação dos dados lidos ---
  if (memcmp(rxBuffer, txBuffer, 512) == 0) {
 800081a:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 800081e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000826:	4618      	mov	r0, r3
 8000828:	f004 fe12 	bl	8005450 <memcmp>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d113      	bne.n	800085a <main+0x2aa>
      char okMsg[50];
      snprintf((char *)okMsg, sizeof(okMsg),"Dados OK: bloco %lu corresponde ao escrito\r\n", testBlock);
 8000832:	4638      	mov	r0, r7
 8000834:	f8d7 3540 	ldr.w	r3, [r7, #1344]	@ 0x540
 8000838:	4a2d      	ldr	r2, [pc, #180]	@ (80008f0 <main+0x340>)
 800083a:	2132      	movs	r1, #50	@ 0x32
 800083c:	f004 fdd4 	bl	80053e8 <sniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)okMsg, strlen(okMsg), HAL_MAX_DELAY);
 8000840:	463b      	mov	r3, r7
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fce4 	bl	8000210 <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	b29a      	uxth	r2, r3
 800084c:	4639      	mov	r1, r7
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	481e      	ldr	r0, [pc, #120]	@ (80008cc <main+0x31c>)
 8000854:	f003 fdae 	bl	80043b4 <HAL_UART_Transmit>
 8000858:	e012      	b.n	8000880 <main+0x2d0>
  } else {
	  char notOkMsg[55];
	  snprintf((char *)notOkMsg, sizeof(notOkMsg),"Erro: dados lidos diferentes do escrito no bloco %lu\r\n", testBlock);
 800085a:	4638      	mov	r0, r7
 800085c:	f8d7 3540 	ldr.w	r3, [r7, #1344]	@ 0x540
 8000860:	4a24      	ldr	r2, [pc, #144]	@ (80008f4 <main+0x344>)
 8000862:	2137      	movs	r1, #55	@ 0x37
 8000864:	f004 fdc0 	bl	80053e8 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)notOkMsg, strlen(notOkMsg), HAL_MAX_DELAY);
 8000868:	463b      	mov	r3, r7
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fcd0 	bl	8000210 <strlen>
 8000870:	4603      	mov	r3, r0
 8000872:	b29a      	uxth	r2, r3
 8000874:	4639      	mov	r1, r7
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	4814      	ldr	r0, [pc, #80]	@ (80008cc <main+0x31c>)
 800087c:	f003 fd9a 	bl	80043b4 <HAL_UART_Transmit>
      // (Opcional: imprimir conteúdo para debug)
  }

  char startMsg[] = "\r\n In While...\r\n";
 8000880:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8000884:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8000888:	4a1b      	ldr	r2, [pc, #108]	@ (80008f8 <main+0x348>)
 800088a:	461c      	mov	r4, r3
 800088c:	4615      	mov	r5, r2
 800088e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000892:	682b      	ldr	r3, [r5, #0]
 8000894:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)startMsg, strlen(startMsg), HAL_MAX_DELAY);
 8000896:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fcb8 	bl	8000210 <strlen>
 80008a0:	4603      	mov	r3, r0
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	4807      	ldr	r0, [pc, #28]	@ (80008cc <main+0x31c>)
 80008ae:	f003 fd81 	bl	80043b4 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008b2:	2120      	movs	r1, #32
 80008b4:	4811      	ldr	r0, [pc, #68]	@ (80008fc <main+0x34c>)
 80008b6:	f001 fa88 	bl	8001dca <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80008ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008be:	f000 fc25 	bl	800110c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008c2:	bf00      	nop
 80008c4:	e7f5      	b.n	80008b2 <main+0x302>
 80008c6:	bf00      	nop
 80008c8:	08005e68 	.word	0x08005e68
 80008cc:	200003b8 	.word	0x200003b8
 80008d0:	20000078 	.word	0x20000078
 80008d4:	08005e7c 	.word	0x08005e7c
 80008d8:	08005ea0 	.word	0x08005ea0
 80008dc:	08005d88 	.word	0x08005d88
 80008e0:	08005ec0 	.word	0x08005ec0
 80008e4:	08005dc0 	.word	0x08005dc0
 80008e8:	08005ee0 	.word	0x08005ee0
 80008ec:	08005de0 	.word	0x08005de0
 80008f0:	08005e00 	.word	0x08005e00
 80008f4:	08005e30 	.word	0x08005e30
 80008f8:	08005f00 	.word	0x08005f00
 80008fc:	40020000 	.word	0x40020000

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	@ 0x50
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	2234      	movs	r2, #52	@ 0x34
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f004 fdae 	bl	8005470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	4b2a      	ldr	r3, [pc, #168]	@ (80009d4 <SystemClock_Config+0xd4>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092c:	4a29      	ldr	r2, [pc, #164]	@ (80009d4 <SystemClock_Config+0xd4>)
 800092e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000932:	6413      	str	r3, [r2, #64]	@ 0x40
 8000934:	4b27      	ldr	r3, [pc, #156]	@ (80009d4 <SystemClock_Config+0xd4>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000940:	2300      	movs	r3, #0
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	4b24      	ldr	r3, [pc, #144]	@ (80009d8 <SystemClock_Config+0xd8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800094c:	4a22      	ldr	r2, [pc, #136]	@ (80009d8 <SystemClock_Config+0xd8>)
 800094e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <SystemClock_Config+0xd8>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000960:	2302      	movs	r3, #2
 8000962:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000964:	2301      	movs	r3, #1
 8000966:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000968:	2310      	movs	r3, #16
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096c:	2302      	movs	r3, #2
 800096e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000970:	2300      	movs	r3, #0
 8000972:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000974:	2310      	movs	r3, #16
 8000976:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000978:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800097c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800097e:	2304      	movs	r3, #4
 8000980:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000982:	2307      	movs	r3, #7
 8000984:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4618      	mov	r0, r3
 8000990:	f003 fa22 	bl	8003dd8 <HAL_RCC_OscConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800099a:	f000 f913 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099e:	230f      	movs	r3, #15
 80009a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a2:	2302      	movs	r3, #2
 80009a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	2102      	movs	r1, #2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 fb98 	bl	80030f0 <HAL_RCC_ClockConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009c6:	f000 f8fd 	bl	8000bc4 <Error_Handler>
  }
}
 80009ca:	bf00      	nop
 80009cc:	3750      	adds	r7, #80	@ 0x50
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40007000 	.word	0x40007000

080009dc <MX_SDIO_MMC_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_MMC_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hmmc.Instance = SDIO;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_SDIO_MMC_Init+0x44>)
 80009e2:	4a10      	ldr	r2, [pc, #64]	@ (8000a24 <MX_SDIO_MMC_Init+0x48>)
 80009e4:	601a      	str	r2, [r3, #0]
  hmmc.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_SDIO_MMC_Init+0x44>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
  hmmc.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_SDIO_MMC_Init+0x44>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hmmc.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <MX_SDIO_MMC_Init+0x44>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  hmmc.Init.BusWide = SDIO_BUS_WIDE_1B;
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_SDIO_MMC_Init+0x44>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  hmmc.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <MX_SDIO_MMC_Init+0x44>)
 8000a00:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a04:	615a      	str	r2, [r3, #20]
  hmmc.Init.ClockDiv = 0;
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_SDIO_MMC_Init+0x44>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_MMC_Init(&hmmc) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	@ (8000a20 <MX_SDIO_MMC_Init+0x44>)
 8000a0e:	f001 f9f6 	bl	8001dfe <HAL_MMC_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_SDIO_MMC_Init+0x40>
  {
    Error_Handler();
 8000a18:	f000 f8d4 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000078 	.word	0x20000078
 8000a24:	40012c00 	.word	0x40012c00

08000a28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	@ (8000a78 <MX_USART2_UART_Init+0x50>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a60:	f003 fc58 	bl	8004314 <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a6a:	f000 f8ab 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200003b8 	.word	0x200003b8
 8000a78:	40004400 	.word	0x40004400

08000a7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <MX_DMA_Init+0x4c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac8 <MX_DMA_Init+0x4c>)
 8000a8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <MX_DMA_Init+0x4c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	203b      	movs	r0, #59	@ 0x3b
 8000aa4:	f000 fc31 	bl	800130a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000aa8:	203b      	movs	r0, #59	@ 0x3b
 8000aaa:	f000 fc4a 	bl	8001342 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2045      	movs	r0, #69	@ 0x45
 8000ab4:	f000 fc29 	bl	800130a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000ab8:	2045      	movs	r0, #69	@ 0x45
 8000aba:	f000 fc42 	bl	8001342 <HAL_NVIC_EnableIRQ>

}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b34      	ldr	r3, [pc, #208]	@ (8000bb8 <MX_GPIO_Init+0xec>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a33      	ldr	r2, [pc, #204]	@ (8000bb8 <MX_GPIO_Init+0xec>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b31      	ldr	r3, [pc, #196]	@ (8000bb8 <MX_GPIO_Init+0xec>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb8 <MX_GPIO_Init+0xec>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a2c      	ldr	r2, [pc, #176]	@ (8000bb8 <MX_GPIO_Init+0xec>)
 8000b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb8 <MX_GPIO_Init+0xec>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	4b26      	ldr	r3, [pc, #152]	@ (8000bb8 <MX_GPIO_Init+0xec>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a25      	ldr	r2, [pc, #148]	@ (8000bb8 <MX_GPIO_Init+0xec>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <MX_GPIO_Init+0xec>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <MX_GPIO_Init+0xec>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000bb8 <MX_GPIO_Init+0xec>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <MX_GPIO_Init+0xec>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <MX_GPIO_Init+0xec>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a17      	ldr	r2, [pc, #92]	@ (8000bb8 <MX_GPIO_Init+0xec>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <MX_GPIO_Init+0xec>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2120      	movs	r1, #32
 8000b72:	4812      	ldr	r0, [pc, #72]	@ (8000bbc <MX_GPIO_Init+0xf0>)
 8000b74:	f001 f910 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b7e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480c      	ldr	r0, [pc, #48]	@ (8000bc0 <MX_GPIO_Init+0xf4>)
 8000b90:	f000 ff6e 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b94:	2320      	movs	r3, #32
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4804      	ldr	r0, [pc, #16]	@ (8000bbc <MX_GPIO_Init+0xf0>)
 8000bac:	f000 ff60 	bl	8001a70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	@ 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	40020800 	.word	0x40020800

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <Error_Handler+0x8>

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bde:	4a0f      	ldr	r2, [pc, #60]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	4a08      	ldr	r2, [pc, #32]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c0e:	2007      	movs	r0, #7
 8000c10:	f000 fb70 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b0a2      	sub	sp, #136	@ 0x88
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c38:	f107 0318 	add.w	r3, r7, #24
 8000c3c:	225c      	movs	r2, #92	@ 0x5c
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f004 fc15 	bl	8005470 <memset>
  if(hmmc->Instance==SDIO)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a70      	ldr	r2, [pc, #448]	@ (8000e0c <HAL_MMC_MspInit+0x1ec>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	f040 80d8 	bne.w	8000e02 <HAL_MMC_MspInit+0x1e2>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000c52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c56:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c60:	f107 0318 	add.w	r3, r7, #24
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 fb5d 	bl	8003324 <HAL_RCCEx_PeriphCLKConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_MMC_MspInit+0x54>
    {
      Error_Handler();
 8000c70:	f7ff ffa8 	bl	8000bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	4b65      	ldr	r3, [pc, #404]	@ (8000e10 <HAL_MMC_MspInit+0x1f0>)
 8000c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7c:	4a64      	ldr	r2, [pc, #400]	@ (8000e10 <HAL_MMC_MspInit+0x1f0>)
 8000c7e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c82:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c84:	4b62      	ldr	r3, [pc, #392]	@ (8000e10 <HAL_MMC_MspInit+0x1f0>)
 8000c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	4b5e      	ldr	r3, [pc, #376]	@ (8000e10 <HAL_MMC_MspInit+0x1f0>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c98:	4a5d      	ldr	r2, [pc, #372]	@ (8000e10 <HAL_MMC_MspInit+0x1f0>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca0:	4b5b      	ldr	r3, [pc, #364]	@ (8000e10 <HAL_MMC_MspInit+0x1f0>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	4b57      	ldr	r3, [pc, #348]	@ (8000e10 <HAL_MMC_MspInit+0x1f0>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	4a56      	ldr	r2, [pc, #344]	@ (8000e10 <HAL_MMC_MspInit+0x1f0>)
 8000cb6:	f043 0308 	orr.w	r3, r3, #8
 8000cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbc:	4b54      	ldr	r3, [pc, #336]	@ (8000e10 <HAL_MMC_MspInit+0x1f0>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc0:	f003 0308 	and.w	r3, r3, #8
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000cc8:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8000ccc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cdc:	230c      	movs	r3, #12
 8000cde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	484a      	ldr	r0, [pc, #296]	@ (8000e14 <HAL_MMC_MspInit+0x1f4>)
 8000cea:	f000 fec1 	bl	8001a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d00:	230c      	movs	r3, #12
 8000d02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d06:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4842      	ldr	r0, [pc, #264]	@ (8000e18 <HAL_MMC_MspInit+0x1f8>)
 8000d0e:	f000 feaf 	bl	8001a70 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000d12:	4b42      	ldr	r3, [pc, #264]	@ (8000e1c <HAL_MMC_MspInit+0x1fc>)
 8000d14:	4a42      	ldr	r2, [pc, #264]	@ (8000e20 <HAL_MMC_MspInit+0x200>)
 8000d16:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000d18:	4b40      	ldr	r3, [pc, #256]	@ (8000e1c <HAL_MMC_MspInit+0x1fc>)
 8000d1a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d1e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d20:	4b3e      	ldr	r3, [pc, #248]	@ (8000e1c <HAL_MMC_MspInit+0x1fc>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d26:	4b3d      	ldr	r3, [pc, #244]	@ (8000e1c <HAL_MMC_MspInit+0x1fc>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8000e1c <HAL_MMC_MspInit+0x1fc>)
 8000d2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d32:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d34:	4b39      	ldr	r3, [pc, #228]	@ (8000e1c <HAL_MMC_MspInit+0x1fc>)
 8000d36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d3a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d3c:	4b37      	ldr	r3, [pc, #220]	@ (8000e1c <HAL_MMC_MspInit+0x1fc>)
 8000d3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d42:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000d44:	4b35      	ldr	r3, [pc, #212]	@ (8000e1c <HAL_MMC_MspInit+0x1fc>)
 8000d46:	2220      	movs	r2, #32
 8000d48:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d4a:	4b34      	ldr	r3, [pc, #208]	@ (8000e1c <HAL_MMC_MspInit+0x1fc>)
 8000d4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d50:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d52:	4b32      	ldr	r3, [pc, #200]	@ (8000e1c <HAL_MMC_MspInit+0x1fc>)
 8000d54:	2204      	movs	r2, #4
 8000d56:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d58:	4b30      	ldr	r3, [pc, #192]	@ (8000e1c <HAL_MMC_MspInit+0x1fc>)
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e1c <HAL_MMC_MspInit+0x1fc>)
 8000d60:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d64:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d66:	4b2d      	ldr	r3, [pc, #180]	@ (8000e1c <HAL_MMC_MspInit+0x1fc>)
 8000d68:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000d6c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000d6e:	482b      	ldr	r0, [pc, #172]	@ (8000e1c <HAL_MMC_MspInit+0x1fc>)
 8000d70:	f000 fb02 	bl	8001378 <HAL_DMA_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_MMC_MspInit+0x15e>
    {
      Error_Handler();
 8000d7a:	f7ff ff23 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(hmmc,hdmarx,hdma_sdio_rx);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a26      	ldr	r2, [pc, #152]	@ (8000e1c <HAL_MMC_MspInit+0x1fc>)
 8000d82:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d84:	4a25      	ldr	r2, [pc, #148]	@ (8000e1c <HAL_MMC_MspInit+0x1fc>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000d8a:	4b26      	ldr	r3, [pc, #152]	@ (8000e24 <HAL_MMC_MspInit+0x204>)
 8000d8c:	4a26      	ldr	r2, [pc, #152]	@ (8000e28 <HAL_MMC_MspInit+0x208>)
 8000d8e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000d90:	4b24      	ldr	r3, [pc, #144]	@ (8000e24 <HAL_MMC_MspInit+0x204>)
 8000d92:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d96:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d98:	4b22      	ldr	r3, [pc, #136]	@ (8000e24 <HAL_MMC_MspInit+0x204>)
 8000d9a:	2240      	movs	r2, #64	@ 0x40
 8000d9c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <HAL_MMC_MspInit+0x204>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <HAL_MMC_MspInit+0x204>)
 8000da6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000daa:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dac:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <HAL_MMC_MspInit+0x204>)
 8000dae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000db2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e24 <HAL_MMC_MspInit+0x204>)
 8000db6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dba:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000dbc:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <HAL_MMC_MspInit+0x204>)
 8000dbe:	2220      	movs	r2, #32
 8000dc0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000dc2:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <HAL_MMC_MspInit+0x204>)
 8000dc4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dc8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000dca:	4b16      	ldr	r3, [pc, #88]	@ (8000e24 <HAL_MMC_MspInit+0x204>)
 8000dcc:	2204      	movs	r2, #4
 8000dce:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <HAL_MMC_MspInit+0x204>)
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <HAL_MMC_MspInit+0x204>)
 8000dd8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <HAL_MMC_MspInit+0x204>)
 8000de0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000de4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000de6:	480f      	ldr	r0, [pc, #60]	@ (8000e24 <HAL_MMC_MspInit+0x204>)
 8000de8:	f000 fac6 	bl	8001378 <HAL_DMA_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_MMC_MspInit+0x1d6>
    {
      Error_Handler();
 8000df2:	f7ff fee7 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(hmmc,hdmatx,hdma_sdio_tx);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <HAL_MMC_MspInit+0x204>)
 8000dfa:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dfc:	4a09      	ldr	r2, [pc, #36]	@ (8000e24 <HAL_MMC_MspInit+0x204>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8000e02:	bf00      	nop
 8000e04:	3788      	adds	r7, #136	@ 0x88
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40012c00 	.word	0x40012c00
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020800 	.word	0x40020800
 8000e18:	40020c00 	.word	0x40020c00
 8000e1c:	200002f8 	.word	0x200002f8
 8000e20:	40026458 	.word	0x40026458
 8000e24:	20000358 	.word	0x20000358
 8000e28:	400264a0 	.word	0x400264a0

08000e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	@ 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a19      	ldr	r2, [pc, #100]	@ (8000eb0 <HAL_UART_MspInit+0x84>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d12b      	bne.n	8000ea6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	4a17      	ldr	r2, [pc, #92]	@ (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5e:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a10      	ldr	r2, [pc, #64]	@ (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e86:	230c      	movs	r3, #12
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e96:	2307      	movs	r3, #7
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <HAL_UART_MspInit+0x8c>)
 8000ea2:	f000 fde5 	bl	8001a70 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	@ 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40004400 	.word	0x40004400
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020000 	.word	0x40020000

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f12:	f000 f8db 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <DMA2_Stream3_IRQHandler+0x10>)
 8000f22:	f000 fb2f 	bl	8001584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200002f8 	.word	0x200002f8

08000f30 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <DMA2_Stream6_IRQHandler+0x10>)
 8000f36:	f000 fb25 	bl	8001584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000358 	.word	0x20000358

08000f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f4c:	4a14      	ldr	r2, [pc, #80]	@ (8000fa0 <_sbrk+0x5c>)
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <_sbrk+0x60>)
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f58:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <_sbrk+0x64>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	@ (8000fac <_sbrk+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f74:	f004 fa84 	bl	8005480 <__errno>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a05      	ldr	r2, [pc, #20]	@ (8000fa8 <_sbrk+0x64>)
 8000f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20020000 	.word	0x20020000
 8000fa4:	00000400 	.word	0x00000400
 8000fa8:	20000400 	.word	0x20000400
 8000fac:	20000550 	.word	0x20000550

08000fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <SystemInit+0x20>)
 8000fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fba:	4a05      	ldr	r2, [pc, #20]	@ (8000fd0 <SystemInit+0x20>)
 8000fbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800100c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fd8:	f7ff ffea 	bl	8000fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fdc:	480c      	ldr	r0, [pc, #48]	@ (8001010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fde:	490d      	ldr	r1, [pc, #52]	@ (8001014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8001018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8001020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001002:	f004 fa43 	bl	800548c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001006:	f7ff fad3 	bl	80005b0 <main>
  bx  lr    
 800100a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800100c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001014:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001018:	08005f78 	.word	0x08005f78
  ldr r2, =_sbss
 800101c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001020:	20000550 	.word	0x20000550

08001024 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC_IRQHandler>
	...

08001028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800102c:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0d      	ldr	r2, [pc, #52]	@ (8001068 <HAL_Init+0x40>)
 8001032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001038:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <HAL_Init+0x40>)
 800103e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a07      	ldr	r2, [pc, #28]	@ (8001068 <HAL_Init+0x40>)
 800104a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800104e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001050:	2003      	movs	r0, #3
 8001052:	f000 f94f 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001056:	2000      	movs	r0, #0
 8001058:	f000 f808 	bl	800106c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800105c:	f7ff fdb8 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023c00 	.word	0x40023c00

0800106c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <HAL_InitTick+0x54>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <HAL_InitTick+0x58>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001082:	fbb3 f3f1 	udiv	r3, r3, r1
 8001086:	fbb2 f3f3 	udiv	r3, r2, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f967 	bl	800135e <HAL_SYSTICK_Config>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e00e      	b.n	80010b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d80a      	bhi.n	80010b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f000 f92f 	bl	800130a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ac:	4a06      	ldr	r2, [pc, #24]	@ (80010c8 <HAL_InitTick+0x5c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e000      	b.n	80010b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000008 	.word	0x20000008
 80010c8:	20000004 	.word	0x20000004

080010cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_IncTick+0x20>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_IncTick+0x24>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	4a04      	ldr	r2, [pc, #16]	@ (80010f0 <HAL_IncTick+0x24>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000404 	.word	0x20000404

080010f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <HAL_GetTick+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000404 	.word	0x20000404

0800110c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff ffee 	bl	80010f4 <HAL_GetTick>
 8001118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001124:	d005      	beq.n	8001132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001126:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <HAL_Delay+0x44>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001132:	bf00      	nop
 8001134:	f7ff ffde 	bl	80010f4 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8f7      	bhi.n	8001134 <HAL_Delay+0x28>
  {
  }
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000008 	.word	0x20000008

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800117c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db0b      	blt.n	80011e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 021f 	and.w	r2, r3, #31
 80011d0:	4907      	ldr	r1, [pc, #28]	@ (80011f0 <__NVIC_EnableIRQ+0x38>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	2001      	movs	r0, #1
 80011da:	fa00 f202 	lsl.w	r2, r0, r2
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	@ (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	@ (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	@ 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	@ 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c6:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ce:	210f      	movs	r1, #15
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f7ff ff8e 	bl	80011f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff29 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800131c:	f7ff ff3e 	bl	800119c <__NVIC_GetPriorityGrouping>
 8001320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6978      	ldr	r0, [r7, #20]
 8001328:	f7ff ff8e 	bl	8001248 <NVIC_EncodePriority>
 800132c:	4602      	mov	r2, r0
 800132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff5d 	bl	80011f4 <__NVIC_SetPriority>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff31 	bl	80011b8 <__NVIC_EnableIRQ>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ffa2 	bl	80012b0 <SysTick_Config>
 800136c:	4603      	mov	r3, r0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff feb6 	bl	80010f4 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e099      	b.n	80014c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2202      	movs	r2, #2
 8001398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0201 	bic.w	r2, r2, #1
 80013b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013b4:	e00f      	b.n	80013d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013b6:	f7ff fe9d 	bl	80010f4 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b05      	cmp	r3, #5
 80013c2:	d908      	bls.n	80013d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2220      	movs	r2, #32
 80013c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2203      	movs	r2, #3
 80013ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e078      	b.n	80014c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1e8      	bne.n	80013b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	4b38      	ldr	r3, [pc, #224]	@ (80014d0 <HAL_DMA_Init+0x158>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001402:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800140e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4313      	orrs	r3, r2
 8001426:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142c:	2b04      	cmp	r3, #4
 800142e:	d107      	bne.n	8001440 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001438:	4313      	orrs	r3, r2
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	4313      	orrs	r3, r2
 800143e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f023 0307 	bic.w	r3, r3, #7
 8001456:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	4313      	orrs	r3, r2
 8001460:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001466:	2b04      	cmp	r3, #4
 8001468:	d117      	bne.n	800149a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4313      	orrs	r3, r2
 8001472:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00e      	beq.n	800149a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 fa7b 	bl	8001978 <DMA_CheckFifoParam>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d008      	beq.n	800149a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2240      	movs	r2, #64	@ 0x40
 800148c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001496:	2301      	movs	r3, #1
 8001498:	e016      	b.n	80014c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 fa32 	bl	800190c <DMA_CalcBaseAndBitshift>
 80014a8:	4603      	mov	r3, r0
 80014aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b0:	223f      	movs	r2, #63	@ 0x3f
 80014b2:	409a      	lsls	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	f010803f 	.word	0xf010803f

080014d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_DMA_Start_IT+0x26>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e040      	b.n	800157c <HAL_DMA_Start_IT+0xa8>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b01      	cmp	r3, #1
 800150c:	d12f      	bne.n	800156e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2202      	movs	r2, #2
 8001512:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f000 f9c4 	bl	80018b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800152c:	223f      	movs	r2, #63	@ 0x3f
 800152e:	409a      	lsls	r2, r3
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0216 	orr.w	r2, r2, #22
 8001542:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001548:	2b00      	cmp	r3, #0
 800154a:	d007      	beq.n	800155c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0208 	orr.w	r2, r2, #8
 800155a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	e005      	b.n	800157a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001576:	2302      	movs	r3, #2
 8001578:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800157a:	7dfb      	ldrb	r3, [r7, #23]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001590:	4b8e      	ldr	r3, [pc, #568]	@ (80017cc <HAL_DMA_IRQHandler+0x248>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a8e      	ldr	r2, [pc, #568]	@ (80017d0 <HAL_DMA_IRQHandler+0x24c>)
 8001596:	fba2 2303 	umull	r2, r3, r2, r3
 800159a:	0a9b      	lsrs	r3, r3, #10
 800159c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ae:	2208      	movs	r2, #8
 80015b0:	409a      	lsls	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d01a      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d013      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0204 	bic.w	r2, r2, #4
 80015d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015dc:	2208      	movs	r2, #8
 80015de:	409a      	lsls	r2, r3
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e8:	f043 0201 	orr.w	r2, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f4:	2201      	movs	r2, #1
 80015f6:	409a      	lsls	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d012      	beq.n	8001626 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00b      	beq.n	8001626 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001612:	2201      	movs	r2, #1
 8001614:	409a      	lsls	r2, r3
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800161e:	f043 0202 	orr.w	r2, r3, #2
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800162a:	2204      	movs	r2, #4
 800162c:	409a      	lsls	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4013      	ands	r3, r2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d012      	beq.n	800165c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00b      	beq.n	800165c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001648:	2204      	movs	r2, #4
 800164a:	409a      	lsls	r2, r3
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001654:	f043 0204 	orr.w	r2, r3, #4
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001660:	2210      	movs	r2, #16
 8001662:	409a      	lsls	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d043      	beq.n	80016f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d03c      	beq.n	80016f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800167e:	2210      	movs	r2, #16
 8001680:	409a      	lsls	r2, r3
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d018      	beq.n	80016c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d108      	bne.n	80016b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d024      	beq.n	80016f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	4798      	blx	r3
 80016b2:	e01f      	b.n	80016f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d01b      	beq.n	80016f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4798      	blx	r3
 80016c4:	e016      	b.n	80016f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d107      	bne.n	80016e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0208 	bic.w	r2, r2, #8
 80016e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f8:	2220      	movs	r2, #32
 80016fa:	409a      	lsls	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 808f 	beq.w	8001824 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 8087 	beq.w	8001824 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800171a:	2220      	movs	r2, #32
 800171c:	409a      	lsls	r2, r3
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b05      	cmp	r3, #5
 800172c:	d136      	bne.n	800179c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0216 	bic.w	r2, r2, #22
 800173c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	695a      	ldr	r2, [r3, #20]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800174c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	2b00      	cmp	r3, #0
 8001754:	d103      	bne.n	800175e <HAL_DMA_IRQHandler+0x1da>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800175a:	2b00      	cmp	r3, #0
 800175c:	d007      	beq.n	800176e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0208 	bic.w	r2, r2, #8
 800176c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001772:	223f      	movs	r2, #63	@ 0x3f
 8001774:	409a      	lsls	r2, r3
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800178e:	2b00      	cmp	r3, #0
 8001790:	d07e      	beq.n	8001890 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	4798      	blx	r3
        }
        return;
 800179a:	e079      	b.n	8001890 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d01d      	beq.n	80017e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10d      	bne.n	80017d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d031      	beq.n	8001824 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	4798      	blx	r3
 80017c8:	e02c      	b.n	8001824 <HAL_DMA_IRQHandler+0x2a0>
 80017ca:	bf00      	nop
 80017cc:	20000000 	.word	0x20000000
 80017d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d023      	beq.n	8001824 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	4798      	blx	r3
 80017e4:	e01e      	b.n	8001824 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10f      	bne.n	8001814 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0210 	bic.w	r2, r2, #16
 8001802:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001828:	2b00      	cmp	r3, #0
 800182a:	d032      	beq.n	8001892 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d022      	beq.n	800187e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2205      	movs	r2, #5
 800183c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0201 	bic.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	3301      	adds	r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	429a      	cmp	r2, r3
 800185a:	d307      	bcc.n	800186c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f2      	bne.n	8001850 <HAL_DMA_IRQHandler+0x2cc>
 800186a:	e000      	b.n	800186e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800186c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001882:	2b00      	cmp	r3, #0
 8001884:	d005      	beq.n	8001892 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	4798      	blx	r3
 800188e:	e000      	b.n	8001892 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001890:	bf00      	nop
    }
  }
}
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80018cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b40      	cmp	r3, #64	@ 0x40
 80018dc:	d108      	bne.n	80018f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018ee:	e007      	b.n	8001900 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	60da      	str	r2, [r3, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	3b10      	subs	r3, #16
 800191c:	4a14      	ldr	r2, [pc, #80]	@ (8001970 <DMA_CalcBaseAndBitshift+0x64>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001926:	4a13      	ldr	r2, [pc, #76]	@ (8001974 <DMA_CalcBaseAndBitshift+0x68>)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d909      	bls.n	800194e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001942:	f023 0303 	bic.w	r3, r3, #3
 8001946:	1d1a      	adds	r2, r3, #4
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	659a      	str	r2, [r3, #88]	@ 0x58
 800194c:	e007      	b.n	800195e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001956:	f023 0303 	bic.w	r3, r3, #3
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	aaaaaaab 	.word	0xaaaaaaab
 8001974:	08005f2c 	.word	0x08005f2c

08001978 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001988:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d11f      	bne.n	80019d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b03      	cmp	r3, #3
 8001996:	d856      	bhi.n	8001a46 <DMA_CheckFifoParam+0xce>
 8001998:	a201      	add	r2, pc, #4	@ (adr r2, 80019a0 <DMA_CheckFifoParam+0x28>)
 800199a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199e:	bf00      	nop
 80019a0:	080019b1 	.word	0x080019b1
 80019a4:	080019c3 	.word	0x080019c3
 80019a8:	080019b1 	.word	0x080019b1
 80019ac:	08001a47 	.word	0x08001a47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d046      	beq.n	8001a4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c0:	e043      	b.n	8001a4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019ca:	d140      	bne.n	8001a4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019d0:	e03d      	b.n	8001a4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019da:	d121      	bne.n	8001a20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d837      	bhi.n	8001a52 <DMA_CheckFifoParam+0xda>
 80019e2:	a201      	add	r2, pc, #4	@ (adr r2, 80019e8 <DMA_CheckFifoParam+0x70>)
 80019e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e8:	080019f9 	.word	0x080019f9
 80019ec:	080019ff 	.word	0x080019ff
 80019f0:	080019f9 	.word	0x080019f9
 80019f4:	08001a11 	.word	0x08001a11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
      break;
 80019fc:	e030      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d025      	beq.n	8001a56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a0e:	e022      	b.n	8001a56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a14:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a18:	d11f      	bne.n	8001a5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a1e:	e01c      	b.n	8001a5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d903      	bls.n	8001a2e <DMA_CheckFifoParam+0xb6>
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d003      	beq.n	8001a34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a2c:	e018      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	73fb      	strb	r3, [r7, #15]
      break;
 8001a32:	e015      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00e      	beq.n	8001a5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
      break;
 8001a44:	e00b      	b.n	8001a5e <DMA_CheckFifoParam+0xe6>
      break;
 8001a46:	bf00      	nop
 8001a48:	e00a      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
      break;
 8001a4a:	bf00      	nop
 8001a4c:	e008      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
      break;
 8001a4e:	bf00      	nop
 8001a50:	e006      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
      break;
 8001a52:	bf00      	nop
 8001a54:	e004      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
      break;
 8001a56:	bf00      	nop
 8001a58:	e002      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a5a:	bf00      	nop
 8001a5c:	e000      	b.n	8001a60 <DMA_CheckFifoParam+0xe8>
      break;
 8001a5e:	bf00      	nop
    }
  } 
  
  return status; 
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	@ 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	e165      	b.n	8001d58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 8154 	bne.w	8001d52 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d005      	beq.n	8001ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d130      	bne.n	8001b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	2203      	movs	r2, #3
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af8:	2201      	movs	r2, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 0201 	and.w	r2, r3, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d017      	beq.n	8001b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d123      	bne.n	8001bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	69b9      	ldr	r1, [r7, #24]
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80ae 	beq.w	8001d52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b5d      	ldr	r3, [pc, #372]	@ (8001d70 <HAL_GPIO_Init+0x300>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	4a5c      	ldr	r2, [pc, #368]	@ (8001d70 <HAL_GPIO_Init+0x300>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c06:	4b5a      	ldr	r3, [pc, #360]	@ (8001d70 <HAL_GPIO_Init+0x300>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c12:	4a58      	ldr	r2, [pc, #352]	@ (8001d74 <HAL_GPIO_Init+0x304>)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4f      	ldr	r2, [pc, #316]	@ (8001d78 <HAL_GPIO_Init+0x308>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d025      	beq.n	8001c8a <HAL_GPIO_Init+0x21a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4e      	ldr	r2, [pc, #312]	@ (8001d7c <HAL_GPIO_Init+0x30c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d01f      	beq.n	8001c86 <HAL_GPIO_Init+0x216>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a4d      	ldr	r2, [pc, #308]	@ (8001d80 <HAL_GPIO_Init+0x310>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d019      	beq.n	8001c82 <HAL_GPIO_Init+0x212>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4c      	ldr	r2, [pc, #304]	@ (8001d84 <HAL_GPIO_Init+0x314>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_GPIO_Init+0x20e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4b      	ldr	r2, [pc, #300]	@ (8001d88 <HAL_GPIO_Init+0x318>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00d      	beq.n	8001c7a <HAL_GPIO_Init+0x20a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4a      	ldr	r2, [pc, #296]	@ (8001d8c <HAL_GPIO_Init+0x31c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d007      	beq.n	8001c76 <HAL_GPIO_Init+0x206>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a49      	ldr	r2, [pc, #292]	@ (8001d90 <HAL_GPIO_Init+0x320>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d101      	bne.n	8001c72 <HAL_GPIO_Init+0x202>
 8001c6e:	2306      	movs	r3, #6
 8001c70:	e00c      	b.n	8001c8c <HAL_GPIO_Init+0x21c>
 8001c72:	2307      	movs	r3, #7
 8001c74:	e00a      	b.n	8001c8c <HAL_GPIO_Init+0x21c>
 8001c76:	2305      	movs	r3, #5
 8001c78:	e008      	b.n	8001c8c <HAL_GPIO_Init+0x21c>
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	e006      	b.n	8001c8c <HAL_GPIO_Init+0x21c>
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e004      	b.n	8001c8c <HAL_GPIO_Init+0x21c>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e002      	b.n	8001c8c <HAL_GPIO_Init+0x21c>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_GPIO_Init+0x21c>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	f002 0203 	and.w	r2, r2, #3
 8001c92:	0092      	lsls	r2, r2, #2
 8001c94:	4093      	lsls	r3, r2
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c9c:	4935      	ldr	r1, [pc, #212]	@ (8001d74 <HAL_GPIO_Init+0x304>)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001caa:	4b3a      	ldr	r3, [pc, #232]	@ (8001d94 <HAL_GPIO_Init+0x324>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cce:	4a31      	ldr	r2, [pc, #196]	@ (8001d94 <HAL_GPIO_Init+0x324>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d94 <HAL_GPIO_Init+0x324>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf8:	4a26      	ldr	r2, [pc, #152]	@ (8001d94 <HAL_GPIO_Init+0x324>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cfe:	4b25      	ldr	r3, [pc, #148]	@ (8001d94 <HAL_GPIO_Init+0x324>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d22:	4a1c      	ldr	r2, [pc, #112]	@ (8001d94 <HAL_GPIO_Init+0x324>)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d28:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <HAL_GPIO_Init+0x324>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d4c:	4a11      	ldr	r2, [pc, #68]	@ (8001d94 <HAL_GPIO_Init+0x324>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3301      	adds	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b0f      	cmp	r3, #15
 8001d5c:	f67f ae96 	bls.w	8001a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3724      	adds	r7, #36	@ 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40013800 	.word	0x40013800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40020400 	.word	0x40020400
 8001d80:	40020800 	.word	0x40020800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40021400 	.word	0x40021400
 8001d90:	40021800 	.word	0x40021800
 8001d94:	40013c00 	.word	0x40013c00

08001d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	807b      	strh	r3, [r7, #2]
 8001da4:	4613      	mov	r3, r2
 8001da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da8:	787b      	ldrb	r3, [r7, #1]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db4:	e003      	b.n	8001dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001db6:	887b      	ldrh	r3, [r7, #2]
 8001db8:	041a      	lsls	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	619a      	str	r2, [r3, #24]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b085      	sub	sp, #20
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ddc:	887a      	ldrh	r2, [r7, #2]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	041a      	lsls	r2, r3, #16
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	400b      	ands	r3, r1
 8001dec:	431a      	orrs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	619a      	str	r2, [r3, #24]
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e031      	b.n	8001e74 <HAL_MMC_Init+0x76>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hmmc->Init.ClockDiv));

  if(hmmc->State == HAL_MMC_STATE_RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7fe fefc 	bl	8000c20 <HAL_MMC_MspInit>
#endif
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if(HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f823 	bl	8001e7c <HAL_MMC_InitCard>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e019      	b.n	8001e74 <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDIO_BUS_WIDE_1B)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00a      	beq.n	8001e72 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	4619      	mov	r1, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fd22 	bl	80028ac <HAL_MMC_ConfigWideBusOperation>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8001e7c:	b5b0      	push	{r4, r5, r7, lr}
 8001e7e:	b08e      	sub	sp, #56	@ 0x38
 8001e80:	af04      	add	r7, sp, #16
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  HAL_StatusTypeDef status;
  
  /* Default SDIO peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001e98:	2376      	movs	r3, #118	@ 0x76
 8001e9a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hmmc->Instance, Init);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681d      	ldr	r5, [r3, #0]
 8001ea0:	466c      	mov	r4, sp
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001eaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001eae:	f107 0308 	add.w	r3, r7, #8
 8001eb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	f002 fe39 	bl	8004b2c <SDIO_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status == HAL_ERROR)
 8001ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_MMC_InitCard+0x50>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e058      	b.n	8001f7e <HAL_MMC_InitCard+0x102>
  }

  /* Disable SDIO Clock */
  __HAL_MMC_DISABLE(hmmc); 
 8001ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8001f88 <HAL_MMC_InitCard+0x10c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  status = SDIO_PowerState_ON(hmmc->Instance);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f002 fe60 	bl	8004b9c <SDIO_PowerState_ON>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status == HAL_ERROR)
 8001ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_MMC_InitCard+0x72>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e047      	b.n	8001f7e <HAL_MMC_InitCard+0x102>
  }

  /* Enable MMC Clock */
  __HAL_MMC_ENABLE(hmmc);
 8001eee:	4b26      	ldr	r3, [pc, #152]	@ (8001f88 <HAL_MMC_InitCard+0x10c>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the MMC initialization  sequence */
  HAL_Delay(2);
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	f7ff f909 	bl	800110c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 ff46 	bl	8002d8c <MMC_PowerON>
 8001f00:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00b      	beq.n	8001f20 <HAL_MMC_InitCard+0xa4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hmmc->ErrorCode |= errorstate;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e02e      	b.n	8001f7e <HAL_MMC_InitCard+0x102>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fe2f 	bl	8002b84 <MMC_InitCard>
 8001f26:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00b      	beq.n	8001f46 <HAL_MMC_InitCard+0xca>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hmmc->ErrorCode |= errorstate;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e01b      	b.n	8001f7e <HAL_MMC_InitCard+0x102>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 feb6 	bl	8004cc0 <SDMMC_CmdBlockLength>
 8001f54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00f      	beq.n	8001f7c <HAL_MMC_InitCard+0x100>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <HAL_MMC_InitCard+0x110>)
 8001f62:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <HAL_MMC_InitCard+0x102>
  }

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3728      	adds	r7, #40	@ 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bdb0      	pop	{r4, r5, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	422580a0 	.word	0x422580a0
 8001f8c:	004005ff 	.word	0x004005ff

08001f90 <HAL_MMC_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ReadBlocks_DMA(MMC_HandleTypeDef *hmmc, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08c      	sub	sp, #48	@ 0x30
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d107      	bne.n	8001fb8 <HAL_MMC_ReadBlocks_DMA+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fac:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0be      	b.n	8002136 <HAL_MMC_ReadBlocks_DMA+0x1a6>
  }

  if(hmmc->State == HAL_MMC_STATE_READY)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	f040 80b7 	bne.w	8002134 <HAL_MMC_ReadBlocks_DMA+0x1a4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	639a      	str	r2, [r3, #56]	@ 0x38

    if((BlockAdd + NumberOfBlocks) > (hmmc->MmcCard.LogBlockNbr))
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	441a      	add	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d907      	bls.n	8001fea <HAL_MMC_ReadBlocks_DMA+0x5a>
    {
      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fde:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e0a5      	b.n	8002136 <HAL_MMC_ReadBlocks_DMA+0x1a6>
    }

    hmmc->State = HAL_MMC_STATE_BUSY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2203      	movs	r2, #3
 8001fee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0U;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_MMC_ENABLE_IT(hmmc, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_MMC_ENABLE_IT(hmmc, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8002008:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hmmc->hdmarx->XferCpltCallback = MMC_DMAReceiveCplt;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800200e:	4a4c      	ldr	r2, [pc, #304]	@ (8002140 <HAL_MMC_ReadBlocks_DMA+0x1b0>)
 8002010:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hmmc->hdmarx->XferErrorCallback = MMC_DMAError;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002016:	4a4b      	ldr	r2, [pc, #300]	@ (8002144 <HAL_MMC_ReadBlocks_DMA+0x1b4>)
 8002018:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hmmc->hdmarx->XferAbortCallback = NULL;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800201e:	2200      	movs	r2, #0
 8002020:	651a      	str	r2, [r3, #80]	@ 0x50

    if ((hmmc->MmcCard.CardType) != MMC_HIGH_CAPACITY_CARD)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002026:	2b01      	cmp	r3, #1
 8002028:	d002      	beq.n	8002030 <HAL_MMC_ReadBlocks_DMA+0xa0>
    {
      add *= 512U;
 800202a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800202c:	025b      	lsls	r3, r3, #9
 800202e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Force DMA Direction */
    hmmc->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hmmc->hdmarx->Instance->CR, DMA_SxCR_DIR, hmmc->hdmarx->Init.Direction);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hmmc->hdmarx, (uint32_t)&hmmc->Instance->FIFO, (uint32_t)pData, (uint32_t)(MMC_BLOCKSIZE * NumberOfBlocks)/4) != HAL_OK)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	3380      	adds	r3, #128	@ 0x80
 800205e:	4619      	mov	r1, r3
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	025b      	lsls	r3, r3, #9
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	f7ff fa34 	bl	80014d4 <HAL_DMA_Start_IT>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d015      	beq.n	800209e <HAL_MMC_ReadBlocks_DMA+0x10e>
    {
      __HAL_MMC_DISABLE_IT(hmmc, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8002080:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a30      	ldr	r2, [pc, #192]	@ (8002148 <HAL_MMC_ReadBlocks_DMA+0x1b8>)
 8002088:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode = HAL_MMC_ERROR_DMA;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002090:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e04b      	b.n	8002136 <HAL_MMC_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable MMC DMA transfer */
      __HAL_MMC_DMA_ENABLE(hmmc);
 800209e:	4b2b      	ldr	r3, [pc, #172]	@ (800214c <HAL_MMC_ReadBlocks_DMA+0x1bc>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

      /* Configure the MMC DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
 80020a8:	613b      	str	r3, [r7, #16]
      config.DataLength    = MMC_BLOCKSIZE * NumberOfBlocks;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	025b      	lsls	r3, r3, #9
 80020ae:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80020b0:	2390      	movs	r3, #144	@ 0x90
 80020b2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80020b4:	2302      	movs	r3, #2
 80020b6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80020bc:	2301      	movs	r3, #1
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hmmc->Instance, &config);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f107 0210 	add.w	r2, r7, #16
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f002 fdcc 	bl	8004c68 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d90a      	bls.n	80020ec <HAL_MMC_ReadBlocks_DMA+0x15c>
      {
        hmmc->Context = (MMC_CONTEXT_READ_MULTIPLE_BLOCK | MMC_CONTEXT_DMA);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2282      	movs	r2, #130	@ 0x82
 80020da:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hmmc->Instance, add);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020e2:	4618      	mov	r0, r3
 80020e4:	f002 fe30 	bl	8004d48 <SDMMC_CmdReadMultiBlock>
 80020e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80020ea:	e009      	b.n	8002100 <HAL_MMC_ReadBlocks_DMA+0x170>
      }
      else
      {
        hmmc->Context = (MMC_CONTEXT_READ_SINGLE_BLOCK | MMC_CONTEXT_DMA);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2281      	movs	r2, #129	@ 0x81
 80020f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hmmc->Instance, add);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020f8:	4618      	mov	r0, r3
 80020fa:	f002 fe03 	bl	8004d04 <SDMMC_CmdReadSingleBlock>
 80020fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_MMC_ERROR_NONE)
 8002100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d014      	beq.n	8002130 <HAL_MMC_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS); 
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a0f      	ldr	r2, [pc, #60]	@ (8002148 <HAL_MMC_ReadBlocks_DMA+0x1b8>)
 800210c:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_MMC_DISABLE_IT(hmmc, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800211c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hmmc->ErrorCode = errorstate;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002122:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->State = HAL_MMC_STATE_READY;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e002      	b.n	8002136 <HAL_MMC_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	e000      	b.n	8002136 <HAL_MMC_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8002134:	2302      	movs	r3, #2
  }
}
 8002136:	4618      	mov	r0, r3
 8002138:	3730      	adds	r7, #48	@ 0x30
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	08002a7b 	.word	0x08002a7b
 8002144:	08002ae5 	.word	0x08002ae5
 8002148:	004005ff 	.word	0x004005ff
 800214c:	4225858c 	.word	0x4225858c

08002150 <HAL_MMC_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_WriteBlocks_DMA(MMC_HandleTypeDef *hmmc, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	@ 0x30
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d107      	bne.n	8002178 <HAL_MMC_WriteBlocks_DMA+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800216c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0c3      	b.n	8002300 <HAL_MMC_WriteBlocks_DMA+0x1b0>
  }

  if(hmmc->State == HAL_MMC_STATE_READY)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b01      	cmp	r3, #1
 8002182:	f040 80bc 	bne.w	80022fe <HAL_MMC_WriteBlocks_DMA+0x1ae>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((BlockAdd + NumberOfBlocks) > (hmmc->MmcCard.LogBlockNbr))
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	441a      	add	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002196:	429a      	cmp	r2, r3
 8002198:	d907      	bls.n	80021aa <HAL_MMC_WriteBlocks_DMA+0x5a>
    {
      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0aa      	b.n	8002300 <HAL_MMC_WriteBlocks_DMA+0x1b0>
    }

    hmmc->State = HAL_MMC_STATE_BUSY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2203      	movs	r2, #3
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0U;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2200      	movs	r2, #0
 80021b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable MMC Error interrupts */
#if defined(SDIO_STA_STBITERR)
	__HAL_MMC_ENABLE_IT(hmmc, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
	__HAL_MMC_ENABLE_IT(hmmc, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 021a 	orr.w	r2, r2, #26
 80021c8:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */	

    /* Set the DMA transfer complete callback */
    hmmc->hdmatx->XferCpltCallback = MMC_DMATransmitCplt;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	4a4e      	ldr	r2, [pc, #312]	@ (8002308 <HAL_MMC_WriteBlocks_DMA+0x1b8>)
 80021d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hmmc->hdmatx->XferErrorCallback = MMC_DMAError;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	4a4d      	ldr	r2, [pc, #308]	@ (800230c <HAL_MMC_WriteBlocks_DMA+0x1bc>)
 80021d8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hmmc->hdmatx->XferAbortCallback = NULL;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	2200      	movs	r2, #0
 80021e0:	651a      	str	r2, [r3, #80]	@ 0x50

    if ((hmmc->MmcCard.CardType) != MMC_HIGH_CAPACITY_CARD)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d002      	beq.n	80021f0 <HAL_MMC_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80021ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ec:	025b      	lsls	r3, r3, #9
 80021ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }


    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d90a      	bls.n	800220c <HAL_MMC_WriteBlocks_DMA+0xbc>
    {
      hmmc->Context = (MMC_CONTEXT_WRITE_MULTIPLE_BLOCK | MMC_CONTEXT_DMA);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	22a0      	movs	r2, #160	@ 0xa0
 80021fa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hmmc->Instance, add);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002202:	4618      	mov	r0, r3
 8002204:	f002 fde4 	bl	8004dd0 <SDMMC_CmdWriteMultiBlock>
 8002208:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800220a:	e009      	b.n	8002220 <HAL_MMC_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hmmc->Context = (MMC_CONTEXT_WRITE_SINGLE_BLOCK | MMC_CONTEXT_DMA);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2290      	movs	r2, #144	@ 0x90
 8002210:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hmmc->Instance, add);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002218:	4618      	mov	r0, r3
 800221a:	f002 fdb7 	bl	8004d8c <SDMMC_CmdWriteSingleBlock>
 800221e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_MMC_ERROR_NONE)
 8002220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d017      	beq.n	8002256 <HAL_MMC_WriteBlocks_DMA+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a39      	ldr	r2, [pc, #228]	@ (8002310 <HAL_MMC_WriteBlocks_DMA+0x1c0>)
 800222c:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_MMC_DISABLE_IT(hmmc, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_DATAEND));
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 728d 	bic.w	r2, r2, #282	@ 0x11a
 800223c:	63da      	str	r2, [r3, #60]	@ 0x3c
      hmmc->ErrorCode |= errorstate;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002244:	431a      	orrs	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e054      	b.n	8002300 <HAL_MMC_WriteBlocks_DMA+0x1b0>
    }

    /* Enable SDIO DMA transfer */
    __HAL_MMC_DMA_ENABLE(hmmc);
 8002256:	4b2f      	ldr	r3, [pc, #188]	@ (8002314 <HAL_MMC_WriteBlocks_DMA+0x1c4>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hmmc->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	2240      	movs	r2, #64	@ 0x40
 8002262:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hmmc->hdmatx->Instance->CR, DMA_SxCR_DIR, hmmc->hdmatx->Init.Direction);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hmmc->hdmatx, (uint32_t)pData, (uint32_t)&hmmc->Instance->FIFO, (uint32_t)(MMC_BLOCKSIZE * NumberOfBlocks)/4) != HAL_OK)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	3380      	adds	r3, #128	@ 0x80
 800228c:	461a      	mov	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	025b      	lsls	r3, r3, #9
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	f7ff f91e 	bl	80014d4 <HAL_DMA_Start_IT>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d017      	beq.n	80022ce <HAL_MMC_WriteBlocks_DMA+0x17e>
    {
      __HAL_MMC_DISABLE_IT(hmmc, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_DATAEND));
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 728d 	bic.w	r2, r2, #282	@ 0x11a
 80022ac:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a17      	ldr	r2, [pc, #92]	@ (8002310 <HAL_MMC_WriteBlocks_DMA+0x1c0>)
 80022b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DMA;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e018      	b.n	8002300 <HAL_MMC_WriteBlocks_DMA+0x1b0>
    }
    else
    {    
      /* Configure the MMC DPSM (Data Path State Machine) */ 
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	613b      	str	r3, [r7, #16]
      config.DataLength    = MMC_BLOCKSIZE * NumberOfBlocks;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	025b      	lsls	r3, r3, #9
 80022d8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80022da:	2390      	movs	r3, #144	@ 0x90
 80022dc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80022e6:	2301      	movs	r3, #1
 80022e8:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hmmc->Instance, &config);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f107 0210 	add.w	r2, r7, #16
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f002 fcb7 	bl	8004c68 <SDIO_ConfigData>

      return HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e000      	b.n	8002300 <HAL_MMC_WriteBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80022fe:	2302      	movs	r3, #2
  }
}
 8002300:	4618      	mov	r0, r3
 8002302:	3730      	adds	r7, #48	@ 0x30
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	08002a51 	.word	0x08002a51
 800230c:	08002ae5 	.word	0x08002ae5
 8002310:	004005ff 	.word	0x004005ff
 8002314:	4225858c 	.word	0x4225858c

08002318 <HAL_MMC_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hmmc: Pointer MMC handle
  * @retval None
  */
__weak void HAL_MMC_RxCpltCallback(MMC_HandleTypeDef *hmmc)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMC_RxCpltCallback can be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_MMC_ErrorCallback>:
  * @brief MMC error callbacks
  * @param hmmc: Pointer MMC handle
  * @retval None
  */
__weak void HAL_MMC_ErrorCallback(MMC_HandleTypeDef *hmmc)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMC_ErrorCallback can be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002352:	0f9b      	lsrs	r3, r3, #30
 8002354:	b2da      	uxtb	r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800235e:	0e9b      	lsrs	r3, r3, #26
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	b2da      	uxtb	r2, r3
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002370:	0e1b      	lsrs	r3, r3, #24
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	b2da      	uxtb	r2, r3
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002382:	0c1b      	lsrs	r3, r3, #16
 8002384:	b2da      	uxtb	r2, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	b2da      	uxtb	r2, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800239a:	b2da      	uxtb	r2, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023a4:	0d1b      	lsrs	r3, r3, #20
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023b0:	0c1b      	lsrs	r3, r3, #16
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023c2:	0bdb      	lsrs	r3, r3, #15
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023d4:	0b9b      	lsrs	r3, r3, #14
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023e6:	0b5b      	lsrs	r3, r3, #13
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023f8:	0b1b      	lsrs	r3, r3, #12
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	b2da      	uxtb	r2, r3
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2200      	movs	r2, #0
 800240a:	735a      	strb	r2, [r3, #13]

  pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002410:	009a      	lsls	r2, r3, #2
 8002412:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002416:	4013      	ands	r3, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800241c:	0f92      	lsrs	r2, r2, #30
 800241e:	431a      	orrs	r2, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	611a      	str	r2, [r3, #16]

  pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002428:	0edb      	lsrs	r3, r3, #27
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	b2da      	uxtb	r2, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	751a      	strb	r2, [r3, #20]

  pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800243a:	0e1b      	lsrs	r3, r3, #24
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	b2da      	uxtb	r2, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	755a      	strb	r2, [r3, #21]

  pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800244c:	0d5b      	lsrs	r3, r3, #21
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	b2da      	uxtb	r2, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	759a      	strb	r2, [r3, #22]

  pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800245e:	0c9b      	lsrs	r3, r3, #18
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	b2da      	uxtb	r2, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	75da      	strb	r2, [r3, #23]

  pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002470:	0bdb      	lsrs	r3, r3, #15
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	b2da      	uxtb	r2, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	761a      	strb	r2, [r3, #24]

  if(MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 800247e:	f107 010c 	add.w	r1, r7, #12
 8002482:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8002486:	22d4      	movs	r2, #212	@ 0xd4
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fcf7 	bl	8002e7c <MMC_ReadExtCSD>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_MMC_GetCardCSD+0x158>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0f0      	b.n	800267a <HAL_MMC_GetCardCSD+0x33a>
  }

  if(hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249c:	2b00      	cmp	r3, #0
 800249e:	d12a      	bne.n	80024f6 <HAL_MMC_GetCardCSD+0x1b6>
  {
    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	7e1b      	ldrb	r3, [r3, #24]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	3302      	adds	r3, #2
 80024b6:	2201      	movs	r2, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024c0:	fb03 f202 	mul.w	r2, r3, r2
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	7a1b      	ldrb	r3, [r3, #8]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	2201      	movs	r2, #1
 80024d4:	409a      	lsls	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80024e2:	0a52      	lsrs	r2, r2, #9
 80024e4:	fb03 f202 	mul.w	r2, r3, r2
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->MmcCard.LogBlockSize = 512U;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024f4:	e023      	b.n	800253e <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if(hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d10f      	bne.n	800251e <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->MmcCard.BlockSize = 512U;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002512:	655a      	str	r2, [r3, #84]	@ 0x54
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800251c:	e00f      	b.n	800253e <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a58      	ldr	r2, [pc, #352]	@ (8002684 <HAL_MMC_GetCardCSD+0x344>)
 8002524:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800252a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e09d      	b.n	800267a <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002542:	0b9b      	lsrs	r3, r3, #14
 8002544:	b2db      	uxtb	r3, r3
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	b2da      	uxtb	r2, r3
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002554:	09db      	lsrs	r3, r3, #7
 8002556:	b2db      	uxtb	r3, r3
 8002558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800255c:	b2da      	uxtb	r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800256c:	b2da      	uxtb	r2, r3
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002576:	0fdb      	lsrs	r3, r3, #31
 8002578:	b2da      	uxtb	r2, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002582:	0f5b      	lsrs	r3, r3, #29
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	b2da      	uxtb	r2, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	b2da      	uxtb	r2, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025a6:	0d9b      	lsrs	r3, r3, #22
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025b8:	0d5b      	lsrs	r3, r3, #21
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025d4:	0c1b      	lsrs	r3, r3, #16
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025e8:	0bdb      	lsrs	r3, r3, #15
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025fc:	0b9b      	lsrs	r3, r3, #14
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	b2da      	uxtb	r2, r3
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002610:	0b5b      	lsrs	r3, r3, #13
 8002612:	b2db      	uxtb	r3, r3
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	b2da      	uxtb	r2, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002624:	0b1b      	lsrs	r3, r3, #12
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	b2da      	uxtb	r2, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002638:	0a9b      	lsrs	r3, r3, #10
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	b2da      	uxtb	r2, r3
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	b2da      	uxtb	r2, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002660:	085b      	lsrs	r3, r3, #1
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002668:	b2da      	uxtb	r2, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	004005ff 	.word	0x004005ff

08002688 <HAL_MMC_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_MMC_CardInfoTypeDef structure that
  *         will contain the MMC card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardInfo(MMC_HandleTypeDef *hmmc, HAL_MMC_CardInfoTypeDef *pCardInfo)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hmmc->MmcCard.CardType);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	601a      	str	r2, [r3, #0]
  pCardInfo->Class        = (uint32_t)(hmmc->MmcCard.Class);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	605a      	str	r2, [r3, #4]
  pCardInfo->RelCardAdd   = (uint32_t)(hmmc->MmcCard.RelCardAdd);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	609a      	str	r2, [r3, #8]
  pCardInfo->BlockNbr     = (uint32_t)(hmmc->MmcCard.BlockNbr);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockSize    = (uint32_t)(hmmc->MmcCard.BlockSize);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	611a      	str	r2, [r3, #16]
  pCardInfo->LogBlockNbr  = (uint32_t)(hmmc->MmcCard.LogBlockNbr);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockSize = (uint32_t)(hmmc->MmcCard.LogBlockSize);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08e      	sub	sp, #56	@ 0x38
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7fe fd06 	bl	80010f4 <HAL_GetTick>
 80026e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if(NULL == pExtCSD)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d107      	bne.n	8002700 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0cf      	b.n	80028a0 <HAL_MMC_GetCardExtCSD+0x1c8>
  }

  if(hmmc->State == HAL_MMC_STATE_READY)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	f040 80c8 	bne.w	800289e <HAL_MMC_GetCardExtCSD+0x1c6>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	639a      	str	r2, [r3, #56]	@ 0x38

    hmmc->State = HAL_MMC_STATE_BUSY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2203      	movs	r2, #3
 8002718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2200      	movs	r2, #0
 8002722:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002728:	f04f 33ff 	mov.w	r3, #4294967295
 800272c:	613b      	str	r3, [r7, #16]
    config.DataLength    = 512;
 800272e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002732:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002734:	2390      	movs	r3, #144	@ 0x90
 8002736:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002738:	2302      	movs	r3, #2
 800273a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800273c:	2300      	movs	r3, #0
 800273e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002740:	2301      	movs	r3, #1
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDIO_ConfigData(hmmc->Instance, &config);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f107 0210 	add.w	r2, r7, #16
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f002 fa8a 	bl	8004c68 <SDIO_ConfigData>

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f002 fc81 	bl	8005062 <SDMMC_CmdSendEXTCSD>
 8002760:	62b8      	str	r0, [r7, #40]	@ 0x28
    if(errorstate != HAL_MMC_ERROR_NONE)
 8002762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002764:	2b00      	cmp	r3, #0
 8002766:	d045      	beq.n	80027f4 <HAL_MMC_GetCardExtCSD+0x11c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a4e      	ldr	r2, [pc, #312]	@ (80028a8 <HAL_MMC_GetCardExtCSD+0x1d0>)
 800276e:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002776:	431a      	orrs	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e08b      	b.n	80028a0 <HAL_MMC_GetCardExtCSD+0x1c8>
    }

    /* Poll on SDMMC flags */
    while(!__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
    {
      if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXFIFOHF))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800278e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d013      	beq.n	80027be <HAL_MMC_GetCardExtCSD+0xe6>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002796:	2300      	movs	r3, #0
 8002798:	637b      	str	r3, [r7, #52]	@ 0x34
 800279a:	e00d      	b.n	80027b8 <HAL_MMC_GetCardExtCSD+0xe0>
        {
          *tmp_buf = SDIO_ReadFIFO(hmmc->Instance);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f002 f9ee 	bl	8004b82 <SDIO_ReadFIFO>
 80027a6:	4602      	mov	r2, r0
 80027a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027aa:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 80027ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ae:	3304      	adds	r3, #4
 80027b0:	633b      	str	r3, [r7, #48]	@ 0x30
        for(count = 0U; count < 8U; count++)
 80027b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027b4:	3301      	adds	r3, #1
 80027b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80027b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ba:	2b07      	cmp	r3, #7
 80027bc:	d9ee      	bls.n	800279c <HAL_MMC_GetCardExtCSD+0xc4>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80027be:	f7fe fc99 	bl	80010f4 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d902      	bls.n	80027d4 <HAL_MMC_GetCardExtCSD+0xfc>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10f      	bne.n	80027f4 <HAL_MMC_GetCardExtCSD+0x11c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a33      	ldr	r2, [pc, #204]	@ (80028a8 <HAL_MMC_GetCardExtCSD+0x1d0>)
 80027da:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->State= HAL_MMC_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e055      	b.n	80028a0 <HAL_MMC_GetCardExtCSD+0x1c8>
    while(!__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027fa:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0c2      	beq.n	8002788 <HAL_MMC_GetCardExtCSD+0xb0>
      }
    }

    /* Get error state */
    if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_DTIMEOUT))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00f      	beq.n	8002830 <HAL_MMC_GetCardExtCSD+0x158>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a24      	ldr	r2, [pc, #144]	@ (80028a8 <HAL_MMC_GetCardExtCSD+0x1d0>)
 8002816:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281c:	f043 0208 	orr.w	r2, r3, #8
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e037      	b.n	80028a0 <HAL_MMC_GetCardExtCSD+0x1c8>
    }
    else if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_DCRCFAIL))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00f      	beq.n	800285e <HAL_MMC_GetCardExtCSD+0x186>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a19      	ldr	r2, [pc, #100]	@ (80028a8 <HAL_MMC_GetCardExtCSD+0x1d0>)
 8002844:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284a:	f043 0202 	orr.w	r2, r3, #2
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e020      	b.n	80028a0 <HAL_MMC_GetCardExtCSD+0x1c8>
    }
    else if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00f      	beq.n	800288c <HAL_MMC_GetCardExtCSD+0x1b4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0d      	ldr	r2, [pc, #52]	@ (80028a8 <HAL_MMC_GetCardExtCSD+0x1d0>)
 8002872:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002878:	f043 0220 	orr.w	r2, r3, #32
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e009      	b.n	80028a0 <HAL_MMC_GetCardExtCSD+0x1c8>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_DATA_FLAGS);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002894:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3738      	adds	r7, #56	@ 0x38
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	004005ff 	.word	0x004005ff

080028ac <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 80028ac:	b5b0      	push	{r4, r5, r7, lr}
 80028ae:	b090      	sub	sp, #64	@ 0x40
 80028b0:	af04      	add	r7, sp, #16
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2203      	movs	r2, #3
 80028be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  errorstate = MMC_PwrClassUpdate(hmmc, WideMode);
 80028c2:	6839      	ldr	r1, [r7, #0]
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fb87 	bl	8002fd8 <MMC_PwrClassUpdate>
 80028ca:	62b8      	str	r0, [r7, #40]	@ 0x28

  if(errorstate == HAL_MMC_ERROR_NONE)
 80028cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d17d      	bne.n	80029ce <HAL_MMC_ConfigWideBusOperation+0x122>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028d8:	d107      	bne.n	80028ea <HAL_MMC_ConfigWideBusOperation+0x3e>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4948      	ldr	r1, [pc, #288]	@ (8002a00 <HAL_MMC_ConfigWideBusOperation+0x154>)
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 fb9c 	bl	800501e <SDMMC_CmdSwitch>
 80028e6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80028e8:	e019      	b.n	800291e <HAL_MMC_ConfigWideBusOperation+0x72>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028f0:	d107      	bne.n	8002902 <HAL_MMC_ConfigWideBusOperation+0x56>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4943      	ldr	r1, [pc, #268]	@ (8002a04 <HAL_MMC_ConfigWideBusOperation+0x158>)
 80028f8:	4618      	mov	r0, r3
 80028fa:	f002 fb90 	bl	800501e <SDMMC_CmdSwitch>
 80028fe:	62b8      	str	r0, [r7, #40]	@ 0x28
 8002900:	e00d      	b.n	800291e <HAL_MMC_ConfigWideBusOperation+0x72>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d107      	bne.n	8002918 <HAL_MMC_ConfigWideBusOperation+0x6c>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	493e      	ldr	r1, [pc, #248]	@ (8002a08 <HAL_MMC_ConfigWideBusOperation+0x15c>)
 800290e:	4618      	mov	r0, r3
 8002910:	f002 fb85 	bl	800501e <SDMMC_CmdSwitch>
 8002914:	62b8      	str	r0, [r7, #40]	@ 0x28
 8002916:	e002      	b.n	800291e <HAL_MMC_ConfigWideBusOperation+0x72>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8002918:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800291c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if(errorstate == HAL_MMC_ERROR_NONE)
 800291e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002920:	2b00      	cmp	r3, #0
 8002922:	d154      	bne.n	80029ce <HAL_MMC_ConfigWideBusOperation+0x122>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 8002924:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002928:	62fb      	str	r3, [r7, #44]	@ 0x2c
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002932:	041b      	lsls	r3, r3, #16
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f002 fb30 	bl	8004f9c <SDMMC_CmdSendStatus>
 800293c:	62b8      	str	r0, [r7, #40]	@ 0x28
        if(errorstate != HAL_MMC_ERROR_NONE)
 800293e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002940:	2b00      	cmp	r3, #0
 8002942:	d112      	bne.n	800296a <HAL_MMC_ConfigWideBusOperation+0xbe>
        {
          break;
        }
        
        /* Get command response */
        response = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f002 f979 	bl	8004c42 <SDIO_GetResponse>
 8002950:	6278      	str	r0, [r7, #36]	@ 0x24
        count--;
 8002952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002954:	3b01      	subs	r3, #1
 8002956:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }while(((response & 0x100U) == 0U) && (count != 0U));
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d104      	bne.n	800296c <HAL_MMC_ConfigWideBusOperation+0xc0>
 8002962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1e0      	bne.n	800292a <HAL_MMC_ConfigWideBusOperation+0x7e>
 8002968:	e000      	b.n	800296c <HAL_MMC_ConfigWideBusOperation+0xc0>
          break;
 800296a:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 800296c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d027      	beq.n	80029c2 <HAL_MMC_ConfigWideBusOperation+0x116>
 8002972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002974:	2b00      	cmp	r3, #0
 8002976:	d124      	bne.n	80029c2 <HAL_MMC_ConfigWideBusOperation+0x116>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_MMC_ConfigWideBusOperation+0xde>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002982:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002986:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((response & 0x80U) != 0U)
 8002988:	e021      	b.n	80029ce <HAL_MMC_ConfigWideBusOperation+0x122>
        }
        else
        {
          /* Configure the SDIO peripheral */
          Init = hmmc->Init;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f107 040c 	add.w	r4, r7, #12
 8002990:	1d1d      	adds	r5, r3, #4
 8002992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002996:	e895 0003 	ldmia.w	r5, {r0, r1}
 800299a:	e884 0003 	stmia.w	r4, {r0, r1}
          Init.BusWide = WideMode;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	61bb      	str	r3, [r7, #24]
          (void)SDIO_Init(hmmc->Instance, Init);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681d      	ldr	r5, [r3, #0]
 80029a6:	466c      	mov	r4, sp
 80029a8:	f107 0318 	add.w	r3, r7, #24
 80029ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80029b4:	f107 030c 	add.w	r3, r7, #12
 80029b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ba:	4628      	mov	r0, r5
 80029bc:	f002 f8b6 	bl	8004b2c <SDIO_Init>
        if ((response & 0x80U) != 0U)
 80029c0:	e005      	b.n	80029ce <HAL_MMC_ConfigWideBusOperation+0x122>
        }
      }
      else if (count == 0U)
 80029c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <HAL_MMC_ConfigWideBusOperation+0x122>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 80029c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80029cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(errorstate != HAL_MMC_ERROR_NONE)
 80029d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00b      	beq.n	80029f4 <HAL_MMC_ConfigWideBusOperation+0x148>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0a      	ldr	r2, [pc, #40]	@ (8002a0c <HAL_MMC_ConfigWideBusOperation+0x160>)
 80029e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_MMC_ConfigWideBusOperation+0x14a>
  }

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3730      	adds	r7, #48	@ 0x30
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bdb0      	pop	{r4, r5, r7, pc}
 80029fe:	bf00      	nop
 8002a00:	03b70200 	.word	0x03b70200
 8002a04:	03b70100 	.word	0x03b70100
 8002a08:	03b70000 	.word	0x03b70000
 8002a0c:	004005ff 	.word	0x004005ff

08002a10 <HAL_MMC_GetCardState>:
  * @brief  Gets the current mmc card data state.
  * @param  hmmc: pointer to MMC handle
  * @retval Card state
  */
HAL_MMC_CardStateTypeDef HAL_MMC_GetCardState(MMC_HandleTypeDef *hmmc)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]

  errorstate = MMC_SendStatus(hmmc, &resp1);
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	4619      	mov	r1, r3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fa02 	bl	8002e2c <MMC_SendStatus>
 8002a28:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_MMC_GetCardState+0x2c>
  {
    hmmc->ErrorCode |= errorstate;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	0a5b      	lsrs	r3, r3, #9
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	613b      	str	r3, [r7, #16]

  return (HAL_MMC_CardStateTypeDef)cardstate;
 8002a46:	693b      	ldr	r3, [r7, #16]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <MMC_DMATransmitCplt>:
  * @brief  DMA MMC transmit process complete callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void MMC_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  MMC_HandleTypeDef* hmmc = (MMC_HandleTypeDef* )(hdma->Parent);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5c:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_MMC_ENABLE_IT(hmmc, (SDIO_IT_DATAEND));
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a6c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <MMC_DMAReceiveCplt>:
  * @brief  DMA MMC receive process complete callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void MMC_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  MMC_HandleTypeDef* hmmc = (MMC_HandleTypeDef* )(hdma->Parent);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a86:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;
  
  /* Send stop command in multiblock write */
  if(hmmc->Context == (MMC_CONTEXT_READ_MULTIPLE_BLOCK | MMC_CONTEXT_DMA))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8c:	2b82      	cmp	r3, #130	@ 0x82
 8002a8e:	d111      	bne.n	8002ab4 <MMC_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f002 f9bd 	bl	8004e14 <SDMMC_CmdStopTransfer>
 8002a9a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_MMC_ERROR_NONE)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <MMC_DMAReceiveCplt+0x3a>
    {
      hmmc->ErrorCode |= errorstate;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
      hmmc->ErrorCallback(hmmc);
#else
      HAL_MMC_ErrorCallback(hmmc);
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f7ff fc3c 	bl	800232c <HAL_MMC_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the MMC DCTRL register */
  hmmc->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0208 	bic.w	r2, r2, #8
 8002ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_DATA_FLAGS);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002acc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  hmmc->State = HAL_MMC_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
  hmmc->RxCpltCallback(hmmc);
#else
  HAL_MMC_RxCpltCallback(hmmc);
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f7ff fc1e 	bl	8002318 <HAL_MMC_RxCpltCallback>
#endif
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <MMC_DMAError>:
  * @brief  DMA MMC communication error callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void MMC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  MMC_HandleTypeDef* hmmc = (MMC_HandleTypeDef* )(hdma->Parent);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af0:	617b      	str	r3, [r7, #20]
  HAL_MMC_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe fed0 	bl	8001898 <HAL_DMA_GetError>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d03b      	beq.n	8002b76 <MMC_DMAError+0x92>
  {
    RxErrorCode = hmmc->hdmarx->ErrorCode;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b04:	613b      	str	r3, [r7, #16]
    TxErrorCode = hmmc->hdmatx->ErrorCode;  
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d002      	beq.n	8002b1a <MMC_DMAError+0x36>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d12a      	bne.n	8002b70 <MMC_DMAError+0x8c>
    {
      /* Clear All flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a18      	ldr	r2, [pc, #96]	@ (8002b80 <MMC_DMAError+0x9c>)
 8002b20:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Disable All interrupts */
      __HAL_MMC_DISABLE_IT(hmmc, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8002b30:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
      
      hmmc->ErrorCode |= HAL_MMC_ERROR_DMA;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b36:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_MMC_GetCardState(hmmc);
 8002b3e:	6978      	ldr	r0, [r7, #20]
 8002b40:	f7ff ff66 	bl	8002a10 <HAL_MMC_GetCardState>
 8002b44:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_MMC_CARD_RECEIVING) || (CardState == HAL_MMC_CARD_SENDING))
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b06      	cmp	r3, #6
 8002b4a:	d002      	beq.n	8002b52 <MMC_DMAError+0x6e>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b05      	cmp	r3, #5
 8002b50:	d10a      	bne.n	8002b68 <MMC_DMAError+0x84>
      {
        hmmc->ErrorCode |= SDMMC_CmdStopTransfer(hmmc->Instance);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f002 f95c 	bl	8004e14 <SDMMC_CmdStopTransfer>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b62:	431a      	orrs	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	639a      	str	r2, [r3, #56]	@ 0x38
      }
      
      hmmc->State= HAL_MMC_STATE_READY;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
    
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
    hmmc->ErrorCallback(hmmc);
#else
    HAL_MMC_ErrorCallback(hmmc);
 8002b70:	6978      	ldr	r0, [r7, #20]
 8002b72:	f7ff fbdb 	bl	800232c <HAL_MMC_ErrorCallback>
#endif
  }
}
 8002b76:	bf00      	nop
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	004005ff 	.word	0x004005ff

08002b84 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8002b84:	b5b0      	push	{r4, r5, r7, lr}
 8002b86:	b09a      	sub	sp, #104	@ 0x68
 8002b88:	af04      	add	r7, sp, #16
 8002b8a:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  MMC_InitTypeDef Init;

  /* Check the power State */
  if(SDIO_GetPowerState(hmmc->Instance) == 0U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f002 f80e 	bl	8004bb8 <SDIO_GetPowerState>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8002ba2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002ba6:	e0ec      	b.n	8002d82 <MMC_InitCard+0x1fe>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f002 f994 	bl	8004eda <SDMMC_CmdSendCID>
 8002bb2:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002bb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MMC_InitCard+0x3a>
  {
    return errorstate;
 8002bba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bbc:	e0e1      	b.n	8002d82 <MMC_InitCard+0x1fe>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f002 f83c 	bl	8004c42 <SDIO_GetResponse>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	671a      	str	r2, [r3, #112]	@ 0x70
    hmmc->CID[1U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP2);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2104      	movs	r1, #4
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f002 f833 	bl	8004c42 <SDIO_GetResponse>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	675a      	str	r2, [r3, #116]	@ 0x74
    hmmc->CID[2U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP3);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2108      	movs	r1, #8
 8002be8:	4618      	mov	r0, r3
 8002bea:	f002 f82a 	bl	8004c42 <SDIO_GetResponse>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	679a      	str	r2, [r3, #120]	@ 0x78
    hmmc->CID[3U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP4);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	210c      	movs	r1, #12
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f002 f821 	bl	8004c42 <SDIO_GetResponse>
 8002c00:	4602      	mov	r2, r0
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	67da      	str	r2, [r3, #124]	@ 0x7c
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f002 f99f 	bl	8004f54 <SDMMC_CmdSetRelAddMmc>
 8002c16:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002c18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MMC_InitCard+0x9e>
  {
    return errorstate;
 8002c1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c20:	e0af      	b.n	8002d82 <MMC_InitCard+0x1fe>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8002c22:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c32:	041b      	lsls	r3, r3, #16
 8002c34:	4619      	mov	r1, r3
 8002c36:	4610      	mov	r0, r2
 8002c38:	f002 f96d 	bl	8004f16 <SDMMC_CmdSendCSD>
 8002c3c:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MMC_InitCard+0xc4>
  {
    return errorstate;
 8002c44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c46:	e09c      	b.n	8002d82 <MMC_InitCard+0x1fe>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f001 fff7 	bl	8004c42 <SDIO_GetResponse>
 8002c54:	4602      	mov	r2, r0
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	661a      	str	r2, [r3, #96]	@ 0x60
    hmmc->CSD[1U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP2);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2104      	movs	r1, #4
 8002c60:	4618      	mov	r0, r3
 8002c62:	f001 ffee 	bl	8004c42 <SDIO_GetResponse>
 8002c66:	4602      	mov	r2, r0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	665a      	str	r2, [r3, #100]	@ 0x64
    hmmc->CSD[2U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP3);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2108      	movs	r1, #8
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 ffe5 	bl	8004c42 <SDIO_GetResponse>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CSD[3U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP4);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	210c      	movs	r1, #12
 8002c84:	4618      	mov	r0, r3
 8002c86:	f001 ffdc 	bl	8004c42 <SDIO_GetResponse>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDIO_GetResponse(hmmc->Instance, SDIO_RESP2) >> 20U);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2104      	movs	r1, #4
 8002c96:	4618      	mov	r0, r3
 8002c98:	f001 ffd3 	bl	8004c42 <SDIO_GetResponse>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	0d1a      	lsrs	r2, r3, #20
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6819      	ldr	r1, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cac:	041b      	lsls	r3, r3, #16
 8002cae:	2200      	movs	r2, #0
 8002cb0:	461c      	mov	r4, r3
 8002cb2:	4615      	mov	r5, r2
 8002cb4:	4622      	mov	r2, r4
 8002cb6:	462b      	mov	r3, r5
 8002cb8:	4608      	mov	r0, r1
 8002cba:	f002 f8cd 	bl	8004e58 <SDMMC_CmdSelDesel>
 8002cbe:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MMC_InitCard+0x146>
  {
    return errorstate;
 8002cc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cc8:	e05b      	b.n	8002d82 <MMC_InitCard+0x1fe>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8002cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff fb35 	bl	8002340 <HAL_MMC_GetCardCSD>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <MMC_InitCard+0x15e>
  {
    return hmmc->ErrorCode;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce0:	e04f      	b.n	8002d82 <MMC_InitCard+0x1fe>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cea:	041b      	lsls	r3, r3, #16
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f002 f954 	bl	8004f9c <SDMMC_CmdSendStatus>
 8002cf4:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002cf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <MMC_InitCard+0x184>
  {
    hmmc->ErrorCode |= errorstate;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3380      	adds	r3, #128	@ 0x80
 8002d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d10:	4619      	mov	r1, r3
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff fce0 	bl	80026d8 <HAL_MMC_GetCardExtCSD>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <MMC_InitCard+0x1a0>
  {
    return hmmc->ErrorCode;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d22:	e02e      	b.n	8002d82 <MMC_InitCard+0x1fe>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4610      	mov	r0, r2
 8002d32:	f002 f933 	bl	8004f9c <SDMMC_CmdSendStatus>
 8002d36:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <MMC_InitCard+0x1c6>
  {
    hmmc->ErrorCode |= errorstate;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Configure the SDIO peripheral */
  Init = hmmc->Init;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f107 040c 	add.w	r4, r7, #12
 8002d50:	1d1d      	adds	r5, r3, #4
 8002d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d5a:	e884 0003 	stmia.w	r4, {r0, r1}
  Init.BusWide = SDIO_BUS_WIDE_1B;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_Init(hmmc->Instance, Init);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681d      	ldr	r5, [r3, #0]
 8002d66:	466c      	mov	r4, sp
 8002d68:	f107 0318 	add.w	r3, r7, #24
 8002d6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d74:	f107 030c 	add.w	r3, r7, #12
 8002d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	f001 fed6 	bl	8004b2c <SDIO_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3758      	adds	r7, #88	@ 0x58
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002d8c <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f002 f87a 	bl	8004e9e <SDMMC_CmdGoIdleState>
 8002daa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d027      	beq.n	8002e02 <MMC_PowerON+0x76>
  {
    return errorstate;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	e034      	b.n	8002e20 <MMC_PowerON+0x94>
  }

  while(validvoltage == 0U)
  {
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	60ba      	str	r2, [r7, #8]
 8002dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d102      	bne.n	8002dca <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8002dc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dc8:	e02a      	b.n	8002e20 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4916      	ldr	r1, [pc, #88]	@ (8002e28 <MMC_PowerON+0x9c>)
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f002 f905 	bl	8004fe0 <SDMMC_CmdOpCondition>
 8002dd6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_MMC_ERROR_NONE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8002dde:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002de2:	e01d      	b.n	8002e20 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f001 ff29 	bl	8004c42 <SDIO_GetResponse>
 8002df0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	0fdb      	lsrs	r3, r3, #31
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <MMC_PowerON+0x72>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <MMC_PowerON+0x74>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]
  while(validvoltage == 0U)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0d6      	beq.n	8002db6 <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24U) == 0xC0U)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	0e1b      	lsrs	r3, r3, #24
 8002e0c:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e0e:	d103      	bne.n	8002e18 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e16:	e002      	b.n	8002e1e <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  return HAL_MMC_ERROR_NONE;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	c0ff8000 	.word	0xc0ff8000

08002e2c <MMC_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the MMC card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t MMC_SendStatus(MMC_HandleTypeDef *hmmc, uint32_t *pCardStatus)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d102      	bne.n	8002e42 <MMC_SendStatus+0x16>
  {
    return HAL_MMC_ERROR_PARAM;
 8002e3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002e40:	e018      	b.n	8002e74 <MMC_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4610      	mov	r0, r2
 8002e50:	f002 f8a4 	bl	8004f9c <SDMMC_CmdSendStatus>
 8002e54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MMC_SendStatus+0x34>
  {
    return errorstate;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	e009      	b.n	8002e74 <MMC_SendStatus+0x48>
  }

  /* Get MMC card status */
  *pCardStatus = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f001 feeb 	bl	8004c42 <SDIO_GetResponse>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	601a      	str	r2, [r3, #0]

  return HAL_MMC_ERROR_NONE;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <MMC_ReadExtCSD>:
  * @param  FieldIndex: Index of the field to be read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static uint32_t MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData, uint16_t FieldIndex, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b090      	sub	sp, #64	@ 0x40
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002e8c:	f7fe f932 	bl	80010f4 <HAL_GetTick>
 8002e90:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea8:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512;
 8002eaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002eae:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002eb0:	2390      	movs	r3, #144	@ 0x90
 8002eb2:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDIO_ConfigData(hmmc->Instance, &config);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f107 0214 	add.w	r2, r7, #20
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f001 fecc 	bl	8004c68 <SDIO_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f002 f8c3 	bl	8005062 <SDMMC_CmdSendEXTCSD>
 8002edc:	6338      	str	r0, [r7, #48]	@ 0x30
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d04e      	beq.n	8002f82 <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a3a      	ldr	r2, [pc, #232]	@ (8002fd4 <MMC_ReadExtCSD+0x158>)
 8002eea:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e062      	b.n	8002fca <MMC_ReadExtCSD+0x14e>
  }

  /* Poll on SDMMC flags */
  while(!__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
  {
    if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXFIFOHF))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01c      	beq.n	8002f4c <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for(count = 0U; count < 8U; count++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f16:	e013      	b.n	8002f40 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDIO_ReadFIFO(hmmc->Instance);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f001 fe30 	bl	8004b82 <SDIO_ReadFIFO>
 8002f22:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex/4U))
 8002f24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f28:	4413      	add	r3, r2
 8002f2a:	88fa      	ldrh	r2, [r7, #6]
 8002f2c:	0892      	lsrs	r2, r2, #2
 8002f2e:	b292      	uxth	r2, r2
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d102      	bne.n	8002f3a <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f38:	601a      	str	r2, [r3, #0]
      for(count = 0U; count < 8U; count++)
 8002f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f42:	2b07      	cmp	r3, #7
 8002f44:	d9e8      	bls.n	8002f18 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8002f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f48:	3308      	adds	r3, #8
 8002f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002f4c:	f7fe f8d2 	bl	80010f4 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d902      	bls.n	8002f62 <MMC_ReadExtCSD+0xe6>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10f      	bne.n	8002f82 <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1b      	ldr	r2, [pc, #108]	@ (8002fd4 <MMC_ReadExtCSD+0x158>)
 8002f68:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State= HAL_MMC_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e023      	b.n	8002fca <MMC_ReadExtCSD+0x14e>
  while(!__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f88:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0b9      	beq.n	8002f04 <MMC_ReadExtCSD+0x88>
    }
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	f001 fffd 	bl	8004f9c <SDMMC_CmdSendStatus>
 8002fa2:	6338      	str	r0, [r7, #48]	@ 0x30
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <MMC_ReadExtCSD+0x13a>
  {
    hmmc->ErrorCode |= errorstate;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_DATA_FLAGS);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002fbe:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3740      	adds	r7, #64	@ 0x40
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	004005ff 	.word	0x004005ff

08002fd8 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t count;
  uint32_t response = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
  uint32_t power_class, supported_pwr_class;

  if((Wide == SDIO_BUS_WIDE_8B) || (Wide == SDIO_BUS_WIDE_4B))
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ff0:	d003      	beq.n	8002ffa <MMC_PwrClassUpdate+0x22>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ff8:	d174      	bne.n	80030e4 <MMC_PwrClassUpdate+0x10c>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]

    /* Read the PowerClass field of the Extended CSD register */
    if(MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8002ffe:	f107 010c 	add.w	r1, r7, #12
 8003002:	f04f 33ff 	mov.w	r3, #4294967295
 8003006:	22bb      	movs	r2, #187	@ 0xbb
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff ff37 	bl	8002e7c <MMC_ReadExtCSD>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <MMC_PwrClassUpdate+0x44>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003014:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	e002      	b.n	8003022 <MMC_PwrClassUpdate+0x4a>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	0e1b      	lsrs	r3, r3, #24
 8003020:	60fb      	str	r3, [r7, #12]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    /* Field PWR_CL_26_xxx [201 or 203] */
    supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX/4)] >> MMC_EXT_CSD_PWR_CL_26_POS) & 0x000000FFU);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003028:	0e1b      	lsrs	r3, r3, #24
 800302a:	613b      	str	r3, [r7, #16]

    if(errorstate == HAL_MMC_ERROR_NONE)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d158      	bne.n	80030e4 <MMC_PwrClassUpdate+0x10c>
    {
      if(Wide == SDIO_BUS_WIDE_8B)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003038:	d102      	bne.n	8003040 <MMC_PwrClassUpdate+0x68>
      {
        /* Bit [7:4] : power class for 8-bits bus configuration - Bit [3:0] : power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	613b      	str	r3, [r7, #16]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4053      	eors	r3, r2
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	2b00      	cmp	r3, #0
 800304c:	d04a      	beq.n	80030e4 <MMC_PwrClassUpdate+0x10c>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800305a:	f043 736e 	orr.w	r3, r3, #62390272	@ 0x3b80000
 800305e:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8003062:	4619      	mov	r1, r3
 8003064:	4610      	mov	r0, r2
 8003066:	f001 ffda 	bl	800501e <SDMMC_CmdSwitch>
 800306a:	6178      	str	r0, [r7, #20]

        if(errorstate == HAL_MMC_ERROR_NONE)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d138      	bne.n	80030e4 <MMC_PwrClassUpdate+0x10c>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8003072:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003076:	61fb      	str	r3, [r7, #28]
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003080:	041b      	lsls	r3, r3, #16
 8003082:	4619      	mov	r1, r3
 8003084:	4610      	mov	r0, r2
 8003086:	f001 ff89 	bl	8004f9c <SDMMC_CmdSendStatus>
 800308a:	6178      	str	r0, [r7, #20]
            if(errorstate != HAL_MMC_ERROR_NONE)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d112      	bne.n	80030b8 <MMC_PwrClassUpdate+0xe0>
            {
              break;
            }

            /* Get command response */
            response = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2100      	movs	r1, #0
 8003098:	4618      	mov	r0, r3
 800309a:	f001 fdd2 	bl	8004c42 <SDIO_GetResponse>
 800309e:	61b8      	str	r0, [r7, #24]
            count--;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	61fb      	str	r3, [r7, #28]
          }while(((response & 0x100U) == 0U) && (count != 0U));
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d104      	bne.n	80030ba <MMC_PwrClassUpdate+0xe2>
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e0      	bne.n	8003078 <MMC_PwrClassUpdate+0xa0>
 80030b6:	e000      	b.n	80030ba <MMC_PwrClassUpdate+0xe2>
              break;
 80030b8:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00b      	beq.n	80030d8 <MMC_PwrClassUpdate+0x100>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d108      	bne.n	80030d8 <MMC_PwrClassUpdate+0x100>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d009      	beq.n	80030e4 <MMC_PwrClassUpdate+0x10c>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80030d0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80030d4:	617b      	str	r3, [r7, #20]
            if ((response & 0x80U) != 0U)
 80030d6:	e005      	b.n	80030e4 <MMC_PwrClassUpdate+0x10c>
            }
          }
          else if (count == 0U)
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <MMC_PwrClassUpdate+0x10c>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 80030de:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80030e2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return errorstate;
 80030e4:	697b      	ldr	r3, [r7, #20]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0cc      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003104:	4b68      	ldr	r3, [pc, #416]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d90c      	bls.n	800312c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003112:	4b65      	ldr	r3, [pc, #404]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b63      	ldr	r3, [pc, #396]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0b8      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003144:	4b59      	ldr	r3, [pc, #356]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a58      	ldr	r2, [pc, #352]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800314e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800315c:	4b53      	ldr	r3, [pc, #332]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4a52      	ldr	r2, [pc, #328]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003168:	4b50      	ldr	r3, [pc, #320]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	494d      	ldr	r1, [pc, #308]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d044      	beq.n	8003210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b47      	ldr	r3, [pc, #284]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d119      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d003      	beq.n	80031ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ae:	4b3f      	ldr	r3, [pc, #252]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e06f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031be:	4b3b      	ldr	r3, [pc, #236]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e067      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ce:	4b37      	ldr	r3, [pc, #220]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f023 0203 	bic.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4934      	ldr	r1, [pc, #208]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e0:	f7fd ff88 	bl	80010f4 <HAL_GetTick>
 80031e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e8:	f7fd ff84 	bl	80010f4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e04f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	4b2b      	ldr	r3, [pc, #172]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 020c 	and.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	429a      	cmp	r2, r3
 800320e:	d1eb      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003210:	4b25      	ldr	r3, [pc, #148]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d20c      	bcs.n	8003238 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b22      	ldr	r3, [pc, #136]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b20      	ldr	r3, [pc, #128]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e032      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003244:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4916      	ldr	r1, [pc, #88]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003262:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	490e      	ldr	r1, [pc, #56]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003276:	f000 fb7f 	bl	8003978 <HAL_RCC_GetSysClockFreq>
 800327a:	4602      	mov	r2, r0
 800327c:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	490a      	ldr	r1, [pc, #40]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	5ccb      	ldrb	r3, [r1, r3]
 800328a:	fa22 f303 	lsr.w	r3, r2, r3
 800328e:	4a09      	ldr	r2, [pc, #36]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003292:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd fee8 	bl	800106c <HAL_InitTick>

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023c00 	.word	0x40023c00
 80032ac:	40023800 	.word	0x40023800
 80032b0:	08005f14 	.word	0x08005f14
 80032b4:	20000000 	.word	0x20000000
 80032b8:	20000004 	.word	0x20000004

080032bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c0:	4b03      	ldr	r3, [pc, #12]	@ (80032d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000000 	.word	0x20000000

080032d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032d8:	f7ff fff0 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	0a9b      	lsrs	r3, r3, #10
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4903      	ldr	r1, [pc, #12]	@ (80032f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08005f24 	.word	0x08005f24

080032fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003300:	f7ff ffdc 	bl	80032bc <HAL_RCC_GetHCLKFreq>
 8003304:	4602      	mov	r2, r0
 8003306:	4b05      	ldr	r3, [pc, #20]	@ (800331c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	0b5b      	lsrs	r3, r3, #13
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4903      	ldr	r1, [pc, #12]	@ (8003320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003312:	5ccb      	ldrb	r3, [r1, r3]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	08005f24 	.word	0x08005f24

08003324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08c      	sub	sp, #48	@ 0x30
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d010      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800335c:	4b6f      	ldr	r3, [pc, #444]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800335e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003362:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336a:	496c      	ldr	r1, [pc, #432]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800337a:	2301      	movs	r3, #1
 800337c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d010      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800338a:	4b64      	ldr	r3, [pc, #400]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800338c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003390:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003398:	4960      	ldr	r1, [pc, #384]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80033a8:	2301      	movs	r3, #1
 80033aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d017      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033b8:	4b58      	ldr	r3, [pc, #352]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	4955      	ldr	r1, [pc, #340]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033d6:	d101      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80033d8:	2301      	movs	r3, #1
 80033da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80033e4:	2301      	movs	r3, #1
 80033e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d017      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033f4:	4b49      	ldr	r3, [pc, #292]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003402:	4946      	ldr	r1, [pc, #280]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800340e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003412:	d101      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003414:	2301      	movs	r3, #1
 8003416:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003420:	2301      	movs	r3, #1
 8003422:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 808a 	beq.w	8003546 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	4b39      	ldr	r3, [pc, #228]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	4a38      	ldr	r2, [pc, #224]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800343c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003440:	6413      	str	r3, [r2, #64]	@ 0x40
 8003442:	4b36      	ldr	r3, [pc, #216]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800344e:	4b34      	ldr	r3, [pc, #208]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a33      	ldr	r2, [pc, #204]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003458:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800345a:	f7fd fe4b 	bl	80010f4 <HAL_GetTick>
 800345e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003462:	f7fd fe47 	bl	80010f4 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e278      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003474:	4b2a      	ldr	r3, [pc, #168]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003480:	4b26      	ldr	r3, [pc, #152]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003484:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003488:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d02f      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003498:	6a3a      	ldr	r2, [r7, #32]
 800349a:	429a      	cmp	r2, r3
 800349c:	d028      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800349e:	4b1f      	ldr	r3, [pc, #124]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034a6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80034b4:	4a19      	ldr	r2, [pc, #100]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034ba:	4b18      	ldr	r3, [pc, #96]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d114      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80034c6:	f7fd fe15 	bl	80010f4 <HAL_GetTick>
 80034ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ce:	f7fd fe11 	bl	80010f4 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034dc:	4293      	cmp	r3, r2
 80034de:	d901      	bls.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e240      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e4:	4b0d      	ldr	r3, [pc, #52]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0ee      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034fc:	d114      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80034fe:	4b07      	ldr	r3, [pc, #28]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800350e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003512:	4902      	ldr	r1, [pc, #8]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003514:	4313      	orrs	r3, r2
 8003516:	608b      	str	r3, [r1, #8]
 8003518:	e00c      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800
 8003520:	40007000 	.word	0x40007000
 8003524:	42470e40 	.word	0x42470e40
 8003528:	4b4a      	ldr	r3, [pc, #296]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a49      	ldr	r2, [pc, #292]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800352e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003532:	6093      	str	r3, [r2, #8]
 8003534:	4b47      	ldr	r3, [pc, #284]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003536:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003540:	4944      	ldr	r1, [pc, #272]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003542:	4313      	orrs	r3, r2
 8003544:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003558:	4b3f      	ldr	r3, [pc, #252]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800355a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003568:	4b3a      	ldr	r3, [pc, #232]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800356a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800356e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003576:	4937      	ldr	r1, [pc, #220]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800358a:	4b32      	ldr	r3, [pc, #200]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800358c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003590:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003598:	492e      	ldr	r1, [pc, #184]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d011      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035ac:	4b29      	ldr	r3, [pc, #164]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035b2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ba:	4926      	ldr	r1, [pc, #152]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035ca:	d101      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80035cc:	2301      	movs	r3, #1
 80035ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80035dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035e2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ea:	491a      	ldr	r1, [pc, #104]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d011      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80035fe:	4b15      	ldr	r3, [pc, #84]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003604:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800360c:	4911      	ldr	r1, [pc, #68]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003618:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800361c:	d101      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800361e:	2301      	movs	r3, #1
 8003620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003624:	2b01      	cmp	r3, #1
 8003626:	d005      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003630:	f040 80ff 	bne.w	8003832 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003634:	4b09      	ldr	r3, [pc, #36]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800363a:	f7fd fd5b 	bl	80010f4 <HAL_GetTick>
 800363e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003640:	e00e      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003642:	f7fd fd57 	bl	80010f4 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d907      	bls.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e188      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003654:	40023800 	.word	0x40023800
 8003658:	424711e0 	.word	0x424711e0
 800365c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003660:	4b7e      	ldr	r3, [pc, #504]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1ea      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367c:	2b00      	cmp	r3, #0
 800367e:	d009      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003688:	2b00      	cmp	r3, #0
 800368a:	d028      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d124      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003694:	4b71      	ldr	r3, [pc, #452]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003696:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800369a:	0c1b      	lsrs	r3, r3, #16
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	3301      	adds	r3, #1
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036a6:	4b6d      	ldr	r3, [pc, #436]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036ac:	0e1b      	lsrs	r3, r3, #24
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	019b      	lsls	r3, r3, #6
 80036be:	431a      	orrs	r2, r3
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	3b01      	subs	r3, #1
 80036c6:	041b      	lsls	r3, r3, #16
 80036c8:	431a      	orrs	r2, r3
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	061b      	lsls	r3, r3, #24
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	071b      	lsls	r3, r3, #28
 80036d6:	4961      	ldr	r1, [pc, #388]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d004      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d035      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003704:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003708:	d130      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800370a:	4b54      	ldr	r3, [pc, #336]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800370c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003710:	0c1b      	lsrs	r3, r3, #16
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	3301      	adds	r3, #1
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800371c:	4b4f      	ldr	r3, [pc, #316]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800371e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003722:	0f1b      	lsrs	r3, r3, #28
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	019b      	lsls	r3, r3, #6
 8003734:	431a      	orrs	r2, r3
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	3b01      	subs	r3, #1
 800373c:	041b      	lsls	r3, r3, #16
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	061b      	lsls	r3, r3, #24
 8003746:	431a      	orrs	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	071b      	lsls	r3, r3, #28
 800374c:	4943      	ldr	r1, [pc, #268]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003754:	4b41      	ldr	r3, [pc, #260]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003756:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800375a:	f023 021f 	bic.w	r2, r3, #31
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003762:	3b01      	subs	r3, #1
 8003764:	493d      	ldr	r1, [pc, #244]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003774:	2b00      	cmp	r3, #0
 8003776:	d029      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800377c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003780:	d124      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003782:	4b36      	ldr	r3, [pc, #216]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003784:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003788:	0c1b      	lsrs	r3, r3, #16
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	3301      	adds	r3, #1
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003794:	4b31      	ldr	r3, [pc, #196]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003796:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800379a:	0f1b      	lsrs	r3, r3, #28
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	019b      	lsls	r3, r3, #6
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	3b01      	subs	r3, #1
 80037b6:	041b      	lsls	r3, r3, #16
 80037b8:	431a      	orrs	r2, r3
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	061b      	lsls	r3, r3, #24
 80037be:	431a      	orrs	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	071b      	lsls	r3, r3, #28
 80037c4:	4925      	ldr	r1, [pc, #148]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d016      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	019b      	lsls	r3, r3, #6
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	3b01      	subs	r3, #1
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	071b      	lsls	r3, r3, #28
 80037fe:	4917      	ldr	r1, [pc, #92]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003806:	4b16      	ldr	r3, [pc, #88]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800380c:	f7fd fc72 	bl	80010f4 <HAL_GetTick>
 8003810:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003814:	f7fd fc6e 	bl	80010f4 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e09f      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003826:	4b0d      	ldr	r3, [pc, #52]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003834:	2b01      	cmp	r3, #1
 8003836:	f040 8095 	bne.w	8003964 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800383a:	4b0a      	ldr	r3, [pc, #40]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003840:	f7fd fc58 	bl	80010f4 <HAL_GetTick>
 8003844:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003846:	e00f      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003848:	f7fd fc54 	bl	80010f4 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d908      	bls.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e085      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800
 8003860:	42470068 	.word	0x42470068
 8003864:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003868:	4b41      	ldr	r3, [pc, #260]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003874:	d0e8      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003892:	2b00      	cmp	r3, #0
 8003894:	d02b      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800389a:	2b00      	cmp	r3, #0
 800389c:	d127      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800389e:	4b34      	ldr	r3, [pc, #208]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a4:	0c1b      	lsrs	r3, r3, #16
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	3301      	adds	r3, #1
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699a      	ldr	r2, [r3, #24]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	019b      	lsls	r3, r3, #6
 80038ba:	431a      	orrs	r2, r3
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	3b01      	subs	r3, #1
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	061b      	lsls	r3, r3, #24
 80038cc:	4928      	ldr	r1, [pc, #160]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038d4:	4b26      	ldr	r3, [pc, #152]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038da:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e2:	3b01      	subs	r3, #1
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	4922      	ldr	r1, [pc, #136]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d01d      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003902:	d118      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003904:	4b1a      	ldr	r3, [pc, #104]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390a:	0e1b      	lsrs	r3, r3, #24
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	019b      	lsls	r3, r3, #6
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	3b01      	subs	r3, #1
 8003926:	041b      	lsls	r3, r3, #16
 8003928:	431a      	orrs	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	4910      	ldr	r1, [pc, #64]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003936:	4b0f      	ldr	r3, [pc, #60]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003938:	2201      	movs	r2, #1
 800393a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800393c:	f7fd fbda 	bl	80010f4 <HAL_GetTick>
 8003940:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003944:	f7fd fbd6 	bl	80010f4 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e007      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003956:	4b06      	ldr	r3, [pc, #24]	@ (8003970 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800395e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003962:	d1ef      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3730      	adds	r7, #48	@ 0x30
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	42470070 	.word	0x42470070

08003978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800397c:	b0ae      	sub	sp, #184	@ 0xb8
 800397e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800399e:	4bcb      	ldr	r3, [pc, #812]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x354>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	f200 8206 	bhi.w	8003db8 <HAL_RCC_GetSysClockFreq+0x440>
 80039ac:	a201      	add	r2, pc, #4	@ (adr r2, 80039b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039e9 	.word	0x080039e9
 80039b8:	08003db9 	.word	0x08003db9
 80039bc:	08003db9 	.word	0x08003db9
 80039c0:	08003db9 	.word	0x08003db9
 80039c4:	080039f1 	.word	0x080039f1
 80039c8:	08003db9 	.word	0x08003db9
 80039cc:	08003db9 	.word	0x08003db9
 80039d0:	08003db9 	.word	0x08003db9
 80039d4:	080039f9 	.word	0x080039f9
 80039d8:	08003db9 	.word	0x08003db9
 80039dc:	08003db9 	.word	0x08003db9
 80039e0:	08003db9 	.word	0x08003db9
 80039e4:	08003be9 	.word	0x08003be9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4bb9      	ldr	r3, [pc, #740]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x358>)
 80039ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80039ee:	e1e7      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039f0:	4bb8      	ldr	r3, [pc, #736]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80039f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80039f6:	e1e3      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f8:	4bb4      	ldr	r3, [pc, #720]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x354>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a04:	4bb1      	ldr	r3, [pc, #708]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d071      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a10:	4bae      	ldr	r3, [pc, #696]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a1c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a36:	4622      	mov	r2, r4
 8003a38:	462b      	mov	r3, r5
 8003a3a:	f04f 0000 	mov.w	r0, #0
 8003a3e:	f04f 0100 	mov.w	r1, #0
 8003a42:	0159      	lsls	r1, r3, #5
 8003a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a48:	0150      	lsls	r0, r2, #5
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4621      	mov	r1, r4
 8003a50:	1a51      	subs	r1, r2, r1
 8003a52:	6439      	str	r1, [r7, #64]	@ 0x40
 8003a54:	4629      	mov	r1, r5
 8003a56:	eb63 0301 	sbc.w	r3, r3, r1
 8003a5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003a68:	4649      	mov	r1, r9
 8003a6a:	018b      	lsls	r3, r1, #6
 8003a6c:	4641      	mov	r1, r8
 8003a6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a72:	4641      	mov	r1, r8
 8003a74:	018a      	lsls	r2, r1, #6
 8003a76:	4641      	mov	r1, r8
 8003a78:	1a51      	subs	r1, r2, r1
 8003a7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a7c:	4649      	mov	r1, r9
 8003a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003a90:	4649      	mov	r1, r9
 8003a92:	00cb      	lsls	r3, r1, #3
 8003a94:	4641      	mov	r1, r8
 8003a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a9a:	4641      	mov	r1, r8
 8003a9c:	00ca      	lsls	r2, r1, #3
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	4622      	mov	r2, r4
 8003aa6:	189b      	adds	r3, r3, r2
 8003aa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aaa:	462b      	mov	r3, r5
 8003aac:	460a      	mov	r2, r1
 8003aae:	eb42 0303 	adc.w	r3, r2, r3
 8003ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	024b      	lsls	r3, r1, #9
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003aca:	4621      	mov	r1, r4
 8003acc:	024a      	lsls	r2, r1, #9
 8003ace:	4610      	mov	r0, r2
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003adc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ae0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003ae4:	f7fc fbec 	bl	80002c0 <__aeabi_uldivmod>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4613      	mov	r3, r2
 8003aee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003af2:	e067      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af4:	4b75      	ldr	r3, [pc, #468]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	099b      	lsrs	r3, r3, #6
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b00:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003b04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b0e:	2300      	movs	r3, #0
 8003b10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b12:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003b16:	4622      	mov	r2, r4
 8003b18:	462b      	mov	r3, r5
 8003b1a:	f04f 0000 	mov.w	r0, #0
 8003b1e:	f04f 0100 	mov.w	r1, #0
 8003b22:	0159      	lsls	r1, r3, #5
 8003b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b28:	0150      	lsls	r0, r2, #5
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4621      	mov	r1, r4
 8003b30:	1a51      	subs	r1, r2, r1
 8003b32:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b34:	4629      	mov	r1, r5
 8003b36:	eb63 0301 	sbc.w	r3, r3, r1
 8003b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003b48:	4649      	mov	r1, r9
 8003b4a:	018b      	lsls	r3, r1, #6
 8003b4c:	4641      	mov	r1, r8
 8003b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b52:	4641      	mov	r1, r8
 8003b54:	018a      	lsls	r2, r1, #6
 8003b56:	4641      	mov	r1, r8
 8003b58:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b5c:	4649      	mov	r1, r9
 8003b5e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b6e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b76:	4692      	mov	sl, r2
 8003b78:	469b      	mov	fp, r3
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	eb1a 0303 	adds.w	r3, sl, r3
 8003b80:	623b      	str	r3, [r7, #32]
 8003b82:	462b      	mov	r3, r5
 8003b84:	eb4b 0303 	adc.w	r3, fp, r3
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b96:	4629      	mov	r1, r5
 8003b98:	028b      	lsls	r3, r1, #10
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	028a      	lsls	r2, r1, #10
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bac:	2200      	movs	r2, #0
 8003bae:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bb0:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bb2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003bb6:	f7fc fb83 	bl	80002c0 <__aeabi_uldivmod>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003bc4:	4b41      	ldr	r3, [pc, #260]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	0c1b      	lsrs	r3, r3, #16
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003bd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003bda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003be6:	e0eb      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be8:	4b38      	ldr	r3, [pc, #224]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bf4:	4b35      	ldr	r3, [pc, #212]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d06b      	beq.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c00:	4b32      	ldr	r3, [pc, #200]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	2200      	movs	r2, #0
 8003c08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c12:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c14:	2300      	movs	r3, #0
 8003c16:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c18:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003c1c:	4622      	mov	r2, r4
 8003c1e:	462b      	mov	r3, r5
 8003c20:	f04f 0000 	mov.w	r0, #0
 8003c24:	f04f 0100 	mov.w	r1, #0
 8003c28:	0159      	lsls	r1, r3, #5
 8003c2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c2e:	0150      	lsls	r0, r2, #5
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4621      	mov	r1, r4
 8003c36:	1a51      	subs	r1, r2, r1
 8003c38:	61b9      	str	r1, [r7, #24]
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	eb63 0301 	sbc.w	r3, r3, r1
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c4e:	4659      	mov	r1, fp
 8003c50:	018b      	lsls	r3, r1, #6
 8003c52:	4651      	mov	r1, sl
 8003c54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c58:	4651      	mov	r1, sl
 8003c5a:	018a      	lsls	r2, r1, #6
 8003c5c:	4651      	mov	r1, sl
 8003c5e:	ebb2 0801 	subs.w	r8, r2, r1
 8003c62:	4659      	mov	r1, fp
 8003c64:	eb63 0901 	sbc.w	r9, r3, r1
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c7c:	4690      	mov	r8, r2
 8003c7e:	4699      	mov	r9, r3
 8003c80:	4623      	mov	r3, r4
 8003c82:	eb18 0303 	adds.w	r3, r8, r3
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	462b      	mov	r3, r5
 8003c8a:	eb49 0303 	adc.w	r3, r9, r3
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	024b      	lsls	r3, r1, #9
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	024a      	lsls	r2, r1, #9
 8003caa:	4610      	mov	r0, r2
 8003cac:	4619      	mov	r1, r3
 8003cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cb6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003cb8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003cbc:	f7fc fb00 	bl	80002c0 <__aeabi_uldivmod>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cca:	e065      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x420>
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd8:	4b3d      	ldr	r3, [pc, #244]	@ (8003dd0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	099b      	lsrs	r3, r3, #6
 8003cde:	2200      	movs	r2, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ce8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cea:	2300      	movs	r3, #0
 8003cec:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003cf2:	4642      	mov	r2, r8
 8003cf4:	464b      	mov	r3, r9
 8003cf6:	f04f 0000 	mov.w	r0, #0
 8003cfa:	f04f 0100 	mov.w	r1, #0
 8003cfe:	0159      	lsls	r1, r3, #5
 8003d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d04:	0150      	lsls	r0, r2, #5
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4641      	mov	r1, r8
 8003d0c:	1a51      	subs	r1, r2, r1
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	4649      	mov	r1, r9
 8003d12:	eb63 0301 	sbc.w	r3, r3, r1
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d24:	4659      	mov	r1, fp
 8003d26:	018b      	lsls	r3, r1, #6
 8003d28:	4651      	mov	r1, sl
 8003d2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d2e:	4651      	mov	r1, sl
 8003d30:	018a      	lsls	r2, r1, #6
 8003d32:	4651      	mov	r1, sl
 8003d34:	1a54      	subs	r4, r2, r1
 8003d36:	4659      	mov	r1, fp
 8003d38:	eb63 0501 	sbc.w	r5, r3, r1
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	00eb      	lsls	r3, r5, #3
 8003d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d4a:	00e2      	lsls	r2, r4, #3
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	461d      	mov	r5, r3
 8003d50:	4643      	mov	r3, r8
 8003d52:	18e3      	adds	r3, r4, r3
 8003d54:	603b      	str	r3, [r7, #0]
 8003d56:	464b      	mov	r3, r9
 8003d58:	eb45 0303 	adc.w	r3, r5, r3
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	028b      	lsls	r3, r1, #10
 8003d6e:	4621      	mov	r1, r4
 8003d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d74:	4621      	mov	r1, r4
 8003d76:	028a      	lsls	r2, r1, #10
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d80:	2200      	movs	r2, #0
 8003d82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d84:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003d86:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d8a:	f7fc fa99 	bl	80002c0 <__aeabi_uldivmod>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	4613      	mov	r3, r2
 8003d94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d98:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	0f1b      	lsrs	r3, r3, #28
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003da6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003daa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003db6:	e003      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003db8:	4b06      	ldr	r3, [pc, #24]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003dba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003dbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	37b8      	adds	r7, #184	@ 0xb8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	00f42400 	.word	0x00f42400

08003dd8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e28d      	b.n	8004306 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 8083 	beq.w	8003efe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003df8:	4b94      	ldr	r3, [pc, #592]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 030c 	and.w	r3, r3, #12
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d019      	beq.n	8003e38 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e04:	4b91      	ldr	r3, [pc, #580]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d106      	bne.n	8003e1e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e10:	4b8e      	ldr	r3, [pc, #568]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e1c:	d00c      	beq.n	8003e38 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e1e:	4b8b      	ldr	r3, [pc, #556]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e26:	2b0c      	cmp	r3, #12
 8003e28:	d112      	bne.n	8003e50 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e2a:	4b88      	ldr	r3, [pc, #544]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e36:	d10b      	bne.n	8003e50 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e38:	4b84      	ldr	r3, [pc, #528]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d05b      	beq.n	8003efc <HAL_RCC_OscConfig+0x124>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d157      	bne.n	8003efc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e25a      	b.n	8004306 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e58:	d106      	bne.n	8003e68 <HAL_RCC_OscConfig+0x90>
 8003e5a:	4b7c      	ldr	r3, [pc, #496]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a7b      	ldr	r2, [pc, #492]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e01d      	b.n	8003ea4 <HAL_RCC_OscConfig+0xcc>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e70:	d10c      	bne.n	8003e8c <HAL_RCC_OscConfig+0xb4>
 8003e72:	4b76      	ldr	r3, [pc, #472]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a75      	ldr	r2, [pc, #468]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	4b73      	ldr	r3, [pc, #460]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a72      	ldr	r2, [pc, #456]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	e00b      	b.n	8003ea4 <HAL_RCC_OscConfig+0xcc>
 8003e8c:	4b6f      	ldr	r3, [pc, #444]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a6e      	ldr	r2, [pc, #440]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	4b6c      	ldr	r3, [pc, #432]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a6b      	ldr	r2, [pc, #428]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d013      	beq.n	8003ed4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fd f922 	bl	80010f4 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb4:	f7fd f91e 	bl	80010f4 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b64      	cmp	r3, #100	@ 0x64
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e21f      	b.n	8004306 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec6:	4b61      	ldr	r3, [pc, #388]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0xdc>
 8003ed2:	e014      	b.n	8003efe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fd f90e 	bl	80010f4 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003edc:	f7fd f90a 	bl	80010f4 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	@ 0x64
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e20b      	b.n	8004306 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eee:	4b57      	ldr	r3, [pc, #348]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x104>
 8003efa:	e000      	b.n	8003efe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d06f      	beq.n	8003fea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f0a:	4b50      	ldr	r3, [pc, #320]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d017      	beq.n	8003f46 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f16:	4b4d      	ldr	r3, [pc, #308]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
        || \
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d105      	bne.n	8003f2e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f22:	4b4a      	ldr	r3, [pc, #296]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f2e:	4b47      	ldr	r3, [pc, #284]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f36:	2b0c      	cmp	r3, #12
 8003f38:	d11c      	bne.n	8003f74 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f3a:	4b44      	ldr	r3, [pc, #272]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d116      	bne.n	8003f74 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f46:	4b41      	ldr	r3, [pc, #260]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_RCC_OscConfig+0x186>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d001      	beq.n	8003f5e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e1d3      	b.n	8004306 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4937      	ldr	r1, [pc, #220]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f72:	e03a      	b.n	8003fea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d020      	beq.n	8003fbe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f7c:	4b34      	ldr	r3, [pc, #208]	@ (8004050 <HAL_RCC_OscConfig+0x278>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f82:	f7fd f8b7 	bl	80010f4 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f8a:	f7fd f8b3 	bl	80010f4 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e1b4      	b.n	8004306 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa8:	4b28      	ldr	r3, [pc, #160]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4925      	ldr	r1, [pc, #148]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	600b      	str	r3, [r1, #0]
 8003fbc:	e015      	b.n	8003fea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fbe:	4b24      	ldr	r3, [pc, #144]	@ (8004050 <HAL_RCC_OscConfig+0x278>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc4:	f7fd f896 	bl	80010f4 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fcc:	f7fd f892 	bl	80010f4 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e193      	b.n	8004306 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fde:	4b1b      	ldr	r3, [pc, #108]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d036      	beq.n	8004064 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d016      	beq.n	800402c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ffe:	4b15      	ldr	r3, [pc, #84]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 8004000:	2201      	movs	r2, #1
 8004002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004004:	f7fd f876 	bl	80010f4 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800400c:	f7fd f872 	bl	80010f4 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e173      	b.n	8004306 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800401e:	4b0b      	ldr	r3, [pc, #44]	@ (800404c <HAL_RCC_OscConfig+0x274>)
 8004020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0x234>
 800402a:	e01b      	b.n	8004064 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800402c:	4b09      	ldr	r3, [pc, #36]	@ (8004054 <HAL_RCC_OscConfig+0x27c>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004032:	f7fd f85f 	bl	80010f4 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004038:	e00e      	b.n	8004058 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800403a:	f7fd f85b 	bl	80010f4 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d907      	bls.n	8004058 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e15c      	b.n	8004306 <HAL_RCC_OscConfig+0x52e>
 800404c:	40023800 	.word	0x40023800
 8004050:	42470000 	.word	0x42470000
 8004054:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004058:	4b8a      	ldr	r3, [pc, #552]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 800405a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1ea      	bne.n	800403a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 8097 	beq.w	80041a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004072:	2300      	movs	r3, #0
 8004074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004076:	4b83      	ldr	r3, [pc, #524]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10f      	bne.n	80040a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	4b7f      	ldr	r3, [pc, #508]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	4a7e      	ldr	r2, [pc, #504]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 800408c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004090:	6413      	str	r3, [r2, #64]	@ 0x40
 8004092:	4b7c      	ldr	r3, [pc, #496]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800409a:	60bb      	str	r3, [r7, #8]
 800409c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800409e:	2301      	movs	r3, #1
 80040a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a2:	4b79      	ldr	r3, [pc, #484]	@ (8004288 <HAL_RCC_OscConfig+0x4b0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d118      	bne.n	80040e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ae:	4b76      	ldr	r3, [pc, #472]	@ (8004288 <HAL_RCC_OscConfig+0x4b0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a75      	ldr	r2, [pc, #468]	@ (8004288 <HAL_RCC_OscConfig+0x4b0>)
 80040b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ba:	f7fd f81b 	bl	80010f4 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c2:	f7fd f817 	bl	80010f4 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e118      	b.n	8004306 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d4:	4b6c      	ldr	r3, [pc, #432]	@ (8004288 <HAL_RCC_OscConfig+0x4b0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0f0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d106      	bne.n	80040f6 <HAL_RCC_OscConfig+0x31e>
 80040e8:	4b66      	ldr	r3, [pc, #408]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ec:	4a65      	ldr	r2, [pc, #404]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f4:	e01c      	b.n	8004130 <HAL_RCC_OscConfig+0x358>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b05      	cmp	r3, #5
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0x340>
 80040fe:	4b61      	ldr	r3, [pc, #388]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004102:	4a60      	ldr	r2, [pc, #384]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 8004104:	f043 0304 	orr.w	r3, r3, #4
 8004108:	6713      	str	r3, [r2, #112]	@ 0x70
 800410a:	4b5e      	ldr	r3, [pc, #376]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410e:	4a5d      	ldr	r2, [pc, #372]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	6713      	str	r3, [r2, #112]	@ 0x70
 8004116:	e00b      	b.n	8004130 <HAL_RCC_OscConfig+0x358>
 8004118:	4b5a      	ldr	r3, [pc, #360]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411c:	4a59      	ldr	r2, [pc, #356]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 800411e:	f023 0301 	bic.w	r3, r3, #1
 8004122:	6713      	str	r3, [r2, #112]	@ 0x70
 8004124:	4b57      	ldr	r3, [pc, #348]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004128:	4a56      	ldr	r2, [pc, #344]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 800412a:	f023 0304 	bic.w	r3, r3, #4
 800412e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d015      	beq.n	8004164 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004138:	f7fc ffdc 	bl	80010f4 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413e:	e00a      	b.n	8004156 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004140:	f7fc ffd8 	bl	80010f4 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e0d7      	b.n	8004306 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004156:	4b4b      	ldr	r3, [pc, #300]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0ee      	beq.n	8004140 <HAL_RCC_OscConfig+0x368>
 8004162:	e014      	b.n	800418e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004164:	f7fc ffc6 	bl	80010f4 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800416a:	e00a      	b.n	8004182 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416c:	f7fc ffc2 	bl	80010f4 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e0c1      	b.n	8004306 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004182:	4b40      	ldr	r3, [pc, #256]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1ee      	bne.n	800416c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800418e:	7dfb      	ldrb	r3, [r7, #23]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d105      	bne.n	80041a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004194:	4b3b      	ldr	r3, [pc, #236]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	4a3a      	ldr	r2, [pc, #232]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 800419a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800419e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80ad 	beq.w	8004304 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041aa:	4b36      	ldr	r3, [pc, #216]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d060      	beq.n	8004278 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d145      	bne.n	800424a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041be:	4b33      	ldr	r3, [pc, #204]	@ (800428c <HAL_RCC_OscConfig+0x4b4>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c4:	f7fc ff96 	bl	80010f4 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041cc:	f7fc ff92 	bl	80010f4 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e093      	b.n	8004306 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041de:	4b29      	ldr	r3, [pc, #164]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69da      	ldr	r2, [r3, #28]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	019b      	lsls	r3, r3, #6
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004200:	085b      	lsrs	r3, r3, #1
 8004202:	3b01      	subs	r3, #1
 8004204:	041b      	lsls	r3, r3, #16
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420c:	061b      	lsls	r3, r3, #24
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004214:	071b      	lsls	r3, r3, #28
 8004216:	491b      	ldr	r1, [pc, #108]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 8004218:	4313      	orrs	r3, r2
 800421a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800421c:	4b1b      	ldr	r3, [pc, #108]	@ (800428c <HAL_RCC_OscConfig+0x4b4>)
 800421e:	2201      	movs	r2, #1
 8004220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004222:	f7fc ff67 	bl	80010f4 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422a:	f7fc ff63 	bl	80010f4 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e064      	b.n	8004306 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800423c:	4b11      	ldr	r3, [pc, #68]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x452>
 8004248:	e05c      	b.n	8004304 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424a:	4b10      	ldr	r3, [pc, #64]	@ (800428c <HAL_RCC_OscConfig+0x4b4>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004250:	f7fc ff50 	bl	80010f4 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004258:	f7fc ff4c 	bl	80010f4 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e04d      	b.n	8004306 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426a:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <HAL_RCC_OscConfig+0x4ac>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x480>
 8004276:	e045      	b.n	8004304 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d107      	bne.n	8004290 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e040      	b.n	8004306 <HAL_RCC_OscConfig+0x52e>
 8004284:	40023800 	.word	0x40023800
 8004288:	40007000 	.word	0x40007000
 800428c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004290:	4b1f      	ldr	r3, [pc, #124]	@ (8004310 <HAL_RCC_OscConfig+0x538>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d030      	beq.n	8004300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d129      	bne.n	8004300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d122      	bne.n	8004300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042c0:	4013      	ands	r3, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d119      	bne.n	8004300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d6:	085b      	lsrs	r3, r3, #1
 80042d8:	3b01      	subs	r3, #1
 80042da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042dc:	429a      	cmp	r2, r3
 80042de:	d10f      	bne.n	8004300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d001      	beq.n	8004304 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40023800 	.word	0x40023800

08004314 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e042      	b.n	80043ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fc fd76 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2224      	movs	r2, #36	@ 0x24
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004356:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f973 	bl	8004644 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800436c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800437c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800438c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08a      	sub	sp, #40	@ 0x28
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	d175      	bne.n	80044c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <HAL_UART_Transmit+0x2c>
 80043da:	88fb      	ldrh	r3, [r7, #6]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e06e      	b.n	80044c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2221      	movs	r2, #33	@ 0x21
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043f2:	f7fc fe7f 	bl	80010f4 <HAL_GetTick>
 80043f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	88fa      	ldrh	r2, [r7, #6]
 80043fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	88fa      	ldrh	r2, [r7, #6]
 8004402:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800440c:	d108      	bne.n	8004420 <HAL_UART_Transmit+0x6c>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d104      	bne.n	8004420 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	e003      	b.n	8004428 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004424:	2300      	movs	r3, #0
 8004426:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004428:	e02e      	b.n	8004488 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2200      	movs	r2, #0
 8004432:	2180      	movs	r1, #128	@ 0x80
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f848 	bl	80044ca <UART_WaitOnFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e03a      	b.n	80044c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10b      	bne.n	800446a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004460:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	3302      	adds	r3, #2
 8004466:	61bb      	str	r3, [r7, #24]
 8004468:	e007      	b.n	800447a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	781a      	ldrb	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	3301      	adds	r3, #1
 8004478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1cb      	bne.n	800442a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	2140      	movs	r1, #64	@ 0x40
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f814 	bl	80044ca <UART_WaitOnFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e006      	b.n	80044c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	e000      	b.n	80044c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80044c0:	2302      	movs	r3, #2
  }
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3720      	adds	r7, #32
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b086      	sub	sp, #24
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	603b      	str	r3, [r7, #0]
 80044d6:	4613      	mov	r3, r2
 80044d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044da:	e03b      	b.n	8004554 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e2:	d037      	beq.n	8004554 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e4:	f7fc fe06 	bl	80010f4 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	6a3a      	ldr	r2, [r7, #32]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d302      	bcc.n	80044fa <UART_WaitOnFlagUntilTimeout+0x30>
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e03a      	b.n	8004574 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d023      	beq.n	8004554 <UART_WaitOnFlagUntilTimeout+0x8a>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b80      	cmp	r3, #128	@ 0x80
 8004510:	d020      	beq.n	8004554 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b40      	cmp	r3, #64	@ 0x40
 8004516:	d01d      	beq.n	8004554 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b08      	cmp	r3, #8
 8004524:	d116      	bne.n	8004554 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 f81d 	bl	800457c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2208      	movs	r2, #8
 8004546:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e00f      	b.n	8004574 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4013      	ands	r3, r2
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	429a      	cmp	r2, r3
 8004562:	bf0c      	ite	eq
 8004564:	2301      	moveq	r3, #1
 8004566:	2300      	movne	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	461a      	mov	r2, r3
 800456c:	79fb      	ldrb	r3, [r7, #7]
 800456e:	429a      	cmp	r2, r3
 8004570:	d0b4      	beq.n	80044dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800457c:	b480      	push	{r7}
 800457e:	b095      	sub	sp, #84	@ 0x54
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	330c      	adds	r3, #12
 800458a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004596:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800459a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	330c      	adds	r3, #12
 80045a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80045a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e5      	bne.n	8004584 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3314      	adds	r3, #20
 80045be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	e853 3f00 	ldrex	r3, [r3]
 80045c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f023 0301 	bic.w	r3, r3, #1
 80045ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3314      	adds	r3, #20
 80045d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045e0:	e841 2300 	strex	r3, r2, [r1]
 80045e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e5      	bne.n	80045b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d119      	bne.n	8004628 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	330c      	adds	r3, #12
 80045fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	60bb      	str	r3, [r7, #8]
   return(result);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f023 0310 	bic.w	r3, r3, #16
 800460a:	647b      	str	r3, [r7, #68]	@ 0x44
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	330c      	adds	r3, #12
 8004612:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004614:	61ba      	str	r2, [r7, #24]
 8004616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6979      	ldr	r1, [r7, #20]
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	613b      	str	r3, [r7, #16]
   return(result);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e5      	bne.n	80045f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004636:	bf00      	nop
 8004638:	3754      	adds	r7, #84	@ 0x54
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
	...

08004644 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004648:	b0c0      	sub	sp, #256	@ 0x100
 800464a:	af00      	add	r7, sp, #0
 800464c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004660:	68d9      	ldr	r1, [r3, #12]
 8004662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	ea40 0301 	orr.w	r3, r0, r1
 800466c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800466e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	431a      	orrs	r2, r3
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	431a      	orrs	r2, r3
 8004684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800469c:	f021 010c 	bic.w	r1, r1, #12
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80046aa:	430b      	orrs	r3, r1
 80046ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80046ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046be:	6999      	ldr	r1, [r3, #24]
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	ea40 0301 	orr.w	r3, r0, r1
 80046ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b8f      	ldr	r3, [pc, #572]	@ (8004910 <UART_SetConfig+0x2cc>)
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d005      	beq.n	80046e4 <UART_SetConfig+0xa0>
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	4b8d      	ldr	r3, [pc, #564]	@ (8004914 <UART_SetConfig+0x2d0>)
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d104      	bne.n	80046ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046e4:	f7fe fe0a 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 80046e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80046ec:	e003      	b.n	80046f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046ee:	f7fe fdf1 	bl	80032d4 <HAL_RCC_GetPCLK1Freq>
 80046f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004700:	f040 810c 	bne.w	800491c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004708:	2200      	movs	r2, #0
 800470a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800470e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004712:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004716:	4622      	mov	r2, r4
 8004718:	462b      	mov	r3, r5
 800471a:	1891      	adds	r1, r2, r2
 800471c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800471e:	415b      	adcs	r3, r3
 8004720:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004722:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004726:	4621      	mov	r1, r4
 8004728:	eb12 0801 	adds.w	r8, r2, r1
 800472c:	4629      	mov	r1, r5
 800472e:	eb43 0901 	adc.w	r9, r3, r1
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800473e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004742:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004746:	4690      	mov	r8, r2
 8004748:	4699      	mov	r9, r3
 800474a:	4623      	mov	r3, r4
 800474c:	eb18 0303 	adds.w	r3, r8, r3
 8004750:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004754:	462b      	mov	r3, r5
 8004756:	eb49 0303 	adc.w	r3, r9, r3
 800475a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800475e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800476a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800476e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004772:	460b      	mov	r3, r1
 8004774:	18db      	adds	r3, r3, r3
 8004776:	653b      	str	r3, [r7, #80]	@ 0x50
 8004778:	4613      	mov	r3, r2
 800477a:	eb42 0303 	adc.w	r3, r2, r3
 800477e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004780:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004784:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004788:	f7fb fd9a 	bl	80002c0 <__aeabi_uldivmod>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4b61      	ldr	r3, [pc, #388]	@ (8004918 <UART_SetConfig+0x2d4>)
 8004792:	fba3 2302 	umull	r2, r3, r3, r2
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	011c      	lsls	r4, r3, #4
 800479a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80047a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80047ac:	4642      	mov	r2, r8
 80047ae:	464b      	mov	r3, r9
 80047b0:	1891      	adds	r1, r2, r2
 80047b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80047b4:	415b      	adcs	r3, r3
 80047b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80047bc:	4641      	mov	r1, r8
 80047be:	eb12 0a01 	adds.w	sl, r2, r1
 80047c2:	4649      	mov	r1, r9
 80047c4:	eb43 0b01 	adc.w	fp, r3, r1
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047dc:	4692      	mov	sl, r2
 80047de:	469b      	mov	fp, r3
 80047e0:	4643      	mov	r3, r8
 80047e2:	eb1a 0303 	adds.w	r3, sl, r3
 80047e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047ea:	464b      	mov	r3, r9
 80047ec:	eb4b 0303 	adc.w	r3, fp, r3
 80047f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004800:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004804:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004808:	460b      	mov	r3, r1
 800480a:	18db      	adds	r3, r3, r3
 800480c:	643b      	str	r3, [r7, #64]	@ 0x40
 800480e:	4613      	mov	r3, r2
 8004810:	eb42 0303 	adc.w	r3, r2, r3
 8004814:	647b      	str	r3, [r7, #68]	@ 0x44
 8004816:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800481a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800481e:	f7fb fd4f 	bl	80002c0 <__aeabi_uldivmod>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	4611      	mov	r1, r2
 8004828:	4b3b      	ldr	r3, [pc, #236]	@ (8004918 <UART_SetConfig+0x2d4>)
 800482a:	fba3 2301 	umull	r2, r3, r3, r1
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	2264      	movs	r2, #100	@ 0x64
 8004832:	fb02 f303 	mul.w	r3, r2, r3
 8004836:	1acb      	subs	r3, r1, r3
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800483e:	4b36      	ldr	r3, [pc, #216]	@ (8004918 <UART_SetConfig+0x2d4>)
 8004840:	fba3 2302 	umull	r2, r3, r3, r2
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800484c:	441c      	add	r4, r3
 800484e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004852:	2200      	movs	r2, #0
 8004854:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004858:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800485c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004860:	4642      	mov	r2, r8
 8004862:	464b      	mov	r3, r9
 8004864:	1891      	adds	r1, r2, r2
 8004866:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004868:	415b      	adcs	r3, r3
 800486a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800486c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004870:	4641      	mov	r1, r8
 8004872:	1851      	adds	r1, r2, r1
 8004874:	6339      	str	r1, [r7, #48]	@ 0x30
 8004876:	4649      	mov	r1, r9
 8004878:	414b      	adcs	r3, r1
 800487a:	637b      	str	r3, [r7, #52]	@ 0x34
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004888:	4659      	mov	r1, fp
 800488a:	00cb      	lsls	r3, r1, #3
 800488c:	4651      	mov	r1, sl
 800488e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004892:	4651      	mov	r1, sl
 8004894:	00ca      	lsls	r2, r1, #3
 8004896:	4610      	mov	r0, r2
 8004898:	4619      	mov	r1, r3
 800489a:	4603      	mov	r3, r0
 800489c:	4642      	mov	r2, r8
 800489e:	189b      	adds	r3, r3, r2
 80048a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048a4:	464b      	mov	r3, r9
 80048a6:	460a      	mov	r2, r1
 80048a8:	eb42 0303 	adc.w	r3, r2, r3
 80048ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80048bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80048c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80048c4:	460b      	mov	r3, r1
 80048c6:	18db      	adds	r3, r3, r3
 80048c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048ca:	4613      	mov	r3, r2
 80048cc:	eb42 0303 	adc.w	r3, r2, r3
 80048d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80048da:	f7fb fcf1 	bl	80002c0 <__aeabi_uldivmod>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004918 <UART_SetConfig+0x2d4>)
 80048e4:	fba3 1302 	umull	r1, r3, r3, r2
 80048e8:	095b      	lsrs	r3, r3, #5
 80048ea:	2164      	movs	r1, #100	@ 0x64
 80048ec:	fb01 f303 	mul.w	r3, r1, r3
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	3332      	adds	r3, #50	@ 0x32
 80048f6:	4a08      	ldr	r2, [pc, #32]	@ (8004918 <UART_SetConfig+0x2d4>)
 80048f8:	fba2 2303 	umull	r2, r3, r2, r3
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	f003 0207 	and.w	r2, r3, #7
 8004902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4422      	add	r2, r4
 800490a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800490c:	e106      	b.n	8004b1c <UART_SetConfig+0x4d8>
 800490e:	bf00      	nop
 8004910:	40011000 	.word	0x40011000
 8004914:	40011400 	.word	0x40011400
 8004918:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800491c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004920:	2200      	movs	r2, #0
 8004922:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004926:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800492a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800492e:	4642      	mov	r2, r8
 8004930:	464b      	mov	r3, r9
 8004932:	1891      	adds	r1, r2, r2
 8004934:	6239      	str	r1, [r7, #32]
 8004936:	415b      	adcs	r3, r3
 8004938:	627b      	str	r3, [r7, #36]	@ 0x24
 800493a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800493e:	4641      	mov	r1, r8
 8004940:	1854      	adds	r4, r2, r1
 8004942:	4649      	mov	r1, r9
 8004944:	eb43 0501 	adc.w	r5, r3, r1
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	00eb      	lsls	r3, r5, #3
 8004952:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004956:	00e2      	lsls	r2, r4, #3
 8004958:	4614      	mov	r4, r2
 800495a:	461d      	mov	r5, r3
 800495c:	4643      	mov	r3, r8
 800495e:	18e3      	adds	r3, r4, r3
 8004960:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004964:	464b      	mov	r3, r9
 8004966:	eb45 0303 	adc.w	r3, r5, r3
 800496a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800496e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800497a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800498a:	4629      	mov	r1, r5
 800498c:	008b      	lsls	r3, r1, #2
 800498e:	4621      	mov	r1, r4
 8004990:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004994:	4621      	mov	r1, r4
 8004996:	008a      	lsls	r2, r1, #2
 8004998:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800499c:	f7fb fc90 	bl	80002c0 <__aeabi_uldivmod>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4b60      	ldr	r3, [pc, #384]	@ (8004b28 <UART_SetConfig+0x4e4>)
 80049a6:	fba3 2302 	umull	r2, r3, r3, r2
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	011c      	lsls	r4, r3, #4
 80049ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80049c0:	4642      	mov	r2, r8
 80049c2:	464b      	mov	r3, r9
 80049c4:	1891      	adds	r1, r2, r2
 80049c6:	61b9      	str	r1, [r7, #24]
 80049c8:	415b      	adcs	r3, r3
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049d0:	4641      	mov	r1, r8
 80049d2:	1851      	adds	r1, r2, r1
 80049d4:	6139      	str	r1, [r7, #16]
 80049d6:	4649      	mov	r1, r9
 80049d8:	414b      	adcs	r3, r1
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049e8:	4659      	mov	r1, fp
 80049ea:	00cb      	lsls	r3, r1, #3
 80049ec:	4651      	mov	r1, sl
 80049ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049f2:	4651      	mov	r1, sl
 80049f4:	00ca      	lsls	r2, r1, #3
 80049f6:	4610      	mov	r0, r2
 80049f8:	4619      	mov	r1, r3
 80049fa:	4603      	mov	r3, r0
 80049fc:	4642      	mov	r2, r8
 80049fe:	189b      	adds	r3, r3, r2
 8004a00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a04:	464b      	mov	r3, r9
 8004a06:	460a      	mov	r2, r1
 8004a08:	eb42 0303 	adc.w	r3, r2, r3
 8004a0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a28:	4649      	mov	r1, r9
 8004a2a:	008b      	lsls	r3, r1, #2
 8004a2c:	4641      	mov	r1, r8
 8004a2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a32:	4641      	mov	r1, r8
 8004a34:	008a      	lsls	r2, r1, #2
 8004a36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a3a:	f7fb fc41 	bl	80002c0 <__aeabi_uldivmod>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4611      	mov	r1, r2
 8004a44:	4b38      	ldr	r3, [pc, #224]	@ (8004b28 <UART_SetConfig+0x4e4>)
 8004a46:	fba3 2301 	umull	r2, r3, r3, r1
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	2264      	movs	r2, #100	@ 0x64
 8004a4e:	fb02 f303 	mul.w	r3, r2, r3
 8004a52:	1acb      	subs	r3, r1, r3
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	3332      	adds	r3, #50	@ 0x32
 8004a58:	4a33      	ldr	r2, [pc, #204]	@ (8004b28 <UART_SetConfig+0x4e4>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a64:	441c      	add	r4, r3
 8004a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a74:	4642      	mov	r2, r8
 8004a76:	464b      	mov	r3, r9
 8004a78:	1891      	adds	r1, r2, r2
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	415b      	adcs	r3, r3
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a84:	4641      	mov	r1, r8
 8004a86:	1851      	adds	r1, r2, r1
 8004a88:	6039      	str	r1, [r7, #0]
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	414b      	adcs	r3, r1
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a9c:	4659      	mov	r1, fp
 8004a9e:	00cb      	lsls	r3, r1, #3
 8004aa0:	4651      	mov	r1, sl
 8004aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aa6:	4651      	mov	r1, sl
 8004aa8:	00ca      	lsls	r2, r1, #3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	4619      	mov	r1, r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	189b      	adds	r3, r3, r2
 8004ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	460a      	mov	r2, r1
 8004aba:	eb42 0303 	adc.w	r3, r2, r3
 8004abe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004aca:	667a      	str	r2, [r7, #100]	@ 0x64
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ad8:	4649      	mov	r1, r9
 8004ada:	008b      	lsls	r3, r1, #2
 8004adc:	4641      	mov	r1, r8
 8004ade:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ae2:	4641      	mov	r1, r8
 8004ae4:	008a      	lsls	r2, r1, #2
 8004ae6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004aea:	f7fb fbe9 	bl	80002c0 <__aeabi_uldivmod>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b28 <UART_SetConfig+0x4e4>)
 8004af4:	fba3 1302 	umull	r1, r3, r3, r2
 8004af8:	095b      	lsrs	r3, r3, #5
 8004afa:	2164      	movs	r1, #100	@ 0x64
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	3332      	adds	r3, #50	@ 0x32
 8004b06:	4a08      	ldr	r2, [pc, #32]	@ (8004b28 <UART_SetConfig+0x4e4>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	f003 020f 	and.w	r2, r3, #15
 8004b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4422      	add	r2, r4
 8004b1a:	609a      	str	r2, [r3, #8]
}
 8004b1c:	bf00      	nop
 8004b1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b22:	46bd      	mov	sp, r7
 8004b24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b28:	51eb851f 	.word	0x51eb851f

08004b2c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	b480      	push	{r7}
 8004b30:	b085      	sub	sp, #20
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	f107 001c 	add.w	r0, r7, #28
 8004b3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004b42:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004b44:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004b46:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8004b4a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004b4e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8004b52:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8004b56:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8004b66:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	b004      	add	sp, #16
 8004b80:	4770      	bx	lr

08004b82 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0303 	and.w	r3, r3, #3
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004bf2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004bf8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004bfe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004c0e:	f023 030f 	bic.w	r3, r3, #15
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	b2db      	uxtb	r3, r3
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3314      	adds	r3, #20
 8004c50:	461a      	mov	r2, r3
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	4413      	add	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
}  
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c8e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004c94:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004c9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca6:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0

}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004cce:	2310      	movs	r3, #16
 8004cd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cd2:	2340      	movs	r3, #64	@ 0x40
 8004cd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ce0:	f107 0308 	add.w	r3, r7, #8
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff ff74 	bl	8004bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf0:	2110      	movs	r1, #16
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f9d8 	bl	80050a8 <SDMMC_GetCmdResp1>
 8004cf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004d12:	2311      	movs	r3, #17
 8004d14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d16:	2340      	movs	r3, #64	@ 0x40
 8004d18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d24:	f107 0308 	add.w	r3, r7, #8
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff ff52 	bl	8004bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d34:	2111      	movs	r1, #17
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f9b6 	bl	80050a8 <SDMMC_GetCmdResp1>
 8004d3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d3e:	69fb      	ldr	r3, [r7, #28]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3720      	adds	r7, #32
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004d56:	2312      	movs	r3, #18
 8004d58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d5a:	2340      	movs	r3, #64	@ 0x40
 8004d5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d68:	f107 0308 	add.w	r3, r7, #8
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff ff30 	bl	8004bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d78:	2112      	movs	r1, #18
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f994 	bl	80050a8 <SDMMC_GetCmdResp1>
 8004d80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d82:	69fb      	ldr	r3, [r7, #28]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3720      	adds	r7, #32
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004d9a:	2318      	movs	r3, #24
 8004d9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d9e:	2340      	movs	r3, #64	@ 0x40
 8004da0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004da6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004daa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dac:	f107 0308 	add.w	r3, r7, #8
 8004db0:	4619      	mov	r1, r3
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff ff0e 	bl	8004bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dbc:	2118      	movs	r1, #24
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f972 	bl	80050a8 <SDMMC_GetCmdResp1>
 8004dc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dc6:	69fb      	ldr	r3, [r7, #28]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3720      	adds	r7, #32
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004dde:	2319      	movs	r3, #25
 8004de0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004de2:	2340      	movs	r3, #64	@ 0x40
 8004de4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004df0:	f107 0308 	add.w	r3, r7, #8
 8004df4:	4619      	mov	r1, r3
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff feec 	bl	8004bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e00:	2119      	movs	r1, #25
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f950 	bl	80050a8 <SDMMC_GetCmdResp1>
 8004e08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e0a:	69fb      	ldr	r3, [r7, #28]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004e20:	230c      	movs	r3, #12
 8004e22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e24:	2340      	movs	r3, #64	@ 0x40
 8004e26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e32:	f107 0308 	add.w	r3, r7, #8
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff fecb 	bl	8004bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004e3e:	4a05      	ldr	r2, [pc, #20]	@ (8004e54 <SDMMC_CmdStopTransfer+0x40>)
 8004e40:	210c      	movs	r1, #12
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f930 	bl	80050a8 <SDMMC_GetCmdResp1>
 8004e48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e4a:	69fb      	ldr	r3, [r7, #28]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3720      	adds	r7, #32
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	05f5e100 	.word	0x05f5e100

08004e58 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	@ 0x28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004e68:	2307      	movs	r3, #7
 8004e6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e6c:	2340      	movs	r3, #64	@ 0x40
 8004e6e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e70:	2300      	movs	r3, #0
 8004e72:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e78:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e7a:	f107 0310 	add.w	r3, r7, #16
 8004e7e:	4619      	mov	r1, r3
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f7ff fea7 	bl	8004bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e8a:	2107      	movs	r1, #7
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f90b 	bl	80050a8 <SDMMC_GetCmdResp1>
 8004e92:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8004e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3728      	adds	r7, #40	@ 0x28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b088      	sub	sp, #32
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004eb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004eba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ebc:	f107 0308 	add.w	r3, r7, #8
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff fe86 	bl	8004bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fa61 	bl	8005390 <SDMMC_GetCmdError>
 8004ece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3720      	adds	r7, #32
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b088      	sub	sp, #32
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004eea:	23c0      	movs	r3, #192	@ 0xc0
 8004eec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ef6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ef8:	f107 0308 	add.w	r3, r7, #8
 8004efc:	4619      	mov	r1, r3
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff fe68 	bl	8004bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f9bd 	bl	8005284 <SDMMC_GetCmdResp2>
 8004f0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f0c:	69fb      	ldr	r3, [r7, #28]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3720      	adds	r7, #32
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b088      	sub	sp, #32
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004f24:	2309      	movs	r3, #9
 8004f26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004f28:	23c0      	movs	r3, #192	@ 0xc0
 8004f2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f36:	f107 0308 	add.w	r3, r7, #8
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff fe49 	bl	8004bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f99e 	bl	8005284 <SDMMC_GetCmdResp2>
 8004f48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3720      	adds	r7, #32
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDIOx Pointer to SDIO register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDIO_TypeDef *SDIOx, uint16_t RCA)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	807b      	strh	r3, [r7, #2]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 8004f60:	887b      	ldrh	r3, [r7, #2]
 8004f62:	041b      	lsls	r3, r3, #16
 8004f64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004f66:	2303      	movs	r3, #3
 8004f68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f6a:	2340      	movs	r3, #64	@ 0x40
 8004f6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f78:	f107 0308 	add.w	r3, r7, #8
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fe28 	bl	8004bd4 <SDIO_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_REL_ADDR, SDIO_CMDTIMEOUT);
 8004f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f88:	2103      	movs	r1, #3
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f88c 	bl	80050a8 <SDMMC_GetCmdResp1>
 8004f90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f92:	69fb      	ldr	r3, [r7, #28]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3720      	adds	r7, #32
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004faa:	230d      	movs	r3, #13
 8004fac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fae:	2340      	movs	r3, #64	@ 0x40
 8004fb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fbc:	f107 0308 	add.w	r3, r7, #8
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fe06 	bl	8004bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fcc:	210d      	movs	r1, #13
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f86a 	bl	80050a8 <SDMMC_GetCmdResp1>
 8004fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3720      	adds	r7, #32
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <SDMMC_CmdOpCondition>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ff2:	2340      	movs	r3, #64	@ 0x40
 8004ff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ffa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ffe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005000:	f107 0308 	add.w	r3, r7, #8
 8005004:	4619      	mov	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff fde4 	bl	8004bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f981 	bl	8005314 <SDMMC_GetCmdResp3>
 8005012:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005014:	69fb      	ldr	r3, [r7, #28]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3720      	adds	r7, #32
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <SDMMC_CmdSwitch>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b088      	sub	sp, #32
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN */
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800502c:	2306      	movs	r3, #6
 800502e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005030:	2340      	movs	r3, #64	@ 0x40
 8005032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800503c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800503e:	f107 0308 	add.w	r3, r7, #8
 8005042:	4619      	mov	r1, r3
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7ff fdc5 	bl	8004bd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SWITCH, SDIO_CMDTIMEOUT);
 800504a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800504e:	2106      	movs	r1, #6
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f829 	bl	80050a8 <SDMMC_GetCmdResp1>
 8005056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005058:	69fb      	ldr	r3, [r7, #28]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3720      	adds	r7, #32
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <SDMMC_CmdSendEXTCSD>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b088      	sub	sp, #32
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005070:	2308      	movs	r3, #8
 8005072:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005074:	2340      	movs	r3, #64	@ 0x40
 8005076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005078:	2300      	movs	r3, #0
 800507a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800507c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005080:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005082:	f107 0308 	add.w	r3, r7, #8
 8005086:	4619      	mov	r1, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff fda3 	bl	8004bd4 <SDIO_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SEND_EXT_CSD,SDIO_CMDTIMEOUT);
 800508e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005092:	2108      	movs	r1, #8
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f807 	bl	80050a8 <SDMMC_GetCmdResp1>
 800509a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800509c:	69fb      	ldr	r3, [r7, #28]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3720      	adds	r7, #32
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	460b      	mov	r3, r1
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80050b6:	4b70      	ldr	r3, [pc, #448]	@ (8005278 <SDMMC_GetCmdResp1+0x1d0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a70      	ldr	r2, [pc, #448]	@ (800527c <SDMMC_GetCmdResp1+0x1d4>)
 80050bc:	fba2 2303 	umull	r2, r3, r2, r3
 80050c0:	0a5a      	lsrs	r2, r3, #9
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	fb02 f303 	mul.w	r3, r2, r3
 80050c8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	1e5a      	subs	r2, r3, #1
 80050ce:	61fa      	str	r2, [r7, #28]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d102      	bne.n	80050da <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80050d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80050d8:	e0c9      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050de:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0ef      	beq.n	80050ca <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1ea      	bne.n	80050ca <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d004      	beq.n	800510a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2204      	movs	r2, #4
 8005104:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005106:	2304      	movs	r3, #4
 8005108:	e0b1      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d004      	beq.n	8005120 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800511c:	2301      	movs	r3, #1
 800511e:	e0a6      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	22c5      	movs	r2, #197	@ 0xc5
 8005124:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f7ff fd7e 	bl	8004c28 <SDIO_GetCommandResponse>
 800512c:	4603      	mov	r3, r0
 800512e:	461a      	mov	r2, r3
 8005130:	7afb      	ldrb	r3, [r7, #11]
 8005132:	4293      	cmp	r3, r2
 8005134:	d001      	beq.n	800513a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005136:	2301      	movs	r3, #1
 8005138:	e099      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800513a:	2100      	movs	r1, #0
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f7ff fd80 	bl	8004c42 <SDIO_GetResponse>
 8005142:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4b4e      	ldr	r3, [pc, #312]	@ (8005280 <SDMMC_GetCmdResp1+0x1d8>)
 8005148:	4013      	ands	r3, r2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800514e:	2300      	movs	r3, #0
 8005150:	e08d      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2b00      	cmp	r3, #0
 8005156:	da02      	bge.n	800515e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005158:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800515c:	e087      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005168:	2340      	movs	r3, #64	@ 0x40
 800516a:	e080      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005176:	2380      	movs	r3, #128	@ 0x80
 8005178:	e079      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005184:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005188:	e071      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005194:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005198:	e069      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80051a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051a8:	e061      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80051b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80051b8:	e059      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80051c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051c8:	e051      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80051d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051d8:	e049      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80051e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80051e8:	e041      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80051f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051f8:	e039      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005204:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005208:	e031      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005214:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005218:	e029      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005224:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005228:	e021      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005234:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005238:	e019      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005244:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005248:	e011      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005254:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005258:	e009      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005264:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005268:	e001      	b.n	800526e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800526a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800526e:	4618      	mov	r0, r3
 8005270:	3720      	adds	r7, #32
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20000000 	.word	0x20000000
 800527c:	10624dd3 	.word	0x10624dd3
 8005280:	fdffe008 	.word	0xfdffe008

08005284 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800528c:	4b1f      	ldr	r3, [pc, #124]	@ (800530c <SDMMC_GetCmdResp2+0x88>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1f      	ldr	r2, [pc, #124]	@ (8005310 <SDMMC_GetCmdResp2+0x8c>)
 8005292:	fba2 2303 	umull	r2, r3, r2, r3
 8005296:	0a5b      	lsrs	r3, r3, #9
 8005298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800529c:	fb02 f303 	mul.w	r3, r2, r3
 80052a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1e5a      	subs	r2, r3, #1
 80052a6:	60fa      	str	r2, [r7, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d102      	bne.n	80052b2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80052b0:	e026      	b.n	8005300 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0ef      	beq.n	80052a2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1ea      	bne.n	80052a2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d004      	beq.n	80052e2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2204      	movs	r2, #4
 80052dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80052de:	2304      	movs	r3, #4
 80052e0:	e00e      	b.n	8005300 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e003      	b.n	8005300 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	22c5      	movs	r2, #197	@ 0xc5
 80052fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	20000000 	.word	0x20000000
 8005310:	10624dd3 	.word	0x10624dd3

08005314 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800531c:	4b1a      	ldr	r3, [pc, #104]	@ (8005388 <SDMMC_GetCmdResp3+0x74>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1a      	ldr	r2, [pc, #104]	@ (800538c <SDMMC_GetCmdResp3+0x78>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	0a5b      	lsrs	r3, r3, #9
 8005328:	f241 3288 	movw	r2, #5000	@ 0x1388
 800532c:	fb02 f303 	mul.w	r3, r2, r3
 8005330:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1e5a      	subs	r2, r3, #1
 8005336:	60fa      	str	r2, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d102      	bne.n	8005342 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800533c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005340:	e01b      	b.n	800537a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005346:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0ef      	beq.n	8005332 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1ea      	bne.n	8005332 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d004      	beq.n	8005372 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2204      	movs	r2, #4
 800536c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800536e:	2304      	movs	r3, #4
 8005370:	e003      	b.n	800537a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	22c5      	movs	r2, #197	@ 0xc5
 8005376:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20000000 	.word	0x20000000
 800538c:	10624dd3 	.word	0x10624dd3

08005390 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005398:	4b11      	ldr	r3, [pc, #68]	@ (80053e0 <SDMMC_GetCmdError+0x50>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a11      	ldr	r2, [pc, #68]	@ (80053e4 <SDMMC_GetCmdError+0x54>)
 800539e:	fba2 2303 	umull	r2, r3, r2, r3
 80053a2:	0a5b      	lsrs	r3, r3, #9
 80053a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053a8:	fb02 f303 	mul.w	r3, r2, r3
 80053ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	1e5a      	subs	r2, r3, #1
 80053b2:	60fa      	str	r2, [r7, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d102      	bne.n	80053be <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80053bc:	e009      	b.n	80053d2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0f1      	beq.n	80053ae <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	22c5      	movs	r2, #197	@ 0xc5
 80053ce:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	20000000 	.word	0x20000000
 80053e4:	10624dd3 	.word	0x10624dd3

080053e8 <sniprintf>:
 80053e8:	b40c      	push	{r2, r3}
 80053ea:	b530      	push	{r4, r5, lr}
 80053ec:	4b17      	ldr	r3, [pc, #92]	@ (800544c <sniprintf+0x64>)
 80053ee:	1e0c      	subs	r4, r1, #0
 80053f0:	681d      	ldr	r5, [r3, #0]
 80053f2:	b09d      	sub	sp, #116	@ 0x74
 80053f4:	da08      	bge.n	8005408 <sniprintf+0x20>
 80053f6:	238b      	movs	r3, #139	@ 0x8b
 80053f8:	602b      	str	r3, [r5, #0]
 80053fa:	f04f 30ff 	mov.w	r0, #4294967295
 80053fe:	b01d      	add	sp, #116	@ 0x74
 8005400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005404:	b002      	add	sp, #8
 8005406:	4770      	bx	lr
 8005408:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800540c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005410:	bf14      	ite	ne
 8005412:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005416:	4623      	moveq	r3, r4
 8005418:	9304      	str	r3, [sp, #16]
 800541a:	9307      	str	r3, [sp, #28]
 800541c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005420:	9002      	str	r0, [sp, #8]
 8005422:	9006      	str	r0, [sp, #24]
 8005424:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005428:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800542a:	ab21      	add	r3, sp, #132	@ 0x84
 800542c:	a902      	add	r1, sp, #8
 800542e:	4628      	mov	r0, r5
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	f000 f9a5 	bl	8005780 <_svfiprintf_r>
 8005436:	1c43      	adds	r3, r0, #1
 8005438:	bfbc      	itt	lt
 800543a:	238b      	movlt	r3, #139	@ 0x8b
 800543c:	602b      	strlt	r3, [r5, #0]
 800543e:	2c00      	cmp	r4, #0
 8005440:	d0dd      	beq.n	80053fe <sniprintf+0x16>
 8005442:	9b02      	ldr	r3, [sp, #8]
 8005444:	2200      	movs	r2, #0
 8005446:	701a      	strb	r2, [r3, #0]
 8005448:	e7d9      	b.n	80053fe <sniprintf+0x16>
 800544a:	bf00      	nop
 800544c:	2000000c 	.word	0x2000000c

08005450 <memcmp>:
 8005450:	b510      	push	{r4, lr}
 8005452:	3901      	subs	r1, #1
 8005454:	4402      	add	r2, r0
 8005456:	4290      	cmp	r0, r2
 8005458:	d101      	bne.n	800545e <memcmp+0xe>
 800545a:	2000      	movs	r0, #0
 800545c:	e005      	b.n	800546a <memcmp+0x1a>
 800545e:	7803      	ldrb	r3, [r0, #0]
 8005460:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005464:	42a3      	cmp	r3, r4
 8005466:	d001      	beq.n	800546c <memcmp+0x1c>
 8005468:	1b18      	subs	r0, r3, r4
 800546a:	bd10      	pop	{r4, pc}
 800546c:	3001      	adds	r0, #1
 800546e:	e7f2      	b.n	8005456 <memcmp+0x6>

08005470 <memset>:
 8005470:	4402      	add	r2, r0
 8005472:	4603      	mov	r3, r0
 8005474:	4293      	cmp	r3, r2
 8005476:	d100      	bne.n	800547a <memset+0xa>
 8005478:	4770      	bx	lr
 800547a:	f803 1b01 	strb.w	r1, [r3], #1
 800547e:	e7f9      	b.n	8005474 <memset+0x4>

08005480 <__errno>:
 8005480:	4b01      	ldr	r3, [pc, #4]	@ (8005488 <__errno+0x8>)
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	2000000c 	.word	0x2000000c

0800548c <__libc_init_array>:
 800548c:	b570      	push	{r4, r5, r6, lr}
 800548e:	4d0d      	ldr	r5, [pc, #52]	@ (80054c4 <__libc_init_array+0x38>)
 8005490:	4c0d      	ldr	r4, [pc, #52]	@ (80054c8 <__libc_init_array+0x3c>)
 8005492:	1b64      	subs	r4, r4, r5
 8005494:	10a4      	asrs	r4, r4, #2
 8005496:	2600      	movs	r6, #0
 8005498:	42a6      	cmp	r6, r4
 800549a:	d109      	bne.n	80054b0 <__libc_init_array+0x24>
 800549c:	4d0b      	ldr	r5, [pc, #44]	@ (80054cc <__libc_init_array+0x40>)
 800549e:	4c0c      	ldr	r4, [pc, #48]	@ (80054d0 <__libc_init_array+0x44>)
 80054a0:	f000 fc66 	bl	8005d70 <_init>
 80054a4:	1b64      	subs	r4, r4, r5
 80054a6:	10a4      	asrs	r4, r4, #2
 80054a8:	2600      	movs	r6, #0
 80054aa:	42a6      	cmp	r6, r4
 80054ac:	d105      	bne.n	80054ba <__libc_init_array+0x2e>
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
 80054b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b4:	4798      	blx	r3
 80054b6:	3601      	adds	r6, #1
 80054b8:	e7ee      	b.n	8005498 <__libc_init_array+0xc>
 80054ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80054be:	4798      	blx	r3
 80054c0:	3601      	adds	r6, #1
 80054c2:	e7f2      	b.n	80054aa <__libc_init_array+0x1e>
 80054c4:	08005f70 	.word	0x08005f70
 80054c8:	08005f70 	.word	0x08005f70
 80054cc:	08005f70 	.word	0x08005f70
 80054d0:	08005f74 	.word	0x08005f74

080054d4 <__retarget_lock_acquire_recursive>:
 80054d4:	4770      	bx	lr

080054d6 <__retarget_lock_release_recursive>:
 80054d6:	4770      	bx	lr

080054d8 <_free_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4605      	mov	r5, r0
 80054dc:	2900      	cmp	r1, #0
 80054de:	d041      	beq.n	8005564 <_free_r+0x8c>
 80054e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054e4:	1f0c      	subs	r4, r1, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	bfb8      	it	lt
 80054ea:	18e4      	addlt	r4, r4, r3
 80054ec:	f000 f8e0 	bl	80056b0 <__malloc_lock>
 80054f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005568 <_free_r+0x90>)
 80054f2:	6813      	ldr	r3, [r2, #0]
 80054f4:	b933      	cbnz	r3, 8005504 <_free_r+0x2c>
 80054f6:	6063      	str	r3, [r4, #4]
 80054f8:	6014      	str	r4, [r2, #0]
 80054fa:	4628      	mov	r0, r5
 80054fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005500:	f000 b8dc 	b.w	80056bc <__malloc_unlock>
 8005504:	42a3      	cmp	r3, r4
 8005506:	d908      	bls.n	800551a <_free_r+0x42>
 8005508:	6820      	ldr	r0, [r4, #0]
 800550a:	1821      	adds	r1, r4, r0
 800550c:	428b      	cmp	r3, r1
 800550e:	bf01      	itttt	eq
 8005510:	6819      	ldreq	r1, [r3, #0]
 8005512:	685b      	ldreq	r3, [r3, #4]
 8005514:	1809      	addeq	r1, r1, r0
 8005516:	6021      	streq	r1, [r4, #0]
 8005518:	e7ed      	b.n	80054f6 <_free_r+0x1e>
 800551a:	461a      	mov	r2, r3
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	b10b      	cbz	r3, 8005524 <_free_r+0x4c>
 8005520:	42a3      	cmp	r3, r4
 8005522:	d9fa      	bls.n	800551a <_free_r+0x42>
 8005524:	6811      	ldr	r1, [r2, #0]
 8005526:	1850      	adds	r0, r2, r1
 8005528:	42a0      	cmp	r0, r4
 800552a:	d10b      	bne.n	8005544 <_free_r+0x6c>
 800552c:	6820      	ldr	r0, [r4, #0]
 800552e:	4401      	add	r1, r0
 8005530:	1850      	adds	r0, r2, r1
 8005532:	4283      	cmp	r3, r0
 8005534:	6011      	str	r1, [r2, #0]
 8005536:	d1e0      	bne.n	80054fa <_free_r+0x22>
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	6053      	str	r3, [r2, #4]
 800553e:	4408      	add	r0, r1
 8005540:	6010      	str	r0, [r2, #0]
 8005542:	e7da      	b.n	80054fa <_free_r+0x22>
 8005544:	d902      	bls.n	800554c <_free_r+0x74>
 8005546:	230c      	movs	r3, #12
 8005548:	602b      	str	r3, [r5, #0]
 800554a:	e7d6      	b.n	80054fa <_free_r+0x22>
 800554c:	6820      	ldr	r0, [r4, #0]
 800554e:	1821      	adds	r1, r4, r0
 8005550:	428b      	cmp	r3, r1
 8005552:	bf04      	itt	eq
 8005554:	6819      	ldreq	r1, [r3, #0]
 8005556:	685b      	ldreq	r3, [r3, #4]
 8005558:	6063      	str	r3, [r4, #4]
 800555a:	bf04      	itt	eq
 800555c:	1809      	addeq	r1, r1, r0
 800555e:	6021      	streq	r1, [r4, #0]
 8005560:	6054      	str	r4, [r2, #4]
 8005562:	e7ca      	b.n	80054fa <_free_r+0x22>
 8005564:	bd38      	pop	{r3, r4, r5, pc}
 8005566:	bf00      	nop
 8005568:	2000054c 	.word	0x2000054c

0800556c <sbrk_aligned>:
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	4e0f      	ldr	r6, [pc, #60]	@ (80055ac <sbrk_aligned+0x40>)
 8005570:	460c      	mov	r4, r1
 8005572:	6831      	ldr	r1, [r6, #0]
 8005574:	4605      	mov	r5, r0
 8005576:	b911      	cbnz	r1, 800557e <sbrk_aligned+0x12>
 8005578:	f000 fba6 	bl	8005cc8 <_sbrk_r>
 800557c:	6030      	str	r0, [r6, #0]
 800557e:	4621      	mov	r1, r4
 8005580:	4628      	mov	r0, r5
 8005582:	f000 fba1 	bl	8005cc8 <_sbrk_r>
 8005586:	1c43      	adds	r3, r0, #1
 8005588:	d103      	bne.n	8005592 <sbrk_aligned+0x26>
 800558a:	f04f 34ff 	mov.w	r4, #4294967295
 800558e:	4620      	mov	r0, r4
 8005590:	bd70      	pop	{r4, r5, r6, pc}
 8005592:	1cc4      	adds	r4, r0, #3
 8005594:	f024 0403 	bic.w	r4, r4, #3
 8005598:	42a0      	cmp	r0, r4
 800559a:	d0f8      	beq.n	800558e <sbrk_aligned+0x22>
 800559c:	1a21      	subs	r1, r4, r0
 800559e:	4628      	mov	r0, r5
 80055a0:	f000 fb92 	bl	8005cc8 <_sbrk_r>
 80055a4:	3001      	adds	r0, #1
 80055a6:	d1f2      	bne.n	800558e <sbrk_aligned+0x22>
 80055a8:	e7ef      	b.n	800558a <sbrk_aligned+0x1e>
 80055aa:	bf00      	nop
 80055ac:	20000548 	.word	0x20000548

080055b0 <_malloc_r>:
 80055b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055b4:	1ccd      	adds	r5, r1, #3
 80055b6:	f025 0503 	bic.w	r5, r5, #3
 80055ba:	3508      	adds	r5, #8
 80055bc:	2d0c      	cmp	r5, #12
 80055be:	bf38      	it	cc
 80055c0:	250c      	movcc	r5, #12
 80055c2:	2d00      	cmp	r5, #0
 80055c4:	4606      	mov	r6, r0
 80055c6:	db01      	blt.n	80055cc <_malloc_r+0x1c>
 80055c8:	42a9      	cmp	r1, r5
 80055ca:	d904      	bls.n	80055d6 <_malloc_r+0x26>
 80055cc:	230c      	movs	r3, #12
 80055ce:	6033      	str	r3, [r6, #0]
 80055d0:	2000      	movs	r0, #0
 80055d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056ac <_malloc_r+0xfc>
 80055da:	f000 f869 	bl	80056b0 <__malloc_lock>
 80055de:	f8d8 3000 	ldr.w	r3, [r8]
 80055e2:	461c      	mov	r4, r3
 80055e4:	bb44      	cbnz	r4, 8005638 <_malloc_r+0x88>
 80055e6:	4629      	mov	r1, r5
 80055e8:	4630      	mov	r0, r6
 80055ea:	f7ff ffbf 	bl	800556c <sbrk_aligned>
 80055ee:	1c43      	adds	r3, r0, #1
 80055f0:	4604      	mov	r4, r0
 80055f2:	d158      	bne.n	80056a6 <_malloc_r+0xf6>
 80055f4:	f8d8 4000 	ldr.w	r4, [r8]
 80055f8:	4627      	mov	r7, r4
 80055fa:	2f00      	cmp	r7, #0
 80055fc:	d143      	bne.n	8005686 <_malloc_r+0xd6>
 80055fe:	2c00      	cmp	r4, #0
 8005600:	d04b      	beq.n	800569a <_malloc_r+0xea>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	4639      	mov	r1, r7
 8005606:	4630      	mov	r0, r6
 8005608:	eb04 0903 	add.w	r9, r4, r3
 800560c:	f000 fb5c 	bl	8005cc8 <_sbrk_r>
 8005610:	4581      	cmp	r9, r0
 8005612:	d142      	bne.n	800569a <_malloc_r+0xea>
 8005614:	6821      	ldr	r1, [r4, #0]
 8005616:	1a6d      	subs	r5, r5, r1
 8005618:	4629      	mov	r1, r5
 800561a:	4630      	mov	r0, r6
 800561c:	f7ff ffa6 	bl	800556c <sbrk_aligned>
 8005620:	3001      	adds	r0, #1
 8005622:	d03a      	beq.n	800569a <_malloc_r+0xea>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	442b      	add	r3, r5
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	f8d8 3000 	ldr.w	r3, [r8]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	bb62      	cbnz	r2, 800568c <_malloc_r+0xdc>
 8005632:	f8c8 7000 	str.w	r7, [r8]
 8005636:	e00f      	b.n	8005658 <_malloc_r+0xa8>
 8005638:	6822      	ldr	r2, [r4, #0]
 800563a:	1b52      	subs	r2, r2, r5
 800563c:	d420      	bmi.n	8005680 <_malloc_r+0xd0>
 800563e:	2a0b      	cmp	r2, #11
 8005640:	d917      	bls.n	8005672 <_malloc_r+0xc2>
 8005642:	1961      	adds	r1, r4, r5
 8005644:	42a3      	cmp	r3, r4
 8005646:	6025      	str	r5, [r4, #0]
 8005648:	bf18      	it	ne
 800564a:	6059      	strne	r1, [r3, #4]
 800564c:	6863      	ldr	r3, [r4, #4]
 800564e:	bf08      	it	eq
 8005650:	f8c8 1000 	streq.w	r1, [r8]
 8005654:	5162      	str	r2, [r4, r5]
 8005656:	604b      	str	r3, [r1, #4]
 8005658:	4630      	mov	r0, r6
 800565a:	f000 f82f 	bl	80056bc <__malloc_unlock>
 800565e:	f104 000b 	add.w	r0, r4, #11
 8005662:	1d23      	adds	r3, r4, #4
 8005664:	f020 0007 	bic.w	r0, r0, #7
 8005668:	1ac2      	subs	r2, r0, r3
 800566a:	bf1c      	itt	ne
 800566c:	1a1b      	subne	r3, r3, r0
 800566e:	50a3      	strne	r3, [r4, r2]
 8005670:	e7af      	b.n	80055d2 <_malloc_r+0x22>
 8005672:	6862      	ldr	r2, [r4, #4]
 8005674:	42a3      	cmp	r3, r4
 8005676:	bf0c      	ite	eq
 8005678:	f8c8 2000 	streq.w	r2, [r8]
 800567c:	605a      	strne	r2, [r3, #4]
 800567e:	e7eb      	b.n	8005658 <_malloc_r+0xa8>
 8005680:	4623      	mov	r3, r4
 8005682:	6864      	ldr	r4, [r4, #4]
 8005684:	e7ae      	b.n	80055e4 <_malloc_r+0x34>
 8005686:	463c      	mov	r4, r7
 8005688:	687f      	ldr	r7, [r7, #4]
 800568a:	e7b6      	b.n	80055fa <_malloc_r+0x4a>
 800568c:	461a      	mov	r2, r3
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	42a3      	cmp	r3, r4
 8005692:	d1fb      	bne.n	800568c <_malloc_r+0xdc>
 8005694:	2300      	movs	r3, #0
 8005696:	6053      	str	r3, [r2, #4]
 8005698:	e7de      	b.n	8005658 <_malloc_r+0xa8>
 800569a:	230c      	movs	r3, #12
 800569c:	6033      	str	r3, [r6, #0]
 800569e:	4630      	mov	r0, r6
 80056a0:	f000 f80c 	bl	80056bc <__malloc_unlock>
 80056a4:	e794      	b.n	80055d0 <_malloc_r+0x20>
 80056a6:	6005      	str	r5, [r0, #0]
 80056a8:	e7d6      	b.n	8005658 <_malloc_r+0xa8>
 80056aa:	bf00      	nop
 80056ac:	2000054c 	.word	0x2000054c

080056b0 <__malloc_lock>:
 80056b0:	4801      	ldr	r0, [pc, #4]	@ (80056b8 <__malloc_lock+0x8>)
 80056b2:	f7ff bf0f 	b.w	80054d4 <__retarget_lock_acquire_recursive>
 80056b6:	bf00      	nop
 80056b8:	20000544 	.word	0x20000544

080056bc <__malloc_unlock>:
 80056bc:	4801      	ldr	r0, [pc, #4]	@ (80056c4 <__malloc_unlock+0x8>)
 80056be:	f7ff bf0a 	b.w	80054d6 <__retarget_lock_release_recursive>
 80056c2:	bf00      	nop
 80056c4:	20000544 	.word	0x20000544

080056c8 <__ssputs_r>:
 80056c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056cc:	688e      	ldr	r6, [r1, #8]
 80056ce:	461f      	mov	r7, r3
 80056d0:	42be      	cmp	r6, r7
 80056d2:	680b      	ldr	r3, [r1, #0]
 80056d4:	4682      	mov	sl, r0
 80056d6:	460c      	mov	r4, r1
 80056d8:	4690      	mov	r8, r2
 80056da:	d82d      	bhi.n	8005738 <__ssputs_r+0x70>
 80056dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80056e4:	d026      	beq.n	8005734 <__ssputs_r+0x6c>
 80056e6:	6965      	ldr	r5, [r4, #20]
 80056e8:	6909      	ldr	r1, [r1, #16]
 80056ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056ee:	eba3 0901 	sub.w	r9, r3, r1
 80056f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056f6:	1c7b      	adds	r3, r7, #1
 80056f8:	444b      	add	r3, r9
 80056fa:	106d      	asrs	r5, r5, #1
 80056fc:	429d      	cmp	r5, r3
 80056fe:	bf38      	it	cc
 8005700:	461d      	movcc	r5, r3
 8005702:	0553      	lsls	r3, r2, #21
 8005704:	d527      	bpl.n	8005756 <__ssputs_r+0x8e>
 8005706:	4629      	mov	r1, r5
 8005708:	f7ff ff52 	bl	80055b0 <_malloc_r>
 800570c:	4606      	mov	r6, r0
 800570e:	b360      	cbz	r0, 800576a <__ssputs_r+0xa2>
 8005710:	6921      	ldr	r1, [r4, #16]
 8005712:	464a      	mov	r2, r9
 8005714:	f000 fae8 	bl	8005ce8 <memcpy>
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800571e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005722:	81a3      	strh	r3, [r4, #12]
 8005724:	6126      	str	r6, [r4, #16]
 8005726:	6165      	str	r5, [r4, #20]
 8005728:	444e      	add	r6, r9
 800572a:	eba5 0509 	sub.w	r5, r5, r9
 800572e:	6026      	str	r6, [r4, #0]
 8005730:	60a5      	str	r5, [r4, #8]
 8005732:	463e      	mov	r6, r7
 8005734:	42be      	cmp	r6, r7
 8005736:	d900      	bls.n	800573a <__ssputs_r+0x72>
 8005738:	463e      	mov	r6, r7
 800573a:	6820      	ldr	r0, [r4, #0]
 800573c:	4632      	mov	r2, r6
 800573e:	4641      	mov	r1, r8
 8005740:	f000 faa8 	bl	8005c94 <memmove>
 8005744:	68a3      	ldr	r3, [r4, #8]
 8005746:	1b9b      	subs	r3, r3, r6
 8005748:	60a3      	str	r3, [r4, #8]
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	4433      	add	r3, r6
 800574e:	6023      	str	r3, [r4, #0]
 8005750:	2000      	movs	r0, #0
 8005752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005756:	462a      	mov	r2, r5
 8005758:	f000 fad4 	bl	8005d04 <_realloc_r>
 800575c:	4606      	mov	r6, r0
 800575e:	2800      	cmp	r0, #0
 8005760:	d1e0      	bne.n	8005724 <__ssputs_r+0x5c>
 8005762:	6921      	ldr	r1, [r4, #16]
 8005764:	4650      	mov	r0, sl
 8005766:	f7ff feb7 	bl	80054d8 <_free_r>
 800576a:	230c      	movs	r3, #12
 800576c:	f8ca 3000 	str.w	r3, [sl]
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005776:	81a3      	strh	r3, [r4, #12]
 8005778:	f04f 30ff 	mov.w	r0, #4294967295
 800577c:	e7e9      	b.n	8005752 <__ssputs_r+0x8a>
	...

08005780 <_svfiprintf_r>:
 8005780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005784:	4698      	mov	r8, r3
 8005786:	898b      	ldrh	r3, [r1, #12]
 8005788:	061b      	lsls	r3, r3, #24
 800578a:	b09d      	sub	sp, #116	@ 0x74
 800578c:	4607      	mov	r7, r0
 800578e:	460d      	mov	r5, r1
 8005790:	4614      	mov	r4, r2
 8005792:	d510      	bpl.n	80057b6 <_svfiprintf_r+0x36>
 8005794:	690b      	ldr	r3, [r1, #16]
 8005796:	b973      	cbnz	r3, 80057b6 <_svfiprintf_r+0x36>
 8005798:	2140      	movs	r1, #64	@ 0x40
 800579a:	f7ff ff09 	bl	80055b0 <_malloc_r>
 800579e:	6028      	str	r0, [r5, #0]
 80057a0:	6128      	str	r0, [r5, #16]
 80057a2:	b930      	cbnz	r0, 80057b2 <_svfiprintf_r+0x32>
 80057a4:	230c      	movs	r3, #12
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	f04f 30ff 	mov.w	r0, #4294967295
 80057ac:	b01d      	add	sp, #116	@ 0x74
 80057ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b2:	2340      	movs	r3, #64	@ 0x40
 80057b4:	616b      	str	r3, [r5, #20]
 80057b6:	2300      	movs	r3, #0
 80057b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ba:	2320      	movs	r3, #32
 80057bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80057c4:	2330      	movs	r3, #48	@ 0x30
 80057c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005964 <_svfiprintf_r+0x1e4>
 80057ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80057ce:	f04f 0901 	mov.w	r9, #1
 80057d2:	4623      	mov	r3, r4
 80057d4:	469a      	mov	sl, r3
 80057d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057da:	b10a      	cbz	r2, 80057e0 <_svfiprintf_r+0x60>
 80057dc:	2a25      	cmp	r2, #37	@ 0x25
 80057de:	d1f9      	bne.n	80057d4 <_svfiprintf_r+0x54>
 80057e0:	ebba 0b04 	subs.w	fp, sl, r4
 80057e4:	d00b      	beq.n	80057fe <_svfiprintf_r+0x7e>
 80057e6:	465b      	mov	r3, fp
 80057e8:	4622      	mov	r2, r4
 80057ea:	4629      	mov	r1, r5
 80057ec:	4638      	mov	r0, r7
 80057ee:	f7ff ff6b 	bl	80056c8 <__ssputs_r>
 80057f2:	3001      	adds	r0, #1
 80057f4:	f000 80a7 	beq.w	8005946 <_svfiprintf_r+0x1c6>
 80057f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057fa:	445a      	add	r2, fp
 80057fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80057fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 809f 	beq.w	8005946 <_svfiprintf_r+0x1c6>
 8005808:	2300      	movs	r3, #0
 800580a:	f04f 32ff 	mov.w	r2, #4294967295
 800580e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005812:	f10a 0a01 	add.w	sl, sl, #1
 8005816:	9304      	str	r3, [sp, #16]
 8005818:	9307      	str	r3, [sp, #28]
 800581a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800581e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005820:	4654      	mov	r4, sl
 8005822:	2205      	movs	r2, #5
 8005824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005828:	484e      	ldr	r0, [pc, #312]	@ (8005964 <_svfiprintf_r+0x1e4>)
 800582a:	f7fa fcf9 	bl	8000220 <memchr>
 800582e:	9a04      	ldr	r2, [sp, #16]
 8005830:	b9d8      	cbnz	r0, 800586a <_svfiprintf_r+0xea>
 8005832:	06d0      	lsls	r0, r2, #27
 8005834:	bf44      	itt	mi
 8005836:	2320      	movmi	r3, #32
 8005838:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800583c:	0711      	lsls	r1, r2, #28
 800583e:	bf44      	itt	mi
 8005840:	232b      	movmi	r3, #43	@ 0x2b
 8005842:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005846:	f89a 3000 	ldrb.w	r3, [sl]
 800584a:	2b2a      	cmp	r3, #42	@ 0x2a
 800584c:	d015      	beq.n	800587a <_svfiprintf_r+0xfa>
 800584e:	9a07      	ldr	r2, [sp, #28]
 8005850:	4654      	mov	r4, sl
 8005852:	2000      	movs	r0, #0
 8005854:	f04f 0c0a 	mov.w	ip, #10
 8005858:	4621      	mov	r1, r4
 800585a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800585e:	3b30      	subs	r3, #48	@ 0x30
 8005860:	2b09      	cmp	r3, #9
 8005862:	d94b      	bls.n	80058fc <_svfiprintf_r+0x17c>
 8005864:	b1b0      	cbz	r0, 8005894 <_svfiprintf_r+0x114>
 8005866:	9207      	str	r2, [sp, #28]
 8005868:	e014      	b.n	8005894 <_svfiprintf_r+0x114>
 800586a:	eba0 0308 	sub.w	r3, r0, r8
 800586e:	fa09 f303 	lsl.w	r3, r9, r3
 8005872:	4313      	orrs	r3, r2
 8005874:	9304      	str	r3, [sp, #16]
 8005876:	46a2      	mov	sl, r4
 8005878:	e7d2      	b.n	8005820 <_svfiprintf_r+0xa0>
 800587a:	9b03      	ldr	r3, [sp, #12]
 800587c:	1d19      	adds	r1, r3, #4
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	9103      	str	r1, [sp, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	bfbb      	ittet	lt
 8005886:	425b      	neglt	r3, r3
 8005888:	f042 0202 	orrlt.w	r2, r2, #2
 800588c:	9307      	strge	r3, [sp, #28]
 800588e:	9307      	strlt	r3, [sp, #28]
 8005890:	bfb8      	it	lt
 8005892:	9204      	strlt	r2, [sp, #16]
 8005894:	7823      	ldrb	r3, [r4, #0]
 8005896:	2b2e      	cmp	r3, #46	@ 0x2e
 8005898:	d10a      	bne.n	80058b0 <_svfiprintf_r+0x130>
 800589a:	7863      	ldrb	r3, [r4, #1]
 800589c:	2b2a      	cmp	r3, #42	@ 0x2a
 800589e:	d132      	bne.n	8005906 <_svfiprintf_r+0x186>
 80058a0:	9b03      	ldr	r3, [sp, #12]
 80058a2:	1d1a      	adds	r2, r3, #4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	9203      	str	r2, [sp, #12]
 80058a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058ac:	3402      	adds	r4, #2
 80058ae:	9305      	str	r3, [sp, #20]
 80058b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005974 <_svfiprintf_r+0x1f4>
 80058b4:	7821      	ldrb	r1, [r4, #0]
 80058b6:	2203      	movs	r2, #3
 80058b8:	4650      	mov	r0, sl
 80058ba:	f7fa fcb1 	bl	8000220 <memchr>
 80058be:	b138      	cbz	r0, 80058d0 <_svfiprintf_r+0x150>
 80058c0:	9b04      	ldr	r3, [sp, #16]
 80058c2:	eba0 000a 	sub.w	r0, r0, sl
 80058c6:	2240      	movs	r2, #64	@ 0x40
 80058c8:	4082      	lsls	r2, r0
 80058ca:	4313      	orrs	r3, r2
 80058cc:	3401      	adds	r4, #1
 80058ce:	9304      	str	r3, [sp, #16]
 80058d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058d4:	4824      	ldr	r0, [pc, #144]	@ (8005968 <_svfiprintf_r+0x1e8>)
 80058d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058da:	2206      	movs	r2, #6
 80058dc:	f7fa fca0 	bl	8000220 <memchr>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d036      	beq.n	8005952 <_svfiprintf_r+0x1d2>
 80058e4:	4b21      	ldr	r3, [pc, #132]	@ (800596c <_svfiprintf_r+0x1ec>)
 80058e6:	bb1b      	cbnz	r3, 8005930 <_svfiprintf_r+0x1b0>
 80058e8:	9b03      	ldr	r3, [sp, #12]
 80058ea:	3307      	adds	r3, #7
 80058ec:	f023 0307 	bic.w	r3, r3, #7
 80058f0:	3308      	adds	r3, #8
 80058f2:	9303      	str	r3, [sp, #12]
 80058f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058f6:	4433      	add	r3, r6
 80058f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80058fa:	e76a      	b.n	80057d2 <_svfiprintf_r+0x52>
 80058fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005900:	460c      	mov	r4, r1
 8005902:	2001      	movs	r0, #1
 8005904:	e7a8      	b.n	8005858 <_svfiprintf_r+0xd8>
 8005906:	2300      	movs	r3, #0
 8005908:	3401      	adds	r4, #1
 800590a:	9305      	str	r3, [sp, #20]
 800590c:	4619      	mov	r1, r3
 800590e:	f04f 0c0a 	mov.w	ip, #10
 8005912:	4620      	mov	r0, r4
 8005914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005918:	3a30      	subs	r2, #48	@ 0x30
 800591a:	2a09      	cmp	r2, #9
 800591c:	d903      	bls.n	8005926 <_svfiprintf_r+0x1a6>
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0c6      	beq.n	80058b0 <_svfiprintf_r+0x130>
 8005922:	9105      	str	r1, [sp, #20]
 8005924:	e7c4      	b.n	80058b0 <_svfiprintf_r+0x130>
 8005926:	fb0c 2101 	mla	r1, ip, r1, r2
 800592a:	4604      	mov	r4, r0
 800592c:	2301      	movs	r3, #1
 800592e:	e7f0      	b.n	8005912 <_svfiprintf_r+0x192>
 8005930:	ab03      	add	r3, sp, #12
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	462a      	mov	r2, r5
 8005936:	4b0e      	ldr	r3, [pc, #56]	@ (8005970 <_svfiprintf_r+0x1f0>)
 8005938:	a904      	add	r1, sp, #16
 800593a:	4638      	mov	r0, r7
 800593c:	f3af 8000 	nop.w
 8005940:	1c42      	adds	r2, r0, #1
 8005942:	4606      	mov	r6, r0
 8005944:	d1d6      	bne.n	80058f4 <_svfiprintf_r+0x174>
 8005946:	89ab      	ldrh	r3, [r5, #12]
 8005948:	065b      	lsls	r3, r3, #25
 800594a:	f53f af2d 	bmi.w	80057a8 <_svfiprintf_r+0x28>
 800594e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005950:	e72c      	b.n	80057ac <_svfiprintf_r+0x2c>
 8005952:	ab03      	add	r3, sp, #12
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	462a      	mov	r2, r5
 8005958:	4b05      	ldr	r3, [pc, #20]	@ (8005970 <_svfiprintf_r+0x1f0>)
 800595a:	a904      	add	r1, sp, #16
 800595c:	4638      	mov	r0, r7
 800595e:	f000 f879 	bl	8005a54 <_printf_i>
 8005962:	e7ed      	b.n	8005940 <_svfiprintf_r+0x1c0>
 8005964:	08005f34 	.word	0x08005f34
 8005968:	08005f3e 	.word	0x08005f3e
 800596c:	00000000 	.word	0x00000000
 8005970:	080056c9 	.word	0x080056c9
 8005974:	08005f3a 	.word	0x08005f3a

08005978 <_printf_common>:
 8005978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800597c:	4616      	mov	r6, r2
 800597e:	4698      	mov	r8, r3
 8005980:	688a      	ldr	r2, [r1, #8]
 8005982:	690b      	ldr	r3, [r1, #16]
 8005984:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005988:	4293      	cmp	r3, r2
 800598a:	bfb8      	it	lt
 800598c:	4613      	movlt	r3, r2
 800598e:	6033      	str	r3, [r6, #0]
 8005990:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005994:	4607      	mov	r7, r0
 8005996:	460c      	mov	r4, r1
 8005998:	b10a      	cbz	r2, 800599e <_printf_common+0x26>
 800599a:	3301      	adds	r3, #1
 800599c:	6033      	str	r3, [r6, #0]
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	0699      	lsls	r1, r3, #26
 80059a2:	bf42      	ittt	mi
 80059a4:	6833      	ldrmi	r3, [r6, #0]
 80059a6:	3302      	addmi	r3, #2
 80059a8:	6033      	strmi	r3, [r6, #0]
 80059aa:	6825      	ldr	r5, [r4, #0]
 80059ac:	f015 0506 	ands.w	r5, r5, #6
 80059b0:	d106      	bne.n	80059c0 <_printf_common+0x48>
 80059b2:	f104 0a19 	add.w	sl, r4, #25
 80059b6:	68e3      	ldr	r3, [r4, #12]
 80059b8:	6832      	ldr	r2, [r6, #0]
 80059ba:	1a9b      	subs	r3, r3, r2
 80059bc:	42ab      	cmp	r3, r5
 80059be:	dc26      	bgt.n	8005a0e <_printf_common+0x96>
 80059c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059c4:	6822      	ldr	r2, [r4, #0]
 80059c6:	3b00      	subs	r3, #0
 80059c8:	bf18      	it	ne
 80059ca:	2301      	movne	r3, #1
 80059cc:	0692      	lsls	r2, r2, #26
 80059ce:	d42b      	bmi.n	8005a28 <_printf_common+0xb0>
 80059d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059d4:	4641      	mov	r1, r8
 80059d6:	4638      	mov	r0, r7
 80059d8:	47c8      	blx	r9
 80059da:	3001      	adds	r0, #1
 80059dc:	d01e      	beq.n	8005a1c <_printf_common+0xa4>
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	6922      	ldr	r2, [r4, #16]
 80059e2:	f003 0306 	and.w	r3, r3, #6
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	bf02      	ittt	eq
 80059ea:	68e5      	ldreq	r5, [r4, #12]
 80059ec:	6833      	ldreq	r3, [r6, #0]
 80059ee:	1aed      	subeq	r5, r5, r3
 80059f0:	68a3      	ldr	r3, [r4, #8]
 80059f2:	bf0c      	ite	eq
 80059f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059f8:	2500      	movne	r5, #0
 80059fa:	4293      	cmp	r3, r2
 80059fc:	bfc4      	itt	gt
 80059fe:	1a9b      	subgt	r3, r3, r2
 8005a00:	18ed      	addgt	r5, r5, r3
 8005a02:	2600      	movs	r6, #0
 8005a04:	341a      	adds	r4, #26
 8005a06:	42b5      	cmp	r5, r6
 8005a08:	d11a      	bne.n	8005a40 <_printf_common+0xc8>
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	e008      	b.n	8005a20 <_printf_common+0xa8>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4652      	mov	r2, sl
 8005a12:	4641      	mov	r1, r8
 8005a14:	4638      	mov	r0, r7
 8005a16:	47c8      	blx	r9
 8005a18:	3001      	adds	r0, #1
 8005a1a:	d103      	bne.n	8005a24 <_printf_common+0xac>
 8005a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a24:	3501      	adds	r5, #1
 8005a26:	e7c6      	b.n	80059b6 <_printf_common+0x3e>
 8005a28:	18e1      	adds	r1, r4, r3
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	2030      	movs	r0, #48	@ 0x30
 8005a2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a32:	4422      	add	r2, r4
 8005a34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a3c:	3302      	adds	r3, #2
 8005a3e:	e7c7      	b.n	80059d0 <_printf_common+0x58>
 8005a40:	2301      	movs	r3, #1
 8005a42:	4622      	mov	r2, r4
 8005a44:	4641      	mov	r1, r8
 8005a46:	4638      	mov	r0, r7
 8005a48:	47c8      	blx	r9
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	d0e6      	beq.n	8005a1c <_printf_common+0xa4>
 8005a4e:	3601      	adds	r6, #1
 8005a50:	e7d9      	b.n	8005a06 <_printf_common+0x8e>
	...

08005a54 <_printf_i>:
 8005a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a58:	7e0f      	ldrb	r7, [r1, #24]
 8005a5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a5c:	2f78      	cmp	r7, #120	@ 0x78
 8005a5e:	4691      	mov	r9, r2
 8005a60:	4680      	mov	r8, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	469a      	mov	sl, r3
 8005a66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a6a:	d807      	bhi.n	8005a7c <_printf_i+0x28>
 8005a6c:	2f62      	cmp	r7, #98	@ 0x62
 8005a6e:	d80a      	bhi.n	8005a86 <_printf_i+0x32>
 8005a70:	2f00      	cmp	r7, #0
 8005a72:	f000 80d2 	beq.w	8005c1a <_printf_i+0x1c6>
 8005a76:	2f58      	cmp	r7, #88	@ 0x58
 8005a78:	f000 80b9 	beq.w	8005bee <_printf_i+0x19a>
 8005a7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a84:	e03a      	b.n	8005afc <_printf_i+0xa8>
 8005a86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a8a:	2b15      	cmp	r3, #21
 8005a8c:	d8f6      	bhi.n	8005a7c <_printf_i+0x28>
 8005a8e:	a101      	add	r1, pc, #4	@ (adr r1, 8005a94 <_printf_i+0x40>)
 8005a90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a94:	08005aed 	.word	0x08005aed
 8005a98:	08005b01 	.word	0x08005b01
 8005a9c:	08005a7d 	.word	0x08005a7d
 8005aa0:	08005a7d 	.word	0x08005a7d
 8005aa4:	08005a7d 	.word	0x08005a7d
 8005aa8:	08005a7d 	.word	0x08005a7d
 8005aac:	08005b01 	.word	0x08005b01
 8005ab0:	08005a7d 	.word	0x08005a7d
 8005ab4:	08005a7d 	.word	0x08005a7d
 8005ab8:	08005a7d 	.word	0x08005a7d
 8005abc:	08005a7d 	.word	0x08005a7d
 8005ac0:	08005c01 	.word	0x08005c01
 8005ac4:	08005b2b 	.word	0x08005b2b
 8005ac8:	08005bbb 	.word	0x08005bbb
 8005acc:	08005a7d 	.word	0x08005a7d
 8005ad0:	08005a7d 	.word	0x08005a7d
 8005ad4:	08005c23 	.word	0x08005c23
 8005ad8:	08005a7d 	.word	0x08005a7d
 8005adc:	08005b2b 	.word	0x08005b2b
 8005ae0:	08005a7d 	.word	0x08005a7d
 8005ae4:	08005a7d 	.word	0x08005a7d
 8005ae8:	08005bc3 	.word	0x08005bc3
 8005aec:	6833      	ldr	r3, [r6, #0]
 8005aee:	1d1a      	adds	r2, r3, #4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6032      	str	r2, [r6, #0]
 8005af4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005af8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005afc:	2301      	movs	r3, #1
 8005afe:	e09d      	b.n	8005c3c <_printf_i+0x1e8>
 8005b00:	6833      	ldr	r3, [r6, #0]
 8005b02:	6820      	ldr	r0, [r4, #0]
 8005b04:	1d19      	adds	r1, r3, #4
 8005b06:	6031      	str	r1, [r6, #0]
 8005b08:	0606      	lsls	r6, r0, #24
 8005b0a:	d501      	bpl.n	8005b10 <_printf_i+0xbc>
 8005b0c:	681d      	ldr	r5, [r3, #0]
 8005b0e:	e003      	b.n	8005b18 <_printf_i+0xc4>
 8005b10:	0645      	lsls	r5, r0, #25
 8005b12:	d5fb      	bpl.n	8005b0c <_printf_i+0xb8>
 8005b14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b18:	2d00      	cmp	r5, #0
 8005b1a:	da03      	bge.n	8005b24 <_printf_i+0xd0>
 8005b1c:	232d      	movs	r3, #45	@ 0x2d
 8005b1e:	426d      	negs	r5, r5
 8005b20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b24:	4859      	ldr	r0, [pc, #356]	@ (8005c8c <_printf_i+0x238>)
 8005b26:	230a      	movs	r3, #10
 8005b28:	e011      	b.n	8005b4e <_printf_i+0xfa>
 8005b2a:	6821      	ldr	r1, [r4, #0]
 8005b2c:	6833      	ldr	r3, [r6, #0]
 8005b2e:	0608      	lsls	r0, r1, #24
 8005b30:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b34:	d402      	bmi.n	8005b3c <_printf_i+0xe8>
 8005b36:	0649      	lsls	r1, r1, #25
 8005b38:	bf48      	it	mi
 8005b3a:	b2ad      	uxthmi	r5, r5
 8005b3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b3e:	4853      	ldr	r0, [pc, #332]	@ (8005c8c <_printf_i+0x238>)
 8005b40:	6033      	str	r3, [r6, #0]
 8005b42:	bf14      	ite	ne
 8005b44:	230a      	movne	r3, #10
 8005b46:	2308      	moveq	r3, #8
 8005b48:	2100      	movs	r1, #0
 8005b4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b4e:	6866      	ldr	r6, [r4, #4]
 8005b50:	60a6      	str	r6, [r4, #8]
 8005b52:	2e00      	cmp	r6, #0
 8005b54:	bfa2      	ittt	ge
 8005b56:	6821      	ldrge	r1, [r4, #0]
 8005b58:	f021 0104 	bicge.w	r1, r1, #4
 8005b5c:	6021      	strge	r1, [r4, #0]
 8005b5e:	b90d      	cbnz	r5, 8005b64 <_printf_i+0x110>
 8005b60:	2e00      	cmp	r6, #0
 8005b62:	d04b      	beq.n	8005bfc <_printf_i+0x1a8>
 8005b64:	4616      	mov	r6, r2
 8005b66:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b6a:	fb03 5711 	mls	r7, r3, r1, r5
 8005b6e:	5dc7      	ldrb	r7, [r0, r7]
 8005b70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b74:	462f      	mov	r7, r5
 8005b76:	42bb      	cmp	r3, r7
 8005b78:	460d      	mov	r5, r1
 8005b7a:	d9f4      	bls.n	8005b66 <_printf_i+0x112>
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d10b      	bne.n	8005b98 <_printf_i+0x144>
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	07df      	lsls	r7, r3, #31
 8005b84:	d508      	bpl.n	8005b98 <_printf_i+0x144>
 8005b86:	6923      	ldr	r3, [r4, #16]
 8005b88:	6861      	ldr	r1, [r4, #4]
 8005b8a:	4299      	cmp	r1, r3
 8005b8c:	bfde      	ittt	le
 8005b8e:	2330      	movle	r3, #48	@ 0x30
 8005b90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b98:	1b92      	subs	r2, r2, r6
 8005b9a:	6122      	str	r2, [r4, #16]
 8005b9c:	f8cd a000 	str.w	sl, [sp]
 8005ba0:	464b      	mov	r3, r9
 8005ba2:	aa03      	add	r2, sp, #12
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	4640      	mov	r0, r8
 8005ba8:	f7ff fee6 	bl	8005978 <_printf_common>
 8005bac:	3001      	adds	r0, #1
 8005bae:	d14a      	bne.n	8005c46 <_printf_i+0x1f2>
 8005bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb4:	b004      	add	sp, #16
 8005bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	f043 0320 	orr.w	r3, r3, #32
 8005bc0:	6023      	str	r3, [r4, #0]
 8005bc2:	4833      	ldr	r0, [pc, #204]	@ (8005c90 <_printf_i+0x23c>)
 8005bc4:	2778      	movs	r7, #120	@ 0x78
 8005bc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	6831      	ldr	r1, [r6, #0]
 8005bce:	061f      	lsls	r7, r3, #24
 8005bd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bd4:	d402      	bmi.n	8005bdc <_printf_i+0x188>
 8005bd6:	065f      	lsls	r7, r3, #25
 8005bd8:	bf48      	it	mi
 8005bda:	b2ad      	uxthmi	r5, r5
 8005bdc:	6031      	str	r1, [r6, #0]
 8005bde:	07d9      	lsls	r1, r3, #31
 8005be0:	bf44      	itt	mi
 8005be2:	f043 0320 	orrmi.w	r3, r3, #32
 8005be6:	6023      	strmi	r3, [r4, #0]
 8005be8:	b11d      	cbz	r5, 8005bf2 <_printf_i+0x19e>
 8005bea:	2310      	movs	r3, #16
 8005bec:	e7ac      	b.n	8005b48 <_printf_i+0xf4>
 8005bee:	4827      	ldr	r0, [pc, #156]	@ (8005c8c <_printf_i+0x238>)
 8005bf0:	e7e9      	b.n	8005bc6 <_printf_i+0x172>
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	f023 0320 	bic.w	r3, r3, #32
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	e7f6      	b.n	8005bea <_printf_i+0x196>
 8005bfc:	4616      	mov	r6, r2
 8005bfe:	e7bd      	b.n	8005b7c <_printf_i+0x128>
 8005c00:	6833      	ldr	r3, [r6, #0]
 8005c02:	6825      	ldr	r5, [r4, #0]
 8005c04:	6961      	ldr	r1, [r4, #20]
 8005c06:	1d18      	adds	r0, r3, #4
 8005c08:	6030      	str	r0, [r6, #0]
 8005c0a:	062e      	lsls	r6, r5, #24
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	d501      	bpl.n	8005c14 <_printf_i+0x1c0>
 8005c10:	6019      	str	r1, [r3, #0]
 8005c12:	e002      	b.n	8005c1a <_printf_i+0x1c6>
 8005c14:	0668      	lsls	r0, r5, #25
 8005c16:	d5fb      	bpl.n	8005c10 <_printf_i+0x1bc>
 8005c18:	8019      	strh	r1, [r3, #0]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	6123      	str	r3, [r4, #16]
 8005c1e:	4616      	mov	r6, r2
 8005c20:	e7bc      	b.n	8005b9c <_printf_i+0x148>
 8005c22:	6833      	ldr	r3, [r6, #0]
 8005c24:	1d1a      	adds	r2, r3, #4
 8005c26:	6032      	str	r2, [r6, #0]
 8005c28:	681e      	ldr	r6, [r3, #0]
 8005c2a:	6862      	ldr	r2, [r4, #4]
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4630      	mov	r0, r6
 8005c30:	f7fa faf6 	bl	8000220 <memchr>
 8005c34:	b108      	cbz	r0, 8005c3a <_printf_i+0x1e6>
 8005c36:	1b80      	subs	r0, r0, r6
 8005c38:	6060      	str	r0, [r4, #4]
 8005c3a:	6863      	ldr	r3, [r4, #4]
 8005c3c:	6123      	str	r3, [r4, #16]
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c44:	e7aa      	b.n	8005b9c <_printf_i+0x148>
 8005c46:	6923      	ldr	r3, [r4, #16]
 8005c48:	4632      	mov	r2, r6
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	4640      	mov	r0, r8
 8005c4e:	47d0      	blx	sl
 8005c50:	3001      	adds	r0, #1
 8005c52:	d0ad      	beq.n	8005bb0 <_printf_i+0x15c>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	079b      	lsls	r3, r3, #30
 8005c58:	d413      	bmi.n	8005c82 <_printf_i+0x22e>
 8005c5a:	68e0      	ldr	r0, [r4, #12]
 8005c5c:	9b03      	ldr	r3, [sp, #12]
 8005c5e:	4298      	cmp	r0, r3
 8005c60:	bfb8      	it	lt
 8005c62:	4618      	movlt	r0, r3
 8005c64:	e7a6      	b.n	8005bb4 <_printf_i+0x160>
 8005c66:	2301      	movs	r3, #1
 8005c68:	4632      	mov	r2, r6
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	47d0      	blx	sl
 8005c70:	3001      	adds	r0, #1
 8005c72:	d09d      	beq.n	8005bb0 <_printf_i+0x15c>
 8005c74:	3501      	adds	r5, #1
 8005c76:	68e3      	ldr	r3, [r4, #12]
 8005c78:	9903      	ldr	r1, [sp, #12]
 8005c7a:	1a5b      	subs	r3, r3, r1
 8005c7c:	42ab      	cmp	r3, r5
 8005c7e:	dcf2      	bgt.n	8005c66 <_printf_i+0x212>
 8005c80:	e7eb      	b.n	8005c5a <_printf_i+0x206>
 8005c82:	2500      	movs	r5, #0
 8005c84:	f104 0619 	add.w	r6, r4, #25
 8005c88:	e7f5      	b.n	8005c76 <_printf_i+0x222>
 8005c8a:	bf00      	nop
 8005c8c:	08005f45 	.word	0x08005f45
 8005c90:	08005f56 	.word	0x08005f56

08005c94 <memmove>:
 8005c94:	4288      	cmp	r0, r1
 8005c96:	b510      	push	{r4, lr}
 8005c98:	eb01 0402 	add.w	r4, r1, r2
 8005c9c:	d902      	bls.n	8005ca4 <memmove+0x10>
 8005c9e:	4284      	cmp	r4, r0
 8005ca0:	4623      	mov	r3, r4
 8005ca2:	d807      	bhi.n	8005cb4 <memmove+0x20>
 8005ca4:	1e43      	subs	r3, r0, #1
 8005ca6:	42a1      	cmp	r1, r4
 8005ca8:	d008      	beq.n	8005cbc <memmove+0x28>
 8005caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cb2:	e7f8      	b.n	8005ca6 <memmove+0x12>
 8005cb4:	4402      	add	r2, r0
 8005cb6:	4601      	mov	r1, r0
 8005cb8:	428a      	cmp	r2, r1
 8005cba:	d100      	bne.n	8005cbe <memmove+0x2a>
 8005cbc:	bd10      	pop	{r4, pc}
 8005cbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cc6:	e7f7      	b.n	8005cb8 <memmove+0x24>

08005cc8 <_sbrk_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	4d06      	ldr	r5, [pc, #24]	@ (8005ce4 <_sbrk_r+0x1c>)
 8005ccc:	2300      	movs	r3, #0
 8005cce:	4604      	mov	r4, r0
 8005cd0:	4608      	mov	r0, r1
 8005cd2:	602b      	str	r3, [r5, #0]
 8005cd4:	f7fb f936 	bl	8000f44 <_sbrk>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	d102      	bne.n	8005ce2 <_sbrk_r+0x1a>
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	b103      	cbz	r3, 8005ce2 <_sbrk_r+0x1a>
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	bd38      	pop	{r3, r4, r5, pc}
 8005ce4:	20000540 	.word	0x20000540

08005ce8 <memcpy>:
 8005ce8:	440a      	add	r2, r1
 8005cea:	4291      	cmp	r1, r2
 8005cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cf0:	d100      	bne.n	8005cf4 <memcpy+0xc>
 8005cf2:	4770      	bx	lr
 8005cf4:	b510      	push	{r4, lr}
 8005cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cfe:	4291      	cmp	r1, r2
 8005d00:	d1f9      	bne.n	8005cf6 <memcpy+0xe>
 8005d02:	bd10      	pop	{r4, pc}

08005d04 <_realloc_r>:
 8005d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d08:	4680      	mov	r8, r0
 8005d0a:	4615      	mov	r5, r2
 8005d0c:	460c      	mov	r4, r1
 8005d0e:	b921      	cbnz	r1, 8005d1a <_realloc_r+0x16>
 8005d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d14:	4611      	mov	r1, r2
 8005d16:	f7ff bc4b 	b.w	80055b0 <_malloc_r>
 8005d1a:	b92a      	cbnz	r2, 8005d28 <_realloc_r+0x24>
 8005d1c:	f7ff fbdc 	bl	80054d8 <_free_r>
 8005d20:	2400      	movs	r4, #0
 8005d22:	4620      	mov	r0, r4
 8005d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d28:	f000 f81a 	bl	8005d60 <_malloc_usable_size_r>
 8005d2c:	4285      	cmp	r5, r0
 8005d2e:	4606      	mov	r6, r0
 8005d30:	d802      	bhi.n	8005d38 <_realloc_r+0x34>
 8005d32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005d36:	d8f4      	bhi.n	8005d22 <_realloc_r+0x1e>
 8005d38:	4629      	mov	r1, r5
 8005d3a:	4640      	mov	r0, r8
 8005d3c:	f7ff fc38 	bl	80055b0 <_malloc_r>
 8005d40:	4607      	mov	r7, r0
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d0ec      	beq.n	8005d20 <_realloc_r+0x1c>
 8005d46:	42b5      	cmp	r5, r6
 8005d48:	462a      	mov	r2, r5
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	bf28      	it	cs
 8005d4e:	4632      	movcs	r2, r6
 8005d50:	f7ff ffca 	bl	8005ce8 <memcpy>
 8005d54:	4621      	mov	r1, r4
 8005d56:	4640      	mov	r0, r8
 8005d58:	f7ff fbbe 	bl	80054d8 <_free_r>
 8005d5c:	463c      	mov	r4, r7
 8005d5e:	e7e0      	b.n	8005d22 <_realloc_r+0x1e>

08005d60 <_malloc_usable_size_r>:
 8005d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d64:	1f18      	subs	r0, r3, #4
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	bfbc      	itt	lt
 8005d6a:	580b      	ldrlt	r3, [r1, r0]
 8005d6c:	18c0      	addlt	r0, r0, r3
 8005d6e:	4770      	bx	lr

08005d70 <_init>:
 8005d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d72:	bf00      	nop
 8005d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d76:	bc08      	pop	{r3}
 8005d78:	469e      	mov	lr, r3
 8005d7a:	4770      	bx	lr

08005d7c <_fini>:
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7e:	bf00      	nop
 8005d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d82:	bc08      	pop	{r3}
 8005d84:	469e      	mov	lr, r3
 8005d86:	4770      	bx	lr
