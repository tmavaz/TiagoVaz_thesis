
LoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c78  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08003e48  08003e48  00004e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f60  08003f60  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f60  08003f60  00004f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f68  08003f68  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f68  08003f68  00004f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f6c  08003f6c  00004f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003f70  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  08003fcc  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003fcc  00005268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a421  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a49  00000000  00000000  0000f4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  00010ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006da  00000000  00000000  000117e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021560  00000000  00000000  00011ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbe1  00000000  00000000  00033422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9e57  00000000  00000000  0003f003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108e5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002900  00000000  00000000  00108ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0010b7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003e30 	.word	0x08003e30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003e30 	.word	0x08003e30

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b0a0      	sub	sp, #128	@ 0x80
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fcab 	bl	8000f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f883 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f94f 	bl	8000860 <MX_GPIO_Init>
  MX_SPI2_Init();
 80005c2:	f000 f8ed 	bl	80007a0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80005c6:	f000 f921 	bl	800080c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  // Mensagem de início
  char startMsg[] = "\r\nInicializando transmissor LoRa...\r\n";
 80005ca:	4b39      	ldr	r3, [pc, #228]	@ (80006b0 <main+0x100>)
 80005cc:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80005d0:	461d      	mov	r5, r3
 80005d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005de:	6020      	str	r0, [r4, #0]
 80005e0:	3404      	adds	r4, #4
 80005e2:	8021      	strh	r1, [r4, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)startMsg, strlen(startMsg), HAL_MAX_DELAY);
 80005e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff fe11 	bl	8000210 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	482e      	ldr	r0, [pc, #184]	@ (80006b4 <main+0x104>)
 80005fc:	f002 fbbc 	bl	8002d78 <HAL_UART_Transmit>

  // Inicializar o módulo LoRa RFM95
  while (RFM95_Init() != RFM95_OK) {
 8000600:	e018      	b.n	8000634 <main+0x84>
      // Se falhar, travar execução
      char errMsg[] = "Falha na inicializacao do RFM95! Vou tentar outra vez.\r\n";
 8000602:	4b2d      	ldr	r3, [pc, #180]	@ (80006b8 <main+0x108>)
 8000604:	1d3c      	adds	r4, r7, #4
 8000606:	461d      	mov	r5, r3
 8000608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000618:	c403      	stmia	r4!, {r0, r1}
 800061a:	7022      	strb	r2, [r4, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)errMsg, strlen(errMsg), HAL_MAX_DELAY);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fdf6 	bl	8000210 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	b29a      	uxth	r2, r3
 8000628:	1d39      	adds	r1, r7, #4
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	4821      	ldr	r0, [pc, #132]	@ (80006b4 <main+0x104>)
 8000630:	f002 fba2 	bl	8002d78 <HAL_UART_Transmit>
  while (RFM95_Init() != RFM95_OK) {
 8000634:	f000 fa0e 	bl	8000a54 <RFM95_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1e1      	bne.n	8000602 <main+0x52>
      //HAL_Delay(10);
  }

  // Loop de transmissão periódica
  uint16_t counter = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Montar a mensagem "HELLO #N"
	 sprintf(buffer, "HELLO #%u", counter);
 8000644:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 8000648:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800064c:	491b      	ldr	r1, [pc, #108]	@ (80006bc <main+0x10c>)
 800064e:	4618      	mov	r0, r3
 8000650:	f002 ff4e 	bl	80034f0 <siprintf>
	 uint8_t len = strlen(buffer);
 8000654:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff fdd9 	bl	8000210 <strlen>
 800065e:	4603      	mov	r3, r0
 8000660:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

	 // Enviar a mensagem via LoRa
	 RFM95_SendPacket((uint8_t*)buffer, len);
 8000664:	f897 207d 	ldrb.w	r2, [r7, #125]	@ 0x7d
 8000668:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800066c:	4611      	mov	r1, r2
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fa80 	bl	8000b74 <RFM95_SendPacket>

	 // Mensagem de depuração na UART
	 char dbgMsg[50];
	 sprintf(dbgMsg, "[LoRa] Enviado: %s\r\n", buffer);
 8000674:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4911      	ldr	r1, [pc, #68]	@ (80006c0 <main+0x110>)
 800067c:	4618      	mov	r0, r3
 800067e:	f002 ff37 	bl	80034f0 <siprintf>
	 HAL_UART_Transmit(&huart2, (uint8_t*)dbgMsg, strlen(dbgMsg), HAL_MAX_DELAY);
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fdc3 	bl	8000210 <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	b29a      	uxth	r2, r3
 800068e:	1d39      	adds	r1, r7, #4
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	4807      	ldr	r0, [pc, #28]	@ (80006b4 <main+0x104>)
 8000696:	f002 fb6f 	bl	8002d78 <HAL_UART_Transmit>

	 counter++;              // incrementar contador
 800069a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800069e:	3301      	adds	r3, #1
 80006a0:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
	 HAL_Delay(2000);        // aguardar 2 segundos para próximo envio
 80006a4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006a8:	f000 fca4 	bl	8000ff4 <HAL_Delay>
  {
 80006ac:	bf00      	nop
 80006ae:	e7c9      	b.n	8000644 <main+0x94>
 80006b0:	08003e6c 	.word	0x08003e6c
 80006b4:	200000d0 	.word	0x200000d0
 80006b8:	08003e94 	.word	0x08003e94
 80006bc:	08003e48 	.word	0x08003e48
 80006c0:	08003e54 	.word	0x08003e54

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	@ 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	2234      	movs	r2, #52	@ 0x34
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 ff2c 	bl	8003530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <SystemClock_Config+0xd4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	4a29      	ldr	r2, [pc, #164]	@ (8000798 <SystemClock_Config+0xd4>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f8:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <SystemClock_Config+0xd4>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000704:	2300      	movs	r3, #0
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	4b24      	ldr	r3, [pc, #144]	@ (800079c <SystemClock_Config+0xd8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000710:	4a22      	ldr	r2, [pc, #136]	@ (800079c <SystemClock_Config+0xd8>)
 8000712:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b20      	ldr	r3, [pc, #128]	@ (800079c <SystemClock_Config+0xd8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000738:	2310      	movs	r3, #16
 800073a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800073c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000740:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000742:	2304      	movs	r3, #4
 8000744:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000746:	2302      	movs	r3, #2
 8000748:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074a:	2302      	movs	r3, #2
 800074c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fa50 	bl	8001bf8 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800075e:	f000 f911 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fef0 	bl	8001564 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800078a:	f000 f8fb 	bl	8000984 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	@ 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007a4:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <MX_SPI2_Init+0x64>)
 80007a6:	4a18      	ldr	r2, [pc, #96]	@ (8000808 <MX_SPI2_Init+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007aa:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <MX_SPI2_Init+0x64>)
 80007ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007b2:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_SPI2_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <MX_SPI2_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_SPI2_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_SPI2_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_SPI2_Init+0x64>)
 80007cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_SPI2_Init+0x64>)
 80007d4:	2208      	movs	r2, #8
 80007d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <MX_SPI2_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_SPI2_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <MX_SPI2_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_SPI2_Init+0x64>)
 80007ec:	220a      	movs	r2, #10
 80007ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_SPI2_Init+0x64>)
 80007f2:	f001 fc9f 	bl	8002134 <HAL_SPI_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007fc:	f000 f8c2 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000078 	.word	0x20000078
 8000808:	40003800 	.word	0x40003800

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	@ (800085c <MX_USART2_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000844:	f002 fa48 	bl	8002cd8 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f899 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000d0 	.word	0x200000d0
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	@ 0x28
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b3e      	ldr	r3, [pc, #248]	@ (8000974 <MX_GPIO_Init+0x114>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a3d      	ldr	r2, [pc, #244]	@ (8000974 <MX_GPIO_Init+0x114>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b3b      	ldr	r3, [pc, #236]	@ (8000974 <MX_GPIO_Init+0x114>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b37      	ldr	r3, [pc, #220]	@ (8000974 <MX_GPIO_Init+0x114>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a36      	ldr	r2, [pc, #216]	@ (8000974 <MX_GPIO_Init+0x114>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b34      	ldr	r3, [pc, #208]	@ (8000974 <MX_GPIO_Init+0x114>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b30      	ldr	r3, [pc, #192]	@ (8000974 <MX_GPIO_Init+0x114>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a2f      	ldr	r2, [pc, #188]	@ (8000974 <MX_GPIO_Init+0x114>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b2d      	ldr	r3, [pc, #180]	@ (8000974 <MX_GPIO_Init+0x114>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b29      	ldr	r3, [pc, #164]	@ (8000974 <MX_GPIO_Init+0x114>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a28      	ldr	r2, [pc, #160]	@ (8000974 <MX_GPIO_Init+0x114>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b26      	ldr	r3, [pc, #152]	@ (8000974 <MX_GPIO_Init+0x114>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2120      	movs	r1, #32
 80008ea:	4823      	ldr	r0, [pc, #140]	@ (8000978 <MX_GPIO_Init+0x118>)
 80008ec:	f000 fe20 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_Pin|NSS_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f241 0101 	movw	r1, #4097	@ 0x1001
 80008f6:	4821      	ldr	r0, [pc, #132]	@ (800097c <MX_GPIO_Init+0x11c>)
 80008f8:	f000 fe1a 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000902:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	481b      	ldr	r0, [pc, #108]	@ (8000980 <MX_GPIO_Init+0x120>)
 8000914:	f000 fc78 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000918:	2320      	movs	r3, #32
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	4812      	ldr	r0, [pc, #72]	@ (8000978 <MX_GPIO_Init+0x118>)
 8000930:	f000 fc6a 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|NSS_Pin;
 8000934:	f241 0301 	movw	r3, #4097	@ 0x1001
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	480b      	ldr	r0, [pc, #44]	@ (800097c <MX_GPIO_Init+0x11c>)
 800094e:	f000 fc5b 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000952:	2302      	movs	r3, #2
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_GPIO_Init+0x11c>)
 8000966:	f000 fc4f 	bl	8001208 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	@ 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000
 800097c:	40020400 	.word	0x40020400
 8000980:	40020800 	.word	0x40020800

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <Error_Handler+0x8>

08000990 <RFM95_Select>:
// Variáveis externas (handles de SPI e UART configurados no projeto principal)
extern SPI_HandleTypeDef hspi2;
extern UART_HandleTypeDef huart2;

// Funções auxiliares estáticas para SPI
static void RFM95_Select(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RFM95_CS_GPIO, RFM95_CS_PIN, GPIO_PIN_RESET); // CS baixo
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800099a:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <RFM95_Select+0x14>)
 800099c:	f000 fdc8 	bl	8001530 <HAL_GPIO_WritePin>
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40020400 	.word	0x40020400

080009a8 <RFM95_Unselect>:
static void RFM95_Unselect(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RFM95_CS_GPIO, RFM95_CS_PIN, GPIO_PIN_SET);   // CS alto
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009b2:	4802      	ldr	r0, [pc, #8]	@ (80009bc <RFM95_Unselect+0x14>)
 80009b4:	f000 fdbc 	bl	8001530 <HAL_GPIO_WritePin>
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40020400 	.word	0x40020400

080009c0 <RFM95_WriteReg>:
static void RFM95_WriteReg(uint8_t addr, uint8_t data) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	460a      	mov	r2, r1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	4613      	mov	r3, r2
 80009ce:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];
    buf[0] = addr | 0x80;   // MSB=1 indica escrita&#8203;:contentReference[oaicite:11]{index=11}
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	733b      	strb	r3, [r7, #12]
    buf[1] = data;
 80009da:	79bb      	ldrb	r3, [r7, #6]
 80009dc:	737b      	strb	r3, [r7, #13]
    RFM95_Select();
 80009de:	f7ff ffd7 	bl	8000990 <RFM95_Select>
    HAL_SPI_Transmit(&hspi2, buf, 2, HAL_MAX_DELAY);
 80009e2:	f107 010c 	add.w	r1, r7, #12
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	2202      	movs	r2, #2
 80009ec:	4804      	ldr	r0, [pc, #16]	@ (8000a00 <RFM95_WriteReg+0x40>)
 80009ee:	f001 fc2a 	bl	8002246 <HAL_SPI_Transmit>
    RFM95_Unselect();
 80009f2:	f7ff ffd9 	bl	80009a8 <RFM95_Unselect>
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000078 	.word	0x20000078

08000a04 <RFM95_ReadReg>:
static uint8_t RFM95_ReadReg(uint8_t addr) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;  // MSB=0 indica leitura
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73bb      	strb	r3, [r7, #14]
    RFM95_Select();
 8000a1c:	f7ff ffb8 	bl	8000990 <RFM95_Select>
    HAL_SPI_Transmit(&hspi2, &tx, 1, HAL_MAX_DELAY);
 8000a20:	f107 010f 	add.w	r1, r7, #15
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4809      	ldr	r0, [pc, #36]	@ (8000a50 <RFM95_ReadReg+0x4c>)
 8000a2c:	f001 fc0b 	bl	8002246 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, &rx, 1, HAL_MAX_DELAY);
 8000a30:	f107 010e 	add.w	r1, r7, #14
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <RFM95_ReadReg+0x4c>)
 8000a3c:	f001 fd47 	bl	80024ce <HAL_SPI_Receive>
    RFM95_Unselect();
 8000a40:	f7ff ffb2 	bl	80009a8 <RFM95_Unselect>
    return rx;
 8000a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000078 	.word	0x20000078

08000a54 <RFM95_Init>:

// Implementação da inicialização do RFM95
int RFM95_Init(void) {
 8000a54:	b5b0      	push	{r4, r5, r7, lr}
 8000a56:	b092      	sub	sp, #72	@ 0x48
 8000a58:	af00      	add	r7, sp, #0
    // 1. Resetar o módulo LoRa
    HAL_GPIO_WritePin(RFM95_RESET_GPIO, RFM95_RESET_PIN, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4841      	ldr	r0, [pc, #260]	@ (8000b64 <RFM95_Init+0x110>)
 8000a60:	f000 fd66 	bl	8001530 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000a64:	2005      	movs	r0, #5
 8000a66:	f000 fac5 	bl	8000ff4 <HAL_Delay>
    HAL_GPIO_WritePin(RFM95_RESET_GPIO, RFM95_RESET_PIN, GPIO_PIN_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	483d      	ldr	r0, [pc, #244]	@ (8000b64 <RFM95_Init+0x110>)
 8000a70:	f000 fd5e 	bl	8001530 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000a74:	2005      	movs	r0, #5
 8000a76:	f000 fabd 	bl	8000ff4 <HAL_Delay>

    // 2. Verificar o registro de versão para assegurar comunicação SPI
    uint8_t version = RFM95_ReadReg(REG_VERSION);
 8000a7a:	2042      	movs	r0, #66	@ 0x42
 8000a7c:	f7ff ffc2 	bl	8000a04 <RFM95_ReadReg>
 8000a80:	4603      	mov	r3, r0
 8000a82:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (version != 0x12) {
 8000a86:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a8a:	2b12      	cmp	r3, #18
 8000a8c:	d017      	beq.n	8000abe <RFM95_Init+0x6a>
        // Versão esperada do SX1276 é 0x12&#8203;:contentReference[oaicite:12]{index=12}
        char msg[] = "Erro: RFM95 nao encontrado!\r\n";
 8000a8e:	4b36      	ldr	r3, [pc, #216]	@ (8000b68 <RFM95_Init+0x114>)
 8000a90:	1d3c      	adds	r4, r7, #4
 8000a92:	461d      	mov	r5, r3
 8000a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a9c:	c407      	stmia	r4!, {r0, r1, r2}
 8000a9e:	8023      	strh	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fbb4 	bl	8000210 <strlen>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	1d39      	adds	r1, r7, #4
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	482e      	ldr	r0, [pc, #184]	@ (8000b6c <RFM95_Init+0x118>)
 8000ab4:	f002 f960 	bl	8002d78 <HAL_UART_Transmit>
        return RFM95_ERR;
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8000abc:	e04e      	b.n	8000b5c <RFM95_Init+0x108>
    }

    // 3. Colocar em modo Sleep e habilitar LoRa (Long Range Mode).
    RFM95_WriteReg(REG_OP_MODE, MODE_SLEEP);            // primeiro Sleep em FSK
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff ff7d 	bl	80009c0 <RFM95_WriteReg>
    RFM95_WriteReg(REG_OP_MODE, LONG_RANGE_MODE | MODE_SLEEP); // LoRa Sleep&#8203;:contentReference[oaicite:13]{index=13}
 8000ac6:	2180      	movs	r1, #128	@ 0x80
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f7ff ff79 	bl	80009c0 <RFM95_WriteReg>
    HAL_Delay(10);
 8000ace:	200a      	movs	r0, #10
 8000ad0:	f000 fa90 	bl	8000ff4 <HAL_Delay>

    // 4. Configurar frequência de operação (868 MHz)
    // Fórmula: reg_freq = (Frequência / Fstep), com Fstep = 32e6/2^19 ≈ 61 Hz&#8203;:contentReference[oaicite:14]{index=14}.
    // Para 868000000 Hz, reg_freq = 0xD90000&#8203;:contentReference[oaicite:15]{index=15}.
    RFM95_WriteReg(REG_FRF_MSB, 0xD9);
 8000ad4:	21d9      	movs	r1, #217	@ 0xd9
 8000ad6:	2006      	movs	r0, #6
 8000ad8:	f7ff ff72 	bl	80009c0 <RFM95_WriteReg>
    RFM95_WriteReg(REG_FRF_MID, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2007      	movs	r0, #7
 8000ae0:	f7ff ff6e 	bl	80009c0 <RFM95_WriteReg>
    RFM95_WriteReg(REG_FRF_LSB, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2008      	movs	r0, #8
 8000ae8:	f7ff ff6a 	bl	80009c0 <RFM95_WriteReg>

    // 5. Configurar potência de transmissão no PA_BOOST
    // PaSelect=1 (PA_BOOST), MaxPower=111 (0x7) e OutputPower=1111 (0xF)&#8203;:contentReference[oaicite:16]{index=16}.
    // 0x8F já ativa PA_BOOST e OutputPower=15 (~17 dBm)&#8203;:contentReference[oaicite:17]{index=17}.
    RFM95_WriteReg(REG_PA_CONFIG, 0x8F);
 8000aec:	218f      	movs	r1, #143	@ 0x8f
 8000aee:	2009      	movs	r0, #9
 8000af0:	f7ff ff66 	bl	80009c0 <RFM95_WriteReg>
    // (Opcional: habilitar +20dBm, se necessário, via REG_PA_DAC. Não habilitado aqui.)

    // 6. Configurar parâmetros LoRa: BW=125kHz, CR=4/5, explicit header, SF=7, CRC on.
    RFM95_WriteReg(REG_MODEM_CONFIG1, 0x72); // 0x72 = 0b01110010: BW125k, CR4/5, header explícito&#8203;:contentReference[oaicite:18]{index=18}
 8000af4:	2172      	movs	r1, #114	@ 0x72
 8000af6:	201d      	movs	r0, #29
 8000af8:	f7ff ff62 	bl	80009c0 <RFM95_WriteReg>
    RFM95_WriteReg(REG_MODEM_CONFIG2, 0x74); // 0x74 = 0b01110100: SF7, CRC habilitado&#8203;:contentReference[oaicite:19]{index=19}
 8000afc:	2174      	movs	r1, #116	@ 0x74
 8000afe:	201e      	movs	r0, #30
 8000b00:	f7ff ff5e 	bl	80009c0 <RFM95_WriteReg>
    RFM95_WriteReg(REG_MODEM_CONFIG3, 0x04); // 0x04: LowDataRateOptimize off (SF7 não precisa), AGC on&#8203;:contentReference[oaicite:20]{index=20}
 8000b04:	2104      	movs	r1, #4
 8000b06:	2026      	movs	r0, #38	@ 0x26
 8000b08:	f7ff ff5a 	bl	80009c0 <RFM95_WriteReg>

    // 7. Configurar base dos endereços FIFO (opcional, usar defaults)
    RFM95_WriteReg(REG_FIFO_TX_BASE_ADDR, 0x80); // Início TX FIFO = 0x80 (default)&#8203;:contentReference[oaicite:21]{index=21}
 8000b0c:	2180      	movs	r1, #128	@ 0x80
 8000b0e:	200e      	movs	r0, #14
 8000b10:	f7ff ff56 	bl	80009c0 <RFM95_WriteReg>
    RFM95_WriteReg(REG_FIFO_RX_BASE_ADDR, 0x00); // Início RX FIFO = 0x00 (default)
 8000b14:	2100      	movs	r1, #0
 8000b16:	200f      	movs	r0, #15
 8000b18:	f7ff ff52 	bl	80009c0 <RFM95_WriteReg>

    // 8. Colocar em modo standby para aguardar envios
    RFM95_WriteReg(REG_OP_MODE, LONG_RANGE_MODE | MODE_STDBY);
 8000b1c:	2181      	movs	r1, #129	@ 0x81
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f7ff ff4e 	bl	80009c0 <RFM95_WriteReg>
    HAL_Delay(5);
 8000b24:	2005      	movs	r0, #5
 8000b26:	f000 fa65 	bl	8000ff4 <HAL_Delay>

    // 9. Indicar sucesso na UART2
    char okmsg[] = "RFM95 inicializado com sucesso\r\n";
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <RFM95_Init+0x11c>)
 8000b2c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000b30:	461d      	mov	r5, r3
 8000b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3a:	682b      	ldr	r3, [r5, #0]
 8000b3c:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)okmsg, strlen(okmsg), HAL_MAX_DELAY);
 8000b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fb64 	bl	8000210 <strlen>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <RFM95_Init+0x118>)
 8000b56:	f002 f90f 	bl	8002d78 <HAL_UART_Transmit>
    return RFM95_OK;
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3748      	adds	r7, #72	@ 0x48
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bdb0      	pop	{r4, r5, r7, pc}
 8000b64:	40020400 	.word	0x40020400
 8000b68:	08003ed0 	.word	0x08003ed0
 8000b6c:	200000d0 	.word	0x200000d0
 8000b70:	08003ef0 	.word	0x08003ef0

08000b74 <RFM95_SendPacket>:

// Envia um pacote LoRa (até 64 bytes) e aguarda conclusão
int RFM95_SendPacket(uint8_t *data, uint8_t length) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	70fb      	strb	r3, [r7, #3]
    // Limitar tamanho ao máximo (64 bytes conforme requisitado)
    if (length > 64) length = 64;
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	2b40      	cmp	r3, #64	@ 0x40
 8000b84:	d901      	bls.n	8000b8a <RFM95_SendPacket+0x16>
 8000b86:	2340      	movs	r3, #64	@ 0x40
 8000b88:	70fb      	strb	r3, [r7, #3]

    // 1. Entrar em modo de espera (Standby) para preparar FIFO
    RFM95_WriteReg(REG_OP_MODE, LONG_RANGE_MODE | MODE_STDBY);
 8000b8a:	2181      	movs	r1, #129	@ 0x81
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f7ff ff17 	bl	80009c0 <RFM95_WriteReg>
    HAL_Delay(1);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f000 fa2e 	bl	8000ff4 <HAL_Delay>

    // 2. Ponteiro FIFO aponta para base de TX
    RFM95_WriteReg(REG_FIFO_ADDR_PTR, 0x80);
 8000b98:	2180      	movs	r1, #128	@ 0x80
 8000b9a:	200d      	movs	r0, #13
 8000b9c:	f7ff ff10 	bl	80009c0 <RFM95_WriteReg>

    // 3. Escrever o tamanho do payload no registrador correspondente
    RFM95_WriteReg(REG_PAYLOAD_LENGTH, length);
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	2022      	movs	r0, #34	@ 0x22
 8000ba6:	f7ff ff0b 	bl	80009c0 <RFM95_WriteReg>

    // 4. Escrever os dados do payload no FIFO
    for (uint8_t i = 0; i < length; i++) {
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	e00a      	b.n	8000bc6 <RFM95_SendPacket+0x52>
        RFM95_WriteReg(REG_FIFO, data[i]);
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff ff00 	bl	80009c0 <RFM95_WriteReg>
    for (uint8_t i = 0; i < length; i++) {
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	7bfa      	ldrb	r2, [r7, #15]
 8000bc8:	78fb      	ldrb	r3, [r7, #3]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d3f0      	bcc.n	8000bb0 <RFM95_SendPacket+0x3c>
    }

    // 5. Iniciar transmissão LoRa (modo TX)
    RFM95_WriteReg(REG_OP_MODE, LONG_RANGE_MODE | MODE_TX);
 8000bce:	2183      	movs	r1, #131	@ 0x83
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f7ff fef5 	bl	80009c0 <RFM95_WriteReg>

    // 6. Aguardar até que a transmissão complete (TxDone setado)&#8203;:contentReference[oaicite:22]{index=22}
    // Verifica o bit TxDone (bit3) em REG_IRQ_FLAGS (0x12).
    uint8_t irqFlags;
    do {
        irqFlags = RFM95_ReadReg(REG_IRQ_FLAGS);
 8000bd6:	2012      	movs	r0, #18
 8000bd8:	f7ff ff14 	bl	8000a04 <RFM95_ReadReg>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	73bb      	strb	r3, [r7, #14]
    } while ((irqFlags & 0x08) == 0);  // 0x08: máscara do bit TxDone
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0f5      	beq.n	8000bd6 <RFM95_SendPacket+0x62>

    // 7. Limpar a flag TxDone escrevendo 1 nesse bit&#8203;:contentReference[oaicite:23]{index=23}
    RFM95_WriteReg(REG_IRQ_FLAGS, 0x08);
 8000bea:	2108      	movs	r1, #8
 8000bec:	2012      	movs	r0, #18
 8000bee:	f7ff fee7 	bl	80009c0 <RFM95_WriteReg>

    // 8. Retornar ao modo standby automaticamente ocorre após TX (por design)
    // Envio concluído
    return RFM95_OK;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c12:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c26:	4a08      	ldr	r2, [pc, #32]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c3a:	2007      	movs	r0, #7
 8000c3c:	f000 fab0 	bl	80011a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800

08000c4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	@ 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a30      	ldr	r2, [pc, #192]	@ (8000d2c <HAL_SPI_MspInit+0xe0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d15a      	bne.n	8000d24 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <HAL_SPI_MspInit+0xe4>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	4a2e      	ldr	r2, [pc, #184]	@ (8000d30 <HAL_SPI_MspInit+0xe4>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d30 <HAL_SPI_MspInit+0xe4>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b28      	ldr	r3, [pc, #160]	@ (8000d30 <HAL_SPI_MspInit+0xe4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a27      	ldr	r2, [pc, #156]	@ (8000d30 <HAL_SPI_MspInit+0xe4>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b25      	ldr	r3, [pc, #148]	@ (8000d30 <HAL_SPI_MspInit+0xe4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <HAL_SPI_MspInit+0xe4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a20      	ldr	r2, [pc, #128]	@ (8000d30 <HAL_SPI_MspInit+0xe4>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <HAL_SPI_MspInit+0xe4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4815      	ldr	r0, [pc, #84]	@ (8000d34 <HAL_SPI_MspInit+0xe8>)
 8000cde:	f000 fa93 	bl	8001208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480d      	ldr	r0, [pc, #52]	@ (8000d34 <HAL_SPI_MspInit+0xe8>)
 8000cfe:	f000 fa83 	bl	8001208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d14:	2305      	movs	r3, #5
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4806      	ldr	r0, [pc, #24]	@ (8000d38 <HAL_SPI_MspInit+0xec>)
 8000d20:	f000 fa72 	bl	8001208 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	@ 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40003800 	.word	0x40003800
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020800 	.word	0x40020800
 8000d38:	40020400 	.word	0x40020400

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a19      	ldr	r2, [pc, #100]	@ (8000dc0 <HAL_UART_MspInit+0x84>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d12b      	bne.n	8000db6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	4a17      	ldr	r2, [pc, #92]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a10      	ldr	r2, [pc, #64]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d96:	230c      	movs	r3, #12
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000da6:	2307      	movs	r3, #7
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <HAL_UART_MspInit+0x8c>)
 8000db2:	f000 fa29 	bl	8001208 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	@ 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40004400 	.word	0x40004400
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020000 	.word	0x40020000

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <MemManage_Handler+0x4>

08000de4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e22:	f000 f8c7 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	@ (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	@ (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f002 fb70 	bl	8003540 <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	@ (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20020000 	.word	0x20020000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	20000118 	.word	0x20000118
 8000e94:	20000268 	.word	0x20000268

08000e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	@ (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ef4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ec0:	f7ff ffea 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec4:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ec6:	490d      	ldr	r1, [pc, #52]	@ (8000efc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000edc:	4c0a      	ldr	r4, [pc, #40]	@ (8000f08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eea:	f002 fb2f 	bl	800354c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eee:	f7ff fb5f 	bl	80005b0 <main>
  bx  lr    
 8000ef2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ef4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f00:	08003f70 	.word	0x08003f70
  ldr r2, =_sbss
 8000f04:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f08:	20000268 	.word	0x20000268

08000f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC_IRQHandler>
	...

08000f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f14:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0d      	ldr	r2, [pc, #52]	@ (8000f50 <HAL_Init+0x40>)
 8000f1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f20:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0a      	ldr	r2, [pc, #40]	@ (8000f50 <HAL_Init+0x40>)
 8000f26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2c:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a07      	ldr	r2, [pc, #28]	@ (8000f50 <HAL_Init+0x40>)
 8000f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f931 	bl	80011a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 f808 	bl	8000f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f44:	f7ff fe5a 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023c00 	.word	0x40023c00

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f5c:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <HAL_InitTick+0x54>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <HAL_InitTick+0x58>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f93b 	bl	80011ee <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00e      	b.n	8000fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d80a      	bhi.n	8000f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f000 f911 	bl	80011b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4a06      	ldr	r2, [pc, #24]	@ (8000fb0 <HAL_InitTick+0x5c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	2000011c 	.word	0x2000011c

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	2000011c 	.word	0x2000011c

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff ffee 	bl	8000fdc <HAL_GetTick>
 8001000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100c:	d005      	beq.n	800101a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100e:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <HAL_Delay+0x44>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101a:	bf00      	nop
 800101c:	f7ff ffde 	bl	8000fdc <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8f7      	bhi.n	800101c <HAL_Delay+0x28>
  {
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008

0800103c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001058:	4013      	ands	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001064:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800106c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106e:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	60d3      	str	r3, [r2, #12]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001088:	4b04      	ldr	r3, [pc, #16]	@ (800109c <__NVIC_GetPriorityGrouping+0x18>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	f003 0307 	and.w	r3, r3, #7
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	@ (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	@ (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
         );
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	@ 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800116c:	d301      	bcc.n	8001172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116e:	2301      	movs	r3, #1
 8001170:	e00f      	b.n	8001192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <SysTick_Config+0x40>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117a:	210f      	movs	r1, #15
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f7ff ff8e 	bl	80010a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <SysTick_Config+0x40>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	4b04      	ldr	r3, [pc, #16]	@ (800119c <SysTick_Config+0x40>)
 800118c:	2207      	movs	r2, #7
 800118e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	e000e010 	.word	0xe000e010

080011a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff47 	bl	800103c <__NVIC_SetPriorityGrouping>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
 80011c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c8:	f7ff ff5c 	bl	8001084 <__NVIC_GetPriorityGrouping>
 80011cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f7ff ff8e 	bl	80010f4 <NVIC_EncodePriority>
 80011d8:	4602      	mov	r2, r0
 80011da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff5d 	bl	80010a0 <__NVIC_SetPriority>
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffb0 	bl	800115c <SysTick_Config>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	@ 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	e165      	b.n	80014f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	429a      	cmp	r2, r3
 800123e:	f040 8154 	bne.w	80014ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b01      	cmp	r3, #1
 800124c:	d005      	beq.n	800125a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001256:	2b02      	cmp	r3, #2
 8001258:	d130      	bne.n	80012bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001290:	2201      	movs	r2, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	f003 0201 	and.w	r2, r3, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d017      	beq.n	80012f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d123      	bne.n	800134c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	08da      	lsrs	r2, r3, #3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3208      	adds	r2, #8
 800130c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3208      	adds	r2, #8
 8001346:	69b9      	ldr	r1, [r7, #24]
 8001348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0203 	and.w	r2, r3, #3
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80ae 	beq.w	80014ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b5d      	ldr	r3, [pc, #372]	@ (8001508 <HAL_GPIO_Init+0x300>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	4a5c      	ldr	r2, [pc, #368]	@ (8001508 <HAL_GPIO_Init+0x300>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800139c:	6453      	str	r3, [r2, #68]	@ 0x44
 800139e:	4b5a      	ldr	r3, [pc, #360]	@ (8001508 <HAL_GPIO_Init+0x300>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013aa:	4a58      	ldr	r2, [pc, #352]	@ (800150c <HAL_GPIO_Init+0x304>)
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3302      	adds	r3, #2
 80013b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	220f      	movs	r2, #15
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4f      	ldr	r2, [pc, #316]	@ (8001510 <HAL_GPIO_Init+0x308>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d025      	beq.n	8001422 <HAL_GPIO_Init+0x21a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4e      	ldr	r2, [pc, #312]	@ (8001514 <HAL_GPIO_Init+0x30c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d01f      	beq.n	800141e <HAL_GPIO_Init+0x216>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4d      	ldr	r2, [pc, #308]	@ (8001518 <HAL_GPIO_Init+0x310>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d019      	beq.n	800141a <HAL_GPIO_Init+0x212>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4c      	ldr	r2, [pc, #304]	@ (800151c <HAL_GPIO_Init+0x314>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d013      	beq.n	8001416 <HAL_GPIO_Init+0x20e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001520 <HAL_GPIO_Init+0x318>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d00d      	beq.n	8001412 <HAL_GPIO_Init+0x20a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001524 <HAL_GPIO_Init+0x31c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d007      	beq.n	800140e <HAL_GPIO_Init+0x206>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a49      	ldr	r2, [pc, #292]	@ (8001528 <HAL_GPIO_Init+0x320>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d101      	bne.n	800140a <HAL_GPIO_Init+0x202>
 8001406:	2306      	movs	r3, #6
 8001408:	e00c      	b.n	8001424 <HAL_GPIO_Init+0x21c>
 800140a:	2307      	movs	r3, #7
 800140c:	e00a      	b.n	8001424 <HAL_GPIO_Init+0x21c>
 800140e:	2305      	movs	r3, #5
 8001410:	e008      	b.n	8001424 <HAL_GPIO_Init+0x21c>
 8001412:	2304      	movs	r3, #4
 8001414:	e006      	b.n	8001424 <HAL_GPIO_Init+0x21c>
 8001416:	2303      	movs	r3, #3
 8001418:	e004      	b.n	8001424 <HAL_GPIO_Init+0x21c>
 800141a:	2302      	movs	r3, #2
 800141c:	e002      	b.n	8001424 <HAL_GPIO_Init+0x21c>
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <HAL_GPIO_Init+0x21c>
 8001422:	2300      	movs	r3, #0
 8001424:	69fa      	ldr	r2, [r7, #28]
 8001426:	f002 0203 	and.w	r2, r2, #3
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	4093      	lsls	r3, r2
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001434:	4935      	ldr	r1, [pc, #212]	@ (800150c <HAL_GPIO_Init+0x304>)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	3302      	adds	r3, #2
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001442:	4b3a      	ldr	r3, [pc, #232]	@ (800152c <HAL_GPIO_Init+0x324>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001466:	4a31      	ldr	r2, [pc, #196]	@ (800152c <HAL_GPIO_Init+0x324>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800146c:	4b2f      	ldr	r3, [pc, #188]	@ (800152c <HAL_GPIO_Init+0x324>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001490:	4a26      	ldr	r2, [pc, #152]	@ (800152c <HAL_GPIO_Init+0x324>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001496:	4b25      	ldr	r3, [pc, #148]	@ (800152c <HAL_GPIO_Init+0x324>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ba:	4a1c      	ldr	r2, [pc, #112]	@ (800152c <HAL_GPIO_Init+0x324>)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c0:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <HAL_GPIO_Init+0x324>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014e4:	4a11      	ldr	r2, [pc, #68]	@ (800152c <HAL_GPIO_Init+0x324>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	f67f ae96 	bls.w	8001224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3724      	adds	r7, #36	@ 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40013800 	.word	0x40013800
 8001510:	40020000 	.word	0x40020000
 8001514:	40020400 	.word	0x40020400
 8001518:	40020800 	.word	0x40020800
 800151c:	40020c00 	.word	0x40020c00
 8001520:	40021000 	.word	0x40021000
 8001524:	40021400 	.word	0x40021400
 8001528:	40021800 	.word	0x40021800
 800152c:	40013c00 	.word	0x40013c00

08001530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
 800153c:	4613      	mov	r3, r2
 800153e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001540:	787b      	ldrb	r3, [r7, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800154c:	e003      	b.n	8001556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154e:	887b      	ldrh	r3, [r7, #2]
 8001550:	041a      	lsls	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	619a      	str	r2, [r3, #24]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0cc      	b.n	8001712 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001578:	4b68      	ldr	r3, [pc, #416]	@ (800171c <HAL_RCC_ClockConfig+0x1b8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d90c      	bls.n	80015a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	4b65      	ldr	r3, [pc, #404]	@ (800171c <HAL_RCC_ClockConfig+0x1b8>)
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800158e:	4b63      	ldr	r3, [pc, #396]	@ (800171c <HAL_RCC_ClockConfig+0x1b8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0b8      	b.n	8001712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d020      	beq.n	80015ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b8:	4b59      	ldr	r3, [pc, #356]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	4a58      	ldr	r2, [pc, #352]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d0:	4b53      	ldr	r3, [pc, #332]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	4a52      	ldr	r2, [pc, #328]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015dc:	4b50      	ldr	r3, [pc, #320]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	494d      	ldr	r1, [pc, #308]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d044      	beq.n	8001684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	4b47      	ldr	r3, [pc, #284]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d119      	bne.n	8001642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e07f      	b.n	8001712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d003      	beq.n	8001622 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800161e:	2b03      	cmp	r3, #3
 8001620:	d107      	bne.n	8001632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001622:	4b3f      	ldr	r3, [pc, #252]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d109      	bne.n	8001642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e06f      	b.n	8001712 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001632:	4b3b      	ldr	r3, [pc, #236]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e067      	b.n	8001712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001642:	4b37      	ldr	r3, [pc, #220]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f023 0203 	bic.w	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4934      	ldr	r1, [pc, #208]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	4313      	orrs	r3, r2
 8001652:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001654:	f7ff fcc2 	bl	8000fdc <HAL_GetTick>
 8001658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	e00a      	b.n	8001672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800165c:	f7ff fcbe 	bl	8000fdc <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e04f      	b.n	8001712 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001672:	4b2b      	ldr	r3, [pc, #172]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 020c 	and.w	r2, r3, #12
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	429a      	cmp	r2, r3
 8001682:	d1eb      	bne.n	800165c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001684:	4b25      	ldr	r3, [pc, #148]	@ (800171c <HAL_RCC_ClockConfig+0x1b8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d20c      	bcs.n	80016ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001692:	4b22      	ldr	r3, [pc, #136]	@ (800171c <HAL_RCC_ClockConfig+0x1b8>)
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169a:	4b20      	ldr	r3, [pc, #128]	@ (800171c <HAL_RCC_ClockConfig+0x1b8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e032      	b.n	8001712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b8:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4916      	ldr	r1, [pc, #88]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d009      	beq.n	80016ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016d6:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	490e      	ldr	r1, [pc, #56]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016ea:	f000 f855 	bl	8001798 <HAL_RCC_GetSysClockFreq>
 80016ee:	4602      	mov	r2, r0
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	490a      	ldr	r1, [pc, #40]	@ (8001724 <HAL_RCC_ClockConfig+0x1c0>)
 80016fc:	5ccb      	ldrb	r3, [r1, r3]
 80016fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001702:	4a09      	ldr	r2, [pc, #36]	@ (8001728 <HAL_RCC_ClockConfig+0x1c4>)
 8001704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <HAL_RCC_ClockConfig+0x1c8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fc22 	bl	8000f54 <HAL_InitTick>

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023c00 	.word	0x40023c00
 8001720:	40023800 	.word	0x40023800
 8001724:	08003f14 	.word	0x08003f14
 8001728:	20000000 	.word	0x20000000
 800172c:	20000004 	.word	0x20000004

08001730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001734:	4b03      	ldr	r3, [pc, #12]	@ (8001744 <HAL_RCC_GetHCLKFreq+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000000 	.word	0x20000000

08001748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800174c:	f7ff fff0 	bl	8001730 <HAL_RCC_GetHCLKFreq>
 8001750:	4602      	mov	r2, r0
 8001752:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	0a9b      	lsrs	r3, r3, #10
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	4903      	ldr	r1, [pc, #12]	@ (800176c <HAL_RCC_GetPCLK1Freq+0x24>)
 800175e:	5ccb      	ldrb	r3, [r1, r3]
 8001760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001764:	4618      	mov	r0, r3
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40023800 	.word	0x40023800
 800176c:	08003f24 	.word	0x08003f24

08001770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001774:	f7ff ffdc 	bl	8001730 <HAL_RCC_GetHCLKFreq>
 8001778:	4602      	mov	r2, r0
 800177a:	4b05      	ldr	r3, [pc, #20]	@ (8001790 <HAL_RCC_GetPCLK2Freq+0x20>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	0b5b      	lsrs	r3, r3, #13
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	4903      	ldr	r1, [pc, #12]	@ (8001794 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001786:	5ccb      	ldrb	r3, [r1, r3]
 8001788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800178c:	4618      	mov	r0, r3
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800
 8001794:	08003f24 	.word	0x08003f24

08001798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800179c:	b0ae      	sub	sp, #184	@ 0xb8
 800179e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017be:	4bcb      	ldr	r3, [pc, #812]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x354>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	f200 8206 	bhi.w	8001bd8 <HAL_RCC_GetSysClockFreq+0x440>
 80017cc:	a201      	add	r2, pc, #4	@ (adr r2, 80017d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80017ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	08001809 	.word	0x08001809
 80017d8:	08001bd9 	.word	0x08001bd9
 80017dc:	08001bd9 	.word	0x08001bd9
 80017e0:	08001bd9 	.word	0x08001bd9
 80017e4:	08001811 	.word	0x08001811
 80017e8:	08001bd9 	.word	0x08001bd9
 80017ec:	08001bd9 	.word	0x08001bd9
 80017f0:	08001bd9 	.word	0x08001bd9
 80017f4:	08001819 	.word	0x08001819
 80017f8:	08001bd9 	.word	0x08001bd9
 80017fc:	08001bd9 	.word	0x08001bd9
 8001800:	08001bd9 	.word	0x08001bd9
 8001804:	08001a09 	.word	0x08001a09
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001808:	4bb9      	ldr	r3, [pc, #740]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x358>)
 800180a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800180e:	e1e7      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001810:	4bb8      	ldr	r3, [pc, #736]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001812:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001816:	e1e3      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001818:	4bb4      	ldr	r3, [pc, #720]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x354>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001824:	4bb1      	ldr	r3, [pc, #708]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x354>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d071      	beq.n	8001914 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001830:	4bae      	ldr	r3, [pc, #696]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x354>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	099b      	lsrs	r3, r3, #6
 8001836:	2200      	movs	r2, #0
 8001838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800183c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001840:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001848:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001852:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001856:	4622      	mov	r2, r4
 8001858:	462b      	mov	r3, r5
 800185a:	f04f 0000 	mov.w	r0, #0
 800185e:	f04f 0100 	mov.w	r1, #0
 8001862:	0159      	lsls	r1, r3, #5
 8001864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001868:	0150      	lsls	r0, r2, #5
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4621      	mov	r1, r4
 8001870:	1a51      	subs	r1, r2, r1
 8001872:	6439      	str	r1, [r7, #64]	@ 0x40
 8001874:	4629      	mov	r1, r5
 8001876:	eb63 0301 	sbc.w	r3, r3, r1
 800187a:	647b      	str	r3, [r7, #68]	@ 0x44
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001888:	4649      	mov	r1, r9
 800188a:	018b      	lsls	r3, r1, #6
 800188c:	4641      	mov	r1, r8
 800188e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001892:	4641      	mov	r1, r8
 8001894:	018a      	lsls	r2, r1, #6
 8001896:	4641      	mov	r1, r8
 8001898:	1a51      	subs	r1, r2, r1
 800189a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800189c:	4649      	mov	r1, r9
 800189e:	eb63 0301 	sbc.w	r3, r3, r1
 80018a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80018b0:	4649      	mov	r1, r9
 80018b2:	00cb      	lsls	r3, r1, #3
 80018b4:	4641      	mov	r1, r8
 80018b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018ba:	4641      	mov	r1, r8
 80018bc:	00ca      	lsls	r2, r1, #3
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	4603      	mov	r3, r0
 80018c4:	4622      	mov	r2, r4
 80018c6:	189b      	adds	r3, r3, r2
 80018c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80018ca:	462b      	mov	r3, r5
 80018cc:	460a      	mov	r2, r1
 80018ce:	eb42 0303 	adc.w	r3, r2, r3
 80018d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018e0:	4629      	mov	r1, r5
 80018e2:	024b      	lsls	r3, r1, #9
 80018e4:	4621      	mov	r1, r4
 80018e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018ea:	4621      	mov	r1, r4
 80018ec:	024a      	lsls	r2, r1, #9
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018f6:	2200      	movs	r2, #0
 80018f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001900:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001904:	f7fe fcdc 	bl	80002c0 <__aeabi_uldivmod>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4613      	mov	r3, r2
 800190e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001912:	e067      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001914:	4b75      	ldr	r3, [pc, #468]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x354>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	099b      	lsrs	r3, r3, #6
 800191a:	2200      	movs	r2, #0
 800191c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001920:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001924:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800192c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800192e:	2300      	movs	r3, #0
 8001930:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001932:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001936:	4622      	mov	r2, r4
 8001938:	462b      	mov	r3, r5
 800193a:	f04f 0000 	mov.w	r0, #0
 800193e:	f04f 0100 	mov.w	r1, #0
 8001942:	0159      	lsls	r1, r3, #5
 8001944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001948:	0150      	lsls	r0, r2, #5
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4621      	mov	r1, r4
 8001950:	1a51      	subs	r1, r2, r1
 8001952:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001954:	4629      	mov	r1, r5
 8001956:	eb63 0301 	sbc.w	r3, r3, r1
 800195a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001968:	4649      	mov	r1, r9
 800196a:	018b      	lsls	r3, r1, #6
 800196c:	4641      	mov	r1, r8
 800196e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001972:	4641      	mov	r1, r8
 8001974:	018a      	lsls	r2, r1, #6
 8001976:	4641      	mov	r1, r8
 8001978:	ebb2 0a01 	subs.w	sl, r2, r1
 800197c:	4649      	mov	r1, r9
 800197e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800198e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001992:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001996:	4692      	mov	sl, r2
 8001998:	469b      	mov	fp, r3
 800199a:	4623      	mov	r3, r4
 800199c:	eb1a 0303 	adds.w	r3, sl, r3
 80019a0:	623b      	str	r3, [r7, #32]
 80019a2:	462b      	mov	r3, r5
 80019a4:	eb4b 0303 	adc.w	r3, fp, r3
 80019a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80019b6:	4629      	mov	r1, r5
 80019b8:	028b      	lsls	r3, r1, #10
 80019ba:	4621      	mov	r1, r4
 80019bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019c0:	4621      	mov	r1, r4
 80019c2:	028a      	lsls	r2, r1, #10
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019cc:	2200      	movs	r2, #0
 80019ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80019d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80019d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80019d6:	f7fe fc73 	bl	80002c0 <__aeabi_uldivmod>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4613      	mov	r3, r2
 80019e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019e4:	4b41      	ldr	r3, [pc, #260]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x354>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	0c1b      	lsrs	r3, r3, #16
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	3301      	adds	r3, #1
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80019f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80019fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a06:	e0eb      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a08:	4b38      	ldr	r3, [pc, #224]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x354>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a14:	4b35      	ldr	r3, [pc, #212]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x354>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d06b      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a20:	4b32      	ldr	r3, [pc, #200]	@ (8001aec <HAL_RCC_GetSysClockFreq+0x354>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	099b      	lsrs	r3, r3, #6
 8001a26:	2200      	movs	r2, #0
 8001a28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a32:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a34:	2300      	movs	r3, #0
 8001a36:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a38:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a3c:	4622      	mov	r2, r4
 8001a3e:	462b      	mov	r3, r5
 8001a40:	f04f 0000 	mov.w	r0, #0
 8001a44:	f04f 0100 	mov.w	r1, #0
 8001a48:	0159      	lsls	r1, r3, #5
 8001a4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a4e:	0150      	lsls	r0, r2, #5
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4621      	mov	r1, r4
 8001a56:	1a51      	subs	r1, r2, r1
 8001a58:	61b9      	str	r1, [r7, #24]
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	eb63 0301 	sbc.w	r3, r3, r1
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a6e:	4659      	mov	r1, fp
 8001a70:	018b      	lsls	r3, r1, #6
 8001a72:	4651      	mov	r1, sl
 8001a74:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a78:	4651      	mov	r1, sl
 8001a7a:	018a      	lsls	r2, r1, #6
 8001a7c:	4651      	mov	r1, sl
 8001a7e:	ebb2 0801 	subs.w	r8, r2, r1
 8001a82:	4659      	mov	r1, fp
 8001a84:	eb63 0901 	sbc.w	r9, r3, r1
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a94:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a98:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a9c:	4690      	mov	r8, r2
 8001a9e:	4699      	mov	r9, r3
 8001aa0:	4623      	mov	r3, r4
 8001aa2:	eb18 0303 	adds.w	r3, r8, r3
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	462b      	mov	r3, r5
 8001aaa:	eb49 0303 	adc.w	r3, r9, r3
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001abc:	4629      	mov	r1, r5
 8001abe:	024b      	lsls	r3, r1, #9
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	024a      	lsls	r2, r1, #9
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ad6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001ad8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001adc:	f7fe fbf0 	bl	80002c0 <__aeabi_uldivmod>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001aea:	e065      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x420>
 8001aec:	40023800 	.word	0x40023800
 8001af0:	00f42400 	.word	0x00f42400
 8001af4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af8:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	099b      	lsrs	r3, r3, #6
 8001afe:	2200      	movs	r2, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	4611      	mov	r1, r2
 8001b04:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b08:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b0e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001b12:	4642      	mov	r2, r8
 8001b14:	464b      	mov	r3, r9
 8001b16:	f04f 0000 	mov.w	r0, #0
 8001b1a:	f04f 0100 	mov.w	r1, #0
 8001b1e:	0159      	lsls	r1, r3, #5
 8001b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b24:	0150      	lsls	r0, r2, #5
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4641      	mov	r1, r8
 8001b2c:	1a51      	subs	r1, r2, r1
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	4649      	mov	r1, r9
 8001b32:	eb63 0301 	sbc.w	r3, r3, r1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b44:	4659      	mov	r1, fp
 8001b46:	018b      	lsls	r3, r1, #6
 8001b48:	4651      	mov	r1, sl
 8001b4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b4e:	4651      	mov	r1, sl
 8001b50:	018a      	lsls	r2, r1, #6
 8001b52:	4651      	mov	r1, sl
 8001b54:	1a54      	subs	r4, r2, r1
 8001b56:	4659      	mov	r1, fp
 8001b58:	eb63 0501 	sbc.w	r5, r3, r1
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	00eb      	lsls	r3, r5, #3
 8001b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b6a:	00e2      	lsls	r2, r4, #3
 8001b6c:	4614      	mov	r4, r2
 8001b6e:	461d      	mov	r5, r3
 8001b70:	4643      	mov	r3, r8
 8001b72:	18e3      	adds	r3, r4, r3
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	464b      	mov	r3, r9
 8001b78:	eb45 0303 	adc.w	r3, r5, r3
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	028b      	lsls	r3, r1, #10
 8001b8e:	4621      	mov	r1, r4
 8001b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b94:	4621      	mov	r1, r4
 8001b96:	028a      	lsls	r2, r1, #10
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ba4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001ba6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001baa:	f7fe fb89 	bl	80002c0 <__aeabi_uldivmod>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	0f1b      	lsrs	r3, r3, #28
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001bc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001bca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bd6:	e003      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001bda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	37b8      	adds	r7, #184	@ 0xb8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	00f42400 	.word	0x00f42400

08001bf8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e28d      	b.n	8002126 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 8083 	beq.w	8001d1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c18:	4b94      	ldr	r3, [pc, #592]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d019      	beq.n	8001c58 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c24:	4b91      	ldr	r3, [pc, #580]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 030c 	and.w	r3, r3, #12
        || \
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c30:	4b8e      	ldr	r3, [pc, #568]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c3c:	d00c      	beq.n	8001c58 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c3e:	4b8b      	ldr	r3, [pc, #556]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d112      	bne.n	8001c70 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c4a:	4b88      	ldr	r3, [pc, #544]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c56:	d10b      	bne.n	8001c70 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c58:	4b84      	ldr	r3, [pc, #528]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d05b      	beq.n	8001d1c <HAL_RCC_OscConfig+0x124>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d157      	bne.n	8001d1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e25a      	b.n	8002126 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c78:	d106      	bne.n	8001c88 <HAL_RCC_OscConfig+0x90>
 8001c7a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a7b      	ldr	r2, [pc, #492]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e01d      	b.n	8001cc4 <HAL_RCC_OscConfig+0xcc>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0xb4>
 8001c92:	4b76      	ldr	r3, [pc, #472]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a75      	ldr	r2, [pc, #468]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001c98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	4b73      	ldr	r3, [pc, #460]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a72      	ldr	r2, [pc, #456]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e00b      	b.n	8001cc4 <HAL_RCC_OscConfig+0xcc>
 8001cac:	4b6f      	ldr	r3, [pc, #444]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a6e      	ldr	r2, [pc, #440]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001cb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	4b6c      	ldr	r3, [pc, #432]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a6b      	ldr	r2, [pc, #428]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001cbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d013      	beq.n	8001cf4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f986 	bl	8000fdc <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f982 	bl	8000fdc <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b64      	cmp	r3, #100	@ 0x64
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e21f      	b.n	8002126 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	4b61      	ldr	r3, [pc, #388]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0xdc>
 8001cf2:	e014      	b.n	8001d1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f972 	bl	8000fdc <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cfc:	f7ff f96e 	bl	8000fdc <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	@ 0x64
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e20b      	b.n	8002126 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	4b57      	ldr	r3, [pc, #348]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x104>
 8001d1a:	e000      	b.n	8001d1e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d06f      	beq.n	8001e0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d2a:	4b50      	ldr	r3, [pc, #320]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d017      	beq.n	8001d66 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d36:	4b4d      	ldr	r3, [pc, #308]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d105      	bne.n	8001d4e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d42:	4b4a      	ldr	r3, [pc, #296]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d4e:	4b47      	ldr	r3, [pc, #284]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d56:	2b0c      	cmp	r3, #12
 8001d58:	d11c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d5a:	4b44      	ldr	r3, [pc, #272]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d116      	bne.n	8001d94 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	4b41      	ldr	r3, [pc, #260]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_RCC_OscConfig+0x186>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e1d3      	b.n	8002126 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4937      	ldr	r1, [pc, #220]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	e03a      	b.n	8001e0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d020      	beq.n	8001dde <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9c:	4b34      	ldr	r3, [pc, #208]	@ (8001e70 <HAL_RCC_OscConfig+0x278>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7ff f91b 	bl	8000fdc <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001daa:	f7ff f917 	bl	8000fdc <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e1b4      	b.n	8002126 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b28      	ldr	r3, [pc, #160]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4925      	ldr	r1, [pc, #148]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]
 8001ddc:	e015      	b.n	8001e0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dde:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <HAL_RCC_OscConfig+0x278>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff f8fa 	bl	8000fdc <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dec:	f7ff f8f6 	bl	8000fdc <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e193      	b.n	8002126 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d036      	beq.n	8001e84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d016      	beq.n	8001e4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1e:	4b15      	ldr	r3, [pc, #84]	@ (8001e74 <HAL_RCC_OscConfig+0x27c>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e24:	f7ff f8da 	bl	8000fdc <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff f8d6 	bl	8000fdc <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e173      	b.n	8002126 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x234>
 8001e4a:	e01b      	b.n	8001e84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4c:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <HAL_RCC_OscConfig+0x27c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e52:	f7ff f8c3 	bl	8000fdc <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e58:	e00e      	b.n	8001e78 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5a:	f7ff f8bf 	bl	8000fdc <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d907      	bls.n	8001e78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e15c      	b.n	8002126 <HAL_RCC_OscConfig+0x52e>
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	42470000 	.word	0x42470000
 8001e74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e78:	4b8a      	ldr	r3, [pc, #552]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1ea      	bne.n	8001e5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 8097 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e92:	2300      	movs	r3, #0
 8001e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e96:	4b83      	ldr	r3, [pc, #524]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10f      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	4b7f      	ldr	r3, [pc, #508]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	4a7e      	ldr	r2, [pc, #504]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb2:	4b7c      	ldr	r3, [pc, #496]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec2:	4b79      	ldr	r3, [pc, #484]	@ (80020a8 <HAL_RCC_OscConfig+0x4b0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d118      	bne.n	8001f00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ece:	4b76      	ldr	r3, [pc, #472]	@ (80020a8 <HAL_RCC_OscConfig+0x4b0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a75      	ldr	r2, [pc, #468]	@ (80020a8 <HAL_RCC_OscConfig+0x4b0>)
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eda:	f7ff f87f 	bl	8000fdc <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee2:	f7ff f87b 	bl	8000fdc <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e118      	b.n	8002126 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	4b6c      	ldr	r3, [pc, #432]	@ (80020a8 <HAL_RCC_OscConfig+0x4b0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x31e>
 8001f08:	4b66      	ldr	r3, [pc, #408]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0c:	4a65      	ldr	r2, [pc, #404]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f14:	e01c      	b.n	8001f50 <HAL_RCC_OscConfig+0x358>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x340>
 8001f1e:	4b61      	ldr	r3, [pc, #388]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f22:	4a60      	ldr	r2, [pc, #384]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f2a:	4b5e      	ldr	r3, [pc, #376]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f2e:	4a5d      	ldr	r2, [pc, #372]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f36:	e00b      	b.n	8001f50 <HAL_RCC_OscConfig+0x358>
 8001f38:	4b5a      	ldr	r3, [pc, #360]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3c:	4a59      	ldr	r2, [pc, #356]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f44:	4b57      	ldr	r3, [pc, #348]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f48:	4a56      	ldr	r2, [pc, #344]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001f4a:	f023 0304 	bic.w	r3, r3, #4
 8001f4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d015      	beq.n	8001f84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7ff f840 	bl	8000fdc <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f60:	f7ff f83c 	bl	8000fdc <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e0d7      	b.n	8002126 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f76:	4b4b      	ldr	r3, [pc, #300]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0ee      	beq.n	8001f60 <HAL_RCC_OscConfig+0x368>
 8001f82:	e014      	b.n	8001fae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f84:	f7ff f82a 	bl	8000fdc <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8c:	f7ff f826 	bl	8000fdc <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e0c1      	b.n	8002126 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa2:	4b40      	ldr	r3, [pc, #256]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1ee      	bne.n	8001f8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	4a3a      	ldr	r2, [pc, #232]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001fba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80ad 	beq.w	8002124 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fca:	4b36      	ldr	r3, [pc, #216]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d060      	beq.n	8002098 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d145      	bne.n	800206a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fde:	4b33      	ldr	r3, [pc, #204]	@ (80020ac <HAL_RCC_OscConfig+0x4b4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7fe fffa 	bl	8000fdc <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7fe fff6 	bl	8000fdc <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e093      	b.n	8002126 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffe:	4b29      	ldr	r3, [pc, #164]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69da      	ldr	r2, [r3, #28]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002018:	019b      	lsls	r3, r3, #6
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002020:	085b      	lsrs	r3, r3, #1
 8002022:	3b01      	subs	r3, #1
 8002024:	041b      	lsls	r3, r3, #16
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202c:	061b      	lsls	r3, r3, #24
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	071b      	lsls	r3, r3, #28
 8002036:	491b      	ldr	r1, [pc, #108]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800203c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ac <HAL_RCC_OscConfig+0x4b4>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f7fe ffcb 	bl	8000fdc <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204a:	f7fe ffc7 	bl	8000fdc <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e064      	b.n	8002126 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205c:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x452>
 8002068:	e05c      	b.n	8002124 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206a:	4b10      	ldr	r3, [pc, #64]	@ (80020ac <HAL_RCC_OscConfig+0x4b4>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7fe ffb4 	bl	8000fdc <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002078:	f7fe ffb0 	bl	8000fdc <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e04d      	b.n	8002126 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208a:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <HAL_RCC_OscConfig+0x4ac>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x480>
 8002096:	e045      	b.n	8002124 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d107      	bne.n	80020b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e040      	b.n	8002126 <HAL_RCC_OscConfig+0x52e>
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40007000 	.word	0x40007000
 80020ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002130 <HAL_RCC_OscConfig+0x538>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d030      	beq.n	8002120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d129      	bne.n	8002120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d122      	bne.n	8002120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020e0:	4013      	ands	r3, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d119      	bne.n	8002120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f6:	085b      	lsrs	r3, r3, #1
 80020f8:	3b01      	subs	r3, #1
 80020fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d10f      	bne.n	8002120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800210c:	429a      	cmp	r2, r3
 800210e:	d107      	bne.n	8002120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800

08002134 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e07b      	b.n	800223e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214a:	2b00      	cmp	r3, #0
 800214c:	d108      	bne.n	8002160 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002156:	d009      	beq.n	800216c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
 800215e:	e005      	b.n	800216c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe fd60 	bl	8000c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f0:	ea42 0103 	orr.w	r1, r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	0c1b      	lsrs	r3, r3, #16
 800220a:	f003 0104 	and.w	r1, r3, #4
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002212:	f003 0210 	and.w	r2, r3, #16
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	69da      	ldr	r2, [r3, #28]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800222c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b088      	sub	sp, #32
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	4613      	mov	r3, r2
 8002254:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002256:	f7fe fec1 	bl	8000fdc <HAL_GetTick>
 800225a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d001      	beq.n	8002270 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800226c:	2302      	movs	r3, #2
 800226e:	e12a      	b.n	80024c6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <HAL_SPI_Transmit+0x36>
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e122      	b.n	80024c6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_SPI_Transmit+0x48>
 800228a:	2302      	movs	r3, #2
 800228c:	e11b      	b.n	80024c6 <HAL_SPI_Transmit+0x280>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2203      	movs	r2, #3
 800229a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	88fa      	ldrh	r2, [r7, #6]
 80022ae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	88fa      	ldrh	r2, [r7, #6]
 80022b4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022dc:	d10f      	bne.n	80022fe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002308:	2b40      	cmp	r3, #64	@ 0x40
 800230a:	d007      	beq.n	800231c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800231a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002324:	d152      	bne.n	80023cc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <HAL_SPI_Transmit+0xee>
 800232e:	8b7b      	ldrh	r3, [r7, #26]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d145      	bne.n	80023c0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002338:	881a      	ldrh	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002344:	1c9a      	adds	r2, r3, #2
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002358:	e032      	b.n	80023c0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b02      	cmp	r3, #2
 8002366:	d112      	bne.n	800238e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236c:	881a      	ldrh	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002378:	1c9a      	adds	r2, r3, #2
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002382:	b29b      	uxth	r3, r3
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800238c:	e018      	b.n	80023c0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800238e:	f7fe fe25 	bl	8000fdc <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d803      	bhi.n	80023a6 <HAL_SPI_Transmit+0x160>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a4:	d102      	bne.n	80023ac <HAL_SPI_Transmit+0x166>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e082      	b.n	80024c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1c7      	bne.n	800235a <HAL_SPI_Transmit+0x114>
 80023ca:	e053      	b.n	8002474 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <HAL_SPI_Transmit+0x194>
 80023d4:	8b7b      	ldrh	r3, [r7, #26]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d147      	bne.n	800246a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	330c      	adds	r3, #12
 80023e4:	7812      	ldrb	r2, [r2, #0]
 80023e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002400:	e033      	b.n	800246a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b02      	cmp	r3, #2
 800240e:	d113      	bne.n	8002438 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	330c      	adds	r3, #12
 800241a:	7812      	ldrb	r2, [r2, #0]
 800241c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800242c:	b29b      	uxth	r3, r3
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002436:	e018      	b.n	800246a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002438:	f7fe fdd0 	bl	8000fdc <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d803      	bhi.n	8002450 <HAL_SPI_Transmit+0x20a>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244e:	d102      	bne.n	8002456 <HAL_SPI_Transmit+0x210>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e02d      	b.n	80024c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1c6      	bne.n	8002402 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	6839      	ldr	r1, [r7, #0]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fbd9 	bl	8002c30 <SPI_EndRxTxTransaction>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2220      	movs	r2, #32
 8002488:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10a      	bne.n	80024a8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80024c4:	2300      	movs	r3, #0
  }
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3720      	adds	r7, #32
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b088      	sub	sp, #32
 80024d2:	af02      	add	r7, sp, #8
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	603b      	str	r3, [r7, #0]
 80024da:	4613      	mov	r3, r2
 80024dc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d001      	beq.n	80024ee <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80024ea:	2302      	movs	r3, #2
 80024ec:	e104      	b.n	80026f8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024f6:	d112      	bne.n	800251e <HAL_SPI_Receive+0x50>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10e      	bne.n	800251e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2204      	movs	r2, #4
 8002504:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002508:	88fa      	ldrh	r2, [r7, #6]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	4613      	mov	r3, r2
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f8f3 	bl	8002700 <HAL_SPI_TransmitReceive>
 800251a:	4603      	mov	r3, r0
 800251c:	e0ec      	b.n	80026f8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800251e:	f7fe fd5d 	bl	8000fdc <HAL_GetTick>
 8002522:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <HAL_SPI_Receive+0x62>
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0e1      	b.n	80026f8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_SPI_Receive+0x74>
 800253e:	2302      	movs	r3, #2
 8002540:	e0da      	b.n	80026f8 <HAL_SPI_Receive+0x22a>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2204      	movs	r2, #4
 800254e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	88fa      	ldrh	r2, [r7, #6]
 8002562:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	88fa      	ldrh	r2, [r7, #6]
 8002568:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002590:	d10f      	bne.n	80025b2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025bc:	2b40      	cmp	r3, #64	@ 0x40
 80025be:	d007      	beq.n	80025d0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d170      	bne.n	80026ba <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80025d8:	e035      	b.n	8002646 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d115      	bne.n	8002614 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f103 020c 	add.w	r2, r3, #12
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f4:	7812      	ldrb	r2, [r2, #0]
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002608:	b29b      	uxth	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002612:	e018      	b.n	8002646 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002614:	f7fe fce2 	bl	8000fdc <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d803      	bhi.n	800262c <HAL_SPI_Receive+0x15e>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262a:	d102      	bne.n	8002632 <HAL_SPI_Receive+0x164>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e058      	b.n	80026f8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1c4      	bne.n	80025da <HAL_SPI_Receive+0x10c>
 8002650:	e038      	b.n	80026c4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b01      	cmp	r3, #1
 800265e:	d113      	bne.n	8002688 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800266a:	b292      	uxth	r2, r2
 800266c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002672:	1c9a      	adds	r2, r3, #2
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002686:	e018      	b.n	80026ba <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002688:	f7fe fca8 	bl	8000fdc <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d803      	bhi.n	80026a0 <HAL_SPI_Receive+0x1d2>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d102      	bne.n	80026a6 <HAL_SPI_Receive+0x1d8>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e01e      	b.n	80026f8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1c6      	bne.n	8002652 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	6839      	ldr	r1, [r7, #0]
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 fa4b 	bl	8002b64 <SPI_EndRxTransaction>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2220      	movs	r2, #32
 80026d8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80026f6:	2300      	movs	r3, #0
  }
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	@ 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800270e:	2301      	movs	r3, #1
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002712:	f7fe fc63 	bl	8000fdc <HAL_GetTick>
 8002716:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800271e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002726:	887b      	ldrh	r3, [r7, #2]
 8002728:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800272a:	7ffb      	ldrb	r3, [r7, #31]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d00c      	beq.n	800274a <HAL_SPI_TransmitReceive+0x4a>
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002736:	d106      	bne.n	8002746 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <HAL_SPI_TransmitReceive+0x46>
 8002740:	7ffb      	ldrb	r3, [r7, #31]
 8002742:	2b04      	cmp	r3, #4
 8002744:	d001      	beq.n	800274a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002746:	2302      	movs	r3, #2
 8002748:	e17f      	b.n	8002a4a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_SPI_TransmitReceive+0x5c>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_SPI_TransmitReceive+0x5c>
 8002756:	887b      	ldrh	r3, [r7, #2]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e174      	b.n	8002a4a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_SPI_TransmitReceive+0x6e>
 800276a:	2302      	movs	r3, #2
 800276c:	e16d      	b.n	8002a4a <HAL_SPI_TransmitReceive+0x34a>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b04      	cmp	r3, #4
 8002780:	d003      	beq.n	800278a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2205      	movs	r2, #5
 8002786:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	887a      	ldrh	r2, [r7, #2]
 800279a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	887a      	ldrh	r2, [r7, #2]
 80027a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	887a      	ldrh	r2, [r7, #2]
 80027ac:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	887a      	ldrh	r2, [r7, #2]
 80027b2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ca:	2b40      	cmp	r3, #64	@ 0x40
 80027cc:	d007      	beq.n	80027de <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027e6:	d17e      	bne.n	80028e6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_SPI_TransmitReceive+0xf6>
 80027f0:	8afb      	ldrh	r3, [r7, #22]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d16c      	bne.n	80028d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	881a      	ldrh	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	1c9a      	adds	r2, r3, #2
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800281a:	e059      	b.n	80028d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b02      	cmp	r3, #2
 8002828:	d11b      	bne.n	8002862 <HAL_SPI_TransmitReceive+0x162>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d016      	beq.n	8002862 <HAL_SPI_TransmitReceive+0x162>
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	2b01      	cmp	r3, #1
 8002838:	d113      	bne.n	8002862 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	881a      	ldrh	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	1c9a      	adds	r2, r3, #2
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d119      	bne.n	80028a4 <HAL_SPI_TransmitReceive+0x1a4>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d014      	beq.n	80028a4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002884:	b292      	uxth	r2, r2
 8002886:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288c:	1c9a      	adds	r2, r3, #2
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028a0:	2301      	movs	r3, #1
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028a4:	f7fe fb9a 	bl	8000fdc <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d80d      	bhi.n	80028d0 <HAL_SPI_TransmitReceive+0x1d0>
 80028b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ba:	d009      	beq.n	80028d0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e0bc      	b.n	8002a4a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1a0      	bne.n	800281c <HAL_SPI_TransmitReceive+0x11c>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d19b      	bne.n	800281c <HAL_SPI_TransmitReceive+0x11c>
 80028e4:	e082      	b.n	80029ec <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <HAL_SPI_TransmitReceive+0x1f4>
 80028ee:	8afb      	ldrh	r3, [r7, #22]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d171      	bne.n	80029d8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	330c      	adds	r3, #12
 80028fe:	7812      	ldrb	r2, [r2, #0]
 8002900:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002910:	b29b      	uxth	r3, r3
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800291a:	e05d      	b.n	80029d8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b02      	cmp	r3, #2
 8002928:	d11c      	bne.n	8002964 <HAL_SPI_TransmitReceive+0x264>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800292e:	b29b      	uxth	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d017      	beq.n	8002964 <HAL_SPI_TransmitReceive+0x264>
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	2b01      	cmp	r3, #1
 8002938:	d114      	bne.n	8002964 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	330c      	adds	r3, #12
 8002944:	7812      	ldrb	r2, [r2, #0]
 8002946:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b01      	cmp	r3, #1
 8002970:	d119      	bne.n	80029a6 <HAL_SPI_TransmitReceive+0x2a6>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002976:	b29b      	uxth	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d014      	beq.n	80029a6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029a2:	2301      	movs	r3, #1
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029a6:	f7fe fb19 	bl	8000fdc <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d803      	bhi.n	80029be <HAL_SPI_TransmitReceive+0x2be>
 80029b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d102      	bne.n	80029c4 <HAL_SPI_TransmitReceive+0x2c4>
 80029be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d109      	bne.n	80029d8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e038      	b.n	8002a4a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d19c      	bne.n	800291c <HAL_SPI_TransmitReceive+0x21c>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d197      	bne.n	800291c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029ec:	6a3a      	ldr	r2, [r7, #32]
 80029ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f91d 	bl	8002c30 <SPI_EndRxTxTransaction>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e01d      	b.n	8002a4a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10a      	bne.n	8002a2c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002a48:	2300      	movs	r3, #0
  }
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3728      	adds	r7, #40	@ 0x28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a64:	f7fe faba 	bl	8000fdc <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	4413      	add	r3, r2
 8002a72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a74:	f7fe fab2 	bl	8000fdc <HAL_GetTick>
 8002a78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a7a:	4b39      	ldr	r3, [pc, #228]	@ (8002b60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	015b      	lsls	r3, r3, #5
 8002a80:	0d1b      	lsrs	r3, r3, #20
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	fb02 f303 	mul.w	r3, r2, r3
 8002a88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a8a:	e054      	b.n	8002b36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a92:	d050      	beq.n	8002b36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a94:	f7fe faa2 	bl	8000fdc <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d902      	bls.n	8002aaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d13d      	bne.n	8002b26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ab8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ac2:	d111      	bne.n	8002ae8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002acc:	d004      	beq.n	8002ad8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ad6:	d107      	bne.n	8002ae8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ae6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002af0:	d10f      	bne.n	8002b12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e017      	b.n	8002b56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	bf0c      	ite	eq
 8002b46:	2301      	moveq	r3, #1
 8002b48:	2300      	movne	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d19b      	bne.n	8002a8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000000 	.word	0x20000000

08002b64 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b78:	d111      	bne.n	8002b9e <SPI_EndRxTransaction+0x3a>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b82:	d004      	beq.n	8002b8e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b8c:	d107      	bne.n	8002b9e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b9c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ba6:	d12a      	bne.n	8002bfe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bb0:	d012      	beq.n	8002bd8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2180      	movs	r1, #128	@ 0x80
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7ff ff49 	bl	8002a54 <SPI_WaitFlagStateUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d02d      	beq.n	8002c24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bcc:	f043 0220 	orr.w	r2, r3, #32
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e026      	b.n	8002c26 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2200      	movs	r2, #0
 8002be0:	2101      	movs	r1, #1
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7ff ff36 	bl	8002a54 <SPI_WaitFlagStateUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d01a      	beq.n	8002c24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf2:	f043 0220 	orr.w	r2, r3, #32
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e013      	b.n	8002c26 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2200      	movs	r2, #0
 8002c06:	2101      	movs	r1, #1
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f7ff ff23 	bl	8002a54 <SPI_WaitFlagStateUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d007      	beq.n	8002c24 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c18:	f043 0220 	orr.w	r2, r3, #32
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e000      	b.n	8002c26 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2201      	movs	r2, #1
 8002c44:	2102      	movs	r1, #2
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f7ff ff04 	bl	8002a54 <SPI_WaitFlagStateUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c56:	f043 0220 	orr.w	r2, r3, #32
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e032      	b.n	8002cc8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c62:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd0 <SPI_EndRxTxTransaction+0xa0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd4 <SPI_EndRxTxTransaction+0xa4>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	0d5b      	lsrs	r3, r3, #21
 8002c6e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c80:	d112      	bne.n	8002ca8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2180      	movs	r1, #128	@ 0x80
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f7ff fee1 	bl	8002a54 <SPI_WaitFlagStateUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d016      	beq.n	8002cc6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9c:	f043 0220 	orr.w	r2, r3, #32
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e00f      	b.n	8002cc8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cbe:	2b80      	cmp	r3, #128	@ 0x80
 8002cc0:	d0f2      	beq.n	8002ca8 <SPI_EndRxTxTransaction+0x78>
 8002cc2:	e000      	b.n	8002cc6 <SPI_EndRxTxTransaction+0x96>
        break;
 8002cc4:	bf00      	nop
  }

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	165e9f81 	.word	0x165e9f81

08002cd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e042      	b.n	8002d70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe f81c 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2224      	movs	r2, #36	@ 0x24
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f973 	bl	8003008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08a      	sub	sp, #40	@ 0x28
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d175      	bne.n	8002e84 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_UART_Transmit+0x2c>
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e06e      	b.n	8002e86 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2221      	movs	r2, #33	@ 0x21
 8002db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002db6:	f7fe f911 	bl	8000fdc <HAL_GetTick>
 8002dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	88fa      	ldrh	r2, [r7, #6]
 8002dc0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	88fa      	ldrh	r2, [r7, #6]
 8002dc6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dd0:	d108      	bne.n	8002de4 <HAL_UART_Transmit+0x6c>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d104      	bne.n	8002de4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	e003      	b.n	8002dec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002dec:	e02e      	b.n	8002e4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2200      	movs	r2, #0
 8002df6:	2180      	movs	r1, #128	@ 0x80
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f848 	bl	8002e8e <UART_WaitOnFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e03a      	b.n	8002e86 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10b      	bne.n	8002e2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	3302      	adds	r3, #2
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	e007      	b.n	8002e3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	781a      	ldrb	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1cb      	bne.n	8002dee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2140      	movs	r1, #64	@ 0x40
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f814 	bl	8002e8e <UART_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e006      	b.n	8002e86 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e000      	b.n	8002e86 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
  }
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b086      	sub	sp, #24
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e9e:	e03b      	b.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea6:	d037      	beq.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea8:	f7fe f898 	bl	8000fdc <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	6a3a      	ldr	r2, [r7, #32]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d302      	bcc.n	8002ebe <UART_WaitOnFlagUntilTimeout+0x30>
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e03a      	b.n	8002f38 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d023      	beq.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b80      	cmp	r3, #128	@ 0x80
 8002ed4:	d020      	beq.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b40      	cmp	r3, #64	@ 0x40
 8002eda:	d01d      	beq.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d116      	bne.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f81d 	bl	8002f40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2208      	movs	r2, #8
 8002f0a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e00f      	b.n	8002f38 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4013      	ands	r3, r2
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d0b4      	beq.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b095      	sub	sp, #84	@ 0x54
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f52:	e853 3f00 	ldrex	r3, [r3]
 8002f56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	330c      	adds	r3, #12
 8002f66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f68:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f70:	e841 2300 	strex	r3, r2, [r1]
 8002f74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e5      	bne.n	8002f48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3314      	adds	r3, #20
 8002f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	e853 3f00 	ldrex	r3, [r3]
 8002f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3314      	adds	r3, #20
 8002f9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fa4:	e841 2300 	strex	r3, r2, [r1]
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e5      	bne.n	8002f7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d119      	bne.n	8002fec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f023 0310 	bic.w	r3, r3, #16
 8002fce:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fd8:	61ba      	str	r2, [r7, #24]
 8002fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	6979      	ldr	r1, [r7, #20]
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e5      	bne.n	8002fb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ffa:	bf00      	nop
 8002ffc:	3754      	adds	r7, #84	@ 0x54
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800300c:	b0c0      	sub	sp, #256	@ 0x100
 800300e:	af00      	add	r7, sp, #0
 8003010:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003024:	68d9      	ldr	r1, [r3, #12]
 8003026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	ea40 0301 	orr.w	r3, r0, r1
 8003030:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	431a      	orrs	r2, r3
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	431a      	orrs	r2, r3
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003060:	f021 010c 	bic.w	r1, r1, #12
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800306e:	430b      	orrs	r3, r1
 8003070:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800307e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003082:	6999      	ldr	r1, [r3, #24]
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	ea40 0301 	orr.w	r3, r0, r1
 800308e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4b8f      	ldr	r3, [pc, #572]	@ (80032d4 <UART_SetConfig+0x2cc>)
 8003098:	429a      	cmp	r2, r3
 800309a:	d005      	beq.n	80030a8 <UART_SetConfig+0xa0>
 800309c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4b8d      	ldr	r3, [pc, #564]	@ (80032d8 <UART_SetConfig+0x2d0>)
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d104      	bne.n	80030b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030a8:	f7fe fb62 	bl	8001770 <HAL_RCC_GetPCLK2Freq>
 80030ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80030b0:	e003      	b.n	80030ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030b2:	f7fe fb49 	bl	8001748 <HAL_RCC_GetPCLK1Freq>
 80030b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030c4:	f040 810c 	bne.w	80032e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030cc:	2200      	movs	r2, #0
 80030ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80030d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80030da:	4622      	mov	r2, r4
 80030dc:	462b      	mov	r3, r5
 80030de:	1891      	adds	r1, r2, r2
 80030e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80030e2:	415b      	adcs	r3, r3
 80030e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030ea:	4621      	mov	r1, r4
 80030ec:	eb12 0801 	adds.w	r8, r2, r1
 80030f0:	4629      	mov	r1, r5
 80030f2:	eb43 0901 	adc.w	r9, r3, r1
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800310a:	4690      	mov	r8, r2
 800310c:	4699      	mov	r9, r3
 800310e:	4623      	mov	r3, r4
 8003110:	eb18 0303 	adds.w	r3, r8, r3
 8003114:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003118:	462b      	mov	r3, r5
 800311a:	eb49 0303 	adc.w	r3, r9, r3
 800311e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800312e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003132:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003136:	460b      	mov	r3, r1
 8003138:	18db      	adds	r3, r3, r3
 800313a:	653b      	str	r3, [r7, #80]	@ 0x50
 800313c:	4613      	mov	r3, r2
 800313e:	eb42 0303 	adc.w	r3, r2, r3
 8003142:	657b      	str	r3, [r7, #84]	@ 0x54
 8003144:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003148:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800314c:	f7fd f8b8 	bl	80002c0 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4b61      	ldr	r3, [pc, #388]	@ (80032dc <UART_SetConfig+0x2d4>)
 8003156:	fba3 2302 	umull	r2, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	011c      	lsls	r4, r3, #4
 800315e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003162:	2200      	movs	r2, #0
 8003164:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003168:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800316c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003170:	4642      	mov	r2, r8
 8003172:	464b      	mov	r3, r9
 8003174:	1891      	adds	r1, r2, r2
 8003176:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003178:	415b      	adcs	r3, r3
 800317a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800317c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003180:	4641      	mov	r1, r8
 8003182:	eb12 0a01 	adds.w	sl, r2, r1
 8003186:	4649      	mov	r1, r9
 8003188:	eb43 0b01 	adc.w	fp, r3, r1
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003198:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800319c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031a0:	4692      	mov	sl, r2
 80031a2:	469b      	mov	fp, r3
 80031a4:	4643      	mov	r3, r8
 80031a6:	eb1a 0303 	adds.w	r3, sl, r3
 80031aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031ae:	464b      	mov	r3, r9
 80031b0:	eb4b 0303 	adc.w	r3, fp, r3
 80031b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80031c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031cc:	460b      	mov	r3, r1
 80031ce:	18db      	adds	r3, r3, r3
 80031d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80031d2:	4613      	mov	r3, r2
 80031d4:	eb42 0303 	adc.w	r3, r2, r3
 80031d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80031da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80031e2:	f7fd f86d 	bl	80002c0 <__aeabi_uldivmod>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4611      	mov	r1, r2
 80031ec:	4b3b      	ldr	r3, [pc, #236]	@ (80032dc <UART_SetConfig+0x2d4>)
 80031ee:	fba3 2301 	umull	r2, r3, r3, r1
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	2264      	movs	r2, #100	@ 0x64
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	1acb      	subs	r3, r1, r3
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003202:	4b36      	ldr	r3, [pc, #216]	@ (80032dc <UART_SetConfig+0x2d4>)
 8003204:	fba3 2302 	umull	r2, r3, r3, r2
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003210:	441c      	add	r4, r3
 8003212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003216:	2200      	movs	r2, #0
 8003218:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800321c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003220:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003224:	4642      	mov	r2, r8
 8003226:	464b      	mov	r3, r9
 8003228:	1891      	adds	r1, r2, r2
 800322a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800322c:	415b      	adcs	r3, r3
 800322e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003230:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003234:	4641      	mov	r1, r8
 8003236:	1851      	adds	r1, r2, r1
 8003238:	6339      	str	r1, [r7, #48]	@ 0x30
 800323a:	4649      	mov	r1, r9
 800323c:	414b      	adcs	r3, r1
 800323e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800324c:	4659      	mov	r1, fp
 800324e:	00cb      	lsls	r3, r1, #3
 8003250:	4651      	mov	r1, sl
 8003252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003256:	4651      	mov	r1, sl
 8003258:	00ca      	lsls	r2, r1, #3
 800325a:	4610      	mov	r0, r2
 800325c:	4619      	mov	r1, r3
 800325e:	4603      	mov	r3, r0
 8003260:	4642      	mov	r2, r8
 8003262:	189b      	adds	r3, r3, r2
 8003264:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003268:	464b      	mov	r3, r9
 800326a:	460a      	mov	r2, r1
 800326c:	eb42 0303 	adc.w	r3, r2, r3
 8003270:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003280:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003284:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003288:	460b      	mov	r3, r1
 800328a:	18db      	adds	r3, r3, r3
 800328c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800328e:	4613      	mov	r3, r2
 8003290:	eb42 0303 	adc.w	r3, r2, r3
 8003294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003296:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800329a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800329e:	f7fd f80f 	bl	80002c0 <__aeabi_uldivmod>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4b0d      	ldr	r3, [pc, #52]	@ (80032dc <UART_SetConfig+0x2d4>)
 80032a8:	fba3 1302 	umull	r1, r3, r3, r2
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	2164      	movs	r1, #100	@ 0x64
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	3332      	adds	r3, #50	@ 0x32
 80032ba:	4a08      	ldr	r2, [pc, #32]	@ (80032dc <UART_SetConfig+0x2d4>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	f003 0207 	and.w	r2, r3, #7
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4422      	add	r2, r4
 80032ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032d0:	e106      	b.n	80034e0 <UART_SetConfig+0x4d8>
 80032d2:	bf00      	nop
 80032d4:	40011000 	.word	0x40011000
 80032d8:	40011400 	.word	0x40011400
 80032dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032e4:	2200      	movs	r2, #0
 80032e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80032ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80032f2:	4642      	mov	r2, r8
 80032f4:	464b      	mov	r3, r9
 80032f6:	1891      	adds	r1, r2, r2
 80032f8:	6239      	str	r1, [r7, #32]
 80032fa:	415b      	adcs	r3, r3
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80032fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003302:	4641      	mov	r1, r8
 8003304:	1854      	adds	r4, r2, r1
 8003306:	4649      	mov	r1, r9
 8003308:	eb43 0501 	adc.w	r5, r3, r1
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	00eb      	lsls	r3, r5, #3
 8003316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800331a:	00e2      	lsls	r2, r4, #3
 800331c:	4614      	mov	r4, r2
 800331e:	461d      	mov	r5, r3
 8003320:	4643      	mov	r3, r8
 8003322:	18e3      	adds	r3, r4, r3
 8003324:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003328:	464b      	mov	r3, r9
 800332a:	eb45 0303 	adc.w	r3, r5, r3
 800332e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800333e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800334e:	4629      	mov	r1, r5
 8003350:	008b      	lsls	r3, r1, #2
 8003352:	4621      	mov	r1, r4
 8003354:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003358:	4621      	mov	r1, r4
 800335a:	008a      	lsls	r2, r1, #2
 800335c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003360:	f7fc ffae 	bl	80002c0 <__aeabi_uldivmod>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4b60      	ldr	r3, [pc, #384]	@ (80034ec <UART_SetConfig+0x4e4>)
 800336a:	fba3 2302 	umull	r2, r3, r3, r2
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	011c      	lsls	r4, r3, #4
 8003372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003376:	2200      	movs	r2, #0
 8003378:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800337c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003380:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003384:	4642      	mov	r2, r8
 8003386:	464b      	mov	r3, r9
 8003388:	1891      	adds	r1, r2, r2
 800338a:	61b9      	str	r1, [r7, #24]
 800338c:	415b      	adcs	r3, r3
 800338e:	61fb      	str	r3, [r7, #28]
 8003390:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003394:	4641      	mov	r1, r8
 8003396:	1851      	adds	r1, r2, r1
 8003398:	6139      	str	r1, [r7, #16]
 800339a:	4649      	mov	r1, r9
 800339c:	414b      	adcs	r3, r1
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033ac:	4659      	mov	r1, fp
 80033ae:	00cb      	lsls	r3, r1, #3
 80033b0:	4651      	mov	r1, sl
 80033b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033b6:	4651      	mov	r1, sl
 80033b8:	00ca      	lsls	r2, r1, #3
 80033ba:	4610      	mov	r0, r2
 80033bc:	4619      	mov	r1, r3
 80033be:	4603      	mov	r3, r0
 80033c0:	4642      	mov	r2, r8
 80033c2:	189b      	adds	r3, r3, r2
 80033c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033c8:	464b      	mov	r3, r9
 80033ca:	460a      	mov	r2, r1
 80033cc:	eb42 0303 	adc.w	r3, r2, r3
 80033d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033ec:	4649      	mov	r1, r9
 80033ee:	008b      	lsls	r3, r1, #2
 80033f0:	4641      	mov	r1, r8
 80033f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033f6:	4641      	mov	r1, r8
 80033f8:	008a      	lsls	r2, r1, #2
 80033fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033fe:	f7fc ff5f 	bl	80002c0 <__aeabi_uldivmod>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4611      	mov	r1, r2
 8003408:	4b38      	ldr	r3, [pc, #224]	@ (80034ec <UART_SetConfig+0x4e4>)
 800340a:	fba3 2301 	umull	r2, r3, r3, r1
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	2264      	movs	r2, #100	@ 0x64
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	1acb      	subs	r3, r1, r3
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	3332      	adds	r3, #50	@ 0x32
 800341c:	4a33      	ldr	r2, [pc, #204]	@ (80034ec <UART_SetConfig+0x4e4>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003428:	441c      	add	r4, r3
 800342a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800342e:	2200      	movs	r2, #0
 8003430:	673b      	str	r3, [r7, #112]	@ 0x70
 8003432:	677a      	str	r2, [r7, #116]	@ 0x74
 8003434:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003438:	4642      	mov	r2, r8
 800343a:	464b      	mov	r3, r9
 800343c:	1891      	adds	r1, r2, r2
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	415b      	adcs	r3, r3
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003448:	4641      	mov	r1, r8
 800344a:	1851      	adds	r1, r2, r1
 800344c:	6039      	str	r1, [r7, #0]
 800344e:	4649      	mov	r1, r9
 8003450:	414b      	adcs	r3, r1
 8003452:	607b      	str	r3, [r7, #4]
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003460:	4659      	mov	r1, fp
 8003462:	00cb      	lsls	r3, r1, #3
 8003464:	4651      	mov	r1, sl
 8003466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800346a:	4651      	mov	r1, sl
 800346c:	00ca      	lsls	r2, r1, #3
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	4603      	mov	r3, r0
 8003474:	4642      	mov	r2, r8
 8003476:	189b      	adds	r3, r3, r2
 8003478:	66bb      	str	r3, [r7, #104]	@ 0x68
 800347a:	464b      	mov	r3, r9
 800347c:	460a      	mov	r2, r1
 800347e:	eb42 0303 	adc.w	r3, r2, r3
 8003482:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	663b      	str	r3, [r7, #96]	@ 0x60
 800348e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800349c:	4649      	mov	r1, r9
 800349e:	008b      	lsls	r3, r1, #2
 80034a0:	4641      	mov	r1, r8
 80034a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034a6:	4641      	mov	r1, r8
 80034a8:	008a      	lsls	r2, r1, #2
 80034aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80034ae:	f7fc ff07 	bl	80002c0 <__aeabi_uldivmod>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4b0d      	ldr	r3, [pc, #52]	@ (80034ec <UART_SetConfig+0x4e4>)
 80034b8:	fba3 1302 	umull	r1, r3, r3, r2
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	2164      	movs	r1, #100	@ 0x64
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	3332      	adds	r3, #50	@ 0x32
 80034ca:	4a08      	ldr	r2, [pc, #32]	@ (80034ec <UART_SetConfig+0x4e4>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	f003 020f 	and.w	r2, r3, #15
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4422      	add	r2, r4
 80034de:	609a      	str	r2, [r3, #8]
}
 80034e0:	bf00      	nop
 80034e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80034e6:	46bd      	mov	sp, r7
 80034e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ec:	51eb851f 	.word	0x51eb851f

080034f0 <siprintf>:
 80034f0:	b40e      	push	{r1, r2, r3}
 80034f2:	b500      	push	{lr}
 80034f4:	b09c      	sub	sp, #112	@ 0x70
 80034f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80034f8:	9002      	str	r0, [sp, #8]
 80034fa:	9006      	str	r0, [sp, #24]
 80034fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003500:	4809      	ldr	r0, [pc, #36]	@ (8003528 <siprintf+0x38>)
 8003502:	9107      	str	r1, [sp, #28]
 8003504:	9104      	str	r1, [sp, #16]
 8003506:	4909      	ldr	r1, [pc, #36]	@ (800352c <siprintf+0x3c>)
 8003508:	f853 2b04 	ldr.w	r2, [r3], #4
 800350c:	9105      	str	r1, [sp, #20]
 800350e:	6800      	ldr	r0, [r0, #0]
 8003510:	9301      	str	r3, [sp, #4]
 8003512:	a902      	add	r1, sp, #8
 8003514:	f000 f994 	bl	8003840 <_svfiprintf_r>
 8003518:	9b02      	ldr	r3, [sp, #8]
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	b01c      	add	sp, #112	@ 0x70
 8003520:	f85d eb04 	ldr.w	lr, [sp], #4
 8003524:	b003      	add	sp, #12
 8003526:	4770      	bx	lr
 8003528:	2000000c 	.word	0x2000000c
 800352c:	ffff0208 	.word	0xffff0208

08003530 <memset>:
 8003530:	4402      	add	r2, r0
 8003532:	4603      	mov	r3, r0
 8003534:	4293      	cmp	r3, r2
 8003536:	d100      	bne.n	800353a <memset+0xa>
 8003538:	4770      	bx	lr
 800353a:	f803 1b01 	strb.w	r1, [r3], #1
 800353e:	e7f9      	b.n	8003534 <memset+0x4>

08003540 <__errno>:
 8003540:	4b01      	ldr	r3, [pc, #4]	@ (8003548 <__errno+0x8>)
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	2000000c 	.word	0x2000000c

0800354c <__libc_init_array>:
 800354c:	b570      	push	{r4, r5, r6, lr}
 800354e:	4d0d      	ldr	r5, [pc, #52]	@ (8003584 <__libc_init_array+0x38>)
 8003550:	4c0d      	ldr	r4, [pc, #52]	@ (8003588 <__libc_init_array+0x3c>)
 8003552:	1b64      	subs	r4, r4, r5
 8003554:	10a4      	asrs	r4, r4, #2
 8003556:	2600      	movs	r6, #0
 8003558:	42a6      	cmp	r6, r4
 800355a:	d109      	bne.n	8003570 <__libc_init_array+0x24>
 800355c:	4d0b      	ldr	r5, [pc, #44]	@ (800358c <__libc_init_array+0x40>)
 800355e:	4c0c      	ldr	r4, [pc, #48]	@ (8003590 <__libc_init_array+0x44>)
 8003560:	f000 fc66 	bl	8003e30 <_init>
 8003564:	1b64      	subs	r4, r4, r5
 8003566:	10a4      	asrs	r4, r4, #2
 8003568:	2600      	movs	r6, #0
 800356a:	42a6      	cmp	r6, r4
 800356c:	d105      	bne.n	800357a <__libc_init_array+0x2e>
 800356e:	bd70      	pop	{r4, r5, r6, pc}
 8003570:	f855 3b04 	ldr.w	r3, [r5], #4
 8003574:	4798      	blx	r3
 8003576:	3601      	adds	r6, #1
 8003578:	e7ee      	b.n	8003558 <__libc_init_array+0xc>
 800357a:	f855 3b04 	ldr.w	r3, [r5], #4
 800357e:	4798      	blx	r3
 8003580:	3601      	adds	r6, #1
 8003582:	e7f2      	b.n	800356a <__libc_init_array+0x1e>
 8003584:	08003f68 	.word	0x08003f68
 8003588:	08003f68 	.word	0x08003f68
 800358c:	08003f68 	.word	0x08003f68
 8003590:	08003f6c 	.word	0x08003f6c

08003594 <__retarget_lock_acquire_recursive>:
 8003594:	4770      	bx	lr

08003596 <__retarget_lock_release_recursive>:
 8003596:	4770      	bx	lr

08003598 <_free_r>:
 8003598:	b538      	push	{r3, r4, r5, lr}
 800359a:	4605      	mov	r5, r0
 800359c:	2900      	cmp	r1, #0
 800359e:	d041      	beq.n	8003624 <_free_r+0x8c>
 80035a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035a4:	1f0c      	subs	r4, r1, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bfb8      	it	lt
 80035aa:	18e4      	addlt	r4, r4, r3
 80035ac:	f000 f8e0 	bl	8003770 <__malloc_lock>
 80035b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003628 <_free_r+0x90>)
 80035b2:	6813      	ldr	r3, [r2, #0]
 80035b4:	b933      	cbnz	r3, 80035c4 <_free_r+0x2c>
 80035b6:	6063      	str	r3, [r4, #4]
 80035b8:	6014      	str	r4, [r2, #0]
 80035ba:	4628      	mov	r0, r5
 80035bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035c0:	f000 b8dc 	b.w	800377c <__malloc_unlock>
 80035c4:	42a3      	cmp	r3, r4
 80035c6:	d908      	bls.n	80035da <_free_r+0x42>
 80035c8:	6820      	ldr	r0, [r4, #0]
 80035ca:	1821      	adds	r1, r4, r0
 80035cc:	428b      	cmp	r3, r1
 80035ce:	bf01      	itttt	eq
 80035d0:	6819      	ldreq	r1, [r3, #0]
 80035d2:	685b      	ldreq	r3, [r3, #4]
 80035d4:	1809      	addeq	r1, r1, r0
 80035d6:	6021      	streq	r1, [r4, #0]
 80035d8:	e7ed      	b.n	80035b6 <_free_r+0x1e>
 80035da:	461a      	mov	r2, r3
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	b10b      	cbz	r3, 80035e4 <_free_r+0x4c>
 80035e0:	42a3      	cmp	r3, r4
 80035e2:	d9fa      	bls.n	80035da <_free_r+0x42>
 80035e4:	6811      	ldr	r1, [r2, #0]
 80035e6:	1850      	adds	r0, r2, r1
 80035e8:	42a0      	cmp	r0, r4
 80035ea:	d10b      	bne.n	8003604 <_free_r+0x6c>
 80035ec:	6820      	ldr	r0, [r4, #0]
 80035ee:	4401      	add	r1, r0
 80035f0:	1850      	adds	r0, r2, r1
 80035f2:	4283      	cmp	r3, r0
 80035f4:	6011      	str	r1, [r2, #0]
 80035f6:	d1e0      	bne.n	80035ba <_free_r+0x22>
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	6053      	str	r3, [r2, #4]
 80035fe:	4408      	add	r0, r1
 8003600:	6010      	str	r0, [r2, #0]
 8003602:	e7da      	b.n	80035ba <_free_r+0x22>
 8003604:	d902      	bls.n	800360c <_free_r+0x74>
 8003606:	230c      	movs	r3, #12
 8003608:	602b      	str	r3, [r5, #0]
 800360a:	e7d6      	b.n	80035ba <_free_r+0x22>
 800360c:	6820      	ldr	r0, [r4, #0]
 800360e:	1821      	adds	r1, r4, r0
 8003610:	428b      	cmp	r3, r1
 8003612:	bf04      	itt	eq
 8003614:	6819      	ldreq	r1, [r3, #0]
 8003616:	685b      	ldreq	r3, [r3, #4]
 8003618:	6063      	str	r3, [r4, #4]
 800361a:	bf04      	itt	eq
 800361c:	1809      	addeq	r1, r1, r0
 800361e:	6021      	streq	r1, [r4, #0]
 8003620:	6054      	str	r4, [r2, #4]
 8003622:	e7ca      	b.n	80035ba <_free_r+0x22>
 8003624:	bd38      	pop	{r3, r4, r5, pc}
 8003626:	bf00      	nop
 8003628:	20000264 	.word	0x20000264

0800362c <sbrk_aligned>:
 800362c:	b570      	push	{r4, r5, r6, lr}
 800362e:	4e0f      	ldr	r6, [pc, #60]	@ (800366c <sbrk_aligned+0x40>)
 8003630:	460c      	mov	r4, r1
 8003632:	6831      	ldr	r1, [r6, #0]
 8003634:	4605      	mov	r5, r0
 8003636:	b911      	cbnz	r1, 800363e <sbrk_aligned+0x12>
 8003638:	f000 fba6 	bl	8003d88 <_sbrk_r>
 800363c:	6030      	str	r0, [r6, #0]
 800363e:	4621      	mov	r1, r4
 8003640:	4628      	mov	r0, r5
 8003642:	f000 fba1 	bl	8003d88 <_sbrk_r>
 8003646:	1c43      	adds	r3, r0, #1
 8003648:	d103      	bne.n	8003652 <sbrk_aligned+0x26>
 800364a:	f04f 34ff 	mov.w	r4, #4294967295
 800364e:	4620      	mov	r0, r4
 8003650:	bd70      	pop	{r4, r5, r6, pc}
 8003652:	1cc4      	adds	r4, r0, #3
 8003654:	f024 0403 	bic.w	r4, r4, #3
 8003658:	42a0      	cmp	r0, r4
 800365a:	d0f8      	beq.n	800364e <sbrk_aligned+0x22>
 800365c:	1a21      	subs	r1, r4, r0
 800365e:	4628      	mov	r0, r5
 8003660:	f000 fb92 	bl	8003d88 <_sbrk_r>
 8003664:	3001      	adds	r0, #1
 8003666:	d1f2      	bne.n	800364e <sbrk_aligned+0x22>
 8003668:	e7ef      	b.n	800364a <sbrk_aligned+0x1e>
 800366a:	bf00      	nop
 800366c:	20000260 	.word	0x20000260

08003670 <_malloc_r>:
 8003670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003674:	1ccd      	adds	r5, r1, #3
 8003676:	f025 0503 	bic.w	r5, r5, #3
 800367a:	3508      	adds	r5, #8
 800367c:	2d0c      	cmp	r5, #12
 800367e:	bf38      	it	cc
 8003680:	250c      	movcc	r5, #12
 8003682:	2d00      	cmp	r5, #0
 8003684:	4606      	mov	r6, r0
 8003686:	db01      	blt.n	800368c <_malloc_r+0x1c>
 8003688:	42a9      	cmp	r1, r5
 800368a:	d904      	bls.n	8003696 <_malloc_r+0x26>
 800368c:	230c      	movs	r3, #12
 800368e:	6033      	str	r3, [r6, #0]
 8003690:	2000      	movs	r0, #0
 8003692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003696:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800376c <_malloc_r+0xfc>
 800369a:	f000 f869 	bl	8003770 <__malloc_lock>
 800369e:	f8d8 3000 	ldr.w	r3, [r8]
 80036a2:	461c      	mov	r4, r3
 80036a4:	bb44      	cbnz	r4, 80036f8 <_malloc_r+0x88>
 80036a6:	4629      	mov	r1, r5
 80036a8:	4630      	mov	r0, r6
 80036aa:	f7ff ffbf 	bl	800362c <sbrk_aligned>
 80036ae:	1c43      	adds	r3, r0, #1
 80036b0:	4604      	mov	r4, r0
 80036b2:	d158      	bne.n	8003766 <_malloc_r+0xf6>
 80036b4:	f8d8 4000 	ldr.w	r4, [r8]
 80036b8:	4627      	mov	r7, r4
 80036ba:	2f00      	cmp	r7, #0
 80036bc:	d143      	bne.n	8003746 <_malloc_r+0xd6>
 80036be:	2c00      	cmp	r4, #0
 80036c0:	d04b      	beq.n	800375a <_malloc_r+0xea>
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	4639      	mov	r1, r7
 80036c6:	4630      	mov	r0, r6
 80036c8:	eb04 0903 	add.w	r9, r4, r3
 80036cc:	f000 fb5c 	bl	8003d88 <_sbrk_r>
 80036d0:	4581      	cmp	r9, r0
 80036d2:	d142      	bne.n	800375a <_malloc_r+0xea>
 80036d4:	6821      	ldr	r1, [r4, #0]
 80036d6:	1a6d      	subs	r5, r5, r1
 80036d8:	4629      	mov	r1, r5
 80036da:	4630      	mov	r0, r6
 80036dc:	f7ff ffa6 	bl	800362c <sbrk_aligned>
 80036e0:	3001      	adds	r0, #1
 80036e2:	d03a      	beq.n	800375a <_malloc_r+0xea>
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	442b      	add	r3, r5
 80036e8:	6023      	str	r3, [r4, #0]
 80036ea:	f8d8 3000 	ldr.w	r3, [r8]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	bb62      	cbnz	r2, 800374c <_malloc_r+0xdc>
 80036f2:	f8c8 7000 	str.w	r7, [r8]
 80036f6:	e00f      	b.n	8003718 <_malloc_r+0xa8>
 80036f8:	6822      	ldr	r2, [r4, #0]
 80036fa:	1b52      	subs	r2, r2, r5
 80036fc:	d420      	bmi.n	8003740 <_malloc_r+0xd0>
 80036fe:	2a0b      	cmp	r2, #11
 8003700:	d917      	bls.n	8003732 <_malloc_r+0xc2>
 8003702:	1961      	adds	r1, r4, r5
 8003704:	42a3      	cmp	r3, r4
 8003706:	6025      	str	r5, [r4, #0]
 8003708:	bf18      	it	ne
 800370a:	6059      	strne	r1, [r3, #4]
 800370c:	6863      	ldr	r3, [r4, #4]
 800370e:	bf08      	it	eq
 8003710:	f8c8 1000 	streq.w	r1, [r8]
 8003714:	5162      	str	r2, [r4, r5]
 8003716:	604b      	str	r3, [r1, #4]
 8003718:	4630      	mov	r0, r6
 800371a:	f000 f82f 	bl	800377c <__malloc_unlock>
 800371e:	f104 000b 	add.w	r0, r4, #11
 8003722:	1d23      	adds	r3, r4, #4
 8003724:	f020 0007 	bic.w	r0, r0, #7
 8003728:	1ac2      	subs	r2, r0, r3
 800372a:	bf1c      	itt	ne
 800372c:	1a1b      	subne	r3, r3, r0
 800372e:	50a3      	strne	r3, [r4, r2]
 8003730:	e7af      	b.n	8003692 <_malloc_r+0x22>
 8003732:	6862      	ldr	r2, [r4, #4]
 8003734:	42a3      	cmp	r3, r4
 8003736:	bf0c      	ite	eq
 8003738:	f8c8 2000 	streq.w	r2, [r8]
 800373c:	605a      	strne	r2, [r3, #4]
 800373e:	e7eb      	b.n	8003718 <_malloc_r+0xa8>
 8003740:	4623      	mov	r3, r4
 8003742:	6864      	ldr	r4, [r4, #4]
 8003744:	e7ae      	b.n	80036a4 <_malloc_r+0x34>
 8003746:	463c      	mov	r4, r7
 8003748:	687f      	ldr	r7, [r7, #4]
 800374a:	e7b6      	b.n	80036ba <_malloc_r+0x4a>
 800374c:	461a      	mov	r2, r3
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	42a3      	cmp	r3, r4
 8003752:	d1fb      	bne.n	800374c <_malloc_r+0xdc>
 8003754:	2300      	movs	r3, #0
 8003756:	6053      	str	r3, [r2, #4]
 8003758:	e7de      	b.n	8003718 <_malloc_r+0xa8>
 800375a:	230c      	movs	r3, #12
 800375c:	6033      	str	r3, [r6, #0]
 800375e:	4630      	mov	r0, r6
 8003760:	f000 f80c 	bl	800377c <__malloc_unlock>
 8003764:	e794      	b.n	8003690 <_malloc_r+0x20>
 8003766:	6005      	str	r5, [r0, #0]
 8003768:	e7d6      	b.n	8003718 <_malloc_r+0xa8>
 800376a:	bf00      	nop
 800376c:	20000264 	.word	0x20000264

08003770 <__malloc_lock>:
 8003770:	4801      	ldr	r0, [pc, #4]	@ (8003778 <__malloc_lock+0x8>)
 8003772:	f7ff bf0f 	b.w	8003594 <__retarget_lock_acquire_recursive>
 8003776:	bf00      	nop
 8003778:	2000025c 	.word	0x2000025c

0800377c <__malloc_unlock>:
 800377c:	4801      	ldr	r0, [pc, #4]	@ (8003784 <__malloc_unlock+0x8>)
 800377e:	f7ff bf0a 	b.w	8003596 <__retarget_lock_release_recursive>
 8003782:	bf00      	nop
 8003784:	2000025c 	.word	0x2000025c

08003788 <__ssputs_r>:
 8003788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800378c:	688e      	ldr	r6, [r1, #8]
 800378e:	461f      	mov	r7, r3
 8003790:	42be      	cmp	r6, r7
 8003792:	680b      	ldr	r3, [r1, #0]
 8003794:	4682      	mov	sl, r0
 8003796:	460c      	mov	r4, r1
 8003798:	4690      	mov	r8, r2
 800379a:	d82d      	bhi.n	80037f8 <__ssputs_r+0x70>
 800379c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80037a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80037a4:	d026      	beq.n	80037f4 <__ssputs_r+0x6c>
 80037a6:	6965      	ldr	r5, [r4, #20]
 80037a8:	6909      	ldr	r1, [r1, #16]
 80037aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037ae:	eba3 0901 	sub.w	r9, r3, r1
 80037b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037b6:	1c7b      	adds	r3, r7, #1
 80037b8:	444b      	add	r3, r9
 80037ba:	106d      	asrs	r5, r5, #1
 80037bc:	429d      	cmp	r5, r3
 80037be:	bf38      	it	cc
 80037c0:	461d      	movcc	r5, r3
 80037c2:	0553      	lsls	r3, r2, #21
 80037c4:	d527      	bpl.n	8003816 <__ssputs_r+0x8e>
 80037c6:	4629      	mov	r1, r5
 80037c8:	f7ff ff52 	bl	8003670 <_malloc_r>
 80037cc:	4606      	mov	r6, r0
 80037ce:	b360      	cbz	r0, 800382a <__ssputs_r+0xa2>
 80037d0:	6921      	ldr	r1, [r4, #16]
 80037d2:	464a      	mov	r2, r9
 80037d4:	f000 fae8 	bl	8003da8 <memcpy>
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80037de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037e2:	81a3      	strh	r3, [r4, #12]
 80037e4:	6126      	str	r6, [r4, #16]
 80037e6:	6165      	str	r5, [r4, #20]
 80037e8:	444e      	add	r6, r9
 80037ea:	eba5 0509 	sub.w	r5, r5, r9
 80037ee:	6026      	str	r6, [r4, #0]
 80037f0:	60a5      	str	r5, [r4, #8]
 80037f2:	463e      	mov	r6, r7
 80037f4:	42be      	cmp	r6, r7
 80037f6:	d900      	bls.n	80037fa <__ssputs_r+0x72>
 80037f8:	463e      	mov	r6, r7
 80037fa:	6820      	ldr	r0, [r4, #0]
 80037fc:	4632      	mov	r2, r6
 80037fe:	4641      	mov	r1, r8
 8003800:	f000 faa8 	bl	8003d54 <memmove>
 8003804:	68a3      	ldr	r3, [r4, #8]
 8003806:	1b9b      	subs	r3, r3, r6
 8003808:	60a3      	str	r3, [r4, #8]
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	4433      	add	r3, r6
 800380e:	6023      	str	r3, [r4, #0]
 8003810:	2000      	movs	r0, #0
 8003812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003816:	462a      	mov	r2, r5
 8003818:	f000 fad4 	bl	8003dc4 <_realloc_r>
 800381c:	4606      	mov	r6, r0
 800381e:	2800      	cmp	r0, #0
 8003820:	d1e0      	bne.n	80037e4 <__ssputs_r+0x5c>
 8003822:	6921      	ldr	r1, [r4, #16]
 8003824:	4650      	mov	r0, sl
 8003826:	f7ff feb7 	bl	8003598 <_free_r>
 800382a:	230c      	movs	r3, #12
 800382c:	f8ca 3000 	str.w	r3, [sl]
 8003830:	89a3      	ldrh	r3, [r4, #12]
 8003832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003836:	81a3      	strh	r3, [r4, #12]
 8003838:	f04f 30ff 	mov.w	r0, #4294967295
 800383c:	e7e9      	b.n	8003812 <__ssputs_r+0x8a>
	...

08003840 <_svfiprintf_r>:
 8003840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003844:	4698      	mov	r8, r3
 8003846:	898b      	ldrh	r3, [r1, #12]
 8003848:	061b      	lsls	r3, r3, #24
 800384a:	b09d      	sub	sp, #116	@ 0x74
 800384c:	4607      	mov	r7, r0
 800384e:	460d      	mov	r5, r1
 8003850:	4614      	mov	r4, r2
 8003852:	d510      	bpl.n	8003876 <_svfiprintf_r+0x36>
 8003854:	690b      	ldr	r3, [r1, #16]
 8003856:	b973      	cbnz	r3, 8003876 <_svfiprintf_r+0x36>
 8003858:	2140      	movs	r1, #64	@ 0x40
 800385a:	f7ff ff09 	bl	8003670 <_malloc_r>
 800385e:	6028      	str	r0, [r5, #0]
 8003860:	6128      	str	r0, [r5, #16]
 8003862:	b930      	cbnz	r0, 8003872 <_svfiprintf_r+0x32>
 8003864:	230c      	movs	r3, #12
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	f04f 30ff 	mov.w	r0, #4294967295
 800386c:	b01d      	add	sp, #116	@ 0x74
 800386e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003872:	2340      	movs	r3, #64	@ 0x40
 8003874:	616b      	str	r3, [r5, #20]
 8003876:	2300      	movs	r3, #0
 8003878:	9309      	str	r3, [sp, #36]	@ 0x24
 800387a:	2320      	movs	r3, #32
 800387c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003880:	f8cd 800c 	str.w	r8, [sp, #12]
 8003884:	2330      	movs	r3, #48	@ 0x30
 8003886:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003a24 <_svfiprintf_r+0x1e4>
 800388a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800388e:	f04f 0901 	mov.w	r9, #1
 8003892:	4623      	mov	r3, r4
 8003894:	469a      	mov	sl, r3
 8003896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800389a:	b10a      	cbz	r2, 80038a0 <_svfiprintf_r+0x60>
 800389c:	2a25      	cmp	r2, #37	@ 0x25
 800389e:	d1f9      	bne.n	8003894 <_svfiprintf_r+0x54>
 80038a0:	ebba 0b04 	subs.w	fp, sl, r4
 80038a4:	d00b      	beq.n	80038be <_svfiprintf_r+0x7e>
 80038a6:	465b      	mov	r3, fp
 80038a8:	4622      	mov	r2, r4
 80038aa:	4629      	mov	r1, r5
 80038ac:	4638      	mov	r0, r7
 80038ae:	f7ff ff6b 	bl	8003788 <__ssputs_r>
 80038b2:	3001      	adds	r0, #1
 80038b4:	f000 80a7 	beq.w	8003a06 <_svfiprintf_r+0x1c6>
 80038b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80038ba:	445a      	add	r2, fp
 80038bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80038be:	f89a 3000 	ldrb.w	r3, [sl]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 809f 	beq.w	8003a06 <_svfiprintf_r+0x1c6>
 80038c8:	2300      	movs	r3, #0
 80038ca:	f04f 32ff 	mov.w	r2, #4294967295
 80038ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038d2:	f10a 0a01 	add.w	sl, sl, #1
 80038d6:	9304      	str	r3, [sp, #16]
 80038d8:	9307      	str	r3, [sp, #28]
 80038da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80038de:	931a      	str	r3, [sp, #104]	@ 0x68
 80038e0:	4654      	mov	r4, sl
 80038e2:	2205      	movs	r2, #5
 80038e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038e8:	484e      	ldr	r0, [pc, #312]	@ (8003a24 <_svfiprintf_r+0x1e4>)
 80038ea:	f7fc fc99 	bl	8000220 <memchr>
 80038ee:	9a04      	ldr	r2, [sp, #16]
 80038f0:	b9d8      	cbnz	r0, 800392a <_svfiprintf_r+0xea>
 80038f2:	06d0      	lsls	r0, r2, #27
 80038f4:	bf44      	itt	mi
 80038f6:	2320      	movmi	r3, #32
 80038f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038fc:	0711      	lsls	r1, r2, #28
 80038fe:	bf44      	itt	mi
 8003900:	232b      	movmi	r3, #43	@ 0x2b
 8003902:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003906:	f89a 3000 	ldrb.w	r3, [sl]
 800390a:	2b2a      	cmp	r3, #42	@ 0x2a
 800390c:	d015      	beq.n	800393a <_svfiprintf_r+0xfa>
 800390e:	9a07      	ldr	r2, [sp, #28]
 8003910:	4654      	mov	r4, sl
 8003912:	2000      	movs	r0, #0
 8003914:	f04f 0c0a 	mov.w	ip, #10
 8003918:	4621      	mov	r1, r4
 800391a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800391e:	3b30      	subs	r3, #48	@ 0x30
 8003920:	2b09      	cmp	r3, #9
 8003922:	d94b      	bls.n	80039bc <_svfiprintf_r+0x17c>
 8003924:	b1b0      	cbz	r0, 8003954 <_svfiprintf_r+0x114>
 8003926:	9207      	str	r2, [sp, #28]
 8003928:	e014      	b.n	8003954 <_svfiprintf_r+0x114>
 800392a:	eba0 0308 	sub.w	r3, r0, r8
 800392e:	fa09 f303 	lsl.w	r3, r9, r3
 8003932:	4313      	orrs	r3, r2
 8003934:	9304      	str	r3, [sp, #16]
 8003936:	46a2      	mov	sl, r4
 8003938:	e7d2      	b.n	80038e0 <_svfiprintf_r+0xa0>
 800393a:	9b03      	ldr	r3, [sp, #12]
 800393c:	1d19      	adds	r1, r3, #4
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	9103      	str	r1, [sp, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	bfbb      	ittet	lt
 8003946:	425b      	neglt	r3, r3
 8003948:	f042 0202 	orrlt.w	r2, r2, #2
 800394c:	9307      	strge	r3, [sp, #28]
 800394e:	9307      	strlt	r3, [sp, #28]
 8003950:	bfb8      	it	lt
 8003952:	9204      	strlt	r2, [sp, #16]
 8003954:	7823      	ldrb	r3, [r4, #0]
 8003956:	2b2e      	cmp	r3, #46	@ 0x2e
 8003958:	d10a      	bne.n	8003970 <_svfiprintf_r+0x130>
 800395a:	7863      	ldrb	r3, [r4, #1]
 800395c:	2b2a      	cmp	r3, #42	@ 0x2a
 800395e:	d132      	bne.n	80039c6 <_svfiprintf_r+0x186>
 8003960:	9b03      	ldr	r3, [sp, #12]
 8003962:	1d1a      	adds	r2, r3, #4
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	9203      	str	r2, [sp, #12]
 8003968:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800396c:	3402      	adds	r4, #2
 800396e:	9305      	str	r3, [sp, #20]
 8003970:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003a34 <_svfiprintf_r+0x1f4>
 8003974:	7821      	ldrb	r1, [r4, #0]
 8003976:	2203      	movs	r2, #3
 8003978:	4650      	mov	r0, sl
 800397a:	f7fc fc51 	bl	8000220 <memchr>
 800397e:	b138      	cbz	r0, 8003990 <_svfiprintf_r+0x150>
 8003980:	9b04      	ldr	r3, [sp, #16]
 8003982:	eba0 000a 	sub.w	r0, r0, sl
 8003986:	2240      	movs	r2, #64	@ 0x40
 8003988:	4082      	lsls	r2, r0
 800398a:	4313      	orrs	r3, r2
 800398c:	3401      	adds	r4, #1
 800398e:	9304      	str	r3, [sp, #16]
 8003990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003994:	4824      	ldr	r0, [pc, #144]	@ (8003a28 <_svfiprintf_r+0x1e8>)
 8003996:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800399a:	2206      	movs	r2, #6
 800399c:	f7fc fc40 	bl	8000220 <memchr>
 80039a0:	2800      	cmp	r0, #0
 80039a2:	d036      	beq.n	8003a12 <_svfiprintf_r+0x1d2>
 80039a4:	4b21      	ldr	r3, [pc, #132]	@ (8003a2c <_svfiprintf_r+0x1ec>)
 80039a6:	bb1b      	cbnz	r3, 80039f0 <_svfiprintf_r+0x1b0>
 80039a8:	9b03      	ldr	r3, [sp, #12]
 80039aa:	3307      	adds	r3, #7
 80039ac:	f023 0307 	bic.w	r3, r3, #7
 80039b0:	3308      	adds	r3, #8
 80039b2:	9303      	str	r3, [sp, #12]
 80039b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039b6:	4433      	add	r3, r6
 80039b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80039ba:	e76a      	b.n	8003892 <_svfiprintf_r+0x52>
 80039bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80039c0:	460c      	mov	r4, r1
 80039c2:	2001      	movs	r0, #1
 80039c4:	e7a8      	b.n	8003918 <_svfiprintf_r+0xd8>
 80039c6:	2300      	movs	r3, #0
 80039c8:	3401      	adds	r4, #1
 80039ca:	9305      	str	r3, [sp, #20]
 80039cc:	4619      	mov	r1, r3
 80039ce:	f04f 0c0a 	mov.w	ip, #10
 80039d2:	4620      	mov	r0, r4
 80039d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039d8:	3a30      	subs	r2, #48	@ 0x30
 80039da:	2a09      	cmp	r2, #9
 80039dc:	d903      	bls.n	80039e6 <_svfiprintf_r+0x1a6>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0c6      	beq.n	8003970 <_svfiprintf_r+0x130>
 80039e2:	9105      	str	r1, [sp, #20]
 80039e4:	e7c4      	b.n	8003970 <_svfiprintf_r+0x130>
 80039e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80039ea:	4604      	mov	r4, r0
 80039ec:	2301      	movs	r3, #1
 80039ee:	e7f0      	b.n	80039d2 <_svfiprintf_r+0x192>
 80039f0:	ab03      	add	r3, sp, #12
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	462a      	mov	r2, r5
 80039f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a30 <_svfiprintf_r+0x1f0>)
 80039f8:	a904      	add	r1, sp, #16
 80039fa:	4638      	mov	r0, r7
 80039fc:	f3af 8000 	nop.w
 8003a00:	1c42      	adds	r2, r0, #1
 8003a02:	4606      	mov	r6, r0
 8003a04:	d1d6      	bne.n	80039b4 <_svfiprintf_r+0x174>
 8003a06:	89ab      	ldrh	r3, [r5, #12]
 8003a08:	065b      	lsls	r3, r3, #25
 8003a0a:	f53f af2d 	bmi.w	8003868 <_svfiprintf_r+0x28>
 8003a0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003a10:	e72c      	b.n	800386c <_svfiprintf_r+0x2c>
 8003a12:	ab03      	add	r3, sp, #12
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	462a      	mov	r2, r5
 8003a18:	4b05      	ldr	r3, [pc, #20]	@ (8003a30 <_svfiprintf_r+0x1f0>)
 8003a1a:	a904      	add	r1, sp, #16
 8003a1c:	4638      	mov	r0, r7
 8003a1e:	f000 f879 	bl	8003b14 <_printf_i>
 8003a22:	e7ed      	b.n	8003a00 <_svfiprintf_r+0x1c0>
 8003a24:	08003f2c 	.word	0x08003f2c
 8003a28:	08003f36 	.word	0x08003f36
 8003a2c:	00000000 	.word	0x00000000
 8003a30:	08003789 	.word	0x08003789
 8003a34:	08003f32 	.word	0x08003f32

08003a38 <_printf_common>:
 8003a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a3c:	4616      	mov	r6, r2
 8003a3e:	4698      	mov	r8, r3
 8003a40:	688a      	ldr	r2, [r1, #8]
 8003a42:	690b      	ldr	r3, [r1, #16]
 8003a44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	bfb8      	it	lt
 8003a4c:	4613      	movlt	r3, r2
 8003a4e:	6033      	str	r3, [r6, #0]
 8003a50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003a54:	4607      	mov	r7, r0
 8003a56:	460c      	mov	r4, r1
 8003a58:	b10a      	cbz	r2, 8003a5e <_printf_common+0x26>
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	6033      	str	r3, [r6, #0]
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	0699      	lsls	r1, r3, #26
 8003a62:	bf42      	ittt	mi
 8003a64:	6833      	ldrmi	r3, [r6, #0]
 8003a66:	3302      	addmi	r3, #2
 8003a68:	6033      	strmi	r3, [r6, #0]
 8003a6a:	6825      	ldr	r5, [r4, #0]
 8003a6c:	f015 0506 	ands.w	r5, r5, #6
 8003a70:	d106      	bne.n	8003a80 <_printf_common+0x48>
 8003a72:	f104 0a19 	add.w	sl, r4, #25
 8003a76:	68e3      	ldr	r3, [r4, #12]
 8003a78:	6832      	ldr	r2, [r6, #0]
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	42ab      	cmp	r3, r5
 8003a7e:	dc26      	bgt.n	8003ace <_printf_common+0x96>
 8003a80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003a84:	6822      	ldr	r2, [r4, #0]
 8003a86:	3b00      	subs	r3, #0
 8003a88:	bf18      	it	ne
 8003a8a:	2301      	movne	r3, #1
 8003a8c:	0692      	lsls	r2, r2, #26
 8003a8e:	d42b      	bmi.n	8003ae8 <_printf_common+0xb0>
 8003a90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003a94:	4641      	mov	r1, r8
 8003a96:	4638      	mov	r0, r7
 8003a98:	47c8      	blx	r9
 8003a9a:	3001      	adds	r0, #1
 8003a9c:	d01e      	beq.n	8003adc <_printf_common+0xa4>
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	6922      	ldr	r2, [r4, #16]
 8003aa2:	f003 0306 	and.w	r3, r3, #6
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	bf02      	ittt	eq
 8003aaa:	68e5      	ldreq	r5, [r4, #12]
 8003aac:	6833      	ldreq	r3, [r6, #0]
 8003aae:	1aed      	subeq	r5, r5, r3
 8003ab0:	68a3      	ldr	r3, [r4, #8]
 8003ab2:	bf0c      	ite	eq
 8003ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ab8:	2500      	movne	r5, #0
 8003aba:	4293      	cmp	r3, r2
 8003abc:	bfc4      	itt	gt
 8003abe:	1a9b      	subgt	r3, r3, r2
 8003ac0:	18ed      	addgt	r5, r5, r3
 8003ac2:	2600      	movs	r6, #0
 8003ac4:	341a      	adds	r4, #26
 8003ac6:	42b5      	cmp	r5, r6
 8003ac8:	d11a      	bne.n	8003b00 <_printf_common+0xc8>
 8003aca:	2000      	movs	r0, #0
 8003acc:	e008      	b.n	8003ae0 <_printf_common+0xa8>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	4652      	mov	r2, sl
 8003ad2:	4641      	mov	r1, r8
 8003ad4:	4638      	mov	r0, r7
 8003ad6:	47c8      	blx	r9
 8003ad8:	3001      	adds	r0, #1
 8003ada:	d103      	bne.n	8003ae4 <_printf_common+0xac>
 8003adc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae4:	3501      	adds	r5, #1
 8003ae6:	e7c6      	b.n	8003a76 <_printf_common+0x3e>
 8003ae8:	18e1      	adds	r1, r4, r3
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	2030      	movs	r0, #48	@ 0x30
 8003aee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003af2:	4422      	add	r2, r4
 8003af4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003af8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003afc:	3302      	adds	r3, #2
 8003afe:	e7c7      	b.n	8003a90 <_printf_common+0x58>
 8003b00:	2301      	movs	r3, #1
 8003b02:	4622      	mov	r2, r4
 8003b04:	4641      	mov	r1, r8
 8003b06:	4638      	mov	r0, r7
 8003b08:	47c8      	blx	r9
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	d0e6      	beq.n	8003adc <_printf_common+0xa4>
 8003b0e:	3601      	adds	r6, #1
 8003b10:	e7d9      	b.n	8003ac6 <_printf_common+0x8e>
	...

08003b14 <_printf_i>:
 8003b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b18:	7e0f      	ldrb	r7, [r1, #24]
 8003b1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b1c:	2f78      	cmp	r7, #120	@ 0x78
 8003b1e:	4691      	mov	r9, r2
 8003b20:	4680      	mov	r8, r0
 8003b22:	460c      	mov	r4, r1
 8003b24:	469a      	mov	sl, r3
 8003b26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b2a:	d807      	bhi.n	8003b3c <_printf_i+0x28>
 8003b2c:	2f62      	cmp	r7, #98	@ 0x62
 8003b2e:	d80a      	bhi.n	8003b46 <_printf_i+0x32>
 8003b30:	2f00      	cmp	r7, #0
 8003b32:	f000 80d2 	beq.w	8003cda <_printf_i+0x1c6>
 8003b36:	2f58      	cmp	r7, #88	@ 0x58
 8003b38:	f000 80b9 	beq.w	8003cae <_printf_i+0x19a>
 8003b3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b44:	e03a      	b.n	8003bbc <_printf_i+0xa8>
 8003b46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b4a:	2b15      	cmp	r3, #21
 8003b4c:	d8f6      	bhi.n	8003b3c <_printf_i+0x28>
 8003b4e:	a101      	add	r1, pc, #4	@ (adr r1, 8003b54 <_printf_i+0x40>)
 8003b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b54:	08003bad 	.word	0x08003bad
 8003b58:	08003bc1 	.word	0x08003bc1
 8003b5c:	08003b3d 	.word	0x08003b3d
 8003b60:	08003b3d 	.word	0x08003b3d
 8003b64:	08003b3d 	.word	0x08003b3d
 8003b68:	08003b3d 	.word	0x08003b3d
 8003b6c:	08003bc1 	.word	0x08003bc1
 8003b70:	08003b3d 	.word	0x08003b3d
 8003b74:	08003b3d 	.word	0x08003b3d
 8003b78:	08003b3d 	.word	0x08003b3d
 8003b7c:	08003b3d 	.word	0x08003b3d
 8003b80:	08003cc1 	.word	0x08003cc1
 8003b84:	08003beb 	.word	0x08003beb
 8003b88:	08003c7b 	.word	0x08003c7b
 8003b8c:	08003b3d 	.word	0x08003b3d
 8003b90:	08003b3d 	.word	0x08003b3d
 8003b94:	08003ce3 	.word	0x08003ce3
 8003b98:	08003b3d 	.word	0x08003b3d
 8003b9c:	08003beb 	.word	0x08003beb
 8003ba0:	08003b3d 	.word	0x08003b3d
 8003ba4:	08003b3d 	.word	0x08003b3d
 8003ba8:	08003c83 	.word	0x08003c83
 8003bac:	6833      	ldr	r3, [r6, #0]
 8003bae:	1d1a      	adds	r2, r3, #4
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6032      	str	r2, [r6, #0]
 8003bb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e09d      	b.n	8003cfc <_printf_i+0x1e8>
 8003bc0:	6833      	ldr	r3, [r6, #0]
 8003bc2:	6820      	ldr	r0, [r4, #0]
 8003bc4:	1d19      	adds	r1, r3, #4
 8003bc6:	6031      	str	r1, [r6, #0]
 8003bc8:	0606      	lsls	r6, r0, #24
 8003bca:	d501      	bpl.n	8003bd0 <_printf_i+0xbc>
 8003bcc:	681d      	ldr	r5, [r3, #0]
 8003bce:	e003      	b.n	8003bd8 <_printf_i+0xc4>
 8003bd0:	0645      	lsls	r5, r0, #25
 8003bd2:	d5fb      	bpl.n	8003bcc <_printf_i+0xb8>
 8003bd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003bd8:	2d00      	cmp	r5, #0
 8003bda:	da03      	bge.n	8003be4 <_printf_i+0xd0>
 8003bdc:	232d      	movs	r3, #45	@ 0x2d
 8003bde:	426d      	negs	r5, r5
 8003be0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003be4:	4859      	ldr	r0, [pc, #356]	@ (8003d4c <_printf_i+0x238>)
 8003be6:	230a      	movs	r3, #10
 8003be8:	e011      	b.n	8003c0e <_printf_i+0xfa>
 8003bea:	6821      	ldr	r1, [r4, #0]
 8003bec:	6833      	ldr	r3, [r6, #0]
 8003bee:	0608      	lsls	r0, r1, #24
 8003bf0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003bf4:	d402      	bmi.n	8003bfc <_printf_i+0xe8>
 8003bf6:	0649      	lsls	r1, r1, #25
 8003bf8:	bf48      	it	mi
 8003bfa:	b2ad      	uxthmi	r5, r5
 8003bfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003bfe:	4853      	ldr	r0, [pc, #332]	@ (8003d4c <_printf_i+0x238>)
 8003c00:	6033      	str	r3, [r6, #0]
 8003c02:	bf14      	ite	ne
 8003c04:	230a      	movne	r3, #10
 8003c06:	2308      	moveq	r3, #8
 8003c08:	2100      	movs	r1, #0
 8003c0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c0e:	6866      	ldr	r6, [r4, #4]
 8003c10:	60a6      	str	r6, [r4, #8]
 8003c12:	2e00      	cmp	r6, #0
 8003c14:	bfa2      	ittt	ge
 8003c16:	6821      	ldrge	r1, [r4, #0]
 8003c18:	f021 0104 	bicge.w	r1, r1, #4
 8003c1c:	6021      	strge	r1, [r4, #0]
 8003c1e:	b90d      	cbnz	r5, 8003c24 <_printf_i+0x110>
 8003c20:	2e00      	cmp	r6, #0
 8003c22:	d04b      	beq.n	8003cbc <_printf_i+0x1a8>
 8003c24:	4616      	mov	r6, r2
 8003c26:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c2a:	fb03 5711 	mls	r7, r3, r1, r5
 8003c2e:	5dc7      	ldrb	r7, [r0, r7]
 8003c30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c34:	462f      	mov	r7, r5
 8003c36:	42bb      	cmp	r3, r7
 8003c38:	460d      	mov	r5, r1
 8003c3a:	d9f4      	bls.n	8003c26 <_printf_i+0x112>
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d10b      	bne.n	8003c58 <_printf_i+0x144>
 8003c40:	6823      	ldr	r3, [r4, #0]
 8003c42:	07df      	lsls	r7, r3, #31
 8003c44:	d508      	bpl.n	8003c58 <_printf_i+0x144>
 8003c46:	6923      	ldr	r3, [r4, #16]
 8003c48:	6861      	ldr	r1, [r4, #4]
 8003c4a:	4299      	cmp	r1, r3
 8003c4c:	bfde      	ittt	le
 8003c4e:	2330      	movle	r3, #48	@ 0x30
 8003c50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c58:	1b92      	subs	r2, r2, r6
 8003c5a:	6122      	str	r2, [r4, #16]
 8003c5c:	f8cd a000 	str.w	sl, [sp]
 8003c60:	464b      	mov	r3, r9
 8003c62:	aa03      	add	r2, sp, #12
 8003c64:	4621      	mov	r1, r4
 8003c66:	4640      	mov	r0, r8
 8003c68:	f7ff fee6 	bl	8003a38 <_printf_common>
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	d14a      	bne.n	8003d06 <_printf_i+0x1f2>
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295
 8003c74:	b004      	add	sp, #16
 8003c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	f043 0320 	orr.w	r3, r3, #32
 8003c80:	6023      	str	r3, [r4, #0]
 8003c82:	4833      	ldr	r0, [pc, #204]	@ (8003d50 <_printf_i+0x23c>)
 8003c84:	2778      	movs	r7, #120	@ 0x78
 8003c86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	6831      	ldr	r1, [r6, #0]
 8003c8e:	061f      	lsls	r7, r3, #24
 8003c90:	f851 5b04 	ldr.w	r5, [r1], #4
 8003c94:	d402      	bmi.n	8003c9c <_printf_i+0x188>
 8003c96:	065f      	lsls	r7, r3, #25
 8003c98:	bf48      	it	mi
 8003c9a:	b2ad      	uxthmi	r5, r5
 8003c9c:	6031      	str	r1, [r6, #0]
 8003c9e:	07d9      	lsls	r1, r3, #31
 8003ca0:	bf44      	itt	mi
 8003ca2:	f043 0320 	orrmi.w	r3, r3, #32
 8003ca6:	6023      	strmi	r3, [r4, #0]
 8003ca8:	b11d      	cbz	r5, 8003cb2 <_printf_i+0x19e>
 8003caa:	2310      	movs	r3, #16
 8003cac:	e7ac      	b.n	8003c08 <_printf_i+0xf4>
 8003cae:	4827      	ldr	r0, [pc, #156]	@ (8003d4c <_printf_i+0x238>)
 8003cb0:	e7e9      	b.n	8003c86 <_printf_i+0x172>
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	f023 0320 	bic.w	r3, r3, #32
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	e7f6      	b.n	8003caa <_printf_i+0x196>
 8003cbc:	4616      	mov	r6, r2
 8003cbe:	e7bd      	b.n	8003c3c <_printf_i+0x128>
 8003cc0:	6833      	ldr	r3, [r6, #0]
 8003cc2:	6825      	ldr	r5, [r4, #0]
 8003cc4:	6961      	ldr	r1, [r4, #20]
 8003cc6:	1d18      	adds	r0, r3, #4
 8003cc8:	6030      	str	r0, [r6, #0]
 8003cca:	062e      	lsls	r6, r5, #24
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	d501      	bpl.n	8003cd4 <_printf_i+0x1c0>
 8003cd0:	6019      	str	r1, [r3, #0]
 8003cd2:	e002      	b.n	8003cda <_printf_i+0x1c6>
 8003cd4:	0668      	lsls	r0, r5, #25
 8003cd6:	d5fb      	bpl.n	8003cd0 <_printf_i+0x1bc>
 8003cd8:	8019      	strh	r1, [r3, #0]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	6123      	str	r3, [r4, #16]
 8003cde:	4616      	mov	r6, r2
 8003ce0:	e7bc      	b.n	8003c5c <_printf_i+0x148>
 8003ce2:	6833      	ldr	r3, [r6, #0]
 8003ce4:	1d1a      	adds	r2, r3, #4
 8003ce6:	6032      	str	r2, [r6, #0]
 8003ce8:	681e      	ldr	r6, [r3, #0]
 8003cea:	6862      	ldr	r2, [r4, #4]
 8003cec:	2100      	movs	r1, #0
 8003cee:	4630      	mov	r0, r6
 8003cf0:	f7fc fa96 	bl	8000220 <memchr>
 8003cf4:	b108      	cbz	r0, 8003cfa <_printf_i+0x1e6>
 8003cf6:	1b80      	subs	r0, r0, r6
 8003cf8:	6060      	str	r0, [r4, #4]
 8003cfa:	6863      	ldr	r3, [r4, #4]
 8003cfc:	6123      	str	r3, [r4, #16]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d04:	e7aa      	b.n	8003c5c <_printf_i+0x148>
 8003d06:	6923      	ldr	r3, [r4, #16]
 8003d08:	4632      	mov	r2, r6
 8003d0a:	4649      	mov	r1, r9
 8003d0c:	4640      	mov	r0, r8
 8003d0e:	47d0      	blx	sl
 8003d10:	3001      	adds	r0, #1
 8003d12:	d0ad      	beq.n	8003c70 <_printf_i+0x15c>
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	079b      	lsls	r3, r3, #30
 8003d18:	d413      	bmi.n	8003d42 <_printf_i+0x22e>
 8003d1a:	68e0      	ldr	r0, [r4, #12]
 8003d1c:	9b03      	ldr	r3, [sp, #12]
 8003d1e:	4298      	cmp	r0, r3
 8003d20:	bfb8      	it	lt
 8003d22:	4618      	movlt	r0, r3
 8003d24:	e7a6      	b.n	8003c74 <_printf_i+0x160>
 8003d26:	2301      	movs	r3, #1
 8003d28:	4632      	mov	r2, r6
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	4640      	mov	r0, r8
 8003d2e:	47d0      	blx	sl
 8003d30:	3001      	adds	r0, #1
 8003d32:	d09d      	beq.n	8003c70 <_printf_i+0x15c>
 8003d34:	3501      	adds	r5, #1
 8003d36:	68e3      	ldr	r3, [r4, #12]
 8003d38:	9903      	ldr	r1, [sp, #12]
 8003d3a:	1a5b      	subs	r3, r3, r1
 8003d3c:	42ab      	cmp	r3, r5
 8003d3e:	dcf2      	bgt.n	8003d26 <_printf_i+0x212>
 8003d40:	e7eb      	b.n	8003d1a <_printf_i+0x206>
 8003d42:	2500      	movs	r5, #0
 8003d44:	f104 0619 	add.w	r6, r4, #25
 8003d48:	e7f5      	b.n	8003d36 <_printf_i+0x222>
 8003d4a:	bf00      	nop
 8003d4c:	08003f3d 	.word	0x08003f3d
 8003d50:	08003f4e 	.word	0x08003f4e

08003d54 <memmove>:
 8003d54:	4288      	cmp	r0, r1
 8003d56:	b510      	push	{r4, lr}
 8003d58:	eb01 0402 	add.w	r4, r1, r2
 8003d5c:	d902      	bls.n	8003d64 <memmove+0x10>
 8003d5e:	4284      	cmp	r4, r0
 8003d60:	4623      	mov	r3, r4
 8003d62:	d807      	bhi.n	8003d74 <memmove+0x20>
 8003d64:	1e43      	subs	r3, r0, #1
 8003d66:	42a1      	cmp	r1, r4
 8003d68:	d008      	beq.n	8003d7c <memmove+0x28>
 8003d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d72:	e7f8      	b.n	8003d66 <memmove+0x12>
 8003d74:	4402      	add	r2, r0
 8003d76:	4601      	mov	r1, r0
 8003d78:	428a      	cmp	r2, r1
 8003d7a:	d100      	bne.n	8003d7e <memmove+0x2a>
 8003d7c:	bd10      	pop	{r4, pc}
 8003d7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d86:	e7f7      	b.n	8003d78 <memmove+0x24>

08003d88 <_sbrk_r>:
 8003d88:	b538      	push	{r3, r4, r5, lr}
 8003d8a:	4d06      	ldr	r5, [pc, #24]	@ (8003da4 <_sbrk_r+0x1c>)
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	4604      	mov	r4, r0
 8003d90:	4608      	mov	r0, r1
 8003d92:	602b      	str	r3, [r5, #0]
 8003d94:	f7fd f84a 	bl	8000e2c <_sbrk>
 8003d98:	1c43      	adds	r3, r0, #1
 8003d9a:	d102      	bne.n	8003da2 <_sbrk_r+0x1a>
 8003d9c:	682b      	ldr	r3, [r5, #0]
 8003d9e:	b103      	cbz	r3, 8003da2 <_sbrk_r+0x1a>
 8003da0:	6023      	str	r3, [r4, #0]
 8003da2:	bd38      	pop	{r3, r4, r5, pc}
 8003da4:	20000258 	.word	0x20000258

08003da8 <memcpy>:
 8003da8:	440a      	add	r2, r1
 8003daa:	4291      	cmp	r1, r2
 8003dac:	f100 33ff 	add.w	r3, r0, #4294967295
 8003db0:	d100      	bne.n	8003db4 <memcpy+0xc>
 8003db2:	4770      	bx	lr
 8003db4:	b510      	push	{r4, lr}
 8003db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dbe:	4291      	cmp	r1, r2
 8003dc0:	d1f9      	bne.n	8003db6 <memcpy+0xe>
 8003dc2:	bd10      	pop	{r4, pc}

08003dc4 <_realloc_r>:
 8003dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc8:	4680      	mov	r8, r0
 8003dca:	4615      	mov	r5, r2
 8003dcc:	460c      	mov	r4, r1
 8003dce:	b921      	cbnz	r1, 8003dda <_realloc_r+0x16>
 8003dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	f7ff bc4b 	b.w	8003670 <_malloc_r>
 8003dda:	b92a      	cbnz	r2, 8003de8 <_realloc_r+0x24>
 8003ddc:	f7ff fbdc 	bl	8003598 <_free_r>
 8003de0:	2400      	movs	r4, #0
 8003de2:	4620      	mov	r0, r4
 8003de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003de8:	f000 f81a 	bl	8003e20 <_malloc_usable_size_r>
 8003dec:	4285      	cmp	r5, r0
 8003dee:	4606      	mov	r6, r0
 8003df0:	d802      	bhi.n	8003df8 <_realloc_r+0x34>
 8003df2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003df6:	d8f4      	bhi.n	8003de2 <_realloc_r+0x1e>
 8003df8:	4629      	mov	r1, r5
 8003dfa:	4640      	mov	r0, r8
 8003dfc:	f7ff fc38 	bl	8003670 <_malloc_r>
 8003e00:	4607      	mov	r7, r0
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d0ec      	beq.n	8003de0 <_realloc_r+0x1c>
 8003e06:	42b5      	cmp	r5, r6
 8003e08:	462a      	mov	r2, r5
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	bf28      	it	cs
 8003e0e:	4632      	movcs	r2, r6
 8003e10:	f7ff ffca 	bl	8003da8 <memcpy>
 8003e14:	4621      	mov	r1, r4
 8003e16:	4640      	mov	r0, r8
 8003e18:	f7ff fbbe 	bl	8003598 <_free_r>
 8003e1c:	463c      	mov	r4, r7
 8003e1e:	e7e0      	b.n	8003de2 <_realloc_r+0x1e>

08003e20 <_malloc_usable_size_r>:
 8003e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e24:	1f18      	subs	r0, r3, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bfbc      	itt	lt
 8003e2a:	580b      	ldrlt	r3, [r1, r0]
 8003e2c:	18c0      	addlt	r0, r0, r3
 8003e2e:	4770      	bx	lr

08003e30 <_init>:
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e32:	bf00      	nop
 8003e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e36:	bc08      	pop	{r3}
 8003e38:	469e      	mov	lr, r3
 8003e3a:	4770      	bx	lr

08003e3c <_fini>:
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	bf00      	nop
 8003e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e42:	bc08      	pop	{r3}
 8003e44:	469e      	mov	lr, r3
 8003e46:	4770      	bx	lr
