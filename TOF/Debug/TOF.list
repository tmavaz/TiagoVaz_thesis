
TOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800507c  0800507c  0000607c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005094  08005094  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005094  08005094  00006094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800509c  0800509c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800509c  0800509c  0000609c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050a0  080050a0  000060a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080050a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  080050b0  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  080050b0  000070c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c145  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e1a  00000000  00000000  00013181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  00014fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000827  00000000  00000000  00015a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021613  00000000  00000000  00016237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e904  00000000  00000000  0003784a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cab28  00000000  00000000  0004614e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110c76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002adc  00000000  00000000  00110cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00113798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005064 	.word	0x08005064

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005064 	.word	0x08005064

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <VL6180x_Init>:
#include "VL6180x_api.h"
#include "VL6180x_platform.h"

int VL6180x_Init(VL6180xDev_t *dev) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    uint8_t id;
    VL6180x_I2CRead(*dev, 0x0000, &id, 1);
 80004fc:	f107 020f 	add.w	r2, r7, #15
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	2301      	movs	r3, #1
 8000504:	2100      	movs	r1, #0
 8000506:	7800      	ldrb	r0, [r0, #0]
 8000508:	f000 f9a0 	bl	800084c <VL6180x_I2CRead>
    return (id == 0xB4) ? 0 : -1;
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	2bb4      	cmp	r3, #180	@ 0xb4
 8000510:	d101      	bne.n	8000516 <VL6180x_Init+0x22>
 8000512:	2300      	movs	r3, #0
 8000514:	e001      	b.n	800051a <VL6180x_Init+0x26>
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
}
 800051a:	4618      	mov	r0, r3
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <VL6180x_Prepare>:
/*int VL6180x_Prepare(VL6180xDev_t *dev) {
    uint8_t config[] = {0x01};
    return VL6180x_I2CWrite(*dev, 0x0207, config, 1);
}*/

int VL6180x_Prepare(VL6180xDev_t *dev) {
 8000522:	b580      	push	{r7, lr}
 8000524:	b0a0      	sub	sp, #128	@ 0x80
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
    VL6180x_I2CWrite(*dev, 0x0207, (uint8_t[]){0x01}, 1);
 800052a:	2301      	movs	r3, #1
 800052c:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8000530:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	2301      	movs	r3, #1
 8000538:	f240 2107 	movw	r1, #519	@ 0x207
 800053c:	7800      	ldrb	r0, [r0, #0]
 800053e:	f000 f95d 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x0208, (uint8_t[]){0x01}, 1);
 8000542:	2301      	movs	r3, #1
 8000544:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 8000548:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8000554:	7800      	ldrb	r0, [r0, #0]
 8000556:	f000 f951 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x0096, (uint8_t[]){0x00}, 1);
 800055a:	2300      	movs	r3, #0
 800055c:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8000560:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	2301      	movs	r3, #1
 8000568:	2196      	movs	r1, #150	@ 0x96
 800056a:	7800      	ldrb	r0, [r0, #0]
 800056c:	f000 f946 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x0097, (uint8_t[]){0xfd}, 1);
 8000570:	23fd      	movs	r3, #253	@ 0xfd
 8000572:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 8000576:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	2301      	movs	r3, #1
 800057e:	2197      	movs	r1, #151	@ 0x97
 8000580:	7800      	ldrb	r0, [r0, #0]
 8000582:	f000 f93b 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x00e3, (uint8_t[]){0x00}, 1);
 8000586:	2300      	movs	r3, #0
 8000588:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 800058c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	2301      	movs	r3, #1
 8000594:	21e3      	movs	r1, #227	@ 0xe3
 8000596:	7800      	ldrb	r0, [r0, #0]
 8000598:	f000 f930 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x00e4, (uint8_t[]){0x04}, 1);
 800059c:	2304      	movs	r3, #4
 800059e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 80005a2:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	2301      	movs	r3, #1
 80005aa:	21e4      	movs	r1, #228	@ 0xe4
 80005ac:	7800      	ldrb	r0, [r0, #0]
 80005ae:	f000 f925 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x00e5, (uint8_t[]){0x02}, 1);
 80005b2:	2302      	movs	r3, #2
 80005b4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80005b8:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	2301      	movs	r3, #1
 80005c0:	21e5      	movs	r1, #229	@ 0xe5
 80005c2:	7800      	ldrb	r0, [r0, #0]
 80005c4:	f000 f91a 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x00e6, (uint8_t[]){0x01}, 1);
 80005c8:	2301      	movs	r3, #1
 80005ca:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 80005ce:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	2301      	movs	r3, #1
 80005d6:	21e6      	movs	r1, #230	@ 0xe6
 80005d8:	7800      	ldrb	r0, [r0, #0]
 80005da:	f000 f90f 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x00e7, (uint8_t[]){0x03}, 1);
 80005de:	2303      	movs	r3, #3
 80005e0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 80005e4:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	2301      	movs	r3, #1
 80005ec:	21e7      	movs	r1, #231	@ 0xe7
 80005ee:	7800      	ldrb	r0, [r0, #0]
 80005f0:	f000 f904 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x00f5, (uint8_t[]){0x02}, 1);
 80005f4:	2302      	movs	r3, #2
 80005f6:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
 80005fa:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	2301      	movs	r3, #1
 8000602:	21f5      	movs	r1, #245	@ 0xf5
 8000604:	7800      	ldrb	r0, [r0, #0]
 8000606:	f000 f8f9 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x00d9, (uint8_t[]){0x05}, 1);
 800060a:	2305      	movs	r3, #5
 800060c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8000610:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	2301      	movs	r3, #1
 8000618:	21d9      	movs	r1, #217	@ 0xd9
 800061a:	7800      	ldrb	r0, [r0, #0]
 800061c:	f000 f8ee 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x00db, (uint8_t[]){0xce}, 1);
 8000620:	23ce      	movs	r3, #206	@ 0xce
 8000622:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8000626:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	2301      	movs	r3, #1
 800062e:	21db      	movs	r1, #219	@ 0xdb
 8000630:	7800      	ldrb	r0, [r0, #0]
 8000632:	f000 f8e3 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x00dc, (uint8_t[]){0x03}, 1);
 8000636:	2303      	movs	r3, #3
 8000638:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 800063c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	2301      	movs	r3, #1
 8000644:	21dc      	movs	r1, #220	@ 0xdc
 8000646:	7800      	ldrb	r0, [r0, #0]
 8000648:	f000 f8d8 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x00dd, (uint8_t[]){0xf8}, 1);
 800064c:	23f8      	movs	r3, #248	@ 0xf8
 800064e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8000652:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	2301      	movs	r3, #1
 800065a:	21dd      	movs	r1, #221	@ 0xdd
 800065c:	7800      	ldrb	r0, [r0, #0]
 800065e:	f000 f8cd 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x009f, (uint8_t[]){0x00}, 1);
 8000662:	2300      	movs	r3, #0
 8000664:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8000668:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	2301      	movs	r3, #1
 8000670:	219f      	movs	r1, #159	@ 0x9f
 8000672:	7800      	ldrb	r0, [r0, #0]
 8000674:	f000 f8c2 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x00a3, (uint8_t[]){0x3c}, 1);
 8000678:	233c      	movs	r3, #60	@ 0x3c
 800067a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 800067e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	2301      	movs	r3, #1
 8000686:	21a3      	movs	r1, #163	@ 0xa3
 8000688:	7800      	ldrb	r0, [r0, #0]
 800068a:	f000 f8b7 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x00b7, (uint8_t[]){0x00}, 1);
 800068e:	2300      	movs	r3, #0
 8000690:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8000694:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	2301      	movs	r3, #1
 800069c:	21b7      	movs	r1, #183	@ 0xb7
 800069e:	7800      	ldrb	r0, [r0, #0]
 80006a0:	f000 f8ac 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x00bb, (uint8_t[]){0x3c}, 1);
 80006a4:	233c      	movs	r3, #60	@ 0x3c
 80006a6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80006aa:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	2301      	movs	r3, #1
 80006b2:	21bb      	movs	r1, #187	@ 0xbb
 80006b4:	7800      	ldrb	r0, [r0, #0]
 80006b6:	f000 f8a1 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x00b2, (uint8_t[]){0x09}, 1);
 80006ba:	2309      	movs	r3, #9
 80006bc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80006c0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	2301      	movs	r3, #1
 80006c8:	21b2      	movs	r1, #178	@ 0xb2
 80006ca:	7800      	ldrb	r0, [r0, #0]
 80006cc:	f000 f896 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x00ca, (uint8_t[]){0x09}, 1);
 80006d0:	2309      	movs	r3, #9
 80006d2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80006d6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	2301      	movs	r3, #1
 80006de:	21ca      	movs	r1, #202	@ 0xca
 80006e0:	7800      	ldrb	r0, [r0, #0]
 80006e2:	f000 f88b 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x0198, (uint8_t[]){0x01}, 1);
 80006e6:	2301      	movs	r3, #1
 80006e8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80006ec:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	2301      	movs	r3, #1
 80006f4:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 80006f8:	7800      	ldrb	r0, [r0, #0]
 80006fa:	f000 f87f 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x01b0, (uint8_t[]){0x17}, 1);
 80006fe:	2317      	movs	r3, #23
 8000700:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000704:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	2301      	movs	r3, #1
 800070c:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8000710:	7800      	ldrb	r0, [r0, #0]
 8000712:	f000 f873 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x01ad, (uint8_t[]){0x00}, 1);
 8000716:	2300      	movs	r3, #0
 8000718:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800071c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	2301      	movs	r3, #1
 8000724:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8000728:	7800      	ldrb	r0, [r0, #0]
 800072a:	f000 f867 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x00ff, (uint8_t[]){0x05}, 1);
 800072e:	2305      	movs	r3, #5
 8000730:	f887 3020 	strb.w	r3, [r7, #32]
 8000734:	f107 0220 	add.w	r2, r7, #32
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	2301      	movs	r3, #1
 800073c:	21ff      	movs	r1, #255	@ 0xff
 800073e:	7800      	ldrb	r0, [r0, #0]
 8000740:	f000 f85c 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x0100, (uint8_t[]){0x05}, 1);
 8000744:	2305      	movs	r3, #5
 8000746:	773b      	strb	r3, [r7, #28]
 8000748:	f107 021c 	add.w	r2, r7, #28
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	2301      	movs	r3, #1
 8000750:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000754:	7800      	ldrb	r0, [r0, #0]
 8000756:	f000 f851 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x0199, (uint8_t[]){0x05}, 1);
 800075a:	2305      	movs	r3, #5
 800075c:	763b      	strb	r3, [r7, #24]
 800075e:	f107 0218 	add.w	r2, r7, #24
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	2301      	movs	r3, #1
 8000766:	f240 1199 	movw	r1, #409	@ 0x199
 800076a:	7800      	ldrb	r0, [r0, #0]
 800076c:	f000 f846 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x01a6, (uint8_t[]){0x1b}, 1);
 8000770:	231b      	movs	r3, #27
 8000772:	753b      	strb	r3, [r7, #20]
 8000774:	f107 0214 	add.w	r2, r7, #20
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	2301      	movs	r3, #1
 800077c:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 8000780:	7800      	ldrb	r0, [r0, #0]
 8000782:	f000 f83b 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x01ac, (uint8_t[]){0x3e}, 1);
 8000786:	233e      	movs	r3, #62	@ 0x3e
 8000788:	743b      	strb	r3, [r7, #16]
 800078a:	f107 0210 	add.w	r2, r7, #16
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	2301      	movs	r3, #1
 8000792:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8000796:	7800      	ldrb	r0, [r0, #0]
 8000798:	f000 f830 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x01a7, (uint8_t[]){0x1f}, 1);
 800079c:	231f      	movs	r3, #31
 800079e:	733b      	strb	r3, [r7, #12]
 80007a0:	f107 020c 	add.w	r2, r7, #12
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	2301      	movs	r3, #1
 80007a8:	f240 11a7 	movw	r1, #423	@ 0x1a7
 80007ac:	7800      	ldrb	r0, [r0, #0]
 80007ae:	f000 f825 	bl	80007fc <VL6180x_I2CWrite>
    VL6180x_I2CWrite(*dev, 0x0030, (uint8_t[]){0x00}, 1);
 80007b2:	2300      	movs	r3, #0
 80007b4:	723b      	strb	r3, [r7, #8]
 80007b6:	f107 0208 	add.w	r2, r7, #8
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	2301      	movs	r3, #1
 80007be:	2130      	movs	r1, #48	@ 0x30
 80007c0:	7800      	ldrb	r0, [r0, #0]
 80007c2:	f000 f81b 	bl	80007fc <VL6180x_I2CWrite>

    return 0;
 80007c6:	2300      	movs	r3, #0
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3780      	adds	r7, #128	@ 0x80
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <VL6180x_SetOffset>:
    VL6180x_I2CWrite(*dev, 0x0018, &start, 1);
    VL6180x_Delay(10);
    return VL6180x_I2CRead(*dev, 0x0062, range, 1);
}

int VL6180x_SetOffset(VL6180xDev_t *dev, int8_t offset_mm) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
    uint8_t val = (uint8_t)offset_mm; // 2's complement automático
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	73fb      	strb	r3, [r7, #15]
    return VL6180x_I2CWrite(*dev, 0x0024, &val, 1);
 80007e0:	f107 020f 	add.w	r2, r7, #15
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	2301      	movs	r3, #1
 80007e8:	2124      	movs	r1, #36	@ 0x24
 80007ea:	7800      	ldrb	r0, [r0, #0]
 80007ec:	f000 f806 	bl	80007fc <VL6180x_I2CWrite>
 80007f0:	4603      	mov	r3, r0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <VL6180x_I2CWrite>:
#include "VL6180x_platform.h"
#include "main.h"

extern I2C_HandleTypeDef hi2c1;

int VL6180x_I2CWrite(VL6180xDev_t dev, uint16_t index, uint8_t *data, uint16_t length) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	@ 0x28
 8000800:	af04      	add	r7, sp, #16
 8000802:	7338      	strb	r0, [r7, #12]
 8000804:	60ba      	str	r2, [r7, #8]
 8000806:	461a      	mov	r2, r3
 8000808:	460b      	mov	r3, r1
 800080a:	81fb      	strh	r3, [r7, #14]
 800080c:	4613      	mov	r3, r2
 800080e:	80fb      	strh	r3, [r7, #6]
    uint8_t buffer[2] = {index >> 8, index & 0xFF};
 8000810:	89fb      	ldrh	r3, [r7, #14]
 8000812:	0a1b      	lsrs	r3, r3, #8
 8000814:	b29b      	uxth	r3, r3
 8000816:	b2db      	uxtb	r3, r3
 8000818:	753b      	strb	r3, [r7, #20]
 800081a:	89fb      	ldrh	r3, [r7, #14]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	757b      	strb	r3, [r7, #21]
    HAL_I2C_Mem_Write(&hi2c1, dev.I2cAddr << 1, index, I2C_MEMADD_SIZE_16BIT, data, length, HAL_MAX_DELAY);
 8000820:	7b3b      	ldrb	r3, [r7, #12]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	b299      	uxth	r1, r3
 8000826:	89fa      	ldrh	r2, [r7, #14]
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	9302      	str	r3, [sp, #8]
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2310      	movs	r3, #16
 8000838:	4803      	ldr	r0, [pc, #12]	@ (8000848 <VL6180x_I2CWrite+0x4c>)
 800083a:	f000 ff87 	bl	800174c <HAL_I2C_Mem_Write>
    return 0;
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000028 	.word	0x20000028

0800084c <VL6180x_I2CRead>:

int VL6180x_I2CRead(VL6180xDev_t dev, uint16_t index, uint8_t *data, uint16_t length) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af04      	add	r7, sp, #16
 8000852:	7338      	strb	r0, [r7, #12]
 8000854:	60ba      	str	r2, [r7, #8]
 8000856:	461a      	mov	r2, r3
 8000858:	460b      	mov	r3, r1
 800085a:	81fb      	strh	r3, [r7, #14]
 800085c:	4613      	mov	r3, r2
 800085e:	80fb      	strh	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, dev.I2cAddr << 1, index, I2C_MEMADD_SIZE_16BIT, data, length, HAL_MAX_DELAY);
 8000860:	7b3b      	ldrb	r3, [r7, #12]
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	b299      	uxth	r1, r3
 8000866:	89fa      	ldrh	r2, [r7, #14]
 8000868:	f04f 33ff 	mov.w	r3, #4294967295
 800086c:	9302      	str	r3, [sp, #8]
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	9301      	str	r3, [sp, #4]
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2310      	movs	r3, #16
 8000878:	4803      	ldr	r0, [pc, #12]	@ (8000888 <VL6180x_I2CRead+0x3c>)
 800087a:	f001 f861 	bl	8001940 <HAL_I2C_Mem_Read>
    return 0;
 800087e:	2300      	movs	r3, #0
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000028 	.word	0x20000028

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b090      	sub	sp, #64	@ 0x40
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000892:	f000 fa9f 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000896:	f000 f81b 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089a:	f000 f8df 	bl	8000a5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800089e:	f000 f8b3 	bl	8000a08 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008a2:	f000 f883 	bl	80009ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  VL6180xDev_t dev = {.I2cAddr = 0x29};
 80008a6:	2329      	movs	r3, #41	@ 0x29
 80008a8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  VL6180x_Init(&dev);
 80008ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fe1f 	bl	80004f4 <VL6180x_Init>
  VL6180x_Prepare(&dev);
 80008b6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fe31 	bl	8000522 <VL6180x_Prepare>
  VL6180x_SetOffset(&dev, 0);
 80008c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff82 	bl	80007d0 <VL6180x_SetOffset>
  char uart_buf[50];
  while(1);
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <main+0x40>

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	@ 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	2234      	movs	r2, #52	@ 0x34
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f004 fb94 	bl	800500c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	4b2a      	ldr	r3, [pc, #168]	@ (80009a4 <SystemClock_Config+0xd4>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	4a29      	ldr	r2, [pc, #164]	@ (80009a4 <SystemClock_Config+0xd4>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	@ 0x40
 8000904:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <SystemClock_Config+0xd4>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000910:	2300      	movs	r3, #0
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	4b24      	ldr	r3, [pc, #144]	@ (80009a8 <SystemClock_Config+0xd8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800091c:	4a22      	ldr	r2, [pc, #136]	@ (80009a8 <SystemClock_Config+0xd8>)
 800091e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <SystemClock_Config+0xd8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000930:	2302      	movs	r3, #2
 8000932:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000934:	2301      	movs	r3, #1
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000938:	2310      	movs	r3, #16
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093c:	2302      	movs	r3, #2
 800093e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000940:	2300      	movs	r3, #0
 8000942:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000944:	2310      	movs	r3, #16
 8000946:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000948:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800094c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800094e:	2304      	movs	r3, #4
 8000950:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000952:	2302      	movs	r3, #2
 8000954:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4618      	mov	r0, r3
 8000960:	f003 fdf2 	bl	8004548 <HAL_RCC_OscConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800096a:	f000 f8e5 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096e:	230f      	movs	r3, #15
 8000970:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000972:	2302      	movs	r3, #2
 8000974:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	2102      	movs	r1, #2
 800098a:	4618      	mov	r0, r3
 800098c:	f003 fa92 	bl	8003eb4 <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000996:	f000 f8cf 	bl	8000b38 <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3750      	adds	r7, #80	@ 0x50
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40007000 	.word	0x40007000

080009ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009b2:	4a13      	ldr	r2, [pc, #76]	@ (8000a00 <MX_I2C1_Init+0x54>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009b8:	4a12      	ldr	r2, [pc, #72]	@ (8000a04 <MX_I2C1_Init+0x58>)
 80009ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009dc:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <MX_I2C1_Init+0x50>)
 80009ea:	f000 fd55 	bl	8001498 <HAL_I2C_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009f4:	f000 f8a0 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000028 	.word	0x20000028
 8000a00:	40005400 	.word	0x40005400
 8000a04:	000186a0 	.word	0x000186a0

08000a08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	@ (8000a58 <MX_USART2_UART_Init+0x50>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a40:	f004 f820 	bl	8004a84 <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a4a:	f000 f875 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2000007c 	.word	0x2000007c
 8000a58:	40004400 	.word	0x40004400

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b2d      	ldr	r3, [pc, #180]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a2c      	ldr	r2, [pc, #176]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b2a      	ldr	r3, [pc, #168]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b26      	ldr	r3, [pc, #152]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a25      	ldr	r2, [pc, #148]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	4b1f      	ldr	r3, [pc, #124]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a17      	ldr	r2, [pc, #92]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	4812      	ldr	r0, [pc, #72]	@ (8000b30 <MX_GPIO_Init+0xd4>)
 8000ae8:	f000 fcbc 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <MX_GPIO_Init+0xd8>)
 8000b04:	f000 fb1a 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <MX_GPIO_Init+0xd4>)
 8000b20:	f000 fb0c 	bl	800113c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b24:	bf00      	nop
 8000b26:	3728      	adds	r7, #40	@ 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40020800 	.word	0x40020800

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <Error_Handler+0x8>

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	4a0f      	ldr	r2, [pc, #60]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	4a08      	ldr	r2, [pc, #32]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b82:	2007      	movs	r0, #7
 8000b84:	f000 fa68 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a21      	ldr	r2, [pc, #132]	@ (8000c38 <HAL_I2C_MspInit+0xa4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d13b      	bne.n	8000c2e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b20      	ldr	r3, [pc, #128]	@ (8000c3c <HAL_I2C_MspInit+0xa8>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8000c3c <HAL_I2C_MspInit+0xa8>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c3c <HAL_I2C_MspInit+0xa8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bd2:	23c0      	movs	r3, #192	@ 0xc0
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd6:	2312      	movs	r3, #18
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be2:	2304      	movs	r3, #4
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4814      	ldr	r0, [pc, #80]	@ (8000c40 <HAL_I2C_MspInit+0xac>)
 8000bee:	f000 faa5 	bl	800113c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <HAL_I2C_MspInit+0xa8>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	4a10      	ldr	r2, [pc, #64]	@ (8000c3c <HAL_I2C_MspInit+0xa8>)
 8000bfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c02:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <HAL_I2C_MspInit+0xa8>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	201f      	movs	r0, #31
 8000c14:	f000 fa2b 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c18:	201f      	movs	r0, #31
 8000c1a:	f000 fa44 	bl	80010a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2020      	movs	r0, #32
 8000c24:	f000 fa23 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c28:	2020      	movs	r0, #32
 8000c2a:	f000 fa3c 	bl	80010a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	@ 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40005400 	.word	0x40005400
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020400 	.word	0x40020400

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	@ 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a19      	ldr	r2, [pc, #100]	@ (8000cc8 <HAL_UART_MspInit+0x84>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d12b      	bne.n	8000cbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <HAL_UART_MspInit+0x88>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	4a17      	ldr	r2, [pc, #92]	@ (8000ccc <HAL_UART_MspInit+0x88>)
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <HAL_UART_MspInit+0x88>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <HAL_UART_MspInit+0x88>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a10      	ldr	r2, [pc, #64]	@ (8000ccc <HAL_UART_MspInit+0x88>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <HAL_UART_MspInit+0x88>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <HAL_UART_MspInit+0x8c>)
 8000cba:	f000 fa3f 	bl	800113c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cbe:	bf00      	nop
 8000cc0:	3728      	adds	r7, #40	@ 0x28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40004400 	.word	0x40004400
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <NMI_Handler+0x4>

08000cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2a:	f000 f8a5 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <I2C1_EV_IRQHandler+0x10>)
 8000d3a:	f001 f833 	bl	8001da4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000028 	.word	0x20000028

08000d48 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	@ (8000d58 <I2C1_ER_IRQHandler+0x10>)
 8000d4e:	f001 f97c 	bl	800204a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000028 	.word	0x20000028

08000d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	@ (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d84:	f7ff ffea 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	@ (8000dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f004 f935 	bl	800501c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fd6b 	bl	800088c <main>
  bx  lr    
 8000db6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dc4:	080050a4 	.word	0x080050a4
  ldr r2, =_sbss
 8000dc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dcc:	200000c8 	.word	0x200000c8

08000dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e14 <HAL_Init+0x40>)
 8000dde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <HAL_Init+0x40>)
 8000dea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	@ (8000e14 <HAL_Init+0x40>)
 8000df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f92b 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 f808 	bl	8000e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff fe9c 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023c00 	.word	0x40023c00

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <HAL_InitTick+0x54>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_InitTick+0x58>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f943 	bl	80010c2 <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00e      	b.n	8000e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d80a      	bhi.n	8000e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f000 f90b 	bl	800106e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e58:	4a06      	ldr	r2, [pc, #24]	@ (8000e74 <HAL_InitTick+0x5c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000004 	.word	0x20000004

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	200000c4 	.word	0x200000c4

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200000c4 	.word	0x200000c4

08000eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db0b      	blt.n	8000f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4907      	ldr	r1, [pc, #28]	@ (8000f54 <__NVIC_EnableIRQ+0x38>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	@ (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	@ (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	@ 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001024:	d301      	bcc.n	800102a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001026:	2301      	movs	r3, #1
 8001028:	e00f      	b.n	800104a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102a:	4a0a      	ldr	r2, [pc, #40]	@ (8001054 <SysTick_Config+0x40>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001032:	210f      	movs	r1, #15
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f7ff ff8e 	bl	8000f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103c:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <SysTick_Config+0x40>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001042:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <SysTick_Config+0x40>)
 8001044:	2207      	movs	r2, #7
 8001046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	e000e010 	.word	0xe000e010

08001058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff29 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001080:	f7ff ff3e 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 8001084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f7ff ff8e 	bl	8000fac <NVIC_EncodePriority>
 8001090:	4602      	mov	r2, r0
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff5d 	bl	8000f58 <__NVIC_SetPriority>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff31 	bl	8000f1c <__NVIC_EnableIRQ>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffa2 	bl	8001014 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d004      	beq.n	80010f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2280      	movs	r2, #128	@ 0x80
 80010f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e00c      	b.n	8001112 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2205      	movs	r2, #5
 80010fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0201 	bic.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800112c:	b2db      	uxtb	r3, r3
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	e165      	b.n	8001424 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	429a      	cmp	r2, r3
 8001172:	f040 8154 	bne.w	800141e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b01      	cmp	r3, #1
 8001180:	d005      	beq.n	800118e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118a:	2b02      	cmp	r3, #2
 800118c:	d130      	bne.n	80011f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 0201 	and.w	r2, r3, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d017      	beq.n	800122c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d123      	bne.n	8001280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	69b9      	ldr	r1, [r7, #24]
 800127c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0203 	and.w	r2, r3, #3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80ae 	beq.w	800141e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b5d      	ldr	r3, [pc, #372]	@ (800143c <HAL_GPIO_Init+0x300>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4a5c      	ldr	r2, [pc, #368]	@ (800143c <HAL_GPIO_Init+0x300>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d2:	4b5a      	ldr	r3, [pc, #360]	@ (800143c <HAL_GPIO_Init+0x300>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012de:	4a58      	ldr	r2, [pc, #352]	@ (8001440 <HAL_GPIO_Init+0x304>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4f      	ldr	r2, [pc, #316]	@ (8001444 <HAL_GPIO_Init+0x308>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d025      	beq.n	8001356 <HAL_GPIO_Init+0x21a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4e      	ldr	r2, [pc, #312]	@ (8001448 <HAL_GPIO_Init+0x30c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d01f      	beq.n	8001352 <HAL_GPIO_Init+0x216>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4d      	ldr	r2, [pc, #308]	@ (800144c <HAL_GPIO_Init+0x310>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d019      	beq.n	800134e <HAL_GPIO_Init+0x212>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4c      	ldr	r2, [pc, #304]	@ (8001450 <HAL_GPIO_Init+0x314>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_GPIO_Init+0x20e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4b      	ldr	r2, [pc, #300]	@ (8001454 <HAL_GPIO_Init+0x318>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00d      	beq.n	8001346 <HAL_GPIO_Init+0x20a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4a      	ldr	r2, [pc, #296]	@ (8001458 <HAL_GPIO_Init+0x31c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d007      	beq.n	8001342 <HAL_GPIO_Init+0x206>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a49      	ldr	r2, [pc, #292]	@ (800145c <HAL_GPIO_Init+0x320>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d101      	bne.n	800133e <HAL_GPIO_Init+0x202>
 800133a:	2306      	movs	r3, #6
 800133c:	e00c      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 800133e:	2307      	movs	r3, #7
 8001340:	e00a      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 8001342:	2305      	movs	r3, #5
 8001344:	e008      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 8001346:	2304      	movs	r3, #4
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 800134a:	2303      	movs	r3, #3
 800134c:	e004      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 800134e:	2302      	movs	r3, #2
 8001350:	e002      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <HAL_GPIO_Init+0x21c>
 8001356:	2300      	movs	r3, #0
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	f002 0203 	and.w	r2, r2, #3
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	4093      	lsls	r3, r2
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001368:	4935      	ldr	r1, [pc, #212]	@ (8001440 <HAL_GPIO_Init+0x304>)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3302      	adds	r3, #2
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001376:	4b3a      	ldr	r3, [pc, #232]	@ (8001460 <HAL_GPIO_Init+0x324>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800139a:	4a31      	ldr	r2, [pc, #196]	@ (8001460 <HAL_GPIO_Init+0x324>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001460 <HAL_GPIO_Init+0x324>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c4:	4a26      	ldr	r2, [pc, #152]	@ (8001460 <HAL_GPIO_Init+0x324>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ca:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <HAL_GPIO_Init+0x324>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <HAL_GPIO_Init+0x324>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <HAL_GPIO_Init+0x324>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001418:	4a11      	ldr	r2, [pc, #68]	@ (8001460 <HAL_GPIO_Init+0x324>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3301      	adds	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	f67f ae96 	bls.w	8001158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3724      	adds	r7, #36	@ 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40013800 	.word	0x40013800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40020800 	.word	0x40020800
 8001450:	40020c00 	.word	0x40020c00
 8001454:	40021000 	.word	0x40021000
 8001458:	40021400 	.word	0x40021400
 800145c:	40021800 	.word	0x40021800
 8001460:	40013c00 	.word	0x40013c00

08001464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001474:	787b      	ldrb	r3, [r7, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001480:	e003      	b.n	800148a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001482:	887b      	ldrh	r3, [r7, #2]
 8001484:	041a      	lsls	r2, r3, #16
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	619a      	str	r2, [r3, #24]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e12b      	b.n	8001702 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d106      	bne.n	80014c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fb68 	bl	8000b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2224      	movs	r2, #36	@ 0x24
 80014c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0201 	bic.w	r2, r2, #1
 80014da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014fc:	f002 fdcc 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 8001500:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4a81      	ldr	r2, [pc, #516]	@ (800170c <HAL_I2C_Init+0x274>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d807      	bhi.n	800151c <HAL_I2C_Init+0x84>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4a80      	ldr	r2, [pc, #512]	@ (8001710 <HAL_I2C_Init+0x278>)
 8001510:	4293      	cmp	r3, r2
 8001512:	bf94      	ite	ls
 8001514:	2301      	movls	r3, #1
 8001516:	2300      	movhi	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	e006      	b.n	800152a <HAL_I2C_Init+0x92>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4a7d      	ldr	r2, [pc, #500]	@ (8001714 <HAL_I2C_Init+0x27c>)
 8001520:	4293      	cmp	r3, r2
 8001522:	bf94      	ite	ls
 8001524:	2301      	movls	r3, #1
 8001526:	2300      	movhi	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0e7      	b.n	8001702 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4a78      	ldr	r2, [pc, #480]	@ (8001718 <HAL_I2C_Init+0x280>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	0c9b      	lsrs	r3, r3, #18
 800153c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	430a      	orrs	r2, r1
 8001550:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	4a6a      	ldr	r2, [pc, #424]	@ (800170c <HAL_I2C_Init+0x274>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d802      	bhi.n	800156c <HAL_I2C_Init+0xd4>
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3301      	adds	r3, #1
 800156a:	e009      	b.n	8001580 <HAL_I2C_Init+0xe8>
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	4a69      	ldr	r2, [pc, #420]	@ (800171c <HAL_I2C_Init+0x284>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	099b      	lsrs	r3, r3, #6
 800157e:	3301      	adds	r3, #1
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	430b      	orrs	r3, r1
 8001586:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001592:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	495c      	ldr	r1, [pc, #368]	@ (800170c <HAL_I2C_Init+0x274>)
 800159c:	428b      	cmp	r3, r1
 800159e:	d819      	bhi.n	80015d4 <HAL_I2C_Init+0x13c>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1e59      	subs	r1, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ae:	1c59      	adds	r1, r3, #1
 80015b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015b4:	400b      	ands	r3, r1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00a      	beq.n	80015d0 <HAL_I2C_Init+0x138>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	1e59      	subs	r1, r3, #1
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80015c8:	3301      	adds	r3, #1
 80015ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ce:	e051      	b.n	8001674 <HAL_I2C_Init+0x1dc>
 80015d0:	2304      	movs	r3, #4
 80015d2:	e04f      	b.n	8001674 <HAL_I2C_Init+0x1dc>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d111      	bne.n	8001600 <HAL_I2C_Init+0x168>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	1e58      	subs	r0, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6859      	ldr	r1, [r3, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	440b      	add	r3, r1
 80015ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ee:	3301      	adds	r3, #1
 80015f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	bf0c      	ite	eq
 80015f8:	2301      	moveq	r3, #1
 80015fa:	2300      	movne	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	e012      	b.n	8001626 <HAL_I2C_Init+0x18e>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1e58      	subs	r0, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6859      	ldr	r1, [r3, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	0099      	lsls	r1, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	fbb0 f3f3 	udiv	r3, r0, r3
 8001616:	3301      	adds	r3, #1
 8001618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800161c:	2b00      	cmp	r3, #0
 800161e:	bf0c      	ite	eq
 8001620:	2301      	moveq	r3, #1
 8001622:	2300      	movne	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_Init+0x196>
 800162a:	2301      	movs	r3, #1
 800162c:	e022      	b.n	8001674 <HAL_I2C_Init+0x1dc>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10e      	bne.n	8001654 <HAL_I2C_Init+0x1bc>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1e58      	subs	r0, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6859      	ldr	r1, [r3, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	440b      	add	r3, r1
 8001644:	fbb0 f3f3 	udiv	r3, r0, r3
 8001648:	3301      	adds	r3, #1
 800164a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001652:	e00f      	b.n	8001674 <HAL_I2C_Init+0x1dc>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1e58      	subs	r0, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6859      	ldr	r1, [r3, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	0099      	lsls	r1, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	fbb0 f3f3 	udiv	r3, r0, r3
 800166a:	3301      	adds	r3, #1
 800166c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001670:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	6809      	ldr	r1, [r1, #0]
 8001678:	4313      	orrs	r3, r2
 800167a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69da      	ldr	r2, [r3, #28]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6911      	ldr	r1, [r2, #16]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68d2      	ldr	r2, [r2, #12]
 80016ae:	4311      	orrs	r1, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	430b      	orrs	r3, r1
 80016b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0201 	orr.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2220      	movs	r2, #32
 80016ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	000186a0 	.word	0x000186a0
 8001710:	001e847f 	.word	0x001e847f
 8001714:	003d08ff 	.word	0x003d08ff
 8001718:	431bde83 	.word	0x431bde83
 800171c:	10624dd3 	.word	0x10624dd3

08001720 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001732:	2b80      	cmp	r3, #128	@ 0x80
 8001734:	d103      	bne.n	800173e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  }
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af02      	add	r7, sp, #8
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	4608      	mov	r0, r1
 8001756:	4611      	mov	r1, r2
 8001758:	461a      	mov	r2, r3
 800175a:	4603      	mov	r3, r0
 800175c:	817b      	strh	r3, [r7, #10]
 800175e:	460b      	mov	r3, r1
 8001760:	813b      	strh	r3, [r7, #8]
 8001762:	4613      	mov	r3, r2
 8001764:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001766:	f7ff fb9b 	bl	8000ea0 <HAL_GetTick>
 800176a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b20      	cmp	r3, #32
 8001776:	f040 80d9 	bne.w	800192c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2319      	movs	r3, #25
 8001780:	2201      	movs	r2, #1
 8001782:	496d      	ldr	r1, [pc, #436]	@ (8001938 <HAL_I2C_Mem_Write+0x1ec>)
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f002 f911 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001790:	2302      	movs	r3, #2
 8001792:	e0cc      	b.n	800192e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <HAL_I2C_Mem_Write+0x56>
 800179e:	2302      	movs	r3, #2
 80017a0:	e0c5      	b.n	800192e <HAL_I2C_Mem_Write+0x1e2>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d007      	beq.n	80017c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0201 	orr.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2221      	movs	r2, #33	@ 0x21
 80017dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2240      	movs	r2, #64	@ 0x40
 80017e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6a3a      	ldr	r2, [r7, #32]
 80017f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80017f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017fe:	b29a      	uxth	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4a4d      	ldr	r2, [pc, #308]	@ (800193c <HAL_I2C_Mem_Write+0x1f0>)
 8001808:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800180a:	88f8      	ldrh	r0, [r7, #6]
 800180c:	893a      	ldrh	r2, [r7, #8]
 800180e:	8979      	ldrh	r1, [r7, #10]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	4603      	mov	r3, r0
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f001 fea0 	bl	8003560 <I2C_RequestMemoryWrite>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d052      	beq.n	80018cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e081      	b.n	800192e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f002 f9d6 	bl	8003be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00d      	beq.n	8001856 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	2b04      	cmp	r3, #4
 8001840:	d107      	bne.n	8001852 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001850:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e06b      	b.n	800192e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185a:	781a      	ldrb	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001870:	3b01      	subs	r3, #1
 8001872:	b29a      	uxth	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800187c:	b29b      	uxth	r3, r3
 800187e:	3b01      	subs	r3, #1
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b04      	cmp	r3, #4
 8001892:	d11b      	bne.n	80018cc <HAL_I2C_Mem_Write+0x180>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001898:	2b00      	cmp	r3, #0
 800189a:	d017      	beq.n	80018cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a0:	781a      	ldrb	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1aa      	bne.n	800182a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f002 f9c9 	bl	8003c70 <I2C_WaitOnBTFFlagUntilTimeout>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00d      	beq.n	8001900 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d107      	bne.n	80018fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e016      	b.n	800192e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800190e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2220      	movs	r2, #32
 8001914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	e000      	b.n	800192e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800192c:	2302      	movs	r3, #2
  }
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	00100002 	.word	0x00100002
 800193c:	ffff0000 	.word	0xffff0000

08001940 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	@ 0x30
 8001944:	af02      	add	r7, sp, #8
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	4608      	mov	r0, r1
 800194a:	4611      	mov	r1, r2
 800194c:	461a      	mov	r2, r3
 800194e:	4603      	mov	r3, r0
 8001950:	817b      	strh	r3, [r7, #10]
 8001952:	460b      	mov	r3, r1
 8001954:	813b      	strh	r3, [r7, #8]
 8001956:	4613      	mov	r3, r2
 8001958:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800195a:	f7ff faa1 	bl	8000ea0 <HAL_GetTick>
 800195e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b20      	cmp	r3, #32
 800196a:	f040 8214 	bne.w	8001d96 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2319      	movs	r3, #25
 8001974:	2201      	movs	r2, #1
 8001976:	497b      	ldr	r1, [pc, #492]	@ (8001b64 <HAL_I2C_Mem_Read+0x224>)
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f002 f817 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001984:	2302      	movs	r3, #2
 8001986:	e207      	b.n	8001d98 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_I2C_Mem_Read+0x56>
 8001992:	2302      	movs	r3, #2
 8001994:	e200      	b.n	8001d98 <HAL_I2C_Mem_Read+0x458>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d007      	beq.n	80019bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2222      	movs	r2, #34	@ 0x22
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2240      	movs	r2, #64	@ 0x40
 80019d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80019ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001b68 <HAL_I2C_Mem_Read+0x228>)
 80019fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019fe:	88f8      	ldrh	r0, [r7, #6]
 8001a00:	893a      	ldrh	r2, [r7, #8]
 8001a02:	8979      	ldrh	r1, [r7, #10]
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f001 fe3c 	bl	800368c <I2C_RequestMemoryRead>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e1bc      	b.n	8001d98 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d113      	bne.n	8001a4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	623b      	str	r3, [r7, #32]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	623b      	str	r3, [r7, #32]
 8001a3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	e190      	b.n	8001d70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d11b      	bne.n	8001a8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	e170      	b.n	8001d70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d11b      	bne.n	8001ace <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001aa4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ab4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	e150      	b.n	8001d70 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ae4:	e144      	b.n	8001d70 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	f200 80f1 	bhi.w	8001cd2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d123      	bne.n	8001b40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001afa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f002 f931 	bl	8003d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e145      	b.n	8001d98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b3e:	e117      	b.n	8001d70 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d14e      	bne.n	8001be6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b4e:	2200      	movs	r2, #0
 8001b50:	4906      	ldr	r1, [pc, #24]	@ (8001b6c <HAL_I2C_Mem_Read+0x22c>)
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f001 ff2a 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d008      	beq.n	8001b70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e11a      	b.n	8001d98 <HAL_I2C_Mem_Read+0x458>
 8001b62:	bf00      	nop
 8001b64:	00100002 	.word	0x00100002
 8001b68:	ffff0000 	.word	0xffff0000
 8001b6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001be4:	e0c4      	b.n	8001d70 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bec:	2200      	movs	r2, #0
 8001bee:	496c      	ldr	r1, [pc, #432]	@ (8001da0 <HAL_I2C_Mem_Read+0x460>)
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f001 fedb 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0cb      	b.n	8001d98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691a      	ldr	r2, [r3, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4955      	ldr	r1, [pc, #340]	@ (8001da0 <HAL_I2C_Mem_Read+0x460>)
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f001 fead 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e09d      	b.n	8001d98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001cd0:	e04e      	b.n	8001d70 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f002 f844 	bl	8003d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e058      	b.n	8001d98 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	3b01      	subs	r3, #1
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d124      	bne.n	8001d70 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d107      	bne.n	8001d3e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d3c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f47f aeb6 	bne.w	8001ae6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e000      	b.n	8001d98 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001d96:	2302      	movs	r3, #2
  }
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3728      	adds	r7, #40	@ 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	00010004 	.word	0x00010004

08001da4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001dc4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dcc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d003      	beq.n	8001ddc <HAL_I2C_EV_IRQHandler+0x38>
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	2b40      	cmp	r3, #64	@ 0x40
 8001dd8:	f040 80b1 	bne.w	8001f3e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10d      	bne.n	8001e12 <HAL_I2C_EV_IRQHandler+0x6e>
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001dfc:	d003      	beq.n	8001e06 <HAL_I2C_EV_IRQHandler+0x62>
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001e04:	d101      	bne.n	8001e0a <HAL_I2C_EV_IRQHandler+0x66>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_I2C_EV_IRQHandler+0x68>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	f000 8114 	beq.w	800203a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00b      	beq.n	8001e34 <HAL_I2C_EV_IRQHandler+0x90>
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d006      	beq.n	8001e34 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f002 f828 	bl	8003e7c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fd7a 	bl	8002926 <I2C_Master_SB>
 8001e32:	e083      	b.n	8001f3c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d008      	beq.n	8001e50 <HAL_I2C_EV_IRQHandler+0xac>
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 fdf2 	bl	8002a32 <I2C_Master_ADD10>
 8001e4e:	e075      	b.n	8001f3c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d008      	beq.n	8001e6c <HAL_I2C_EV_IRQHandler+0xc8>
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 fe0e 	bl	8002a86 <I2C_Master_ADDR>
 8001e6a:	e067      	b.n	8001f3c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d036      	beq.n	8001ee4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e84:	f000 80db 	beq.w	800203e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00d      	beq.n	8001eae <HAL_I2C_EV_IRQHandler+0x10a>
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_I2C_EV_IRQHandler+0x10a>
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d103      	bne.n	8001eae <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f9d6 	bl	8002258 <I2C_MasterTransmit_TXE>
 8001eac:	e046      	b.n	8001f3c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80c2 	beq.w	800203e <HAL_I2C_EV_IRQHandler+0x29a>
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 80bc 	beq.w	800203e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	2b21      	cmp	r3, #33	@ 0x21
 8001eca:	d103      	bne.n	8001ed4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 fa5f 	bl	8002390 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ed2:	e0b4      	b.n	800203e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	2b40      	cmp	r3, #64	@ 0x40
 8001ed8:	f040 80b1 	bne.w	800203e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 facd 	bl	800247c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ee2:	e0ac      	b.n	800203e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ef2:	f000 80a4 	beq.w	800203e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00d      	beq.n	8001f1c <HAL_I2C_EV_IRQHandler+0x178>
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d008      	beq.n	8001f1c <HAL_I2C_EV_IRQHandler+0x178>
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d103      	bne.n	8001f1c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 fb49 	bl	80025ac <I2C_MasterReceive_RXNE>
 8001f1a:	e00f      	b.n	8001f3c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 808b 	beq.w	800203e <HAL_I2C_EV_IRQHandler+0x29a>
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8085 	beq.w	800203e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 fc01 	bl	800273c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f3a:	e080      	b.n	800203e <HAL_I2C_EV_IRQHandler+0x29a>
 8001f3c:	e07f      	b.n	800203e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d004      	beq.n	8001f50 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	e007      	b.n	8001f60 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d011      	beq.n	8001f8e <HAL_I2C_EV_IRQHandler+0x1ea>
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00c      	beq.n	8001f8e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001f84:	69b9      	ldr	r1, [r7, #24]
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 ffcc 	bl	8002f24 <I2C_Slave_ADDR>
 8001f8c:	e05a      	b.n	8002044 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f003 0310 	and.w	r3, r3, #16
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <HAL_I2C_EV_IRQHandler+0x206>
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f001 f806 	bl	8002fb4 <I2C_Slave_STOPF>
 8001fa8:	e04c      	b.n	8002044 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001faa:	7bbb      	ldrb	r3, [r7, #14]
 8001fac:	2b21      	cmp	r3, #33	@ 0x21
 8001fae:	d002      	beq.n	8001fb6 <HAL_I2C_EV_IRQHandler+0x212>
 8001fb0:	7bbb      	ldrb	r3, [r7, #14]
 8001fb2:	2b29      	cmp	r3, #41	@ 0x29
 8001fb4:	d120      	bne.n	8001ff8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00d      	beq.n	8001fdc <HAL_I2C_EV_IRQHandler+0x238>
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d008      	beq.n	8001fdc <HAL_I2C_EV_IRQHandler+0x238>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d103      	bne.n	8001fdc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 fee7 	bl	8002da8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fda:	e032      	b.n	8002042 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d02d      	beq.n	8002042 <HAL_I2C_EV_IRQHandler+0x29e>
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d028      	beq.n	8002042 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 ff16 	bl	8002e22 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ff6:	e024      	b.n	8002042 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00d      	beq.n	800201e <HAL_I2C_EV_IRQHandler+0x27a>
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_I2C_EV_IRQHandler+0x27a>
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b00      	cmp	r3, #0
 8002014:	d103      	bne.n	800201e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 ff24 	bl	8002e64 <I2C_SlaveReceive_RXNE>
 800201c:	e012      	b.n	8002044 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00d      	beq.n	8002044 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800202e:	2b00      	cmp	r3, #0
 8002030:	d008      	beq.n	8002044 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 ff54 	bl	8002ee0 <I2C_SlaveReceive_BTF>
 8002038:	e004      	b.n	8002044 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800203a:	bf00      	nop
 800203c:	e002      	b.n	8002044 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800203e:	bf00      	nop
 8002040:	e000      	b.n	8002044 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002042:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002044:	3720      	adds	r7, #32
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b08a      	sub	sp, #40	@ 0x28
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800206c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00d      	beq.n	8002094 <HAL_I2C_ER_IRQHandler+0x4a>
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002092:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00d      	beq.n	80020ba <HAL_I2C_ER_IRQHandler+0x70>
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80020a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020aa:	f043 0302 	orr.w	r3, r3, #2
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80020b8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d03e      	beq.n	8002142 <HAL_I2C_ER_IRQHandler+0xf8>
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d039      	beq.n	8002142 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80020ce:	7efb      	ldrb	r3, [r7, #27]
 80020d0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020e0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80020e8:	7ebb      	ldrb	r3, [r7, #26]
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	d112      	bne.n	8002114 <HAL_I2C_ER_IRQHandler+0xca>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10f      	bne.n	8002114 <HAL_I2C_ER_IRQHandler+0xca>
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	2b21      	cmp	r3, #33	@ 0x21
 80020f8:	d008      	beq.n	800210c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80020fa:	7cfb      	ldrb	r3, [r7, #19]
 80020fc:	2b29      	cmp	r3, #41	@ 0x29
 80020fe:	d005      	beq.n	800210c <HAL_I2C_ER_IRQHandler+0xc2>
 8002100:	7cfb      	ldrb	r3, [r7, #19]
 8002102:	2b28      	cmp	r3, #40	@ 0x28
 8002104:	d106      	bne.n	8002114 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b21      	cmp	r3, #33	@ 0x21
 800210a:	d103      	bne.n	8002114 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f001 f881 	bl	8003214 <I2C_Slave_AF>
 8002112:	e016      	b.n	8002142 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800211c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002126:	7efb      	ldrb	r3, [r7, #27]
 8002128:	2b10      	cmp	r3, #16
 800212a:	d002      	beq.n	8002132 <HAL_I2C_ER_IRQHandler+0xe8>
 800212c:	7efb      	ldrb	r3, [r7, #27]
 800212e:	2b40      	cmp	r3, #64	@ 0x40
 8002130:	d107      	bne.n	8002142 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002140:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00d      	beq.n	8002168 <HAL_I2C_ER_IRQHandler+0x11e>
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d008      	beq.n	8002168 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	f043 0308 	orr.w	r3, r3, #8
 800215c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002166:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	2b00      	cmp	r3, #0
 800216c:	d008      	beq.n	8002180 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f001 f8be 	bl	80032fc <I2C_ITError>
  }
}
 8002180:	bf00      	nop
 8002182:	3728      	adds	r7, #40	@ 0x28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	70fb      	strb	r3, [r7, #3]
 80021e4:	4613      	mov	r3, r2
 80021e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002266:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800226e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002274:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800227a:	2b00      	cmp	r3, #0
 800227c:	d150      	bne.n	8002320 <I2C_MasterTransmit_TXE+0xc8>
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	2b21      	cmp	r3, #33	@ 0x21
 8002282:	d14d      	bne.n	8002320 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b08      	cmp	r3, #8
 8002288:	d01d      	beq.n	80022c6 <I2C_MasterTransmit_TXE+0x6e>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b20      	cmp	r3, #32
 800228e:	d01a      	beq.n	80022c6 <I2C_MasterTransmit_TXE+0x6e>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002296:	d016      	beq.n	80022c6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80022a6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2211      	movs	r2, #17
 80022ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2220      	movs	r2, #32
 80022ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ff62 	bl	8002188 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022c4:	e060      	b.n	8002388 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80022d4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022e4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b40      	cmp	r3, #64	@ 0x40
 80022fe:	d107      	bne.n	8002310 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff7d 	bl	8002208 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800230e:	e03b      	b.n	8002388 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff35 	bl	8002188 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800231e:	e033      	b.n	8002388 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	2b21      	cmp	r3, #33	@ 0x21
 8002324:	d005      	beq.n	8002332 <I2C_MasterTransmit_TXE+0xda>
 8002326:	7bbb      	ldrb	r3, [r7, #14]
 8002328:	2b40      	cmp	r3, #64	@ 0x40
 800232a:	d12d      	bne.n	8002388 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	2b22      	cmp	r3, #34	@ 0x22
 8002330:	d12a      	bne.n	8002388 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d108      	bne.n	800234e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800234a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800234c:	e01c      	b.n	8002388 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b40      	cmp	r3, #64	@ 0x40
 8002358:	d103      	bne.n	8002362 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f88e 	bl	800247c <I2C_MemoryTransmit_TXE_BTF>
}
 8002360:	e012      	b.n	8002388 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	781a      	ldrb	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002386:	e7ff      	b.n	8002388 <I2C_MasterTransmit_TXE+0x130>
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b21      	cmp	r3, #33	@ 0x21
 80023a8:	d164      	bne.n	8002474 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d012      	beq.n	80023da <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80023d8:	e04c      	b.n	8002474 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d01d      	beq.n	800241c <I2C_MasterTransmit_BTF+0x8c>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d01a      	beq.n	800241c <I2C_MasterTransmit_BTF+0x8c>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023ec:	d016      	beq.n	800241c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80023fc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2211      	movs	r2, #17
 8002402:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff feb7 	bl	8002188 <HAL_I2C_MasterTxCpltCallback>
}
 800241a:	e02b      	b.n	8002474 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800242a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800243a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b40      	cmp	r3, #64	@ 0x40
 8002454:	d107      	bne.n	8002466 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff fed2 	bl	8002208 <HAL_I2C_MemTxCpltCallback>
}
 8002464:	e006      	b.n	8002474 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff fe8a 	bl	8002188 <HAL_I2C_MasterTxCpltCallback>
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800248a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002490:	2b00      	cmp	r3, #0
 8002492:	d11d      	bne.n	80024d0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002498:	2b01      	cmp	r3, #1
 800249a:	d10b      	bne.n	80024b4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ac:	1c9a      	adds	r2, r3, #2
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80024b2:	e077      	b.n	80025a4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	121b      	asrs	r3, r3, #8
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80024ce:	e069      	b.n	80025a4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d10b      	bne.n	80024f0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80024ee:	e059      	b.n	80025a4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d152      	bne.n	800259e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b22      	cmp	r3, #34	@ 0x22
 80024fc:	d10d      	bne.n	800251a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800250c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002518:	e044      	b.n	80025a4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d015      	beq.n	8002550 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b21      	cmp	r3, #33	@ 0x21
 8002528:	d112      	bne.n	8002550 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002544:	b29b      	uxth	r3, r3
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800254e:	e029      	b.n	80025a4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d124      	bne.n	80025a4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	2b21      	cmp	r3, #33	@ 0x21
 800255e:	d121      	bne.n	80025a4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800256e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800257e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2220      	movs	r2, #32
 800258a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff fe36 	bl	8002208 <HAL_I2C_MemTxCpltCallback>
}
 800259c:	e002      	b.n	80025a4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff f8be 	bl	8001720 <I2C_Flush_DR>
}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b22      	cmp	r3, #34	@ 0x22
 80025be:	f040 80b9 	bne.w	8002734 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d921      	bls.n	800261a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b03      	cmp	r3, #3
 8002604:	f040 8096 	bne.w	8002734 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002616:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002618:	e08c      	b.n	8002734 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261e:	2b02      	cmp	r3, #2
 8002620:	d07f      	beq.n	8002722 <I2C_MasterReceive_RXNE+0x176>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d002      	beq.n	800262e <I2C_MasterReceive_RXNE+0x82>
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d179      	bne.n	8002722 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f001 fb66 	bl	8003d00 <I2C_WaitOnSTOPRequestThroughIT>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d14c      	bne.n	80026d4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002648:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002658:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b40      	cmp	r3, #64	@ 0x40
 8002692:	d10a      	bne.n	80026aa <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff fdba 	bl	800221c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026a8:	e044      	b.n	8002734 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d002      	beq.n	80026be <I2C_MasterReceive_RXNE+0x112>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d103      	bne.n	80026c6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80026c4:	e002      	b.n	80026cc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2212      	movs	r2, #18
 80026ca:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff fd65 	bl	800219c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026d2:	e02f      	b.n	8002734 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026e2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff fd88 	bl	8002230 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002720:	e008      	b.n	8002734 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002730:	605a      	str	r2, [r3, #4]
}
 8002732:	e7ff      	b.n	8002734 <I2C_MasterReceive_RXNE+0x188>
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002748:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b04      	cmp	r3, #4
 8002752:	d11b      	bne.n	800278c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002762:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002780:	b29b      	uxth	r3, r3
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800278a:	e0c8      	b.n	800291e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b03      	cmp	r3, #3
 8002794:	d129      	bne.n	80027ea <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027a4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d00a      	beq.n	80027c2 <I2C_MasterReceive_BTF+0x86>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d007      	beq.n	80027c2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027c0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80027e8:	e099      	b.n	800291e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	f040 8081 	bne.w	80028f8 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d002      	beq.n	8002802 <I2C_MasterReceive_BTF+0xc6>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b10      	cmp	r3, #16
 8002800:	d108      	bne.n	8002814 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	e019      	b.n	8002848 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b04      	cmp	r3, #4
 8002818:	d002      	beq.n	8002820 <I2C_MasterReceive_BTF+0xe4>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d108      	bne.n	8002832 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e00a      	b.n	8002848 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b10      	cmp	r3, #16
 8002836:	d007      	beq.n	8002848 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002846:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80028a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b40      	cmp	r3, #64	@ 0x40
 80028b6:	d10a      	bne.n	80028ce <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff fca8 	bl	800221c <HAL_I2C_MemRxCpltCallback>
}
 80028cc:	e027      	b.n	800291e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d002      	beq.n	80028e2 <I2C_MasterReceive_BTF+0x1a6>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b20      	cmp	r3, #32
 80028e0:	d103      	bne.n	80028ea <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80028e8:	e002      	b.n	80028f0 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2212      	movs	r2, #18
 80028ee:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff fc53 	bl	800219c <HAL_I2C_MasterRxCpltCallback>
}
 80028f6:	e012      	b.n	800291e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b40      	cmp	r3, #64	@ 0x40
 8002938:	d117      	bne.n	800296a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	b2db      	uxtb	r3, r3
 8002948:	461a      	mov	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002952:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002954:	e067      	b.n	8002a26 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	b2da      	uxtb	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	611a      	str	r2, [r3, #16]
}
 8002968:	e05d      	b.n	8002a26 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002972:	d133      	bne.n	80029dc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b21      	cmp	r3, #33	@ 0x21
 800297e:	d109      	bne.n	8002994 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002984:	b2db      	uxtb	r3, r3
 8002986:	461a      	mov	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002990:	611a      	str	r2, [r3, #16]
 8002992:	e008      	b.n	80029a6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <I2C_Master_SB+0x92>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d108      	bne.n	80029ca <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d032      	beq.n	8002a26 <I2C_Master_SB+0x100>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d02d      	beq.n	8002a26 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029d8:	605a      	str	r2, [r3, #4]
}
 80029da:	e024      	b.n	8002a26 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10e      	bne.n	8002a02 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	11db      	asrs	r3, r3, #7
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f003 0306 	and.w	r3, r3, #6
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f063 030f 	orn	r3, r3, #15
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	611a      	str	r2, [r3, #16]
}
 8002a00:	e011      	b.n	8002a26 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d10d      	bne.n	8002a26 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	11db      	asrs	r3, r3, #7
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f003 0306 	and.w	r3, r3, #6
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	f063 030e 	orn	r3, r3, #14
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	611a      	str	r2, [r3, #16]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d004      	beq.n	8002a58 <I2C_Master_ADD10+0x26>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d108      	bne.n	8002a6a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00c      	beq.n	8002a7a <I2C_Master_ADD10+0x48>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d007      	beq.n	8002a7a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a78:	605a      	str	r2, [r3, #4]
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b091      	sub	sp, #68	@ 0x44
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a94:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b22      	cmp	r3, #34	@ 0x22
 8002aae:	f040 8169 	bne.w	8002d84 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10f      	bne.n	8002ada <I2C_Master_ADDR+0x54>
 8002aba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002abe:	2b40      	cmp	r3, #64	@ 0x40
 8002ac0:	d10b      	bne.n	8002ada <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad8:	e160      	b.n	8002d9c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d11d      	bne.n	8002b1e <I2C_Master_ADDR+0x98>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002aea:	d118      	bne.n	8002b1e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aec:	2300      	movs	r3, #0
 8002aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b10:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b1c:	e13e      	b.n	8002d9c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d113      	bne.n	8002b50 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e115      	b.n	8002d7c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	f040 808a 	bne.w	8002c70 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b5e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b62:	d137      	bne.n	8002bd4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b72:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b82:	d113      	bne.n	8002bac <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b92:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b94:	2300      	movs	r3, #0
 8002b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	e0e7      	b.n	8002d7c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bac:	2300      	movs	r3, #0
 8002bae:	623b      	str	r3, [r7, #32]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	623b      	str	r3, [r7, #32]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	623b      	str	r3, [r7, #32]
 8002bc0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e0d3      	b.n	8002d7c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d02e      	beq.n	8002c38 <I2C_Master_ADDR+0x1b2>
 8002bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d02b      	beq.n	8002c38 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be2:	2b12      	cmp	r3, #18
 8002be4:	d102      	bne.n	8002bec <I2C_Master_ADDR+0x166>
 8002be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d125      	bne.n	8002c38 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d00e      	beq.n	8002c10 <I2C_Master_ADDR+0x18a>
 8002bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d00b      	beq.n	8002c10 <I2C_Master_ADDR+0x18a>
 8002bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d008      	beq.n	8002c10 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	e007      	b.n	8002c20 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c1e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c20:	2300      	movs	r3, #0
 8002c22:	61fb      	str	r3, [r7, #28]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	e0a1      	b.n	8002d7c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c46:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	e085      	b.n	8002d7c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d14d      	bne.n	8002d16 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d016      	beq.n	8002cae <I2C_Master_ADDR+0x228>
 8002c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d013      	beq.n	8002cae <I2C_Master_ADDR+0x228>
 8002c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d010      	beq.n	8002cae <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c9a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e007      	b.n	8002cbe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cbc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ccc:	d117      	bne.n	8002cfe <I2C_Master_ADDR+0x278>
 8002cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cd4:	d00b      	beq.n	8002cee <I2C_Master_ADDR+0x268>
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d008      	beq.n	8002cee <I2C_Master_ADDR+0x268>
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d005      	beq.n	8002cee <I2C_Master_ADDR+0x268>
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce4:	2b10      	cmp	r3, #16
 8002ce6:	d002      	beq.n	8002cee <I2C_Master_ADDR+0x268>
 8002ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d107      	bne.n	8002cfe <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cfc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	e032      	b.n	8002d7c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d24:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d34:	d117      	bne.n	8002d66 <I2C_Master_ADDR+0x2e0>
 8002d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d38:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d3c:	d00b      	beq.n	8002d56 <I2C_Master_ADDR+0x2d0>
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d008      	beq.n	8002d56 <I2C_Master_ADDR+0x2d0>
 8002d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d005      	beq.n	8002d56 <I2C_Master_ADDR+0x2d0>
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d002      	beq.n	8002d56 <I2C_Master_ADDR+0x2d0>
 8002d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d107      	bne.n	8002d66 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d64:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002d82:	e00b      	b.n	8002d9c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
}
 8002d9a:	e7ff      	b.n	8002d9c <I2C_Master_ADDR+0x316>
 8002d9c:	bf00      	nop
 8002d9e:	3744      	adds	r7, #68	@ 0x44
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002db6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d02b      	beq.n	8002e1a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc6:	781a      	ldrb	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d114      	bne.n	8002e1a <I2C_SlaveTransmit_TXE+0x72>
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b29      	cmp	r3, #41	@ 0x29
 8002df4:	d111      	bne.n	8002e1a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e04:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2221      	movs	r2, #33	@ 0x21
 8002e0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2228      	movs	r2, #40	@ 0x28
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff f9cb 	bl	80021b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d011      	beq.n	8002e58 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	781a      	ldrb	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d02c      	beq.n	8002ed8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d114      	bne.n	8002ed8 <I2C_SlaveReceive_RXNE+0x74>
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002eb2:	d111      	bne.n	8002ed8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ec2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2222      	movs	r2, #34	@ 0x22
 8002ec8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2228      	movs	r2, #40	@ 0x28
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff f976 	bl	80021c4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d012      	beq.n	8002f18 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f3e:	2b28      	cmp	r3, #40	@ 0x28
 8002f40:	d125      	bne.n	8002f8e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f50:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d103      	bne.n	8002f72 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	81bb      	strh	r3, [r7, #12]
 8002f70:	e002      	b.n	8002f78 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002f80:	89ba      	ldrh	r2, [r7, #12]
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	4619      	mov	r1, r3
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff f926 	bl	80021d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f8c:	e00e      	b.n	8002fac <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fd2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003000:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800300c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003010:	d172      	bne.n	80030f8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	2b22      	cmp	r3, #34	@ 0x22
 8003016:	d002      	beq.n	800301e <I2C_Slave_STOPF+0x6a>
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b2a      	cmp	r3, #42	@ 0x2a
 800301c:	d135      	bne.n	800308a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	b29a      	uxth	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	f043 0204 	orr.w	r2, r3, #4
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003050:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe f861 	bl	800111e <HAL_DMA_GetState>
 800305c:	4603      	mov	r3, r0
 800305e:	2b01      	cmp	r3, #1
 8003060:	d049      	beq.n	80030f6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003066:	4a69      	ldr	r2, [pc, #420]	@ (800320c <I2C_Slave_STOPF+0x258>)
 8003068:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe f833 	bl	80010da <HAL_DMA_Abort_IT>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d03d      	beq.n	80030f6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003084:	4610      	mov	r0, r2
 8003086:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003088:	e035      	b.n	80030f6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	b29a      	uxth	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	f043 0204 	orr.w	r2, r3, #4
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe f82b 	bl	800111e <HAL_DMA_GetState>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d014      	beq.n	80030f8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d2:	4a4e      	ldr	r2, [pc, #312]	@ (800320c <I2C_Slave_STOPF+0x258>)
 80030d4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fffd 	bl	80010da <HAL_DMA_Abort_IT>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030f0:	4610      	mov	r0, r2
 80030f2:	4798      	blx	r3
 80030f4:	e000      	b.n	80030f8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030f6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d03e      	beq.n	8003180 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b04      	cmp	r3, #4
 800310e:	d112      	bne.n	8003136 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003140:	2b40      	cmp	r3, #64	@ 0x40
 8003142:	d112      	bne.n	800316a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	f043 0204 	orr.w	r2, r3, #4
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f8b7 	bl	80032fc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800318e:	e039      	b.n	8003204 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b2a      	cmp	r3, #42	@ 0x2a
 8003194:	d109      	bne.n	80031aa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2228      	movs	r2, #40	@ 0x28
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff f80d 	bl	80021c4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b28      	cmp	r3, #40	@ 0x28
 80031b4:	d111      	bne.n	80031da <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a15      	ldr	r2, [pc, #84]	@ (8003210 <I2C_Slave_STOPF+0x25c>)
 80031ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff f80e 	bl	80021f4 <HAL_I2C_ListenCpltCallback>
}
 80031d8:	e014      	b.n	8003204 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	2b22      	cmp	r3, #34	@ 0x22
 80031e0:	d002      	beq.n	80031e8 <I2C_Slave_STOPF+0x234>
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	2b22      	cmp	r3, #34	@ 0x22
 80031e6:	d10d      	bne.n	8003204 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fe ffe0 	bl	80021c4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	0800385d 	.word	0x0800385d
 8003210:	ffff0000 	.word	0xffff0000

08003214 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003222:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003228:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b08      	cmp	r3, #8
 800322e:	d002      	beq.n	8003236 <I2C_Slave_AF+0x22>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b20      	cmp	r3, #32
 8003234:	d129      	bne.n	800328a <I2C_Slave_AF+0x76>
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	2b28      	cmp	r3, #40	@ 0x28
 800323a:	d126      	bne.n	800328a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a2e      	ldr	r2, [pc, #184]	@ (80032f8 <I2C_Slave_AF+0xe4>)
 8003240:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003250:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800325a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800326a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fe ffb6 	bl	80021f4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003288:	e031      	b.n	80032ee <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	2b21      	cmp	r3, #33	@ 0x21
 800328e:	d129      	bne.n	80032e4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a19      	ldr	r2, [pc, #100]	@ (80032f8 <I2C_Slave_AF+0xe4>)
 8003294:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2221      	movs	r2, #33	@ 0x21
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032ba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032c4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032d4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fe fa22 	bl	8001720 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7fe ff67 	bl	80021b0 <HAL_I2C_SlaveTxCpltCallback>
}
 80032e2:	e004      	b.n	80032ee <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032ec:	615a      	str	r2, [r3, #20]
}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	ffff0000 	.word	0xffff0000

080032fc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800330a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003312:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003314:	7bbb      	ldrb	r3, [r7, #14]
 8003316:	2b10      	cmp	r3, #16
 8003318:	d002      	beq.n	8003320 <I2C_ITError+0x24>
 800331a:	7bbb      	ldrb	r3, [r7, #14]
 800331c:	2b40      	cmp	r3, #64	@ 0x40
 800331e:	d10a      	bne.n	8003336 <I2C_ITError+0x3a>
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	2b22      	cmp	r3, #34	@ 0x22
 8003324:	d107      	bne.n	8003336 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003334:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800333c:	2b28      	cmp	r3, #40	@ 0x28
 800333e:	d107      	bne.n	8003350 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2228      	movs	r2, #40	@ 0x28
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800334e:	e015      	b.n	800337c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800335a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800335e:	d00a      	beq.n	8003376 <I2C_ITError+0x7a>
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b60      	cmp	r3, #96	@ 0x60
 8003364:	d007      	beq.n	8003376 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003386:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800338a:	d162      	bne.n	8003452 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800339a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d020      	beq.n	80033ec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ae:	4a6a      	ldr	r2, [pc, #424]	@ (8003558 <I2C_ITError+0x25c>)
 80033b0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd fe8f 	bl	80010da <HAL_DMA_Abort_IT>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 8089 	beq.w	80034d6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0201 	bic.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033e6:	4610      	mov	r0, r2
 80033e8:	4798      	blx	r3
 80033ea:	e074      	b.n	80034d6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f0:	4a59      	ldr	r2, [pc, #356]	@ (8003558 <I2C_ITError+0x25c>)
 80033f2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fd fe6e 	bl	80010da <HAL_DMA_Abort_IT>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d068      	beq.n	80034d6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340e:	2b40      	cmp	r3, #64	@ 0x40
 8003410:	d10b      	bne.n	800342a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0201 	bic.w	r2, r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800344c:	4610      	mov	r0, r2
 800344e:	4798      	blx	r3
 8003450:	e041      	b.n	80034d6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b60      	cmp	r3, #96	@ 0x60
 800345c:	d125      	bne.n	80034aa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003476:	2b40      	cmp	r3, #64	@ 0x40
 8003478:	d10b      	bne.n	8003492 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0201 	bic.w	r2, r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fe fece 	bl	8002244 <HAL_I2C_AbortCpltCallback>
 80034a8:	e015      	b.n	80034d6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b4:	2b40      	cmp	r3, #64	@ 0x40
 80034b6:	d10b      	bne.n	80034d0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691a      	ldr	r2, [r3, #16]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7fe fead 	bl	8002230 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10e      	bne.n	8003504 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d109      	bne.n	8003504 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d104      	bne.n	8003504 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003500:	2b00      	cmp	r3, #0
 8003502:	d007      	beq.n	8003514 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003512:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800351a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b04      	cmp	r3, #4
 8003526:	d113      	bne.n	8003550 <I2C_ITError+0x254>
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	2b28      	cmp	r3, #40	@ 0x28
 800352c:	d110      	bne.n	8003550 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a0a      	ldr	r2, [pc, #40]	@ (800355c <I2C_ITError+0x260>)
 8003532:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fe fe52 	bl	80021f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	0800385d 	.word	0x0800385d
 800355c:	ffff0000 	.word	0xffff0000

08003560 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	4608      	mov	r0, r1
 800356a:	4611      	mov	r1, r2
 800356c:	461a      	mov	r2, r3
 800356e:	4603      	mov	r3, r0
 8003570:	817b      	strh	r3, [r7, #10]
 8003572:	460b      	mov	r3, r1
 8003574:	813b      	strh	r3, [r7, #8]
 8003576:	4613      	mov	r3, r2
 8003578:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003588:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	2200      	movs	r2, #0
 8003592:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fa08 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00d      	beq.n	80035be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035b0:	d103      	bne.n	80035ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e05f      	b.n	800367e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035be:	897b      	ldrh	r3, [r7, #10]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	6a3a      	ldr	r2, [r7, #32]
 80035d2:	492d      	ldr	r1, [pc, #180]	@ (8003688 <I2C_RequestMemoryWrite+0x128>)
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 fa63 	bl	8003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e04c      	b.n	800367e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035fc:	6a39      	ldr	r1, [r7, #32]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 faee 	bl	8003be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00d      	beq.n	8003626 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	2b04      	cmp	r3, #4
 8003610:	d107      	bne.n	8003622 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003620:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e02b      	b.n	800367e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003626:	88fb      	ldrh	r3, [r7, #6]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d105      	bne.n	8003638 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800362c:	893b      	ldrh	r3, [r7, #8]
 800362e:	b2da      	uxtb	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	611a      	str	r2, [r3, #16]
 8003636:	e021      	b.n	800367c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003638:	893b      	ldrh	r3, [r7, #8]
 800363a:	0a1b      	lsrs	r3, r3, #8
 800363c:	b29b      	uxth	r3, r3
 800363e:	b2da      	uxtb	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003648:	6a39      	ldr	r1, [r7, #32]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fac8 	bl	8003be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00d      	beq.n	8003672 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	2b04      	cmp	r3, #4
 800365c:	d107      	bne.n	800366e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800366c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e005      	b.n	800367e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003672:	893b      	ldrh	r3, [r7, #8]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	00010002 	.word	0x00010002

0800368c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	4608      	mov	r0, r1
 8003696:	4611      	mov	r1, r2
 8003698:	461a      	mov	r2, r3
 800369a:	4603      	mov	r3, r0
 800369c:	817b      	strh	r3, [r7, #10]
 800369e:	460b      	mov	r3, r1
 80036a0:	813b      	strh	r3, [r7, #8]
 80036a2:	4613      	mov	r3, r2
 80036a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f96a 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00d      	beq.n	80036fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ec:	d103      	bne.n	80036f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e0aa      	b.n	8003850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036fa:	897b      	ldrh	r3, [r7, #10]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003708:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800370a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370c:	6a3a      	ldr	r2, [r7, #32]
 800370e:	4952      	ldr	r1, [pc, #328]	@ (8003858 <I2C_RequestMemoryRead+0x1cc>)
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f9c5 	bl	8003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e097      	b.n	8003850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003738:	6a39      	ldr	r1, [r7, #32]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fa50 	bl	8003be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00d      	beq.n	8003762 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	2b04      	cmp	r3, #4
 800374c:	d107      	bne.n	800375e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800375c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e076      	b.n	8003850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d105      	bne.n	8003774 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003768:	893b      	ldrh	r3, [r7, #8]
 800376a:	b2da      	uxtb	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	611a      	str	r2, [r3, #16]
 8003772:	e021      	b.n	80037b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003774:	893b      	ldrh	r3, [r7, #8]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	b29b      	uxth	r3, r3
 800377a:	b2da      	uxtb	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003784:	6a39      	ldr	r1, [r7, #32]
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fa2a 	bl	8003be0 <I2C_WaitOnTXEFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00d      	beq.n	80037ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	2b04      	cmp	r3, #4
 8003798:	d107      	bne.n	80037aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e050      	b.n	8003850 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037ae:	893b      	ldrh	r3, [r7, #8]
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ba:	6a39      	ldr	r1, [r7, #32]
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 fa0f 	bl	8003be0 <I2C_WaitOnTXEFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00d      	beq.n	80037e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d107      	bne.n	80037e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e035      	b.n	8003850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f8d3 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00d      	beq.n	8003828 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800381a:	d103      	bne.n	8003824 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003822:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e013      	b.n	8003850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003828:	897b      	ldrh	r3, [r7, #10]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	b2da      	uxtb	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383a:	6a3a      	ldr	r2, [r7, #32]
 800383c:	4906      	ldr	r1, [pc, #24]	@ (8003858 <I2C_RequestMemoryRead+0x1cc>)
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f92e 	bl	8003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	00010002 	.word	0x00010002

0800385c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003874:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003876:	4b4b      	ldr	r3, [pc, #300]	@ (80039a4 <I2C_DMAAbort+0x148>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	08db      	lsrs	r3, r3, #3
 800387c:	4a4a      	ldr	r2, [pc, #296]	@ (80039a8 <I2C_DMAAbort+0x14c>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	0a1a      	lsrs	r2, r3, #8
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	00da      	lsls	r2, r3, #3
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	f043 0220 	orr.w	r2, r3, #32
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80038a2:	e00a      	b.n	80038ba <I2C_DMAAbort+0x5e>
    }
    count--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038b8:	d0ea      	beq.n	8003890 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c6:	2200      	movs	r2, #0
 80038c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d6:	2200      	movs	r2, #0
 80038d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2200      	movs	r2, #0
 80038ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038fc:	2200      	movs	r2, #0
 80038fe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390c:	2200      	movs	r2, #0
 800390e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b60      	cmp	r3, #96	@ 0x60
 800392a:	d10e      	bne.n	800394a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2200      	movs	r2, #0
 8003940:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003942:	6978      	ldr	r0, [r7, #20]
 8003944:	f7fe fc7e 	bl	8002244 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003948:	e027      	b.n	800399a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800394a:	7cfb      	ldrb	r3, [r7, #19]
 800394c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003950:	2b28      	cmp	r3, #40	@ 0x28
 8003952:	d117      	bne.n	8003984 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003972:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2228      	movs	r2, #40	@ 0x28
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003982:	e007      	b.n	8003994 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003994:	6978      	ldr	r0, [r7, #20]
 8003996:	f7fe fc4b 	bl	8002230 <HAL_I2C_ErrorCallback>
}
 800399a:	bf00      	nop
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000000 	.word	0x20000000
 80039a8:	14f8b589 	.word	0x14f8b589

080039ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039bc:	e048      	b.n	8003a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c4:	d044      	beq.n	8003a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c6:	f7fd fa6b 	bl	8000ea0 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d302      	bcc.n	80039dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d139      	bne.n	8003a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	0c1b      	lsrs	r3, r3, #16
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d10d      	bne.n	8003a02 <I2C_WaitOnFlagUntilTimeout+0x56>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	43da      	mvns	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	4013      	ands	r3, r2
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	bf0c      	ite	eq
 80039f8:	2301      	moveq	r3, #1
 80039fa:	2300      	movne	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	e00c      	b.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d116      	bne.n	8003a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	f043 0220 	orr.w	r2, r3, #32
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e023      	b.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	0c1b      	lsrs	r3, r3, #16
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d10d      	bne.n	8003a76 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	43da      	mvns	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	4013      	ands	r3, r2
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bf0c      	ite	eq
 8003a6c:	2301      	moveq	r3, #1
 8003a6e:	2300      	movne	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	e00c      	b.n	8003a90 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	43da      	mvns	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	4013      	ands	r3, r2
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d093      	beq.n	80039be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aae:	e071      	b.n	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003abe:	d123      	bne.n	8003b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ace:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ad8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	f043 0204 	orr.w	r2, r3, #4
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e067      	b.n	8003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0e:	d041      	beq.n	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b10:	f7fd f9c6 	bl	8000ea0 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d302      	bcc.n	8003b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d136      	bne.n	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	0c1b      	lsrs	r3, r3, #16
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d10c      	bne.n	8003b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	43da      	mvns	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	bf14      	ite	ne
 8003b42:	2301      	movne	r3, #1
 8003b44:	2300      	moveq	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	e00b      	b.n	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	43da      	mvns	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4013      	ands	r3, r2
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	bf14      	ite	ne
 8003b5c:	2301      	movne	r3, #1
 8003b5e:	2300      	moveq	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e021      	b.n	8003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d10c      	bne.n	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	e00b      	b.n	8003bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bf14      	ite	ne
 8003bca:	2301      	movne	r3, #1
 8003bcc:	2300      	moveq	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f47f af6d 	bne.w	8003ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bec:	e034      	b.n	8003c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f915 	bl	8003e1e <I2C_IsAcknowledgeFailed>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e034      	b.n	8003c68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d028      	beq.n	8003c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c06:	f7fd f94b 	bl	8000ea0 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d302      	bcc.n	8003c1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d11d      	bne.n	8003c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c26:	2b80      	cmp	r3, #128	@ 0x80
 8003c28:	d016      	beq.n	8003c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c44:	f043 0220 	orr.w	r2, r3, #32
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e007      	b.n	8003c68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c62:	2b80      	cmp	r3, #128	@ 0x80
 8003c64:	d1c3      	bne.n	8003bee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c7c:	e034      	b.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f8cd 	bl	8003e1e <I2C_IsAcknowledgeFailed>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e034      	b.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c94:	d028      	beq.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c96:	f7fd f903 	bl	8000ea0 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d302      	bcc.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d11d      	bne.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d016      	beq.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd4:	f043 0220 	orr.w	r2, r3, #32
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e007      	b.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d1c3      	bne.n	8003c7e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d0c:	4b13      	ldr	r3, [pc, #76]	@ (8003d5c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	08db      	lsrs	r3, r3, #3
 8003d12:	4a13      	ldr	r2, [pc, #76]	@ (8003d60 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	0a1a      	lsrs	r2, r3, #8
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d107      	bne.n	8003d3e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d32:	f043 0220 	orr.w	r2, r3, #32
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e008      	b.n	8003d50 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d4c:	d0e9      	beq.n	8003d22 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	20000000 	.word	0x20000000
 8003d60:	14f8b589 	.word	0x14f8b589

08003d64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d70:	e049      	b.n	8003e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d119      	bne.n	8003db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0210 	mvn.w	r2, #16
 8003d88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e030      	b.n	8003e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db4:	f7fd f874 	bl	8000ea0 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d302      	bcc.n	8003dca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d11d      	bne.n	8003e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd4:	2b40      	cmp	r3, #64	@ 0x40
 8003dd6:	d016      	beq.n	8003e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	f043 0220 	orr.w	r2, r3, #32
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e007      	b.n	8003e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e10:	2b40      	cmp	r3, #64	@ 0x40
 8003e12:	d1ae      	bne.n	8003d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e34:	d11b      	bne.n	8003e6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5a:	f043 0204 	orr.w	r2, r3, #4
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e88:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003e8c:	d103      	bne.n	8003e96 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e94:	e007      	b.n	8003ea6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003e9e:	d102      	bne.n	8003ea6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0cc      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec8:	4b68      	ldr	r3, [pc, #416]	@ (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d90c      	bls.n	8003ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed6:	4b65      	ldr	r3, [pc, #404]	@ (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ede:	4b63      	ldr	r3, [pc, #396]	@ (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0b8      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d020      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f08:	4b59      	ldr	r3, [pc, #356]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4a58      	ldr	r2, [pc, #352]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f20:	4b53      	ldr	r3, [pc, #332]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	4a52      	ldr	r2, [pc, #328]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f2c:	4b50      	ldr	r3, [pc, #320]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	494d      	ldr	r1, [pc, #308]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d044      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d107      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f52:	4b47      	ldr	r3, [pc, #284]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d119      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e07f      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d003      	beq.n	8003f72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f72:	4b3f      	ldr	r3, [pc, #252]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d109      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e06f      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f82:	4b3b      	ldr	r3, [pc, #236]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e067      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f92:	4b37      	ldr	r3, [pc, #220]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f023 0203 	bic.w	r2, r3, #3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	4934      	ldr	r1, [pc, #208]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fa4:	f7fc ff7c 	bl	8000ea0 <HAL_GetTick>
 8003fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fac:	f7fc ff78 	bl	8000ea0 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e04f      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 020c 	and.w	r2, r3, #12
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d1eb      	bne.n	8003fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd4:	4b25      	ldr	r3, [pc, #148]	@ (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d20c      	bcs.n	8003ffc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	4b22      	ldr	r3, [pc, #136]	@ (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fea:	4b20      	ldr	r3, [pc, #128]	@ (800406c <HAL_RCC_ClockConfig+0x1b8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e032      	b.n	8004062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004008:	4b19      	ldr	r3, [pc, #100]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4916      	ldr	r1, [pc, #88]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004026:	4b12      	ldr	r3, [pc, #72]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	490e      	ldr	r1, [pc, #56]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800403a:	f000 f855 	bl	80040e8 <HAL_RCC_GetSysClockFreq>
 800403e:	4602      	mov	r2, r0
 8004040:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	091b      	lsrs	r3, r3, #4
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	490a      	ldr	r1, [pc, #40]	@ (8004074 <HAL_RCC_ClockConfig+0x1c0>)
 800404c:	5ccb      	ldrb	r3, [r1, r3]
 800404e:	fa22 f303 	lsr.w	r3, r2, r3
 8004052:	4a09      	ldr	r2, [pc, #36]	@ (8004078 <HAL_RCC_ClockConfig+0x1c4>)
 8004054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004056:	4b09      	ldr	r3, [pc, #36]	@ (800407c <HAL_RCC_ClockConfig+0x1c8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f7fc fedc 	bl	8000e18 <HAL_InitTick>

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40023c00 	.word	0x40023c00
 8004070:	40023800 	.word	0x40023800
 8004074:	0800507c 	.word	0x0800507c
 8004078:	20000000 	.word	0x20000000
 800407c:	20000004 	.word	0x20000004

08004080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004084:	4b03      	ldr	r3, [pc, #12]	@ (8004094 <HAL_RCC_GetHCLKFreq+0x14>)
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	20000000 	.word	0x20000000

08004098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800409c:	f7ff fff0 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 80040a0:	4602      	mov	r2, r0
 80040a2:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	0a9b      	lsrs	r3, r3, #10
 80040a8:	f003 0307 	and.w	r3, r3, #7
 80040ac:	4903      	ldr	r1, [pc, #12]	@ (80040bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ae:	5ccb      	ldrb	r3, [r1, r3]
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40023800 	.word	0x40023800
 80040bc:	0800508c 	.word	0x0800508c

080040c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040c4:	f7ff ffdc 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 80040c8:	4602      	mov	r2, r0
 80040ca:	4b05      	ldr	r3, [pc, #20]	@ (80040e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	0b5b      	lsrs	r3, r3, #13
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	4903      	ldr	r1, [pc, #12]	@ (80040e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040d6:	5ccb      	ldrb	r3, [r1, r3]
 80040d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040dc:	4618      	mov	r0, r3
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40023800 	.word	0x40023800
 80040e4:	0800508c 	.word	0x0800508c

080040e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ec:	b0ae      	sub	sp, #184	@ 0xb8
 80040ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800410e:	4bcb      	ldr	r3, [pc, #812]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b0c      	cmp	r3, #12
 8004118:	f200 8206 	bhi.w	8004528 <HAL_RCC_GetSysClockFreq+0x440>
 800411c:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <HAL_RCC_GetSysClockFreq+0x3c>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004159 	.word	0x08004159
 8004128:	08004529 	.word	0x08004529
 800412c:	08004529 	.word	0x08004529
 8004130:	08004529 	.word	0x08004529
 8004134:	08004161 	.word	0x08004161
 8004138:	08004529 	.word	0x08004529
 800413c:	08004529 	.word	0x08004529
 8004140:	08004529 	.word	0x08004529
 8004144:	08004169 	.word	0x08004169
 8004148:	08004529 	.word	0x08004529
 800414c:	08004529 	.word	0x08004529
 8004150:	08004529 	.word	0x08004529
 8004154:	08004359 	.word	0x08004359
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004158:	4bb9      	ldr	r3, [pc, #740]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x358>)
 800415a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800415e:	e1e7      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004160:	4bb8      	ldr	r3, [pc, #736]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004162:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004166:	e1e3      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004168:	4bb4      	ldr	r3, [pc, #720]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004174:	4bb1      	ldr	r3, [pc, #708]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d071      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004180:	4bae      	ldr	r3, [pc, #696]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	099b      	lsrs	r3, r3, #6
 8004186:	2200      	movs	r2, #0
 8004188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800418c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004190:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004198:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800419c:	2300      	movs	r3, #0
 800419e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041a6:	4622      	mov	r2, r4
 80041a8:	462b      	mov	r3, r5
 80041aa:	f04f 0000 	mov.w	r0, #0
 80041ae:	f04f 0100 	mov.w	r1, #0
 80041b2:	0159      	lsls	r1, r3, #5
 80041b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041b8:	0150      	lsls	r0, r2, #5
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4621      	mov	r1, r4
 80041c0:	1a51      	subs	r1, r2, r1
 80041c2:	6439      	str	r1, [r7, #64]	@ 0x40
 80041c4:	4629      	mov	r1, r5
 80041c6:	eb63 0301 	sbc.w	r3, r3, r1
 80041ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80041d8:	4649      	mov	r1, r9
 80041da:	018b      	lsls	r3, r1, #6
 80041dc:	4641      	mov	r1, r8
 80041de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041e2:	4641      	mov	r1, r8
 80041e4:	018a      	lsls	r2, r1, #6
 80041e6:	4641      	mov	r1, r8
 80041e8:	1a51      	subs	r1, r2, r1
 80041ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041ec:	4649      	mov	r1, r9
 80041ee:	eb63 0301 	sbc.w	r3, r3, r1
 80041f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004200:	4649      	mov	r1, r9
 8004202:	00cb      	lsls	r3, r1, #3
 8004204:	4641      	mov	r1, r8
 8004206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800420a:	4641      	mov	r1, r8
 800420c:	00ca      	lsls	r2, r1, #3
 800420e:	4610      	mov	r0, r2
 8004210:	4619      	mov	r1, r3
 8004212:	4603      	mov	r3, r0
 8004214:	4622      	mov	r2, r4
 8004216:	189b      	adds	r3, r3, r2
 8004218:	633b      	str	r3, [r7, #48]	@ 0x30
 800421a:	462b      	mov	r3, r5
 800421c:	460a      	mov	r2, r1
 800421e:	eb42 0303 	adc.w	r3, r2, r3
 8004222:	637b      	str	r3, [r7, #52]	@ 0x34
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004230:	4629      	mov	r1, r5
 8004232:	024b      	lsls	r3, r1, #9
 8004234:	4621      	mov	r1, r4
 8004236:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800423a:	4621      	mov	r1, r4
 800423c:	024a      	lsls	r2, r1, #9
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004246:	2200      	movs	r2, #0
 8004248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800424c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004250:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004254:	f7fb ffd6 	bl	8000204 <__aeabi_uldivmod>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4613      	mov	r3, r2
 800425e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004262:	e067      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004264:	4b75      	ldr	r3, [pc, #468]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	099b      	lsrs	r3, r3, #6
 800426a:	2200      	movs	r2, #0
 800426c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004270:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004274:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800427e:	2300      	movs	r3, #0
 8004280:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004282:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004286:	4622      	mov	r2, r4
 8004288:	462b      	mov	r3, r5
 800428a:	f04f 0000 	mov.w	r0, #0
 800428e:	f04f 0100 	mov.w	r1, #0
 8004292:	0159      	lsls	r1, r3, #5
 8004294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004298:	0150      	lsls	r0, r2, #5
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4621      	mov	r1, r4
 80042a0:	1a51      	subs	r1, r2, r1
 80042a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80042a4:	4629      	mov	r1, r5
 80042a6:	eb63 0301 	sbc.w	r3, r3, r1
 80042aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80042b8:	4649      	mov	r1, r9
 80042ba:	018b      	lsls	r3, r1, #6
 80042bc:	4641      	mov	r1, r8
 80042be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042c2:	4641      	mov	r1, r8
 80042c4:	018a      	lsls	r2, r1, #6
 80042c6:	4641      	mov	r1, r8
 80042c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80042cc:	4649      	mov	r1, r9
 80042ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e6:	4692      	mov	sl, r2
 80042e8:	469b      	mov	fp, r3
 80042ea:	4623      	mov	r3, r4
 80042ec:	eb1a 0303 	adds.w	r3, sl, r3
 80042f0:	623b      	str	r3, [r7, #32]
 80042f2:	462b      	mov	r3, r5
 80042f4:	eb4b 0303 	adc.w	r3, fp, r3
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004306:	4629      	mov	r1, r5
 8004308:	028b      	lsls	r3, r1, #10
 800430a:	4621      	mov	r1, r4
 800430c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004310:	4621      	mov	r1, r4
 8004312:	028a      	lsls	r2, r1, #10
 8004314:	4610      	mov	r0, r2
 8004316:	4619      	mov	r1, r3
 8004318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800431c:	2200      	movs	r2, #0
 800431e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004320:	677a      	str	r2, [r7, #116]	@ 0x74
 8004322:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004326:	f7fb ff6d 	bl	8000204 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4613      	mov	r3, r2
 8004330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004334:	4b41      	ldr	r3, [pc, #260]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	3301      	adds	r3, #1
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800434a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800434e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004352:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004356:	e0eb      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004358:	4b38      	ldr	r3, [pc, #224]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004360:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004364:	4b35      	ldr	r3, [pc, #212]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d06b      	beq.n	8004448 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004370:	4b32      	ldr	r3, [pc, #200]	@ (800443c <HAL_RCC_GetSysClockFreq+0x354>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	099b      	lsrs	r3, r3, #6
 8004376:	2200      	movs	r2, #0
 8004378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800437a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800437c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800437e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004382:	663b      	str	r3, [r7, #96]	@ 0x60
 8004384:	2300      	movs	r3, #0
 8004386:	667b      	str	r3, [r7, #100]	@ 0x64
 8004388:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800438c:	4622      	mov	r2, r4
 800438e:	462b      	mov	r3, r5
 8004390:	f04f 0000 	mov.w	r0, #0
 8004394:	f04f 0100 	mov.w	r1, #0
 8004398:	0159      	lsls	r1, r3, #5
 800439a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800439e:	0150      	lsls	r0, r2, #5
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4621      	mov	r1, r4
 80043a6:	1a51      	subs	r1, r2, r1
 80043a8:	61b9      	str	r1, [r7, #24]
 80043aa:	4629      	mov	r1, r5
 80043ac:	eb63 0301 	sbc.w	r3, r3, r1
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80043be:	4659      	mov	r1, fp
 80043c0:	018b      	lsls	r3, r1, #6
 80043c2:	4651      	mov	r1, sl
 80043c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043c8:	4651      	mov	r1, sl
 80043ca:	018a      	lsls	r2, r1, #6
 80043cc:	4651      	mov	r1, sl
 80043ce:	ebb2 0801 	subs.w	r8, r2, r1
 80043d2:	4659      	mov	r1, fp
 80043d4:	eb63 0901 	sbc.w	r9, r3, r1
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ec:	4690      	mov	r8, r2
 80043ee:	4699      	mov	r9, r3
 80043f0:	4623      	mov	r3, r4
 80043f2:	eb18 0303 	adds.w	r3, r8, r3
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	462b      	mov	r3, r5
 80043fa:	eb49 0303 	adc.w	r3, r9, r3
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800440c:	4629      	mov	r1, r5
 800440e:	024b      	lsls	r3, r1, #9
 8004410:	4621      	mov	r1, r4
 8004412:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004416:	4621      	mov	r1, r4
 8004418:	024a      	lsls	r2, r1, #9
 800441a:	4610      	mov	r0, r2
 800441c:	4619      	mov	r1, r3
 800441e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004422:	2200      	movs	r2, #0
 8004424:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004426:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004428:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800442c:	f7fb feea 	bl	8000204 <__aeabi_uldivmod>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4613      	mov	r3, r2
 8004436:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800443a:	e065      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x420>
 800443c:	40023800 	.word	0x40023800
 8004440:	00f42400 	.word	0x00f42400
 8004444:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004448:	4b3d      	ldr	r3, [pc, #244]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x458>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	099b      	lsrs	r3, r3, #6
 800444e:	2200      	movs	r2, #0
 8004450:	4618      	mov	r0, r3
 8004452:	4611      	mov	r1, r2
 8004454:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004458:	653b      	str	r3, [r7, #80]	@ 0x50
 800445a:	2300      	movs	r3, #0
 800445c:	657b      	str	r3, [r7, #84]	@ 0x54
 800445e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004462:	4642      	mov	r2, r8
 8004464:	464b      	mov	r3, r9
 8004466:	f04f 0000 	mov.w	r0, #0
 800446a:	f04f 0100 	mov.w	r1, #0
 800446e:	0159      	lsls	r1, r3, #5
 8004470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004474:	0150      	lsls	r0, r2, #5
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4641      	mov	r1, r8
 800447c:	1a51      	subs	r1, r2, r1
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	4649      	mov	r1, r9
 8004482:	eb63 0301 	sbc.w	r3, r3, r1
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004494:	4659      	mov	r1, fp
 8004496:	018b      	lsls	r3, r1, #6
 8004498:	4651      	mov	r1, sl
 800449a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800449e:	4651      	mov	r1, sl
 80044a0:	018a      	lsls	r2, r1, #6
 80044a2:	4651      	mov	r1, sl
 80044a4:	1a54      	subs	r4, r2, r1
 80044a6:	4659      	mov	r1, fp
 80044a8:	eb63 0501 	sbc.w	r5, r3, r1
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	00eb      	lsls	r3, r5, #3
 80044b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ba:	00e2      	lsls	r2, r4, #3
 80044bc:	4614      	mov	r4, r2
 80044be:	461d      	mov	r5, r3
 80044c0:	4643      	mov	r3, r8
 80044c2:	18e3      	adds	r3, r4, r3
 80044c4:	603b      	str	r3, [r7, #0]
 80044c6:	464b      	mov	r3, r9
 80044c8:	eb45 0303 	adc.w	r3, r5, r3
 80044cc:	607b      	str	r3, [r7, #4]
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044da:	4629      	mov	r1, r5
 80044dc:	028b      	lsls	r3, r1, #10
 80044de:	4621      	mov	r1, r4
 80044e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044e4:	4621      	mov	r1, r4
 80044e6:	028a      	lsls	r2, r1, #10
 80044e8:	4610      	mov	r0, r2
 80044ea:	4619      	mov	r1, r3
 80044ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044f0:	2200      	movs	r2, #0
 80044f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044f4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80044f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044fa:	f7fb fe83 	bl	8000204 <__aeabi_uldivmod>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4613      	mov	r3, r2
 8004504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004508:	4b0d      	ldr	r3, [pc, #52]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x458>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	0f1b      	lsrs	r3, r3, #28
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800451a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800451e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004526:	e003      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004528:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x45c>)
 800452a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800452e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004530:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004534:	4618      	mov	r0, r3
 8004536:	37b8      	adds	r7, #184	@ 0xb8
 8004538:	46bd      	mov	sp, r7
 800453a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800
 8004544:	00f42400 	.word	0x00f42400

08004548 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e28d      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 8083 	beq.w	800466e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004568:	4b94      	ldr	r3, [pc, #592]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 030c 	and.w	r3, r3, #12
 8004570:	2b04      	cmp	r3, #4
 8004572:	d019      	beq.n	80045a8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004574:	4b91      	ldr	r3, [pc, #580]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 030c 	and.w	r3, r3, #12
        || \
 800457c:	2b08      	cmp	r3, #8
 800457e:	d106      	bne.n	800458e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004580:	4b8e      	ldr	r3, [pc, #568]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004588:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800458c:	d00c      	beq.n	80045a8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458e:	4b8b      	ldr	r3, [pc, #556]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004596:	2b0c      	cmp	r3, #12
 8004598:	d112      	bne.n	80045c0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459a:	4b88      	ldr	r3, [pc, #544]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	4b84      	ldr	r3, [pc, #528]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d05b      	beq.n	800466c <HAL_RCC_OscConfig+0x124>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d157      	bne.n	800466c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e25a      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c8:	d106      	bne.n	80045d8 <HAL_RCC_OscConfig+0x90>
 80045ca:	4b7c      	ldr	r3, [pc, #496]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a7b      	ldr	r2, [pc, #492]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e01d      	b.n	8004614 <HAL_RCC_OscConfig+0xcc>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045e0:	d10c      	bne.n	80045fc <HAL_RCC_OscConfig+0xb4>
 80045e2:	4b76      	ldr	r3, [pc, #472]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a75      	ldr	r2, [pc, #468]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80045e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b73      	ldr	r3, [pc, #460]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a72      	ldr	r2, [pc, #456]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e00b      	b.n	8004614 <HAL_RCC_OscConfig+0xcc>
 80045fc:	4b6f      	ldr	r3, [pc, #444]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a6e      	ldr	r2, [pc, #440]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	4b6c      	ldr	r3, [pc, #432]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a6b      	ldr	r2, [pc, #428]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 800460e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d013      	beq.n	8004644 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fc fc40 	bl	8000ea0 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004624:	f7fc fc3c 	bl	8000ea0 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	@ 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e21f      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004636:	4b61      	ldr	r3, [pc, #388]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0xdc>
 8004642:	e014      	b.n	800466e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fc fc2c 	bl	8000ea0 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800464c:	f7fc fc28 	bl	8000ea0 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	@ 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e20b      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465e:	4b57      	ldr	r3, [pc, #348]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x104>
 800466a:	e000      	b.n	800466e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d06f      	beq.n	800475a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800467a:	4b50      	ldr	r3, [pc, #320]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b00      	cmp	r3, #0
 8004684:	d017      	beq.n	80046b6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004686:	4b4d      	ldr	r3, [pc, #308]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
        || \
 800468e:	2b08      	cmp	r3, #8
 8004690:	d105      	bne.n	800469e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004692:	4b4a      	ldr	r3, [pc, #296]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00b      	beq.n	80046b6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800469e:	4b47      	ldr	r3, [pc, #284]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	d11c      	bne.n	80046e4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046aa:	4b44      	ldr	r3, [pc, #272]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d116      	bne.n	80046e4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046b6:	4b41      	ldr	r3, [pc, #260]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <HAL_RCC_OscConfig+0x186>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d001      	beq.n	80046ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e1d3      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ce:	4b3b      	ldr	r3, [pc, #236]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	4937      	ldr	r1, [pc, #220]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046e2:	e03a      	b.n	800475a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d020      	beq.n	800472e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046ec:	4b34      	ldr	r3, [pc, #208]	@ (80047c0 <HAL_RCC_OscConfig+0x278>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f2:	f7fc fbd5 	bl	8000ea0 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046fa:	f7fc fbd1 	bl	8000ea0 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e1b4      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470c:	4b2b      	ldr	r3, [pc, #172]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0f0      	beq.n	80046fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004718:	4b28      	ldr	r3, [pc, #160]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4925      	ldr	r1, [pc, #148]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004728:	4313      	orrs	r3, r2
 800472a:	600b      	str	r3, [r1, #0]
 800472c:	e015      	b.n	800475a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800472e:	4b24      	ldr	r3, [pc, #144]	@ (80047c0 <HAL_RCC_OscConfig+0x278>)
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004734:	f7fc fbb4 	bl	8000ea0 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800473c:	f7fc fbb0 	bl	8000ea0 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e193      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800474e:	4b1b      	ldr	r3, [pc, #108]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d036      	beq.n	80047d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d016      	beq.n	800479c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800476e:	4b15      	ldr	r3, [pc, #84]	@ (80047c4 <HAL_RCC_OscConfig+0x27c>)
 8004770:	2201      	movs	r2, #1
 8004772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004774:	f7fc fb94 	bl	8000ea0 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800477c:	f7fc fb90 	bl	8000ea0 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e173      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800478e:	4b0b      	ldr	r3, [pc, #44]	@ (80047bc <HAL_RCC_OscConfig+0x274>)
 8004790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0f0      	beq.n	800477c <HAL_RCC_OscConfig+0x234>
 800479a:	e01b      	b.n	80047d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800479c:	4b09      	ldr	r3, [pc, #36]	@ (80047c4 <HAL_RCC_OscConfig+0x27c>)
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a2:	f7fc fb7d 	bl	8000ea0 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a8:	e00e      	b.n	80047c8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047aa:	f7fc fb79 	bl	8000ea0 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d907      	bls.n	80047c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e15c      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
 80047bc:	40023800 	.word	0x40023800
 80047c0:	42470000 	.word	0x42470000
 80047c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047c8:	4b8a      	ldr	r3, [pc, #552]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80047ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1ea      	bne.n	80047aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8097 	beq.w	8004910 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e2:	2300      	movs	r3, #0
 80047e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047e6:	4b83      	ldr	r3, [pc, #524]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10f      	bne.n	8004812 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f2:	2300      	movs	r3, #0
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	4b7f      	ldr	r3, [pc, #508]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fa:	4a7e      	ldr	r2, [pc, #504]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004800:	6413      	str	r3, [r2, #64]	@ 0x40
 8004802:	4b7c      	ldr	r3, [pc, #496]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800480a:	60bb      	str	r3, [r7, #8]
 800480c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800480e:	2301      	movs	r3, #1
 8004810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004812:	4b79      	ldr	r3, [pc, #484]	@ (80049f8 <HAL_RCC_OscConfig+0x4b0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800481a:	2b00      	cmp	r3, #0
 800481c:	d118      	bne.n	8004850 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800481e:	4b76      	ldr	r3, [pc, #472]	@ (80049f8 <HAL_RCC_OscConfig+0x4b0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a75      	ldr	r2, [pc, #468]	@ (80049f8 <HAL_RCC_OscConfig+0x4b0>)
 8004824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800482a:	f7fc fb39 	bl	8000ea0 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004832:	f7fc fb35 	bl	8000ea0 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e118      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004844:	4b6c      	ldr	r3, [pc, #432]	@ (80049f8 <HAL_RCC_OscConfig+0x4b0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0f0      	beq.n	8004832 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d106      	bne.n	8004866 <HAL_RCC_OscConfig+0x31e>
 8004858:	4b66      	ldr	r3, [pc, #408]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800485a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485c:	4a65      	ldr	r2, [pc, #404]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	6713      	str	r3, [r2, #112]	@ 0x70
 8004864:	e01c      	b.n	80048a0 <HAL_RCC_OscConfig+0x358>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	2b05      	cmp	r3, #5
 800486c:	d10c      	bne.n	8004888 <HAL_RCC_OscConfig+0x340>
 800486e:	4b61      	ldr	r3, [pc, #388]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004872:	4a60      	ldr	r2, [pc, #384]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004874:	f043 0304 	orr.w	r3, r3, #4
 8004878:	6713      	str	r3, [r2, #112]	@ 0x70
 800487a:	4b5e      	ldr	r3, [pc, #376]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487e:	4a5d      	ldr	r2, [pc, #372]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	6713      	str	r3, [r2, #112]	@ 0x70
 8004886:	e00b      	b.n	80048a0 <HAL_RCC_OscConfig+0x358>
 8004888:	4b5a      	ldr	r3, [pc, #360]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800488a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488c:	4a59      	ldr	r2, [pc, #356]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800488e:	f023 0301 	bic.w	r3, r3, #1
 8004892:	6713      	str	r3, [r2, #112]	@ 0x70
 8004894:	4b57      	ldr	r3, [pc, #348]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004898:	4a56      	ldr	r2, [pc, #344]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800489a:	f023 0304 	bic.w	r3, r3, #4
 800489e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d015      	beq.n	80048d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a8:	f7fc fafa 	bl	8000ea0 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ae:	e00a      	b.n	80048c6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b0:	f7fc faf6 	bl	8000ea0 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e0d7      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c6:	4b4b      	ldr	r3, [pc, #300]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80048c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0ee      	beq.n	80048b0 <HAL_RCC_OscConfig+0x368>
 80048d2:	e014      	b.n	80048fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d4:	f7fc fae4 	bl	8000ea0 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048da:	e00a      	b.n	80048f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048dc:	f7fc fae0 	bl	8000ea0 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e0c1      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f2:	4b40      	ldr	r3, [pc, #256]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80048f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1ee      	bne.n	80048dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d105      	bne.n	8004910 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004904:	4b3b      	ldr	r3, [pc, #236]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004908:	4a3a      	ldr	r2, [pc, #232]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800490a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800490e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80ad 	beq.w	8004a74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800491a:	4b36      	ldr	r3, [pc, #216]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b08      	cmp	r3, #8
 8004924:	d060      	beq.n	80049e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d145      	bne.n	80049ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492e:	4b33      	ldr	r3, [pc, #204]	@ (80049fc <HAL_RCC_OscConfig+0x4b4>)
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fc fab4 	bl	8000ea0 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800493c:	f7fc fab0 	bl	8000ea0 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e093      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494e:	4b29      	ldr	r3, [pc, #164]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69da      	ldr	r2, [r3, #28]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	019b      	lsls	r3, r3, #6
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004970:	085b      	lsrs	r3, r3, #1
 8004972:	3b01      	subs	r3, #1
 8004974:	041b      	lsls	r3, r3, #16
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497c:	061b      	lsls	r3, r3, #24
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004984:	071b      	lsls	r3, r3, #28
 8004986:	491b      	ldr	r1, [pc, #108]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 8004988:	4313      	orrs	r3, r2
 800498a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800498c:	4b1b      	ldr	r3, [pc, #108]	@ (80049fc <HAL_RCC_OscConfig+0x4b4>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fc fa85 	bl	8000ea0 <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499a:	f7fc fa81 	bl	8000ea0 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e064      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ac:	4b11      	ldr	r3, [pc, #68]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x452>
 80049b8:	e05c      	b.n	8004a74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ba:	4b10      	ldr	r3, [pc, #64]	@ (80049fc <HAL_RCC_OscConfig+0x4b4>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7fc fa6e 	bl	8000ea0 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c8:	f7fc fa6a 	bl	8000ea0 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e04d      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049da:	4b06      	ldr	r3, [pc, #24]	@ (80049f4 <HAL_RCC_OscConfig+0x4ac>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x480>
 80049e6:	e045      	b.n	8004a74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d107      	bne.n	8004a00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e040      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
 80049f4:	40023800 	.word	0x40023800
 80049f8:	40007000 	.word	0x40007000
 80049fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a00:	4b1f      	ldr	r3, [pc, #124]	@ (8004a80 <HAL_RCC_OscConfig+0x538>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d030      	beq.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d129      	bne.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d122      	bne.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a30:	4013      	ands	r3, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d119      	bne.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d10f      	bne.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d107      	bne.n	8004a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d001      	beq.n	8004a74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	40023800 	.word	0x40023800

08004a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e042      	b.n	8004b1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc f8ca 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2224      	movs	r2, #36	@ 0x24
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f82b 	bl	8004b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695a      	ldr	r2, [r3, #20]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b28:	b0c0      	sub	sp, #256	@ 0x100
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b40:	68d9      	ldr	r1, [r3, #12]
 8004b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	ea40 0301 	orr.w	r3, r0, r1
 8004b4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b7c:	f021 010c 	bic.w	r1, r1, #12
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9e:	6999      	ldr	r1, [r3, #24]
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	ea40 0301 	orr.w	r3, r0, r1
 8004baa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b8f      	ldr	r3, [pc, #572]	@ (8004df0 <UART_SetConfig+0x2cc>)
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d005      	beq.n	8004bc4 <UART_SetConfig+0xa0>
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4b8d      	ldr	r3, [pc, #564]	@ (8004df4 <UART_SetConfig+0x2d0>)
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d104      	bne.n	8004bce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bc4:	f7ff fa7c 	bl	80040c0 <HAL_RCC_GetPCLK2Freq>
 8004bc8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004bcc:	e003      	b.n	8004bd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bce:	f7ff fa63 	bl	8004098 <HAL_RCC_GetPCLK1Freq>
 8004bd2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004be0:	f040 810c 	bne.w	8004dfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bf2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	462b      	mov	r3, r5
 8004bfa:	1891      	adds	r1, r2, r2
 8004bfc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004bfe:	415b      	adcs	r3, r3
 8004c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c06:	4621      	mov	r1, r4
 8004c08:	eb12 0801 	adds.w	r8, r2, r1
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	eb43 0901 	adc.w	r9, r3, r1
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c26:	4690      	mov	r8, r2
 8004c28:	4699      	mov	r9, r3
 8004c2a:	4623      	mov	r3, r4
 8004c2c:	eb18 0303 	adds.w	r3, r8, r3
 8004c30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c34:	462b      	mov	r3, r5
 8004c36:	eb49 0303 	adc.w	r3, r9, r3
 8004c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c52:	460b      	mov	r3, r1
 8004c54:	18db      	adds	r3, r3, r3
 8004c56:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c58:	4613      	mov	r3, r2
 8004c5a:	eb42 0303 	adc.w	r3, r2, r3
 8004c5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c68:	f7fb facc 	bl	8000204 <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4b61      	ldr	r3, [pc, #388]	@ (8004df8 <UART_SetConfig+0x2d4>)
 8004c72:	fba3 2302 	umull	r2, r3, r3, r2
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	011c      	lsls	r4, r3, #4
 8004c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	464b      	mov	r3, r9
 8004c90:	1891      	adds	r1, r2, r2
 8004c92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c94:	415b      	adcs	r3, r3
 8004c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	eb12 0a01 	adds.w	sl, r2, r1
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cbc:	4692      	mov	sl, r2
 8004cbe:	469b      	mov	fp, r3
 8004cc0:	4643      	mov	r3, r8
 8004cc2:	eb1a 0303 	adds.w	r3, sl, r3
 8004cc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cca:	464b      	mov	r3, r9
 8004ccc:	eb4b 0303 	adc.w	r3, fp, r3
 8004cd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ce0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ce4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	18db      	adds	r3, r3, r3
 8004cec:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cee:	4613      	mov	r3, r2
 8004cf0:	eb42 0303 	adc.w	r3, r2, r3
 8004cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004cfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004cfe:	f7fb fa81 	bl	8000204 <__aeabi_uldivmod>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4611      	mov	r1, r2
 8004d08:	4b3b      	ldr	r3, [pc, #236]	@ (8004df8 <UART_SetConfig+0x2d4>)
 8004d0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	2264      	movs	r2, #100	@ 0x64
 8004d12:	fb02 f303 	mul.w	r3, r2, r3
 8004d16:	1acb      	subs	r3, r1, r3
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d1e:	4b36      	ldr	r3, [pc, #216]	@ (8004df8 <UART_SetConfig+0x2d4>)
 8004d20:	fba3 2302 	umull	r2, r3, r3, r2
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d2c:	441c      	add	r4, r3
 8004d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d40:	4642      	mov	r2, r8
 8004d42:	464b      	mov	r3, r9
 8004d44:	1891      	adds	r1, r2, r2
 8004d46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d48:	415b      	adcs	r3, r3
 8004d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d50:	4641      	mov	r1, r8
 8004d52:	1851      	adds	r1, r2, r1
 8004d54:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d56:	4649      	mov	r1, r9
 8004d58:	414b      	adcs	r3, r1
 8004d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d68:	4659      	mov	r1, fp
 8004d6a:	00cb      	lsls	r3, r1, #3
 8004d6c:	4651      	mov	r1, sl
 8004d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d72:	4651      	mov	r1, sl
 8004d74:	00ca      	lsls	r2, r1, #3
 8004d76:	4610      	mov	r0, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	189b      	adds	r3, r3, r2
 8004d80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d84:	464b      	mov	r3, r9
 8004d86:	460a      	mov	r2, r1
 8004d88:	eb42 0303 	adc.w	r3, r2, r3
 8004d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004da0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004da4:	460b      	mov	r3, r1
 8004da6:	18db      	adds	r3, r3, r3
 8004da8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004daa:	4613      	mov	r3, r2
 8004dac:	eb42 0303 	adc.w	r3, r2, r3
 8004db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004db2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004db6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004dba:	f7fb fa23 	bl	8000204 <__aeabi_uldivmod>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004df8 <UART_SetConfig+0x2d4>)
 8004dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc8:	095b      	lsrs	r3, r3, #5
 8004dca:	2164      	movs	r1, #100	@ 0x64
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	3332      	adds	r3, #50	@ 0x32
 8004dd6:	4a08      	ldr	r2, [pc, #32]	@ (8004df8 <UART_SetConfig+0x2d4>)
 8004dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ddc:	095b      	lsrs	r3, r3, #5
 8004dde:	f003 0207 	and.w	r2, r3, #7
 8004de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4422      	add	r2, r4
 8004dea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dec:	e106      	b.n	8004ffc <UART_SetConfig+0x4d8>
 8004dee:	bf00      	nop
 8004df0:	40011000 	.word	0x40011000
 8004df4:	40011400 	.word	0x40011400
 8004df8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e00:	2200      	movs	r2, #0
 8004e02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e0e:	4642      	mov	r2, r8
 8004e10:	464b      	mov	r3, r9
 8004e12:	1891      	adds	r1, r2, r2
 8004e14:	6239      	str	r1, [r7, #32]
 8004e16:	415b      	adcs	r3, r3
 8004e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e1e:	4641      	mov	r1, r8
 8004e20:	1854      	adds	r4, r2, r1
 8004e22:	4649      	mov	r1, r9
 8004e24:	eb43 0501 	adc.w	r5, r3, r1
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	00eb      	lsls	r3, r5, #3
 8004e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e36:	00e2      	lsls	r2, r4, #3
 8004e38:	4614      	mov	r4, r2
 8004e3a:	461d      	mov	r5, r3
 8004e3c:	4643      	mov	r3, r8
 8004e3e:	18e3      	adds	r3, r4, r3
 8004e40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e44:	464b      	mov	r3, r9
 8004e46:	eb45 0303 	adc.w	r3, r5, r3
 8004e4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	008b      	lsls	r3, r1, #2
 8004e6e:	4621      	mov	r1, r4
 8004e70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e74:	4621      	mov	r1, r4
 8004e76:	008a      	lsls	r2, r1, #2
 8004e78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e7c:	f7fb f9c2 	bl	8000204 <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4b60      	ldr	r3, [pc, #384]	@ (8005008 <UART_SetConfig+0x4e4>)
 8004e86:	fba3 2302 	umull	r2, r3, r3, r2
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	011c      	lsls	r4, r3, #4
 8004e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ea0:	4642      	mov	r2, r8
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	1891      	adds	r1, r2, r2
 8004ea6:	61b9      	str	r1, [r7, #24]
 8004ea8:	415b      	adcs	r3, r3
 8004eaa:	61fb      	str	r3, [r7, #28]
 8004eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	1851      	adds	r1, r2, r1
 8004eb4:	6139      	str	r1, [r7, #16]
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	414b      	adcs	r3, r1
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ec8:	4659      	mov	r1, fp
 8004eca:	00cb      	lsls	r3, r1, #3
 8004ecc:	4651      	mov	r1, sl
 8004ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ed2:	4651      	mov	r1, sl
 8004ed4:	00ca      	lsls	r2, r1, #3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4603      	mov	r3, r0
 8004edc:	4642      	mov	r2, r8
 8004ede:	189b      	adds	r3, r3, r2
 8004ee0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	460a      	mov	r2, r1
 8004ee8:	eb42 0303 	adc.w	r3, r2, r3
 8004eec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004efa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f08:	4649      	mov	r1, r9
 8004f0a:	008b      	lsls	r3, r1, #2
 8004f0c:	4641      	mov	r1, r8
 8004f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f12:	4641      	mov	r1, r8
 8004f14:	008a      	lsls	r2, r1, #2
 8004f16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f1a:	f7fb f973 	bl	8000204 <__aeabi_uldivmod>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	4611      	mov	r1, r2
 8004f24:	4b38      	ldr	r3, [pc, #224]	@ (8005008 <UART_SetConfig+0x4e4>)
 8004f26:	fba3 2301 	umull	r2, r3, r3, r1
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	2264      	movs	r2, #100	@ 0x64
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
 8004f32:	1acb      	subs	r3, r1, r3
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	3332      	adds	r3, #50	@ 0x32
 8004f38:	4a33      	ldr	r2, [pc, #204]	@ (8005008 <UART_SetConfig+0x4e4>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f44:	441c      	add	r4, r3
 8004f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f54:	4642      	mov	r2, r8
 8004f56:	464b      	mov	r3, r9
 8004f58:	1891      	adds	r1, r2, r2
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	415b      	adcs	r3, r3
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f64:	4641      	mov	r1, r8
 8004f66:	1851      	adds	r1, r2, r1
 8004f68:	6039      	str	r1, [r7, #0]
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	414b      	adcs	r3, r1
 8004f6e:	607b      	str	r3, [r7, #4]
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f7c:	4659      	mov	r1, fp
 8004f7e:	00cb      	lsls	r3, r1, #3
 8004f80:	4651      	mov	r1, sl
 8004f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f86:	4651      	mov	r1, sl
 8004f88:	00ca      	lsls	r2, r1, #3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4603      	mov	r3, r0
 8004f90:	4642      	mov	r2, r8
 8004f92:	189b      	adds	r3, r3, r2
 8004f94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f96:	464b      	mov	r3, r9
 8004f98:	460a      	mov	r2, r1
 8004f9a:	eb42 0303 	adc.w	r3, r2, r3
 8004f9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004faa:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fb8:	4649      	mov	r1, r9
 8004fba:	008b      	lsls	r3, r1, #2
 8004fbc:	4641      	mov	r1, r8
 8004fbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fc2:	4641      	mov	r1, r8
 8004fc4:	008a      	lsls	r2, r1, #2
 8004fc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004fca:	f7fb f91b 	bl	8000204 <__aeabi_uldivmod>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005008 <UART_SetConfig+0x4e4>)
 8004fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd8:	095b      	lsrs	r3, r3, #5
 8004fda:	2164      	movs	r1, #100	@ 0x64
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	3332      	adds	r3, #50	@ 0x32
 8004fe6:	4a08      	ldr	r2, [pc, #32]	@ (8005008 <UART_SetConfig+0x4e4>)
 8004fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	f003 020f 	and.w	r2, r3, #15
 8004ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4422      	add	r2, r4
 8004ffa:	609a      	str	r2, [r3, #8]
}
 8004ffc:	bf00      	nop
 8004ffe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005002:	46bd      	mov	sp, r7
 8005004:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005008:	51eb851f 	.word	0x51eb851f

0800500c <memset>:
 800500c:	4402      	add	r2, r0
 800500e:	4603      	mov	r3, r0
 8005010:	4293      	cmp	r3, r2
 8005012:	d100      	bne.n	8005016 <memset+0xa>
 8005014:	4770      	bx	lr
 8005016:	f803 1b01 	strb.w	r1, [r3], #1
 800501a:	e7f9      	b.n	8005010 <memset+0x4>

0800501c <__libc_init_array>:
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	4d0d      	ldr	r5, [pc, #52]	@ (8005054 <__libc_init_array+0x38>)
 8005020:	4c0d      	ldr	r4, [pc, #52]	@ (8005058 <__libc_init_array+0x3c>)
 8005022:	1b64      	subs	r4, r4, r5
 8005024:	10a4      	asrs	r4, r4, #2
 8005026:	2600      	movs	r6, #0
 8005028:	42a6      	cmp	r6, r4
 800502a:	d109      	bne.n	8005040 <__libc_init_array+0x24>
 800502c:	4d0b      	ldr	r5, [pc, #44]	@ (800505c <__libc_init_array+0x40>)
 800502e:	4c0c      	ldr	r4, [pc, #48]	@ (8005060 <__libc_init_array+0x44>)
 8005030:	f000 f818 	bl	8005064 <_init>
 8005034:	1b64      	subs	r4, r4, r5
 8005036:	10a4      	asrs	r4, r4, #2
 8005038:	2600      	movs	r6, #0
 800503a:	42a6      	cmp	r6, r4
 800503c:	d105      	bne.n	800504a <__libc_init_array+0x2e>
 800503e:	bd70      	pop	{r4, r5, r6, pc}
 8005040:	f855 3b04 	ldr.w	r3, [r5], #4
 8005044:	4798      	blx	r3
 8005046:	3601      	adds	r6, #1
 8005048:	e7ee      	b.n	8005028 <__libc_init_array+0xc>
 800504a:	f855 3b04 	ldr.w	r3, [r5], #4
 800504e:	4798      	blx	r3
 8005050:	3601      	adds	r6, #1
 8005052:	e7f2      	b.n	800503a <__libc_init_array+0x1e>
 8005054:	0800509c 	.word	0x0800509c
 8005058:	0800509c 	.word	0x0800509c
 800505c:	0800509c 	.word	0x0800509c
 8005060:	080050a0 	.word	0x080050a0

08005064 <_init>:
 8005064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005066:	bf00      	nop
 8005068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506a:	bc08      	pop	{r3}
 800506c:	469e      	mov	lr, r3
 800506e:	4770      	bx	lr

08005070 <_fini>:
 8005070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005072:	bf00      	nop
 8005074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005076:	bc08      	pop	{r3}
 8005078:	469e      	mov	lr, r3
 800507a:	4770      	bx	lr
