
telemetria_final_board2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a24c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010f4  0801a420  0801a420  0001b420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b514  0801b514  0001d3d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b514  0801b514  0001c514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b51c  0801b51c  0001d3d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b51c  0801b51c  0001c51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b520  0801b520  0001c520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003d4  20000000  0801b524  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004064  200003d4  0801b8f8  0001d3d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004438  0801b8f8  0001d438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d3d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000317a8  00000000  00000000  0001d404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006bc6  00000000  00000000  0004ebac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f98  00000000  00000000  00055778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001901  00000000  00000000  00057710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d240  00000000  00000000  00059011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030071  00000000  00000000  00086251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8421  00000000  00000000  000b62c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ae6e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000098e0  00000000  00000000  001ae728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001b8008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200003d4 	.word	0x200003d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a404 	.word	0x0801a404

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200003d8 	.word	0x200003d8
 800020c:	0801a404 	.word	0x0801a404

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <CO_getUint8>:
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t
CO_getUint8(const void* buf) {
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    uint8_t value;
    (void)memmove((void*)&value, buf, sizeof(value));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	73fb      	strb	r3, [r7, #15]
    return value;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <CO_setUint8>:
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t
CO_setUint8(void* buf, uint8_t value) {
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8001088:	78fa      	ldrb	r2, [r7, #3]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	701a      	strb	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 800108e:	2301      	movs	r3, #1
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <CO_setUint32>:
    return (uint8_t)(sizeof(value));
}

/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t
CO_setUint32(void* buf, uint32_t value) {
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 80010ac:	2304      	movs	r3, #4
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <OD_getIndex>:
 * @param entry Object Dictionary entry.
 *
 * @return OD index
 */
static inline uint16_t
OD_getIndex(const OD_entry_t* entry) {
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <OD_getIndex+0x14>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	e000      	b.n	80010d0 <OD_getIndex+0x16>
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <OD_extension_init>:
 * NULL, extension will be removed.
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80010ec:	2305      	movs	r3, #5
 80010ee:	e003      	b.n	80010f8 <OD_extension_init+0x1c>
    }
    entry->extension = extension;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <OD_get_u32>:
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af02      	add	r7, sp, #8
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	460b      	mov	r3, r1
 8001112:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001114:	7af9      	ldrb	r1, [r7, #11]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2304      	movs	r3, #4
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f001 fba0 	bl	8002864 <OD_get_value>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <OD_read_1014_default>:
 * Custom functions for read/write OD object "COB-ID EMCY"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1014_default(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	60f8      	str	r0, [r7, #12]
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count < sizeof(uint32_t))
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00c      	beq.n	800115c <OD_read_1014_default+0x2e>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	7d1b      	ldrb	r3, [r3, #20]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d108      	bne.n	800115c <OD_read_1014_default+0x2e>
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <OD_read_1014_default+0x2e>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b03      	cmp	r3, #3
 8001154:	d902      	bls.n	800115c <OD_read_1014_default+0x2e>
        || (countRead == NULL)) {
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <OD_read_1014_default+0x32>
        return ODR_DEV_INCOMPAT;
 800115c:	2309      	movs	r3, #9
 800115e:	e01a      	b.n	8001196 <OD_read_1014_default+0x68>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0U : 0x80000000U;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <OD_read_1014_default+0x44>
 800116e:	2300      	movs	r3, #0
 8001170:	e001      	b.n	8001176 <OD_read_1014_default+0x48>
 8001172:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001176:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + (uint32_t)em->nodeId;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800117e:	3380      	adds	r3, #128	@ 0x80
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
    (void)CO_setUint32(buf, COB_IDEmergency32);
 8001186:	6939      	ldr	r1, [r7, #16]
 8001188:	68b8      	ldr	r0, [r7, #8]
 800118a:	f7ff ff87 	bl	800109c <CO_setUint32>

    *countRead = sizeof(uint32_t);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	2204      	movs	r2, #4
 8001192:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <OD_read_1003>:
 * Custom functions for read/write OD object _OD_statusBits_, optional
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1003(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	60f8      	str	r0, [r7, #12]
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL) || ((count < 4U) && (stream->subIndex > 0U))
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00f      	beq.n	80011d2 <OD_read_1003+0x34>
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00c      	beq.n	80011d2 <OD_read_1003+0x34>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d009      	beq.n	80011d2 <OD_read_1003+0x34>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d803      	bhi.n	80011cc <OD_read_1003+0x2e>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	7d1b      	ldrb	r3, [r3, #20]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <OD_read_1003+0x34>
        || (count < 1U)) {
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <OD_read_1003+0x38>
        return ODR_DEV_INCOMPAT;
 80011d2:	2309      	movs	r3, #9
 80011d4:	e04c      	b.n	8001270 <OD_read_1003+0xd2>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2U) {
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	7f1b      	ldrb	r3, [r3, #28]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d801      	bhi.n	80011e8 <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 80011e4:	2309      	movs	r3, #9
 80011e6:	e043      	b.n	8001270 <OD_read_1003+0xd2>
    }
    if (stream->subIndex == 0U) {
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	7d1b      	ldrb	r3, [r3, #20]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10b      	bne.n	8001208 <OD_read_1003+0x6a>
        (void)CO_setUint8(buf, em->fifoCount);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f6:	4619      	mov	r1, r3
 80011f8:	68b8      	ldr	r0, [r7, #8]
 80011fa:	f7ff ff3f 	bl	800107c <CO_setUint8>

        *countRead = sizeof(uint8_t);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	e033      	b.n	8001270 <OD_read_1003+0xd2>
    } else if (stream->subIndex <= em->fifoCount) {
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	7d1a      	ldrb	r2, [r3, #20]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001212:	429a      	cmp	r2, r3
 8001214:	d82b      	bhi.n	800126e <OD_read_1003+0xd0>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - (int16_t)stream->subIndex;
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	7f5b      	ldrb	r3, [r3, #29]
 800121a:	461a      	mov	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	7d1b      	ldrb	r3, [r3, #20]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	b29b      	uxth	r3, r3
 8001224:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 8001226:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800122a:	2b00      	cmp	r3, #0
 800122c:	da07      	bge.n	800123e <OD_read_1003+0xa0>
            index += (int16_t)em->fifoSize;
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	7f1b      	ldrb	r3, [r3, #28]
 8001232:	461a      	mov	r2, r3
 8001234:	8afb      	ldrh	r3, [r7, #22]
 8001236:	4413      	add	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	82fb      	strh	r3, [r7, #22]
 800123c:	e007      	b.n	800124e <OD_read_1003+0xb0>
        } else if (index >= (int16_t)(em->fifoSize)) {
 800123e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	7f12      	ldrb	r2, [r2, #28]
 8001246:	4293      	cmp	r3, r2
 8001248:	db01      	blt.n	800124e <OD_read_1003+0xb0>
            return ODR_DEV_INCOMPAT;
 800124a:	2309      	movs	r3, #9
 800124c:	e010      	b.n	8001270 <OD_read_1003+0xd2>
        } else { /* MISRA C 2004 14.10 */
        }
        (void)CO_setUint32(buf, em->fifo[index].msg);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	4413      	add	r3, r2
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	68b8      	ldr	r0, [r7, #8]
 8001260:	f7ff ff1c 	bl	800109c <CO_setUint32>

        *countRead = sizeof(uint32_t);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2204      	movs	r2, #4
 8001268:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <OD_read_1003+0xd2>
    } else {
        return ODR_NO_DATA;
 800126e:	2319      	movs	r3, #25
    }
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <OD_write_1003>:

static ODR_t
OD_write_1003(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != 1U) || (countWritten == NULL)) {
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00c      	beq.n	80012a6 <OD_write_1003+0x2e>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	7d1b      	ldrb	r3, [r3, #20]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d108      	bne.n	80012a6 <OD_write_1003+0x2e>
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <OD_write_1003+0x2e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d102      	bne.n	80012a6 <OD_write_1003+0x2e>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <OD_write_1003+0x32>
        return ODR_DEV_INCOMPAT;
 80012a6:	2309      	movs	r3, #9
 80012a8:	e012      	b.n	80012d0 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0U) {
 80012aa:	68b8      	ldr	r0, [r7, #8]
 80012ac:	f7ff fed8 	bl	8001060 <CO_getUint8>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 80012b6:	230f      	movs	r3, #15
 80012b8:	e00a      	b.n	80012d0 <OD_write_1003+0x58>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <CO_EM_init>:
           OD_entry_t* OD_statusBits,
#endif
#if (((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0) || defined CO_DOXYGEN
           CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#endif
           const uint8_t nodeId, uint32_t* errInfo) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af02      	add	r7, sp, #8
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	603b      	str	r3, [r7, #0]
    (void)nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 80012e6:	2300      	movs	r3, #0
 80012e8:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((em == NULL) || (OD_1001_errReg == NULL)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d01a      	beq.n	8001326 <CO_EM_init+0x4e>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d017      	beq.n	8001326 <CO_EM_init+0x4e>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
        || ((fifo == NULL) && (fifoSize >= 2U))
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d103      	bne.n	8001304 <CO_EM_init+0x2c>
 80012fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d810      	bhi.n	8001326 <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
        || (OD_1014_cobIdEm == NULL) || (CANdevTx == NULL) || (nodeId < 1U) || (nodeId > 127U)
 8001304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00d      	beq.n	8001326 <CO_EM_init+0x4e>
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00a      	beq.n	8001326 <CO_EM_init+0x4e>
 8001310:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <CO_EM_init+0x4e>
 8001318:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 800131c:	2b00      	cmp	r3, #0
 800131e:	db02      	blt.n	8001326 <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
        || (OD_1003_preDefErr == NULL)
 8001320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <CO_EM_init+0x54>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
        || (CANdevRx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	e0a7      	b.n	800147c <CO_EM_init+0x1a4>
    }

    /* clear the object */
    (void)memset(em, 0, sizeof(CO_EM_t));
 800132c:	2250      	movs	r2, #80	@ 0x50
 800132e:	2100      	movs	r1, #0
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f015 fe99 	bl	8017068 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 800133c:	2300      	movs	r3, #0
 800133e:	2201      	movs	r2, #1
 8001340:	2100      	movs	r1, #0
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f001 fb08 	bl	8002958 <OD_getPtr>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10c      	bne.n	8001370 <CO_EM_init+0x98>
        if (errInfo != NULL) {
 8001356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001358:	2b00      	cmp	r3, #0
 800135a:	d006      	beq.n	800136a <CO_EM_init+0x92>
            *errInfo = OD_getIndex(OD_1001_errReg);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff feac 	bl	80010ba <OD_getIndex>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001368:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800136a:	f06f 030b 	mvn.w	r3, #11
 800136e:	e085      	b.n	800147c <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    em->fifo = fifo;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001384:	771a      	strb	r2, [r3, #28]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    ODR_t odRet;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 8001386:	f107 0210 	add.w	r2, r7, #16
 800138a:	2301      	movs	r3, #1
 800138c:	2100      	movs	r1, #0
 800138e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001390:	f7ff feb8 	bl	8001104 <OD_get_u32>
 8001394:	4603      	mov	r3, r0
 8001396:	75bb      	strb	r3, [r7, #22]
    if ((odRet != ODR_OK) || ((COB_IDEmergency32 & 0x7FFFF800U) != 0U)) {
 8001398:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d104      	bne.n	80013aa <CO_EM_init+0xd2>
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4b38      	ldr	r3, [pc, #224]	@ (8001484 <CO_EM_init+0x1ac>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d010      	beq.n	80013cc <CO_EM_init+0xf4>
        if (errInfo != NULL) {
 80013aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <CO_EM_init+0xe6>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80013b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80013b2:	f7ff fe82 	bl	80010ba <OD_getIndex>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013bc:	601a      	str	r2, [r3, #0]
        }
        /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK) {
 80013be:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 80013c6:	f06f 030b 	mvn.w	r3, #11
 80013ca:	e057      	b.n	800147c <CO_EM_init+0x1a4>
     * memory. In that case it is necessary to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) {
        producerCanId += nodeId;
    }
#else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + (uint16_t)nodeId;
 80013cc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	3380      	adds	r3, #128	@ 0x80
 80013d4:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000U) == 0U;
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	0fdb      	lsrs	r3, r3, #31
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	625a      	str	r2, [r3, #36]	@ 0x24

    em->OD_1014_extension.object = em;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	631a      	str	r2, [r3, #48]	@ 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4a26      	ldr	r2, [pc, #152]	@ (8001488 <CO_EM_init+0x1b0>)
 80013ee:	635a      	str	r2, [r3, #52]	@ 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4a26      	ldr	r2, [pc, #152]	@ (800148c <CO_EM_init+0x1b4>)
 80013f4:	639a      	str	r2, [r3, #56]	@ 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	3330      	adds	r3, #48	@ 0x30
 80013fa:	4619      	mov	r1, r3
 80013fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80013fe:	f7ff fe6d 	bl	80010dc <OD_extension_init>
 8001402:	4603      	mov	r3, r0
 8001404:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001406:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00c      	beq.n	8001428 <CO_EM_init+0x150>
        if (errInfo != NULL) {
 800140e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <CO_EM_init+0x14a>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8001414:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001416:	f7ff fe50 	bl	80010ba <OD_getIndex>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001420:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001422:	f06f 030b 	mvn.w	r3, #11
 8001426:	e029      	b.n	800147c <CO_EM_init+0x1a4>
    }
#endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800142e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    em->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, producerCanId, false, 8U, false);
 8001432:	8aba      	ldrh	r2, [r7, #20]
 8001434:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001436:	2300      	movs	r3, #0
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	2308      	movs	r3, #8
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2300      	movs	r3, #0
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f006 f8f9 	bl	8007638 <CO_CANtxBufferInit>
 8001446:	4602      	mov	r2, r0
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (em->CANtxBuff == NULL) {
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
 8001458:	e010      	b.n	800147c <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT */
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	641a      	str	r2, [r3, #64]	@ 0x40
    em->OD_1003_extension.read = OD_read_1003;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4a0b      	ldr	r2, [pc, #44]	@ (8001490 <CO_EM_init+0x1b8>)
 8001464:	645a      	str	r2, [r3, #68]	@ 0x44
    em->OD_1003_extension.write = OD_write_1003;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <CO_EM_init+0x1bc>)
 800146a:	649a      	str	r2, [r3, #72]	@ 0x48
    (void)OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	3340      	adds	r3, #64	@ 0x40
 8001470:	4619      	mov	r1, r3
 8001472:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001474:	f7ff fe32 	bl	80010dc <OD_extension_init>
    em->pFunctSignalRx = NULL;
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CO_CAN_ID_EMERGENCY, 0x780, false, (void*)em, CO_EM_receive);
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 8001478:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	7ffff800 	.word	0x7ffff800
 8001488:	0800112f 	.word	0x0800112f
 800148c:	0800244f 	.word	0x0800244f
 8001490:	0800119f 	.word	0x0800119f
 8001494:	08001279 	.word	0x08001279

08001498 <CO_EM_process>:
    }
}
#endif

void
CO_EM_process(CO_EM_t* em, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af02      	add	r7, sp, #8
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) == 0
    (void)timeDifference_us; /* may be unused */
#endif

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	8a5b      	ldrh	r3, [r3, #18]
 80014ac:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	8a1b      	ldrh	r3, [r3, #16]
 80014b2:	8aba      	ldrh	r2, [r7, #20]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	f000 80a3 	beq.w	8001600 <CO_EM_process+0x168>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	8a1a      	ldrh	r2, [r3, #16]
 80014be:	8abb      	ldrh	r3, [r7, #20]
 80014c0:	4053      	eors	r3, r2
 80014c2:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	8aba      	ldrh	r2, [r7, #20]
 80014c8:	821a      	strh	r2, [r3, #16]

        if ((CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U) {
 80014ca:	8a7a      	ldrh	r2, [r7, #18]
 80014cc:	f240 1301 	movw	r3, #257	@ 0x101
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d010      	beq.n	80014f8 <CO_EM_process+0x60>
            CO_error(em, (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U, CO_EM_CAN_BUS_WARNING,
 80014d6:	8aba      	ldrh	r2, [r7, #20]
 80014d8:	f240 1301 	movw	r3, #257	@ 0x101
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf14      	ite	ne
 80014e2:	2301      	movne	r3, #1
 80014e4:	2300      	moveq	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	4619      	mov	r1, r3
 80014ea:	2300      	movs	r3, #0
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2300      	movs	r3, #0
 80014f0:	2201      	movs	r2, #1
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f000 f91b 	bl	800172e <CO_error>
                     CO_EMC_NO_ERROR, 0);
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PASSIVE) != 0U) {
 80014f8:	8a7b      	ldrh	r3, [r7, #18]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d010      	beq.n	8001524 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0U, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 8001502:	8abb      	ldrh	r3, [r7, #20]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	bf14      	ite	ne
 800150c:	2301      	movne	r3, #1
 800150e:	2300      	moveq	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4619      	mov	r1, r3
 8001514:	2300      	movs	r3, #0
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	f248 1320 	movw	r3, #33056	@ 0x8120
 800151c:	2207      	movs	r2, #7
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 f905 	bl	800172e <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_BUS_OFF) != 0U) {
 8001524:	8a7b      	ldrh	r3, [r7, #18]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	2b00      	cmp	r3, #0
 800152c:	d010      	beq.n	8001550 <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0U, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);
 800152e:	8abb      	ldrh	r3, [r7, #20]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	bf14      	ite	ne
 8001538:	2301      	movne	r3, #1
 800153a:	2300      	moveq	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	4619      	mov	r1, r3
 8001540:	2300      	movs	r3, #0
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	f248 1340 	movw	r3, #33088	@ 0x8140
 8001548:	2212      	movs	r2, #18
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 f8ef 	bl	800172e <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_OVERFLOW) != 0U) {
 8001550:	8a7b      	ldrh	r3, [r7, #18]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d010      	beq.n	800157c <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0U, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 800155a:	8abb      	ldrh	r3, [r7, #20]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf14      	ite	ne
 8001564:	2301      	movne	r3, #1
 8001566:	2300      	moveq	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4619      	mov	r1, r3
 800156c:	2300      	movs	r3, #0
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	f248 1310 	movw	r3, #33040	@ 0x8110
 8001574:	2214      	movs	r2, #20
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 f8d9 	bl	800172e <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PDO_LATE) != 0U) {
 800157c:	8a7b      	ldrh	r3, [r7, #18]
 800157e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001582:	2b00      	cmp	r3, #0
 8001584:	d010      	beq.n	80015a8 <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0U, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);
 8001586:	8abb      	ldrh	r3, [r7, #20]
 8001588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf14      	ite	ne
 8001590:	2301      	movne	r3, #1
 8001592:	2300      	moveq	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	4619      	mov	r1, r3
 8001598:	2300      	movs	r3, #0
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80015a0:	2215      	movs	r2, #21
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f8c3 	bl	800172e <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_PASSIVE) != 0U) {
 80015a8:	8a7b      	ldrh	r3, [r7, #18]
 80015aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d010      	beq.n	80015d4 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0U, CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 80015b2:	8abb      	ldrh	r3, [r7, #20]
 80015b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf14      	ite	ne
 80015bc:	2301      	movne	r3, #1
 80015be:	2300      	moveq	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	4619      	mov	r1, r3
 80015c4:	2300      	movs	r3, #0
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	f248 1320 	movw	r3, #33056	@ 0x8120
 80015cc:	2206      	movs	r2, #6
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 f8ad 	bl	800172e <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_OVERFLOW) != 0U) {
 80015d4:	8a7b      	ldrh	r3, [r7, #18]
 80015d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d010      	beq.n	8001600 <CO_EM_process+0x168>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0U, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 80015de:	8abb      	ldrh	r3, [r7, #20]
 80015e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf14      	ite	ne
 80015e8:	2301      	movne	r3, #1
 80015ea:	2300      	moveq	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	4619      	mov	r1, r3
 80015f0:	2300      	movs	r3, #0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	f248 1310 	movw	r3, #33040	@ 0x8110
 80015f8:	2213      	movs	r2, #19
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 f897 	bl	800172e <CO_error>
        }
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC) {
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	795b      	ldrb	r3, [r3, #5]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <CO_EM_process+0x17c>
        errorRegister |= (uint8_t)CO_ERR_REG_GENERIC_ERR;
 800160c:	7dfb      	ldrb	r3, [r7, #23]
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE) {
        errorRegister |= (uint8_t)CO_ERR_REG_TEMPERATURE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION) {
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	789b      	ldrb	r3, [r3, #2]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d103      	bne.n	8001624 <CO_EM_process+0x18c>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	78db      	ldrb	r3, [r3, #3]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <CO_EM_process+0x194>
        errorRegister |= (uint8_t)CO_ERR_REG_COMMUNICATION;
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	f043 0310 	orr.w	r3, r3, #16
 800162a:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE) {
        errorRegister |= (uint8_t)CO_ERR_REG_DEV_PROFILE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER) {
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	7a1b      	ldrb	r3, [r3, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d103      	bne.n	800163c <CO_EM_process+0x1a4>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	7a5b      	ldrb	r3, [r3, #9]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <CO_EM_process+0x1ac>
        errorRegister |= (uint8_t)CO_ERR_REG_MANUFACTURER;
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001642:	75fb      	strb	r3, [r7, #23]
    }
    *em->errorRegister = errorRegister;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	7dfa      	ldrb	r2, [r7, #23]
 800164a:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d067      	beq.n	8001722 <CO_EM_process+0x28a>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    if (em->fifoSize >= 2U) {
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	7f1b      	ldrb	r3, [r3, #28]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d965      	bls.n	8001726 <CO_EM_process+0x28e>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	7f9b      	ldrb	r3, [r3, #30]
 800165e:	747b      	strb	r3, [r7, #17]

        if (!em->CANtxBuff->bufferFull && (fifoPpPtr != em->fifoWrPtr)
            && (em->inhibitEmTimer >= em->inhibitEmTime_us)) {
            em->inhibitEmTimer = 0;
#else
        if ((!em->CANtxBuff->bufferFull) && (fifoPpPtr != em->fifoWrPtr)) {
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d15d      	bne.n	8001726 <CO_EM_process+0x28e>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	7f5b      	ldrb	r3, [r3, #29]
 800166e:	7c7a      	ldrb	r2, [r7, #17]
 8001670:	429a      	cmp	r2, r3
 8001672:	d058      	beq.n	8001726 <CO_EM_process+0x28e>
#endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t)errorRegister << 16;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	699a      	ldr	r2, [r3, #24]
 8001678:	7c7b      	ldrb	r3, [r7, #17]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4413      	add	r3, r2
 800167e:	6819      	ldr	r1, [r3, #0]
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	041a      	lsls	r2, r3, #16
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6998      	ldr	r0, [r3, #24]
 8001688:	7c7b      	ldrb	r3, [r7, #17]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4403      	add	r3, r0
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            (void)memcpy((void*)em->CANtxBuff->data, (void*)&em->fifo[fifoPpPtr].msg, sizeof(em->CANtxBuff->data));
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001696:	1d58      	adds	r0, r3, #5
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	699a      	ldr	r2, [r3, #24]
 800169c:	7c7b      	ldrb	r3, [r7, #17]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4413      	add	r3, r2
 80016a2:	2208      	movs	r2, #8
 80016a4:	4619      	mov	r1, r3
 80016a6:	f015 fd82 	bl	80171ae <memcpy>
            (void)CO_CANsend(em->CANdevTx, em->CANtxBuff);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b2:	4619      	mov	r1, r3
 80016b4:	4610      	mov	r0, r2
 80016b6:	f006 f839 	bl	800772c <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
#endif

            /* increment pointer */
            fifoPpPtr++;
 80016ba:	7c7b      	ldrb	r3, [r7, #17]
 80016bc:	3301      	adds	r3, #1
 80016be:	747b      	strb	r3, [r7, #17]
            em->fifoPpPtr = (fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0U;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	7f1b      	ldrb	r3, [r3, #28]
 80016c4:	7c7a      	ldrb	r2, [r7, #17]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d201      	bcs.n	80016ce <CO_EM_process+0x236>
 80016ca:	7c7a      	ldrb	r2, [r7, #17]
 80016cc:	e000      	b.n	80016d0 <CO_EM_process+0x238>
 80016ce:	2200      	movs	r2, #0
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all messages from fifo buffer are processed */
            if (em->fifoOverflow == 1U) {
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	7fdb      	ldrb	r3, [r3, #31]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d10c      	bne.n	80016f6 <CO_EM_process+0x25e>
                em->fifoOverflow = 2;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2202      	movs	r2, #2
 80016e0:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0);
 80016e2:	2300      	movs	r3, #0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ea:	2220      	movs	r2, #32
 80016ec:	2101      	movs	r1, #1
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 f81d 	bl	800172e <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 80016f4:	e017      	b.n	8001726 <CO_EM_process+0x28e>
            } else if ((em->fifoOverflow == 2U) && (em->fifoPpPtr == em->fifoWrPtr)) {
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	7fdb      	ldrb	r3, [r3, #31]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d113      	bne.n	8001726 <CO_EM_process+0x28e>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	7f9a      	ldrb	r2, [r3, #30]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	7f5b      	ldrb	r3, [r3, #29]
 8001706:	429a      	cmp	r2, r3
 8001708:	d10d      	bne.n	8001726 <CO_EM_process+0x28e>
                em->fifoOverflow = 0;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8001710:	2300      	movs	r3, #0
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2300      	movs	r3, #0
 8001716:	2220      	movs	r2, #32
 8001718:	2100      	movs	r1, #0
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 f807 	bl	800172e <CO_error>
    return;
 8001720:	e001      	b.n	8001726 <CO_EM_process+0x28e>
        return;
 8001722:	bf00      	nop
 8001724:	e000      	b.n	8001728 <CO_EM_process+0x290>
    return;
 8001726:	bf00      	nop
}
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <CO_error>:

void
CO_error(CO_EM_t* em, bool_t setError, const uint8_t errorBit, uint16_t errorCode, uint32_t infoCode) {
 800172e:	b480      	push	{r7}
 8001730:	b08d      	sub	sp, #52	@ 0x34
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	4611      	mov	r1, r2
 800173a:	461a      	mov	r2, r3
 800173c:	460b      	mov	r3, r1
 800173e:	71fb      	strb	r3, [r7, #7]
 8001740:	4613      	mov	r3, r2
 8001742:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) {
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80a6 	beq.w	8001898 <CO_error+0x16a>
        return;
    }

    uint8_t index = errorBit >> 3;
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t bitmask = 1U << (errorBit & 0x7U);
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	2201      	movs	r2, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)) {
 8001764:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001768:	2b09      	cmp	r3, #9
 800176a:	d90a      	bls.n	8001782 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 800176c:	2305      	movs	r3, #5
 800176e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        bitmask = 1U << (CO_EM_WRONG_ERROR_REPORT & 0x7U);
 8001772:	2301      	movs	r3, #1
 8001774:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8001778:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 800177c:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    uint8_t* errorStatusBits = &em->errorStatusBits[index];
 8001782:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	4413      	add	r3, r2
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 800178c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800178e:	781a      	ldrb	r2, [r3, #0]
 8001790:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001794:	4013      	ands	r3, r2
 8001796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <CO_error+0x7c>
        if (errorStatusBitMasked != 0U) {
 80017a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d006      	beq.n	80017b6 <CO_error+0x88>
            return;
 80017a8:	e079      	b.n	800189e <CO_error+0x170>
        }
    } else {
        if (errorStatusBitMasked == 0U) {
 80017aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d074      	beq.n	800189c <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 80017b2:	2300      	movs	r3, #0
 80017b4:	80bb      	strh	r3, [r7, #4]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    /* prepare emergency message. Error register will be added in post-process */
    uint32_t errMsg = ((uint32_t)errorBit << 24) | CO_SWAP_16(errorCode);
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	061a      	lsls	r2, r3, #24
 80017ba:	88bb      	ldrh	r3, [r7, #4]
 80017bc:	4313      	orrs	r3, r2
 80017be:	623b      	str	r3, [r7, #32]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 80017c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017c2:	61fb      	str	r3, [r7, #28]
#endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80017c8:	f3ef 8210 	mrs	r2, PRIMASK
 80017cc:	617a      	str	r2, [r7, #20]
  return(result);
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	631a      	str	r2, [r3, #48]	@ 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 80017d2:	b672      	cpsid	i
}
 80017d4:	bf00      	nop
    if (setError) {
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d008      	beq.n	80017ee <CO_error+0xc0>
        *errorStatusBits |= bitmask;
 80017dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017de:	781a      	ldrb	r2, [r3, #0]
 80017e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	e00b      	b.n	8001806 <CO_error+0xd8>
    } else {
        *errorStatusBits &= ~bitmask;
 80017ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b25a      	sxtb	r2, r3
 80017f4:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 80017f8:	43db      	mvns	r3, r3
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	4013      	ands	r3, r2
 80017fe:	b25b      	sxtb	r3, r3
 8001800:	b2da      	uxtb	r2, r3
 8001802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001804:	701a      	strb	r2, [r3, #0]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    if (em->fifoSize >= 2U) {
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	7f1b      	ldrb	r3, [r3, #28]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d93c      	bls.n	8001888 <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	7f5b      	ldrb	r3, [r3, #29]
 8001812:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1U;
 8001814:	7efb      	ldrb	r3, [r7, #27]
 8001816:	3301      	adds	r3, #1
 8001818:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	7f1b      	ldrb	r3, [r3, #28]
 8001820:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001824:	429a      	cmp	r2, r3
 8001826:	d302      	bcc.n	800182e <CO_error+0x100>
            fifoWrPtrNext = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	7f9b      	ldrb	r3, [r3, #30]
 8001832:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001836:	429a      	cmp	r2, r3
 8001838:	d103      	bne.n	8001842 <CO_error+0x114>
            em->fifoOverflow = 1;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2201      	movs	r2, #1
 800183e:	77da      	strb	r2, [r3, #31]
 8001840:	e022      	b.n	8001888 <CO_error+0x15a>
        } else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	699a      	ldr	r2, [r3, #24]
 8001846:	7efb      	ldrb	r3, [r7, #27]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	6a3a      	ldr	r2, [r7, #32]
 800184e:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	699a      	ldr	r2, [r3, #24]
 8001854:	7efb      	ldrb	r3, [r7, #27]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	4413      	add	r3, r2
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	605a      	str	r2, [r3, #4]
#endif
            em->fifoWrPtr = fifoWrPtrNext;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001864:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1U)) {
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800186c:	461a      	mov	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	7f1b      	ldrb	r3, [r3, #28]
 8001872:	3b01      	subs	r3, #1
 8001874:	429a      	cmp	r2, r3
 8001876:	d207      	bcs.n	8001888 <CO_error+0x15a>
                em->fifoCount++;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187e:	3301      	adds	r3, #1
 8001880:	b2da      	uxtb	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	f383 8810 	msr	PRIMASK, r3
}
 8001896:	e002      	b.n	800189e <CO_error+0x170>
        return;
 8001898:	bf00      	nop
 800189a:	e000      	b.n	800189e <CO_error+0x170>
            return;
 800189c:	bf00      	nop
    if ((em->pFunctSignalPre != NULL) && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
#endif
#endif
}
 800189e:	3734      	adds	r7, #52	@ 0x34
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <CO_getUint32>:
CO_getUint32(const void* buf) {
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
    return value;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d002      	beq.n	80018d8 <OD_getIndex+0x14>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	e000      	b.n	80018da <OD_getIndex+0x16>
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80018f6:	2305      	movs	r3, #5
 80018f8:	e003      	b.n	8001902 <OD_extension_init+0x1c>
    entry->extension = extension;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af02      	add	r7, sp, #8
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	460b      	mov	r3, r1
 800191c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800191e:	7af9      	ldrb	r1, [r7, #11]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2304      	movs	r3, #4
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 ff9b 	bl	8002864 <OD_get_value>
 800192e:	4603      	mov	r3, r0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_HBcons_receive(void* object, void* msg) {
 8001938:	b480      	push	{r7}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t* HBconsNode = object;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	791b      	ldrb	r3, [r3, #4]
 800194a:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	3305      	adds	r3, #5
 8001950:	60fb      	str	r3, [r7, #12]

    if (DLC == 1U) {
 8001952:	7cfb      	ldrb	r3, [r7, #19]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d107      	bne.n	8001968 <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	b25a      	sxtb	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2201      	movs	r2, #1
 8001966:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8001968:	bf00      	nop
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <OD_write_1016>:
 * Custom function for writing OD object "Consumer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1016(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t* HBcons = stream->object;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	61fb      	str	r3, [r7, #28]

    if ((stream == NULL) || (buf == NULL) || (stream->subIndex < 1U)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d012      	beq.n	80019b4 <OD_write_1016+0x40>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00f      	beq.n	80019b4 <OD_write_1016+0x40>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	7d1b      	ldrb	r3, [r3, #20]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00b      	beq.n	80019b4 <OD_write_1016+0x40>
        || (stream->subIndex > HBcons->numberOfMonitoredNodes) || (count != sizeof(uint32_t))
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	7d1a      	ldrb	r2, [r3, #20]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	7a1b      	ldrb	r3, [r3, #8]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d805      	bhi.n	80019b4 <OD_write_1016+0x40>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d102      	bne.n	80019b4 <OD_write_1016+0x40>
        || (countWritten == NULL)) {
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <OD_write_1016+0x44>
        return ODR_DEV_INCOMPAT;
 80019b4:	2309      	movs	r3, #9
 80019b6:	e020      	b.n	80019fa <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 80019b8:	68b8      	ldr	r0, [r7, #8]
 80019ba:	f7ff ff75 	bl	80018a8 <CO_getUint32>
 80019be:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	0c1b      	lsrs	r3, r3, #16
 80019c4:	75fb      	strb	r3, [r7, #23]
    uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1U, nodeId, consumer_time);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	7d1b      	ldrb	r3, [r3, #20]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b2d9      	uxtb	r1, r3
 80019d2:	8abb      	ldrh	r3, [r7, #20]
 80019d4:	7dfa      	ldrb	r2, [r7, #23]
 80019d6:	69f8      	ldr	r0, [r7, #28]
 80019d8:	f000 f8be 	bl	8001b58 <CO_HBconsumer_initEntry>
 80019dc:	4603      	mov	r3, r0
 80019de:	74fb      	strb	r3, [r7, #19]
    if (ret != CO_ERROR_NO) {
 80019e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 80019e8:	2308      	movs	r3, #8
 80019ea:	e006      	b.n	80019fa <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 fd2b 	bl	800244e <OD_writeOriginal>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3720      	adds	r7, #32
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <CO_HBconsumer_init>:
#endif

CO_ReturnError_t
CO_HBconsumer_init(CO_HBconsumer_t* HBcons, CO_EM_t* em, CO_HBconsNode_t* monitoredNodes, uint8_t monitoredNodesCount,
                   OD_entry_t* OD_1016_HBcons, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdxStart, uint32_t* errInfo) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if ((HBcons == NULL) || (em == NULL) || (monitoredNodes == NULL) || (OD_1016_HBcons == NULL)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00b      	beq.n	8001a30 <CO_HBconsumer_init+0x2c>
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d008      	beq.n	8001a30 <CO_HBconsumer_init+0x2c>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <CO_HBconsumer_init+0x2c>
 8001a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <CO_HBconsumer_init+0x2c>
        || (CANdevRx == NULL)) {
 8001a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <CO_HBconsumer_init+0x32>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
 8001a34:	e087      	b.n	8001b46 <CO_HBconsumer_init+0x142>
    }

    /* Configure object variables */
    (void)memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8001a36:	2230      	movs	r2, #48	@ 0x30
 8001a38:	2100      	movs	r1, #0
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f015 fb14 	bl	8017068 <memset>
    HBcons->em = em;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a50:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001a56:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
                                         ? (OD_1016_HBcons->subEntriesCount - 1U)
                                         : monitoredNodesCount;
 8001a58:	78fa      	ldrb	r2, [r7, #3]
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8001a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a5c:	789b      	ldrb	r3, [r3, #2]
 8001a5e:	3b01      	subs	r3, #1
                                         : monitoredNodesCount;
 8001a60:	4293      	cmp	r3, r2
 8001a62:	bf28      	it	cs
 8001a64:	4613      	movcs	r3, r2
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	721a      	strb	r2, [r3, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	77fb      	strb	r3, [r7, #31]
 8001a70:	e041      	b.n	8001af6 <CO_HBconsumer_init+0xf2>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1U, &val, true);
 8001a72:	7ffb      	ldrb	r3, [r7, #31]
 8001a74:	3301      	adds	r3, #1
 8001a76:	b2d9      	uxtb	r1, r3
 8001a78:	f107 0214 	add.w	r2, r7, #20
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a80:	f7ff ff45 	bl	800190e <OD_get_u32>
 8001a84:	4603      	mov	r3, r0
 8001a86:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8001a88:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00c      	beq.n	8001aaa <CO_HBconsumer_init+0xa6>
            if (errInfo != NULL) {
 8001a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d006      	beq.n	8001aa4 <CO_HBconsumer_init+0xa0>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 8001a96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a98:	f7ff ff14 	bl	80018c4 <OD_getIndex>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aa2:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8001aa4:	f06f 030b 	mvn.w	r3, #11
 8001aa8:	e04d      	b.n	8001b46 <CO_HBconsumer_init+0x142>
        }

        uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	777b      	strb	r3, [r7, #29]
        uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, consumer_time);
 8001ab4:	8b7b      	ldrh	r3, [r7, #26]
 8001ab6:	7f7a      	ldrb	r2, [r7, #29]
 8001ab8:	7ff9      	ldrb	r1, [r7, #31]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f84c 	bl	8001b58 <CO_HBconsumer_initEntry>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8001ac4:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d011      	beq.n	8001af0 <CO_HBconsumer_init+0xec>
            if (errInfo != NULL) {
 8001acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d006      	beq.n	8001ae0 <CO_HBconsumer_init+0xdc>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 8001ad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ad4:	f7ff fef6 	bl	80018c4 <OD_getIndex>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ade:	601a      	str	r2, [r3, #0]
            }
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS) {
 8001ae0:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001ae4:	f113 0f0c 	cmn.w	r3, #12
 8001ae8:	d002      	beq.n	8001af0 <CO_HBconsumer_init+0xec>
                return ret;
 8001aea:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001aee:	e02a      	b.n	8001b46 <CO_HBconsumer_init+0x142>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001af0:	7ffb      	ldrb	r3, [r7, #31]
 8001af2:	3301      	adds	r3, #1
 8001af4:	77fb      	strb	r3, [r7, #31]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	7a1b      	ldrb	r3, [r3, #8]
 8001afa:	7ffa      	ldrb	r2, [r7, #31]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d3b8      	bcc.n	8001a72 <CO_HBconsumer_init+0x6e>
        }
    }

    /* configure extension for OD */
#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    HBcons->OD_1016_extension.object = HBcons;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4a11      	ldr	r2, [pc, #68]	@ (8001b50 <CO_HBconsumer_init+0x14c>)
 8001b0a:	625a      	str	r2, [r3, #36]	@ 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4a11      	ldr	r2, [pc, #68]	@ (8001b54 <CO_HBconsumer_init+0x150>)
 8001b10:	629a      	str	r2, [r3, #40]	@ 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3320      	adds	r3, #32
 8001b16:	4619      	mov	r1, r3
 8001b18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b1a:	f7ff fee4 	bl	80018e6 <OD_extension_init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8001b22:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00c      	beq.n	8001b44 <CO_HBconsumer_init+0x140>
        if (errInfo != NULL) {
 8001b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d006      	beq.n	8001b3e <CO_HBconsumer_init+0x13a>
            *errInfo = OD_getIndex(OD_1016_HBcons);
 8001b30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b32:	f7ff fec7 	bl	80018c4 <OD_getIndex>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b3c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001b3e:	f06f 030b 	mvn.w	r3, #11
 8001b42:	e000      	b.n	8001b46 <CO_HBconsumer_init+0x142>
    }
#endif

    return CO_ERROR_NO;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	0800239f 	.word	0x0800239f
 8001b54:	08001975 	.word	0x08001975

08001b58 <CO_HBconsumer_initEntry>:

static CO_ReturnError_t
CO_HBconsumer_initEntry(CO_HBconsumer_t* HBcons, uint8_t idx, uint8_t nodeId, uint16_t consumerTime_ms) {
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b08d      	sub	sp, #52	@ 0x34
 8001b5c:	af04      	add	r7, sp, #16
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	4608      	mov	r0, r1
 8001b62:	4611      	mov	r1, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	4603      	mov	r3, r0
 8001b68:	70fb      	strb	r3, [r7, #3]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	70bb      	strb	r3, [r7, #2]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001b72:	2300      	movs	r3, #0
 8001b74:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if ((HBcons == NULL) || (idx >= HBcons->numberOfMonitoredNodes)) {
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d004      	beq.n	8001b86 <CO_HBconsumer_initEntry+0x2e>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	7a1b      	ldrb	r3, [r3, #8]
 8001b80:	78fa      	ldrb	r2, [r7, #3]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d302      	bcc.n	8001b8c <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	e075      	b.n	8001c78 <CO_HBconsumer_initEntry+0x120>
    }

    /* verify for duplicate entries */
    if ((consumerTime_ms != 0U) && (nodeId != 0U)) {
 8001b8c:	883b      	ldrh	r3, [r7, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d024      	beq.n	8001bdc <CO_HBconsumer_initEntry+0x84>
 8001b92:	78bb      	ldrb	r3, [r7, #2]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d021      	beq.n	8001bdc <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001b98:	2300      	movs	r3, #0
 8001b9a:	77bb      	strb	r3, [r7, #30]
 8001b9c:	e019      	b.n	8001bd2 <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	7fbb      	ldrb	r3, [r7, #30]
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f107 0408 	add.w	r4, r7, #8
 8001bac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if ((idx != i) && (node.time_us != 0U) && (node.nodeId == nodeId)) {
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	7fbb      	ldrb	r3, [r7, #30]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d008      	beq.n	8001bcc <CO_HBconsumer_initEntry+0x74>
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <CO_HBconsumer_initEntry+0x74>
 8001bc0:	7a3b      	ldrb	r3, [r7, #8]
 8001bc2:	78ba      	ldrb	r2, [r7, #2]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d101      	bne.n	8001bcc <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 8001bc8:	23f4      	movs	r3, #244	@ 0xf4
 8001bca:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001bcc:	7fbb      	ldrb	r3, [r7, #30]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	77bb      	strb	r3, [r7, #30]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	7a1b      	ldrb	r3, [r3, #8]
 8001bd6:	7fba      	ldrb	r2, [r7, #30]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d3e0      	bcc.n	8001b9e <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8001bdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d147      	bne.n	8001c74 <CO_HBconsumer_initEntry+0x11c>
        uint16_t COB_ID;

        CO_HBconsNode_t* monitoredNode = &HBcons->monitoredNodes[idx];
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	4413      	add	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	78ba      	ldrb	r2, [r7, #2]
 8001bf4:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (uint32_t)consumerTime_ms * 1000U;
 8001bf6:	883b      	ldrh	r3, [r7, #0]
 8001bf8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bfc:	fb03 f202 	mul.w	r2, r3, r2
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	22ff      	movs	r2, #255	@ 0xff
 8001c08:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if ((monitoredNode->nodeId != 0U) && (monitoredNode->time_us != 0U)) {
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00c      	beq.n	8001c32 <CO_HBconsumer_initEntry+0xda>
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <CO_HBconsumer_initEntry+0xda>
            COB_ID = monitoredNode->nodeId + (uint16_t)CO_CAN_ID_HEARTBEAT;
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8001c28:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	709a      	strb	r2, [r3, #2]
 8001c30:	e007      	b.n	8001c42 <CO_HBconsumer_initEntry+0xea>
        } else {
            COB_ID = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6998      	ldr	r0, [r3, #24]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	8b9a      	ldrh	r2, [r3, #28]
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	4413      	add	r3, r2
 8001c50:	b299      	uxth	r1, r3
                                 (void*)&HBcons->monitoredNodes[idx], CO_HBcons_receive);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8001c5c:	8bba      	ldrh	r2, [r7, #28]
 8001c5e:	4c08      	ldr	r4, [pc, #32]	@ (8001c80 <CO_HBconsumer_initEntry+0x128>)
 8001c60:	9402      	str	r4, [sp, #8]
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	2300      	movs	r3, #0
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001c6c:	f005 fc86 	bl	800757c <CO_CANrxBufferInit>
 8001c70:	4603      	mov	r3, r0
 8001c72:	77fb      	strb	r3, [r7, #31]
    }
    return ret;
 8001c74:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3724      	adds	r7, #36	@ 0x24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}
 8001c80:	08001939 	.word	0x08001939

08001c84 <CO_HBconsumer_process>:
}
#endif /* (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI */

void
CO_HBconsumer_process(CO_HBconsumer_t* HBcons, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                      uint32_t* timerNext_us) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08e      	sub	sp, #56	@ 0x38
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 8001c92:	2301      	movs	r3, #1
 8001c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 8001c96:	2301      	movs	r3, #1
 8001c98:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d077      	beq.n	8001d90 <CO_HBconsumer_process+0x10c>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d073      	beq.n	8001d90 <CO_HBconsumer_process+0x10c>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001cae:	e068      	b.n	8001d82 <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	4413      	add	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	789b      	ldrb	r3, [r3, #2]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d055      	beq.n	8001d76 <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d022      	beq.n	8001d18 <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d112      	bne.n	8001d02 <CO_HBconsumer_process+0x7e>
                    if (monitoredNode->pFunctSignalRemoteReset != NULL) {
                        monitoredNode->pFunctSignalRemoteReset(monitoredNode->nodeId, i,
                                                               monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	789b      	ldrb	r3, [r3, #2]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d10a      	bne.n	8001cfa <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	f248 1330 	movw	r3, #33072	@ 0x8130
 8001cf2:	221c      	movs	r2, #28
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	f7ff fd1a 	bl	800172e <CO_error>
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	709a      	strb	r2, [r3, #2]
 8001d00:	e007      	b.n	8001d12 <CO_HBconsumer_process+0x8e>
                        && monitoredNode->pFunctSignalHbStarted != NULL) {
                        monitoredNode->pFunctSignalHbStarted(monitoredNode->nodeId, i,
                                                             monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	2202      	movs	r2, #2
 8001d06:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2200      	movs	r2, #0
 8001d16:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	789b      	ldrb	r3, [r3, #2]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d11c      	bne.n	8001d5a <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	441a      	add	r2, r3
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d310      	bcc.n	8001d5a <CO_HBconsumer_process+0xd6>
                    if (monitoredNode->pFunctSignalTimeout != NULL) {
                        monitoredNode->pFunctSignalTimeout(monitoredNode->nodeId, i,
                                                           monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	f248 1330 	movw	r3, #33072	@ 0x8130
 8001d46:	221b      	movs	r2, #27
 8001d48:	2101      	movs	r1, #1
 8001d4a:	f7ff fcf0 	bl	800172e <CO_error>
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	22ff      	movs	r2, #255	@ 0xff
 8001d52:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2203      	movs	r2, #3
 8001d58:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	789b      	ldrb	r3, [r3, #2]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d001      	beq.n	8001d66 <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 8001d62:	2300      	movs	r3, #0
 8001d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	d003      	beq.n	8001d78 <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d74:	e000      	b.n	8001d78 <CO_HBconsumer_process+0xf4>
                continue;
 8001d76:	bf00      	nop
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001d78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	7a1b      	ldrb	r3, [r3, #8]
 8001d86:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d390      	bcc.n	8001cb0 <CO_HBconsumer_process+0x2c>
 8001d8e:	e028      	b.n	8001de2 <CO_HBconsumer_process+0x15e>
                }
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    } else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d103      	bne.n	8001d9e <CO_HBconsumer_process+0x11a>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d021      	beq.n	8001de2 <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001d9e:	2300      	movs	r3, #0
 8001da0:	77fb      	strb	r3, [r7, #31]
 8001da2:	e015      	b.n	8001dd0 <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	7ffb      	ldrb	r3, [r7, #31]
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	4413      	add	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	22ff      	movs	r2, #255	@ 0xff
 8001db4:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2200      	movs	r2, #0
 8001dba:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	789b      	ldrb	r3, [r3, #2]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001dca:	7ffb      	ldrb	r3, [r7, #31]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	77fb      	strb	r3, [r7, #31]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	7a1b      	ldrb	r3, [r3, #8]
 8001dd4:	7ffa      	ldrb	r2, [r7, #31]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d3e4      	bcc.n	8001da4 <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        allMonitoredOperationalCurrent = false;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62bb      	str	r3, [r7, #40]	@ 0x28
    } else { /* MISRA C 2004 14.10 */
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d114      	bne.n	8001e14 <CO_HBconsumer_process+0x190>
 8001dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d011      	beq.n	8001e14 <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	2300      	movs	r3, #0
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	221b      	movs	r2, #27
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	f7ff fc96 	bl	800172e <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	2300      	movs	r3, #0
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	221c      	movs	r2, #28
 8001e0e:	2100      	movs	r1, #0
 8001e10:	f7ff fc8d 	bl	800172e <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e18:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e1e:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	615a      	str	r2, [r3, #20]
}
 8001e26:	bf00      	nop
 8001e28:	3730      	adds	r7, #48	@ 0x30
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <CO_getUint16>:
CO_getUint16(const void* buf) {
 8001e2e:	b480      	push	{r7}
 8001e30:	b085      	sub	sp, #20
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	81fb      	strh	r3, [r7, #14]
    return value;
 8001e3e:	89fb      	ldrh	r3, [r7, #14]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <OD_getIndex+0x14>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	e000      	b.n	8001e62 <OD_getIndex+0x16>
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8001e7e:	2305      	movs	r3, #5
 8001e80:	e003      	b.n	8001e8a <OD_extension_init+0x1c>
    entry->extension = extension;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af02      	add	r7, sp, #8
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001ea6:	7af9      	ldrb	r1, [r7, #11]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	2302      	movs	r3, #2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 fcd7 	bl	8002864 <OD_get_value>
 8001eb6:	4603      	mov	r3, r0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <CO_isError>:
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	08db      	lsrs	r3, r3, #3
 8001ed0:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	2201      	movs	r2, #1
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
            || (em->errorStatusBits[index] & bitmask) != 0)
               ? true
               : false;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	2b09      	cmp	r3, #9
 8001eea:	d807      	bhi.n	8001efc <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	5cd2      	ldrb	r2, [r2, r3]
 8001ef2:	7bbb      	ldrb	r3, [r7, #14]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	b2db      	uxtb	r3, r3
               : false;
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <CO_isError+0x40>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <CO_isError+0x42>
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <CO_getErrorRegister>:
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t
CO_getErrorRegister(CO_EM_t* em) {
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <CO_getErrorRegister+0x1e>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <CO_getErrorRegister+0x1e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	e000      	b.n	8001f2e <CO_getErrorRegister+0x20>
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_NMT_receive(void* object, void* msg) {
 8001f3a:	b480      	push	{r7}
 8001f3c:	b087      	sub	sp, #28
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	791b      	ldrb	r3, [r3, #4]
 8001f48:	75fb      	strb	r3, [r7, #23]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	3305      	adds	r3, #5
 8001f4e:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t* NMT = (CO_NMT_t*)object;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	60bb      	str	r3, [r7, #8]

    if ((DLC == 2U) && ((nodeId == 0U) || (nodeId == NMT->nodeId))) {
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d10a      	bne.n	8001f7e <CO_NMT_receive+0x44>
 8001f68:	7bbb      	ldrb	r3, [r7, #14]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d004      	beq.n	8001f78 <CO_NMT_receive+0x3e>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	78db      	ldrb	r3, [r3, #3]
 8001f72:	7bba      	ldrb	r2, [r7, #14]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d102      	bne.n	8001f7e <CO_NMT_receive+0x44>
        NMT->internalCommand = command;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 8001f7e:	bf00      	nop
 8001f80:	371c      	adds	r7, #28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <OD_write_1017>:
 * Custom function for writing OD object "Producer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1017(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint16_t))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00c      	beq.n	8001fb8 <OD_write_1017+0x2e>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	7d1b      	ldrb	r3, [r3, #20]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d108      	bne.n	8001fb8 <OD_write_1017+0x2e>
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <OD_write_1017+0x2e>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d102      	bne.n	8001fb8 <OD_write_1017+0x2e>
        || (countWritten == NULL)) {
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <OD_write_1017+0x32>
        return ODR_DEV_INCOMPAT;
 8001fb8:	2309      	movs	r3, #9
 8001fba:	e017      	b.n	8001fec <OD_write_1017+0x62>
    }

    CO_NMT_t* NMT = (CO_NMT_t*)stream->object;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000U;
 8001fc2:	68b8      	ldr	r0, [r7, #8]
 8001fc4:	f7ff ff33 	bl	8001e2e <CO_getUint16>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fd0:	fb03 f202 	mul.w	r2, r3, r2
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 fa32 	bl	800244e <OD_writeOriginal>
 8001fea:	4603      	mov	r3, r0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <CO_NMT_init>:
CO_NMT_init(CO_NMT_t* NMT, OD_entry_t* OD_1017_ProducerHbTime, CO_EM_t* em, uint8_t nodeId, uint16_t NMTcontrol,
            uint16_t firstHBTime_ms, CO_CANmodule_t* NMT_CANdevRx, uint16_t NMT_rxIdx, uint16_t CANidRxNMT,
#if (((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0) || defined CO_DOXYGEN
            CO_CANmodule_t* NMT_CANdevTx, uint16_t NMT_txIdx, uint16_t CANidTxNMT,
#endif
            CO_CANmodule_t* HB_CANdevTx, uint16_t HB_txIdx, uint16_t CANidTxHB, uint32_t* errInfo) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	@ 0x28
 8001ff8:	af04      	add	r7, sp, #16
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8002002:	2300      	movs	r3, #0
 8002004:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((NMT == NULL) || (OD_1017_ProducerHbTime == NULL) || (em == NULL) || (NMT_CANdevRx == NULL)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00b      	beq.n	8002024 <CO_NMT_init+0x30>
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d008      	beq.n	8002024 <CO_NMT_init+0x30>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <CO_NMT_init+0x30>
 8002018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <CO_NMT_init+0x30>
        || (HB_CANdevTx == NULL)
 800201e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <CO_NMT_init+0x36>
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
        || (NMT_CANdevTx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002024:	f04f 33ff 	mov.w	r3, #4294967295
 8002028:	e097      	b.n	800215a <CO_NMT_init+0x166>
    }

    /* clear the object */
    (void)memset(NMT, 0, sizeof(CO_NMT_t));
 800202a:	222c      	movs	r2, #44	@ 0x2c
 800202c:	2100      	movs	r1, #0
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f015 f81a 	bl	8017068 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	78fa      	ldrb	r2, [r7, #3]
 8002044:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8c3a      	ldrh	r2, [r7, #32]
 800204a:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (uint32_t)firstHBTime_ms * 1000U;
 8002052:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002054:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002058:	fb03 f202 	mul.w	r2, r3, r2
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8002060:	f107 0214 	add.w	r2, r7, #20
 8002064:	2301      	movs	r3, #1
 8002066:	2100      	movs	r1, #0
 8002068:	68b8      	ldr	r0, [r7, #8]
 800206a:	f7ff ff14 	bl	8001e96 <OD_get_u16>
 800206e:	4603      	mov	r3, r0
 8002070:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8002072:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00c      	beq.n	8002094 <CO_NMT_init+0xa0>
        if (errInfo != NULL) {
 800207a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <CO_NMT_init+0x9a>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8002080:	68b8      	ldr	r0, [r7, #8]
 8002082:	f7ff fee3 	bl	8001e4c <OD_getIndex>
 8002086:	4603      	mov	r3, r0
 8002088:	461a      	mov	r2, r3
 800208a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800208c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800208e:	f06f 030b 	mvn.w	r3, #11
 8002092:	e062      	b.n	800215a <CO_NMT_init+0x166>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000U;
 8002094:	8abb      	ldrh	r3, [r7, #20]
 8002096:	461a      	mov	r2, r3
 8002098:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800209c:	fb03 f202 	mul.w	r2, r3, r2
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002164 <CO_NMT_init+0x170>)
 80020ae:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002168 <CO_NMT_init+0x174>)
 80020b4:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	3310      	adds	r3, #16
 80020ba:	4619      	mov	r1, r3
 80020bc:	68b8      	ldr	r0, [r7, #8]
 80020be:	f7ff fed6 	bl	8001e6e <OD_extension_init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80020c6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00c      	beq.n	80020e8 <CO_NMT_init+0xf4>
        if (errInfo != NULL) {
 80020ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <CO_NMT_init+0xee>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 80020d4:	68b8      	ldr	r0, [r7, #8]
 80020d6:	f7ff feb9 	bl	8001e4c <OD_getIndex>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020e0:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80020e2:	f06f 030b 	mvn.w	r3, #11
 80020e6:	e038      	b.n	800215a <CO_NMT_init+0x166>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d903      	bls.n	80020fc <CO_NMT_init+0x108>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(NMT_CANdevRx, NMT_rxIdx, CANidRxNMT, 0x7FF, false, (void*)NMT, CO_NMT_receive);
 80020fc:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80020fe:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8002100:	4b1a      	ldr	r3, [pc, #104]	@ (800216c <CO_NMT_init+0x178>)
 8002102:	9302      	str	r3, [sp, #8]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	2300      	movs	r3, #0
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002112:	f005 fa33 	bl	800757c <CO_CANrxBufferInit>
 8002116:	4603      	mov	r3, r0
 8002118:	75fb      	strb	r3, [r7, #23]
    if (ret != CO_ERROR_NO) {
 800211a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <CO_NMT_init+0x134>
        return ret;
 8002122:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002126:	e018      	b.n	800215a <CO_NMT_init+0x166>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800212c:	625a      	str	r2, [r3, #36]	@ 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(HB_CANdevTx, HB_txIdx, CANidTxHB, false, 1, false);
 800212e:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8002130:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002132:	2300      	movs	r3, #0
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	2301      	movs	r3, #1
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2300      	movs	r3, #0
 800213c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800213e:	f005 fa7b 	bl	8007638 <CO_CANtxBufferInit>
 8002142:	4602      	mov	r2, r0
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	629a      	str	r2, [r3, #40]	@ 0x28
    if (NMT->HB_TXbuff == NULL) {
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <CO_NMT_init+0x162>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002150:	f04f 33ff 	mov.w	r3, #4294967295
 8002154:	e001      	b.n	800215a <CO_NMT_init+0x166>
    }

    return ret;
 8002156:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	0800239f 	.word	0x0800239f
 8002168:	08001f8b 	.word	0x08001f8b
 800216c:	08001f3b 	.word	0x08001f3b

08002170 <CO_NMT_process>:
    }
}
#endif

CO_NMT_reset_cmd_t
CO_NMT_process(CO_NMT_t* NMT, CO_NMT_internalState_t* NMTstate, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b08e      	sub	sp, #56	@ 0x38
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 8002186:	2300      	movs	r3, #0
 8002188:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 800218c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	633b      	str	r3, [r7, #48]	@ 0x30

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us) ? (NMT->HBproducerTimer - timeDifference_us) : 0U;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d204      	bcs.n	80021b0 <CO_NMT_process+0x40>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	e000      	b.n	80021b2 <CO_NMT_process+0x42>
 80021b0:	2300      	movs	r3, #0
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed */
    if (NNTinit
 80021b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10e      	bne.n	80021da <CO_NMT_process+0x6a>
        || ((NMT->HBproducerTime_us != 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d02b      	beq.n	800221c <CO_NMT_process+0xac>
            && ((NMT->HBproducerTimer == 0U) || (NMTstateCpy != NMT->operatingStatePrev)))) {
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <CO_NMT_process+0x6a>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80021d2:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d020      	beq.n	800221c <CO_NMT_process+0xac>
        NMT->HB_TXbuff->data[0] = (uint8_t)NMTstateCpy;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021de:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80021e2:	715a      	strb	r2, [r3, #5]
        (void)CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ec:	4619      	mov	r1, r3
 80021ee:	4610      	mov	r0, r2
 80021f0:	f005 fa9c 	bl	800772c <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 80021f4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <CO_NMT_process+0xa4>
            /* NMT slave self starting */
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	889b      	ldrh	r3, [r3, #4]
 8002200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
                              ? CO_NMT_OPERATIONAL
                              : CO_NMT_PRE_OPERATIONAL;
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <CO_NMT_process+0x9c>
 8002208:	2305      	movs	r3, #5
 800220a:	e000      	b.n	800220e <CO_NMT_process+0x9e>
 800220c:	237f      	movs	r3, #127	@ 0x7f
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 800220e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002212:	e003      	b.n	800221c <CO_NMT_process+0xac>
        } else {
            /* Start timer from the beginning. If OS is slow, time sliding may occur. However,
             * heartbeat is not for synchronization, it is for health report. In case of
             * initializing, timer is set in the CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002222:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	789b      	ldrb	r3, [r3, #2]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d02a      	beq.n	8002282 <CO_NMT_process+0x112>
        switch (NMT->internalCommand) {
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	789b      	ldrb	r3, [r3, #2]
 8002230:	2b82      	cmp	r3, #130	@ 0x82
 8002232:	d01e      	beq.n	8002272 <CO_NMT_process+0x102>
 8002234:	2b82      	cmp	r3, #130	@ 0x82
 8002236:	dc20      	bgt.n	800227a <CO_NMT_process+0x10a>
 8002238:	2b81      	cmp	r3, #129	@ 0x81
 800223a:	d016      	beq.n	800226a <CO_NMT_process+0xfa>
 800223c:	2b81      	cmp	r3, #129	@ 0x81
 800223e:	dc1c      	bgt.n	800227a <CO_NMT_process+0x10a>
 8002240:	2b80      	cmp	r3, #128	@ 0x80
 8002242:	d00e      	beq.n	8002262 <CO_NMT_process+0xf2>
 8002244:	2b80      	cmp	r3, #128	@ 0x80
 8002246:	dc18      	bgt.n	800227a <CO_NMT_process+0x10a>
 8002248:	2b01      	cmp	r3, #1
 800224a:	d002      	beq.n	8002252 <CO_NMT_process+0xe2>
 800224c:	2b02      	cmp	r3, #2
 800224e:	d004      	beq.n	800225a <CO_NMT_process+0xea>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
            case CO_NMT_NO_COMMAND:
            default:
                /* done */
                break;
 8002250:	e013      	b.n	800227a <CO_NMT_process+0x10a>
            case CO_NMT_ENTER_OPERATIONAL: NMTstateCpy = CO_NMT_OPERATIONAL; break;
 8002252:	2305      	movs	r3, #5
 8002254:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002258:	e010      	b.n	800227c <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_STOPPED: NMTstateCpy = CO_NMT_STOPPED; break;
 800225a:	2304      	movs	r3, #4
 800225c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002260:	e00c      	b.n	800227c <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_PRE_OPERATIONAL: NMTstateCpy = CO_NMT_PRE_OPERATIONAL; break;
 8002262:	237f      	movs	r3, #127	@ 0x7f
 8002264:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002268:	e008      	b.n	800227c <CO_NMT_process+0x10c>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
 800226a:	2302      	movs	r3, #2
 800226c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8002270:	e004      	b.n	800227c <CO_NMT_process+0x10c>
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
 8002272:	2301      	movs	r3, #1
 8002274:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8002278:	e000      	b.n	800227c <CO_NMT_process+0x10c>
                break;
 800227a:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t ErrOnBusOffHB = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_BUSOFF_HB) != 0U);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	889b      	ldrh	r3, [r3, #4]
 8002286:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf14      	ite	ne
 800228e:	2301      	movne	r3, #1
 8002290:	2300      	moveq	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t ErrBusOff = CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	2112      	movs	r1, #18
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fe0f 	bl	8001ec0 <CO_isError>
 80022a2:	62b8      	str	r0, [r7, #40]	@ 0x28
    bool_t ErrHbCons = CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	211b      	movs	r1, #27
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fe08 	bl	8001ec0 <CO_isError>
 80022b0:	6278      	str	r0, [r7, #36]	@ 0x24
    bool_t ErrHbConsRemote = CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	211c      	movs	r1, #28
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fe01 	bl	8001ec0 <CO_isError>
 80022be:	6238      	str	r0, [r7, #32]
    bool_t busOff_HB = ErrOnBusOffHB && (ErrBusOff || ErrHbCons || ErrHbConsRemote);
 80022c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <CO_NMT_process+0x16c>
 80022c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d105      	bne.n	80022d8 <CO_NMT_process+0x168>
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d102      	bne.n	80022d8 <CO_NMT_process+0x168>
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <CO_NMT_process+0x16c>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <CO_NMT_process+0x16e>
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]

    bool_t ErrNMTErrReg = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_ERR_REG) != 0U);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	889b      	ldrh	r3, [r3, #4]
 80022e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf14      	ite	ne
 80022ec:	2301      	movne	r3, #1
 80022ee:	2300      	moveq	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	61bb      	str	r3, [r7, #24]
    bool_t ErrNMTcontrol = ((CO_getErrorRegister(NMT->em) & (uint8_t)NMT->NMTcontrol) != 0U);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fe08 	bl	8001f0e <CO_getErrorRegister>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	889b      	ldrh	r3, [r3, #4]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	4013      	ands	r3, r2
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = ErrNMTErrReg && ErrNMTcontrol;
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <CO_NMT_process+0x1b8>
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <CO_NMT_process+0x1b8>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <CO_NMT_process+0x1ba>
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]

    if ((NMTstateCpy == CO_NMT_OPERATIONAL) && (busOff_HB || errRegMasked)) {
 800232c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002330:	2b05      	cmp	r3, #5
 8002332:	d111      	bne.n	8002358 <CO_NMT_process+0x1e8>
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <CO_NMT_process+0x1d0>
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00b      	beq.n	8002358 <CO_NMT_process+0x1e8>
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	889b      	ldrh	r3, [r3, #4]
 8002344:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
                                                                                            : CO_NMT_PRE_OPERATIONAL;
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <CO_NMT_process+0x1e0>
 800234c:	2304      	movs	r3, #4
 800234e:	e000      	b.n	8002352 <CO_NMT_process+0x1e2>
 8002350:	237f      	movs	r3, #127	@ 0x7f
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 8002352:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002356:	e011      	b.n	800237c <CO_NMT_process+0x20c>
    } else if ((((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0U)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	889b      	ldrh	r3, [r3, #4]
 800235c:	b21b      	sxth	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	da0c      	bge.n	800237c <CO_NMT_process+0x20c>
               && (NMTstateCpy == CO_NMT_PRE_OPERATIONAL) && (!busOff_HB && !errRegMasked)) {
 8002362:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002366:	2b7f      	cmp	r3, #127	@ 0x7f
 8002368:	d108      	bne.n	800237c <CO_NMT_process+0x20c>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d105      	bne.n	800237c <CO_NMT_process+0x20c>
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <CO_NMT_process+0x20c>
        NMTstateCpy = CO_NMT_OPERATIONAL;
 8002376:	2305      	movs	r3, #5
 8002378:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002382:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) {
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <CO_NMT_process+0x222>
        *NMTstate = NMTstateCpy;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002390:	701a      	strb	r2, [r3, #0]
    }

    return resetCommand;
 8002392:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 8002396:	4618      	mov	r0, r3
 8002398:	3738      	adds	r7, #56	@ 0x38
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <OD_readOriginal>:
#include <string.h>
#define OD_DEFINITION
#include "301/CO_ODinterface.h"

ODR_t
OD_readOriginal(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 800239e:	b580      	push	{r7, lr}
 80023a0:	b088      	sub	sp, #32
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL)) {
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <OD_readOriginal+0x20>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <OD_readOriginal+0x20>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 80023be:	2309      	movs	r3, #9
 80023c0:	e041      	b.n	8002446 <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	61fb      	str	r3, [r7, #28]
    const uint8_t* dataOrig = stream->dataOrig;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 80023d4:	230e      	movs	r3, #14
 80023d6:	e036      	b.n	8002446 <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 80023d8:	2300      	movs	r3, #0
 80023da:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d103      	bne.n	80023ec <OD_readOriginal+0x4e>
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d922      	bls.n	8002432 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	69fa      	ldr	r2, [r7, #28]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d801      	bhi.n	80023fa <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 80023f6:	2309      	movs	r3, #9
 80023f8:	e025      	b.n	8002446 <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4413      	add	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	d90a      	bls.n	800242c <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	441a      	add	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8002426:	23ff      	movs	r3, #255	@ 0xff
 8002428:	75fb      	strb	r3, [r7, #23]
 800242a:	e002      	b.n	8002432 <OD_readOriginal+0x94>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
        }
    }

    (void)memcpy((void*)buf, (const void*)dataOrig, dataLenToCopy);
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	69b9      	ldr	r1, [r7, #24]
 8002436:	68b8      	ldr	r0, [r7, #8]
 8002438:	f014 feb9 	bl	80171ae <memcpy>

    *countRead = dataLenToCopy;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	601a      	str	r2, [r3, #0]
    return returnCode;
 8002442:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <OD_writeOriginal>:

ODR_t
OD_writeOriginal(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800244e:	b580      	push	{r7, lr}
 8002450:	b088      	sub	sp, #32
 8002452:	af00      	add	r7, sp, #0
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	607a      	str	r2, [r7, #4]
 800245a:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <OD_writeOriginal+0x20>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <OD_writeOriginal+0x20>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 800246e:	2309      	movs	r3, #9
 8002470:	e056      	b.n	8002520 <OD_writeOriginal+0xd2>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	61fb      	str	r3, [r7, #28]
    OD_size_t dataLenRemain = dataLenToCopy;      /* remaining length of dataOrig buffer */
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	61bb      	str	r3, [r7, #24]
    uint8_t* dataOrig = stream->dataOrig;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	617b      	str	r3, [r7, #20]

    if (dataOrig == NULL) {
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <OD_writeOriginal+0x3e>
        return ODR_SUB_NOT_EXIST;
 8002488:	230e      	movs	r3, #14
 800248a:	e049      	b.n	8002520 <OD_writeOriginal+0xd2>
    }

    ODR_t returnCode = ODR_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	74fb      	strb	r3, [r7, #19]

    /* If previous write was partial or OD variable length is larger than current buffer size,
     * then data was (will be) written in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d103      	bne.n	80024a0 <OD_writeOriginal+0x52>
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	d924      	bls.n	80024ea <OD_writeOriginal+0x9c>
        if (stream->dataOffset >= dataLenToCopy) {
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d801      	bhi.n	80024ae <OD_writeOriginal+0x60>
            return ODR_DEV_INCOMPAT;
 80024aa:	2309      	movs	r3, #9
 80024ac:	e038      	b.n	8002520 <OD_writeOriginal+0xd2>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	61fb      	str	r3, [r7, #28]
        dataLenRemain = dataLenToCopy;
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	61bb      	str	r3, [r7, #24]
        dataOrig += stream->dataOffset;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	4413      	add	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]

        if (dataLenToCopy > count) {
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d90a      	bls.n	80024e4 <OD_writeOriginal+0x96>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	441a      	add	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80024de:	23ff      	movs	r3, #255	@ 0xff
 80024e0:	74fb      	strb	r3, [r7, #19]
 80024e2:	e002      	b.n	80024ea <OD_writeOriginal+0x9c>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d201      	bcs.n	80024f6 <OD_writeOriginal+0xa8>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 80024f2:	230c      	movs	r3, #12
 80024f4:	e014      	b.n	8002520 <OD_writeOriginal+0xd2>
    }

    /* additional check for Misra c compliance */
    if ((dataLenToCopy <= dataLenRemain) && (dataLenToCopy <= count)) {
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d80f      	bhi.n	800251e <OD_writeOriginal+0xd0>
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	429a      	cmp	r2, r3
 8002504:	d80b      	bhi.n	800251e <OD_writeOriginal+0xd0>
        (void)memcpy((void*)dataOrig, (const void*)buf, dataLenToCopy);
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f014 fe4f 	bl	80171ae <memcpy>
 8002510:	bf00      	nop
    } else {
        return ODR_DEV_INCOMPAT;
    }

    *countWritten = dataLenToCopy;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	601a      	str	r2, [r3, #0]
    return returnCode;
 8002518:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800251c:	e000      	b.n	8002520 <OD_writeOriginal+0xd2>
        return ODR_DEV_INCOMPAT;
 800251e:	2309      	movs	r3, #9
}
 8002520:	4618      	mov	r0, r3
 8002522:	3720      	adds	r7, #32
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_readDisabled(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countRead;
    return ODR_UNSUPP_ACCESS;
 8002536:	2302      	movs	r3, #2
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_writeDisabled(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countWritten;
    return ODR_UNSUPP_ACCESS;
 8002552:	2302      	movs	r3, #2
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <OD_find>:

OD_entry_t*
OD_find(OD_t* od, uint16_t index) {
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
    if ((od == NULL) || (od->size == 0U)) {
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <OD_find+0x1a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <OD_find+0x1e>
        return NULL;
 800257a:	2300      	movs	r3, #0
 800257c:	e046      	b.n	800260c <OD_find+0xac>
    }

    uint16_t min = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1U;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	3b01      	subs	r3, #1
 8002588:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. If Object
     * Dictionary has up to N entries, then the max number of loop passes is log2(N) */
    while (min < max) {
 800258a:	e026      	b.n	80025da <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 800258c:	8afa      	ldrh	r2, [r7, #22]
 800258e:	8abb      	ldrh	r3, [r7, #20]
 8002590:	4413      	add	r3, r2
 8002592:	105b      	asrs	r3, r3, #1
 8002594:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	89fa      	ldrh	r2, [r7, #14]
 800259c:	4613      	mov	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	887a      	ldrh	r2, [r7, #2]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d101      	bne.n	80025b6 <OD_find+0x56>
            return entry;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	e02a      	b.n	800260c <OD_find+0xac>
        }

        if (index < entry->index) {
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d209      	bcs.n	80025d4 <OD_find+0x74>
            max = (cur > 0U) ? (cur - 1U) : cur;
 80025c0:	89fb      	ldrh	r3, [r7, #14]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <OD_find+0x6e>
 80025c6:	89fb      	ldrh	r3, [r7, #14]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	e000      	b.n	80025d0 <OD_find+0x70>
 80025ce:	89fb      	ldrh	r3, [r7, #14]
 80025d0:	82bb      	strh	r3, [r7, #20]
 80025d2:	e002      	b.n	80025da <OD_find+0x7a>
        } else {
            min = cur + 1U;
 80025d4:	89fb      	ldrh	r3, [r7, #14]
 80025d6:	3301      	adds	r3, #1
 80025d8:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 80025da:	8afa      	ldrh	r2, [r7, #22]
 80025dc:	8abb      	ldrh	r3, [r7, #20]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d3d4      	bcc.n	800258c <OD_find+0x2c>
        }
    }

    if (min == max) {
 80025e2:	8afa      	ldrh	r2, [r7, #22]
 80025e4:	8abb      	ldrh	r3, [r7, #20]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d10f      	bne.n	800260a <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6859      	ldr	r1, [r3, #4]
 80025ee:	8afa      	ldrh	r2, [r7, #22]
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	887a      	ldrh	r2, [r7, #2]
 8002602:	429a      	cmp	r2, r3
 8002604:	d101      	bne.n	800260a <OD_find+0xaa>
            return entry;
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	e000      	b.n	800260c <OD_find+0xac>
        }
    }

    return NULL; /* entry does not exist in OD */
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	371c      	adds	r7, #28
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <OD_getSub>:

ODR_t
OD_getSub(const OD_entry_t* entry, uint8_t subIndex, OD_IO_t* io, bool_t odOrig) {
 8002618:	b480      	push	{r7}
 800261a:	b08d      	sub	sp, #52	@ 0x34
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	460b      	mov	r3, r1
 8002626:	72fb      	strb	r3, [r7, #11]
    if ((entry == NULL) || (entry->odObject == NULL)) {
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <OD_getSub+0x1e>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <OD_getSub+0x22>
        return ODR_IDX_NOT_EXIST;
 8002636:	2305      	movs	r3, #5
 8002638:	e0e7      	b.n	800280a <OD_getSub+0x1f2>
    }
    if (io == NULL) {
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <OD_getSub+0x2c>
        return ODR_DEV_INCOMPAT;
 8002640:	2309      	movs	r3, #9
 8002642:	e0e2      	b.n	800280a <OD_getSub+0x1f2>
    }

    ODR_t ret = ODR_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    OD_stream_t* stream = &io->stream;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	623b      	str	r3, [r7, #32]

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & (uint8_t)ODT_TYPE_MASK) {
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	78db      	ldrb	r3, [r3, #3]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	2b03      	cmp	r3, #3
 8002658:	d055      	beq.n	8002706 <OD_getSub+0xee>
 800265a:	2b03      	cmp	r3, #3
 800265c:	f300 8093 	bgt.w	8002786 <OD_getSub+0x16e>
 8002660:	2b01      	cmp	r3, #1
 8002662:	d002      	beq.n	800266a <OD_getSub+0x52>
 8002664:	2b02      	cmp	r3, #2
 8002666:	d017      	beq.n	8002698 <OD_getSub+0x80>
 8002668:	e08d      	b.n	8002786 <OD_getSub+0x16e>
        case ODT_VAR: {
            if (subIndex > 0U) {
 800266a:	7afb      	ldrb	r3, [r7, #11]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <OD_getSub+0x60>
                ret = ODR_SUB_NOT_EXIST;
 8002670:	230e      	movs	r3, #14
 8002672:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                break;
 8002676:	e08a      	b.n	800278e <OD_getSub+0x176>
            }
            CO_PROGMEM OD_obj_var_t* odo = entry->odObject;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	613b      	str	r3, [r7, #16]

            stream->attribute = odo->attribute;
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	791a      	ldrb	r2, [r3, #4]
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	609a      	str	r2, [r3, #8]
            break;
 8002696:	e07a      	b.n	800278e <OD_getSub+0x176>
        }
        case ODT_ARR: {
            if (subIndex >= entry->subEntriesCount) {
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	789b      	ldrb	r3, [r3, #2]
 800269c:	7afa      	ldrb	r2, [r7, #11]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d303      	bcc.n	80026aa <OD_getSub+0x92>
                ret = ODR_SUB_NOT_EXIST;
 80026a2:	230e      	movs	r3, #14
 80026a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                break;
 80026a8:	e071      	b.n	800278e <OD_getSub+0x176>
            }
            CO_PROGMEM OD_obj_array_t* odo = entry->odObject;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	61bb      	str	r3, [r7, #24]

            if (subIndex == 0U) {
 80026b0:	7afb      	ldrb	r3, [r7, #11]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10b      	bne.n	80026ce <OD_getSub+0xb6>
                stream->attribute = odo->attribute0;
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	7a1a      	ldrb	r2, [r3, #8]
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	741a      	strb	r2, [r3, #16]
                stream->dataOrig = odo->dataOrig0;
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	601a      	str	r2, [r3, #0]
                stream->dataLength = 1;
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	2201      	movs	r2, #1
 80026ca:	609a      	str	r2, [r3, #8]
                stream->attribute = odo->attribute;
                uint8_t* ptr = odo->dataOrig;
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
                stream->dataLength = odo->dataElementLength;
            }
            break;
 80026cc:	e05f      	b.n	800278e <OD_getSub+0x176>
                stream->attribute = odo->attribute;
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	7a5a      	ldrb	r2, [r3, #9]
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	741a      	strb	r2, [r3, #16]
                uint8_t* ptr = odo->dataOrig;
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	617b      	str	r3, [r7, #20]
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <OD_getSub+0xde>
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	7afa      	ldrb	r2, [r7, #11]
 80026e8:	3a01      	subs	r2, #1
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	fb02 f303 	mul.w	r3, r2, r3
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4413      	add	r3, r2
 80026f4:	e000      	b.n	80026f8 <OD_getSub+0xe0>
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	6a3a      	ldr	r2, [r7, #32]
 80026fa:	6013      	str	r3, [r2, #0]
                stream->dataLength = odo->dataElementLength;
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	609a      	str	r2, [r3, #8]
            break;
 8002704:	e043      	b.n	800278e <OD_getSub+0x176>
        }
        case ODT_REC: {
            CO_PROGMEM OD_obj_record_t* odoArr = entry->odObject;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61fb      	str	r3, [r7, #28]
            CO_PROGMEM OD_obj_record_t* odo = NULL;
 800270c:	2300      	movs	r3, #0
 800270e:	62bb      	str	r3, [r7, #40]	@ 0x28
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8002710:	2300      	movs	r3, #0
 8002712:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002716:	e01c      	b.n	8002752 <OD_getSub+0x13a>
                if (odoArr[i].subIndex == subIndex) {
 8002718:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	461a      	mov	r2, r3
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	4413      	add	r3, r2
 800272a:	791b      	ldrb	r3, [r3, #4]
 800272c:	7afa      	ldrb	r2, [r7, #11]
 800272e:	429a      	cmp	r2, r3
 8002730:	d10a      	bne.n	8002748 <OD_getSub+0x130>
                    odo = &odoArr[i];
 8002732:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	461a      	mov	r2, r3
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	4413      	add	r3, r2
 8002744:	62bb      	str	r3, [r7, #40]	@ 0x28
                    break;
 8002746:	e00a      	b.n	800275e <OD_getSub+0x146>
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8002748:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800274c:	3301      	adds	r3, #1
 800274e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	789b      	ldrb	r3, [r3, #2]
 8002756:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800275a:	429a      	cmp	r2, r3
 800275c:	d3dc      	bcc.n	8002718 <OD_getSub+0x100>
                }
            }
            if (odo == NULL) {
 800275e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002760:	2b00      	cmp	r3, #0
 8002762:	d103      	bne.n	800276c <OD_getSub+0x154>
                ret = ODR_SUB_NOT_EXIST;
 8002764:	230e      	movs	r3, #14
 8002766:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                break;
 800276a:	e010      	b.n	800278e <OD_getSub+0x176>
            }

            stream->attribute = odo->attribute;
 800276c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276e:	795a      	ldrb	r2, [r3, #5]
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 8002774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 800277c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	609a      	str	r2, [r3, #8]
            break;
 8002784:	e003      	b.n	800278e <OD_getSub+0x176>
        }
        default: {
            ret = ODR_DEV_INCOMPAT;
 8002786:	2309      	movs	r3, #9
 8002788:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800278c:	bf00      	nop
        }
    }

    if (ret == ODR_OK) {
 800278e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002792:	2b00      	cmp	r3, #0
 8002794:	d137      	bne.n	8002806 <OD_getSub+0x1ee>
        /* Access data from the original OD location */
        if ((entry->extension == NULL) || odOrig) {
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <OD_getSub+0x18c>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d009      	beq.n	80027b8 <OD_getSub+0x1a0>
            io->read = OD_readOriginal;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002818 <OD_getSub+0x200>)
 80027a8:	619a      	str	r2, [r3, #24]
            io->write = OD_writeOriginal;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a1b      	ldr	r2, [pc, #108]	@ (800281c <OD_getSub+0x204>)
 80027ae:	61da      	str	r2, [r3, #28]
            stream->object = NULL;
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	2200      	movs	r2, #0
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	e01c      	b.n	80027f2 <OD_getSub+0x1da>
        }
        /* Access data from extension specified by application */
        else {
            io->read = (entry->extension->read != NULL) ? entry->extension->read : OD_readDisabled;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <OD_getSub+0x1b2>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	e000      	b.n	80027cc <OD_getSub+0x1b4>
 80027ca:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <OD_getSub+0x208>)
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6193      	str	r3, [r2, #24]
            io->write = (entry->extension->write != NULL) ? entry->extension->write : OD_writeDisabled;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <OD_getSub+0x1ca>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	e000      	b.n	80027e4 <OD_getSub+0x1cc>
 80027e2:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <OD_getSub+0x20c>)
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	61d3      	str	r3, [r2, #28]
            stream->object = entry->extension->object;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	605a      	str	r2, [r3, #4]
        }

        /* Reset stream data offset */
        stream->dataOffset = 0;
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	2200      	movs	r2, #0
 80027f6:	60da      	str	r2, [r3, #12]

        /* Add informative data */
        stream->index = entry->index;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	881a      	ldrh	r2, [r3, #0]
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	825a      	strh	r2, [r3, #18]
        stream->subIndex = subIndex;
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	7afa      	ldrb	r2, [r7, #11]
 8002804:	751a      	strb	r2, [r3, #20]
    }

    return ret;
 8002806:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800280a:	4618      	mov	r0, r3
 800280c:	3734      	adds	r7, #52	@ 0x34
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	0800239f 	.word	0x0800239f
 800281c:	0800244f 	.word	0x0800244f
 8002820:	08002529 	.word	0x08002529
 8002824:	08002545 	.word	0x08002545

08002828 <OD_getSDOabCode>:

uint32_t
OD_getSDOabCode(ODR_t returnCode) {
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
        0x08000022UL, /* Data cannot be tran. because of present device state */
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return ((returnCode < ODR_OK) || (returnCode >= ODR_COUNT)) ? abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	2b00      	cmp	r3, #0
 8002838:	db03      	blt.n	8002842 <OD_getSDOabCode+0x1a>
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	2b19      	cmp	r3, #25
 8002840:	dd02      	ble.n	8002848 <OD_getSDOabCode+0x20>
 8002842:	4b07      	ldr	r3, [pc, #28]	@ (8002860 <OD_getSDOabCode+0x38>)
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002846:	e004      	b.n	8002852 <OD_getSDOabCode+0x2a>
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	4a04      	ldr	r2, [pc, #16]	@ (8002860 <OD_getSDOabCode+0x38>)
 800284e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	0801ade4 	.word	0x0801ade4

08002864 <OD_get_value>:

ODR_t
OD_get_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b091      	sub	sp, #68	@ 0x44
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	460b      	mov	r3, r1
 8002872:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <OD_get_value+0x1a>
        return ODR_DEV_INCOMPAT;
 800287a:	2309      	movs	r3, #9
 800287c:	e02b      	b.n	80028d6 <OD_get_value+0x72>
    }

    OD_IO_t io = {NULL};
 800287e:	f107 0318 	add.w	r3, r7, #24
 8002882:	2220      	movs	r2, #32
 8002884:	2100      	movs	r1, #0
 8002886:	4618      	mov	r0, r3
 8002888:	f014 fbee 	bl	8017068 <memset>
    OD_stream_t* stream = &io.stream;
 800288c:	f107 0318 	add.w	r3, r7, #24
 8002890:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t countRd = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8002896:	f107 0218 	add.w	r2, r7, #24
 800289a:	7af9      	ldrb	r1, [r7, #11]
 800289c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f7ff feba 	bl	8002618 <OD_getSub>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    if (ret != ODR_OK) {
 80028aa:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <OD_get_value+0x54>
        return ret;
 80028b2:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80028b6:	e00e      	b.n	80028d6 <OD_get_value+0x72>
    }
    if (stream->dataLength != len) {
 80028b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d001      	beq.n	80028c6 <OD_get_value+0x62>
        return ODR_TYPE_MISMATCH;
 80028c2:	230b      	movs	r3, #11
 80028c4:	e007      	b.n	80028d6 <OD_get_value+0x72>
    }

    return io.read(stream, val, len, &countRd);
 80028c6:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80028d2:	47a0      	blx	r4
 80028d4:	4603      	mov	r3, r0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3744      	adds	r7, #68	@ 0x44
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd90      	pop	{r4, r7, pc}

080028de <OD_set_value>:

ODR_t
OD_set_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 80028de:	b590      	push	{r4, r7, lr}
 80028e0:	b091      	sub	sp, #68	@ 0x44
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	460b      	mov	r3, r1
 80028ec:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <OD_set_value+0x1a>
        return ODR_DEV_INCOMPAT;
 80028f4:	2309      	movs	r3, #9
 80028f6:	e02b      	b.n	8002950 <OD_set_value+0x72>
    }

    OD_IO_t io = {NULL};
 80028f8:	f107 0318 	add.w	r3, r7, #24
 80028fc:	2220      	movs	r2, #32
 80028fe:	2100      	movs	r1, #0
 8002900:	4618      	mov	r0, r3
 8002902:	f014 fbb1 	bl	8017068 <memset>
    OD_stream_t* stream = &io.stream;
 8002906:	f107 0318 	add.w	r3, r7, #24
 800290a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t countWritten = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8002910:	f107 0218 	add.w	r2, r7, #24
 8002914:	7af9      	ldrb	r1, [r7, #11]
 8002916:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f7ff fe7d 	bl	8002618 <OD_getSub>
 800291e:	4603      	mov	r3, r0
 8002920:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    if (ret != ODR_OK) {
 8002924:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <OD_set_value+0x54>
        return ret;
 800292c:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8002930:	e00e      	b.n	8002950 <OD_set_value+0x72>
    }
    if (stream->dataLength != len) {
 8002932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <OD_set_value+0x62>
        return ODR_TYPE_MISMATCH;
 800293c:	230b      	movs	r3, #11
 800293e:	e007      	b.n	8002950 <OD_set_value+0x72>
    }

    return io.write(stream, val, len, &countWritten);
 8002940:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800294c:	47a0      	blx	r4
 800294e:	4603      	mov	r3, r0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3744      	adds	r7, #68	@ 0x44
 8002954:	46bd      	mov	sp, r7
 8002956:	bd90      	pop	{r4, r7, pc}

08002958 <OD_getPtr>:

void*
OD_getPtr(const OD_entry_t* entry, uint8_t subIndex, OD_size_t len, ODR_t* err) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b08e      	sub	sp, #56	@ 0x38
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	460b      	mov	r3, r1
 8002966:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t* stream = &io.stream;
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	633b      	str	r3, [r7, #48]	@ 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 800296e:	f107 0210 	add.w	r2, r7, #16
 8002972:	7af9      	ldrb	r1, [r7, #11]
 8002974:	2301      	movs	r3, #1
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7ff fe4e 	bl	8002618 <OD_getSub>
 800297c:	4603      	mov	r3, r0
 800297e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (errCopy == ODR_OK) {
 8002982:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002986:	2b00      	cmp	r3, #0
 8002988:	d116      	bne.n	80029b8 <OD_getPtr+0x60>
        if ((stream->dataOrig == NULL) || (stream->dataLength == 0U)) {
 800298a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <OD_getPtr+0x42>
 8002992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d103      	bne.n	80029a2 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 800299a:	2309      	movs	r3, #9
 800299c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80029a0:	e00a      	b.n	80029b8 <OD_getPtr+0x60>
        } else if ((len != 0U) && (len != stream->dataLength)) {
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <OD_getPtr+0x60>
 80029a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d002      	beq.n	80029b8 <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 80029b2:	230b      	movs	r3, #11
 80029b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }

    if (err != NULL) {
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <OD_getPtr+0x6e>
        *err = errCopy;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80029c4:	701a      	strb	r2, [r3, #0]
    }

    return (errCopy == ODR_OK) ? stream->dataOrig : NULL;
 80029c6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <OD_getPtr+0x7c>
 80029ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	e000      	b.n	80029d6 <OD_getPtr+0x7e>
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3738      	adds	r7, #56	@ 0x38
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <CO_getUint8>:
CO_getUint8(const void* buf) {
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	73fb      	strb	r3, [r7, #15]
    return value;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <CO_getUint16>:
CO_getUint16(const void* buf) {
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	81fb      	strh	r3, [r7, #14]
    return value;
 8002a0a:	89fb      	ldrh	r3, [r7, #14]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60fb      	str	r3, [r7, #12]
    return value;
 8002a26:	68fb      	ldr	r3, [r7, #12]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <CO_setUint32>:
CO_setUint32(void* buf, uint32_t value) {
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8002a44:	2304      	movs	r3, #4
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <OD_getIndex+0x14>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	e000      	b.n	8002a68 <OD_getIndex+0x16>
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8002a84:	2305      	movs	r3, #5
 8002a86:	e003      	b.n	8002a90 <OD_extension_init+0x1c>
    entry->extension = extension;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002aac:	7af9      	ldrb	r1, [r7, #11]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7ff fed4 	bl	8002864 <OD_get_value>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b086      	sub	sp, #24
 8002aca:	af02      	add	r7, sp, #8
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	603b      	str	r3, [r7, #0]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002ad6:	7af9      	ldrb	r1, [r7, #11]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	2302      	movs	r3, #2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f7ff febf 	bl	8002864 <OD_get_value>
 8002ae6:	4603      	mov	r3, r0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	460b      	mov	r3, r1
 8002afe:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002b00:	7af9      	ldrb	r1, [r7, #11]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	2304      	movs	r3, #4
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f7ff feaa 	bl	8002864 <OD_get_value>
 8002b10:	4603      	mov	r3, r0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <OD_write_dummy>:
 * Custom function for write dummy OD object. Will be used only from RPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_dummy(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002b1a:	b480      	push	{r7}
 8002b1c:	b085      	sub	sp, #20
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    if (countWritten != NULL) {
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <OD_write_dummy+0x1a>
        *countWritten = count;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	601a      	str	r2, [r3, #0]
    }
    return ODR_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <OD_read_dummy>:
 * Custom function for read dummy OD object. Will be used only from TPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_dummy(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	603b      	str	r3, [r7, #0]
    if ((buf == NULL) || (stream == NULL) || (countRead == NULL)) {
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <OD_read_dummy+0x20>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <OD_read_dummy+0x20>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8002b62:	2309      	movs	r3, #9
 8002b64:	e010      	b.n	8002b88 <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d902      	bls.n	8002b76 <OD_read_dummy+0x34>
        count = stream->dataLength;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	607b      	str	r3, [r7, #4]
    }

    (void)memset(buf, 0, count);
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	2100      	movs	r1, #0
 8002b7a:	68b8      	ldr	r0, [r7, #8]
 8002b7c:	f014 fa74 	bl	8017068 <memset>

    *countRead = count;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <PDOconfigMap>:
 * @param OD Object Dictionary.
 *
 * @return ODR_OK on success, otherwise error reason.
 */
static ODR_t
PDOconfigMap(CO_PDO_common_t* PDO, uint32_t map, uint8_t mapIndex, bool_t isRPDO, OD_t* OD) {
 8002b90:	b5b0      	push	{r4, r5, r7, lr}
 8002b92:	b092      	sub	sp, #72	@ 0x48
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t)(map >> 16);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	0c1b      	lsrs	r3, r3, #16
 8002ba4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t subIndex = (uint8_t)(map >> 8);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t mappedLengthBits = (uint8_t)map;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 8002bb6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002bba:	08db      	lsrs	r3, r3, #3
 8002bbc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    OD_IO_t* OD_IO = &PDO->OD_IO[mapIndex];
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	015b      	lsls	r3, r3, #5
 8002bc4:	3310      	adds	r3, #16
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4413      	add	r3, r2
 8002bca:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8002bcc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d901      	bls.n	8002bd8 <PDOconfigMap+0x48>
        return ODR_MAP_LEN; /* PDO length exceeded */
 8002bd4:	2307      	movs	r3, #7
 8002bd6:	e090      	b.n	8002cfa <PDOconfigMap+0x16a>
    }

    /* is there a reference to the dummy entry */
    if ((index < 0x20U) && (subIndex == 0U)) {
 8002bd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002bdc:	2b1f      	cmp	r3, #31
 8002bde:	d81a      	bhi.n	8002c16 <PDOconfigMap+0x86>
 8002be0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d116      	bne.n	8002c16 <PDOconfigMap+0x86>
        OD_stream_t* stream = &OD_IO->stream;
 8002be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bea:	63bb      	str	r3, [r7, #56]	@ 0x38
        (void)memset(stream, 0, sizeof(OD_stream_t));
 8002bec:	2218      	movs	r2, #24
 8002bee:	2100      	movs	r1, #0
 8002bf0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002bf2:	f014 fa39 	bl	8017068 <memset>
        stream->dataLength = mappedLength;
 8002bf6:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bfc:	609a      	str	r2, [r3, #8]
        stream->dataOffset = mappedLength;
 8002bfe:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8002c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c04:	60da      	str	r2, [r3, #12]
        OD_IO->read = OD_read_dummy;
 8002c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c08:	4a3e      	ldr	r2, [pc, #248]	@ (8002d04 <PDOconfigMap+0x174>)
 8002c0a:	619a      	str	r2, [r3, #24]
        OD_IO->write = OD_write_dummy;
 8002c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d08 <PDOconfigMap+0x178>)
 8002c10:	61da      	str	r2, [r3, #28]
        return ODR_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e071      	b.n	8002cfa <PDOconfigMap+0x16a>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t* entry = OD_find(OD, index);
 8002c16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002c1e:	f7ff fc9f 	bl	8002560 <OD_find>
 8002c22:	6378      	str	r0, [r7, #52]	@ 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 8002c24:	f107 0210 	add.w	r2, r7, #16
 8002c28:	f897 1045 	ldrb.w	r1, [r7, #69]	@ 0x45
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002c30:	f7ff fcf2 	bl	8002618 <OD_getSub>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (odRet != ODR_OK) {
 8002c3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <PDOconfigMap+0xb8>
        return odRet;
 8002c42:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002c46:	e058      	b.n	8002cfa <PDOconfigMap+0x16a>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? (OD_attr_t)(ODA_RPDO) : (OD_attr_t)(ODA_TPDO);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <PDOconfigMap+0xc2>
 8002c4e:	2308      	movs	r3, #8
 8002c50:	e000      	b.n	8002c54 <PDOconfigMap+0xc4>
 8002c52:	2304      	movs	r3, #4
 8002c54:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    if (((OD_IOcopy.stream.attribute & testAttribute) == 0U) || ((mappedLengthBits & 0x07U) != 0U)
 8002c58:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c5c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002c60:	4013      	ands	r3, r2
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <PDOconfigMap+0xee>
 8002c68:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d104      	bne.n	8002c7e <PDOconfigMap+0xee>
        || (OD_IOcopy.stream.dataLength < mappedLength)) {
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d201      	bcs.n	8002c82 <PDOconfigMap+0xf2>
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 8002c7e:	2306      	movs	r3, #6
 8002c80:	e03b      	b.n	8002cfa <PDOconfigMap+0x16a>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 8002c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c84:	461d      	mov	r5, r3
 8002c86:	f107 0410 	add.w	r4, r7, #16
 8002c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c92:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    OD_IO->stream.dataOffset = mappedLength;
 8002c96:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8002c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c9c:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d129      	bne.n	8002cf8 <PDOconfigMap+0x168>
        if ((subIndex < (OD_FLAGS_PDO_SIZE * 8U)) && (entry->extension != NULL)) {
 8002ca4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002ca8:	2b1f      	cmp	r3, #31
 8002caa:	d81f      	bhi.n	8002cec <PDOconfigMap+0x15c>
 8002cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d01b      	beq.n	8002cec <PDOconfigMap+0x15c>
            PDO->flagPDObyte[mapIndex] = &entry->extension->flagsPDO[subIndex >> 3];
 8002cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb6:	6899      	ldr	r1, [r3, #8]
 8002cb8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002cbc:	08db      	lsrs	r3, r3, #3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	79fa      	ldrb	r2, [r7, #7]
 8002cc2:	3308      	adds	r3, #8
 8002cc4:	440b      	add	r3, r1
 8002cc6:	1d19      	adds	r1, r3, #4
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3244      	adds	r2, #68	@ 0x44
 8002ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1U << (subIndex & 0x07U);
 8002cd0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	2201      	movs	r2, #1
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	b2d1      	uxtb	r1, r2
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	460a      	mov	r2, r1
 8002ce6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 8002cea:	e005      	b.n	8002cf8 <PDOconfigMap+0x168>
        } else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8002cec:	79fa      	ldrb	r2, [r7, #7]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	3244      	adds	r2, #68	@ 0x44
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3748      	adds	r7, #72	@ 0x48
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bdb0      	pop	{r4, r5, r7, pc}
 8002d02:	bf00      	nop
 8002d04:	08002b43 	.word	0x08002b43
 8002d08:	08002b1b 	.word	0x08002b1b

08002d0c <PDO_initMapping>:
 *
 * @return #CO_ReturnError_t CO_ERROR_NO on success.
 */
static CO_ReturnError_t
PDO_initMapping(CO_PDO_common_t* PDO, OD_t* OD, OD_entry_t* OD_PDOMapPar, bool_t isRPDO, uint32_t* errInfo,
                uint32_t* erroneousMap) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08c      	sub	sp, #48	@ 0x30
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t mappedObjectsCount = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 8002d22:	f107 021b 	add.w	r2, r7, #27
 8002d26:	2301      	movs	r3, #1
 8002d28:	2100      	movs	r1, #0
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff feb6 	bl	8002a9c <OD_get_u8>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8002d36:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00c      	beq.n	8002d58 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d006      	beq.n	8002d52 <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff fe84 	bl	8002a52 <OD_getIndex>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	021a      	lsls	r2, r3, #8
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d50:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002d52:	f06f 030b 	mvn.w	r3, #11
 8002d56:	e07f      	b.n	8002e58 <PDO_initMapping+0x14c>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d5e:	e05b      	b.n	8002e18 <PDO_initMapping+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8002d60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d64:	015b      	lsls	r3, r3, #5
 8002d66:	3310      	adds	r3, #16
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1U, &map, true);
 8002d72:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d76:	3301      	adds	r3, #1
 8002d78:	b2d9      	uxtb	r1, r3
 8002d7a:	f107 0214 	add.w	r2, r7, #20
 8002d7e:	2301      	movs	r3, #1
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7ff feb5 	bl	8002af0 <OD_get_u32>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 8002d8c:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002d90:	2b0e      	cmp	r3, #14
 8002d92:	d03b      	beq.n	8002e0c <PDO_initMapping+0x100>
            continue;
        }
        if (odRet != ODR_OK) {
 8002d94:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00f      	beq.n	8002dbc <PDO_initMapping+0xb0>
            if (errInfo != NULL) {
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <PDO_initMapping+0xaa>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8) | i;
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff fe55 	bl	8002a52 <OD_getIndex>
 8002da8:	4603      	mov	r3, r0
 8002daa:	021a      	lsls	r2, r3, #8
 8002dac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002db0:	431a      	orrs	r2, r3
 8002db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db4:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8002db6:	f06f 030b 	mvn.w	r3, #11
 8002dba:	e04d      	b.n	8002e58 <PDO_initMapping+0x14c>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 8002dbc:	6979      	ldr	r1, [r7, #20]
 8002dbe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f7ff fee1 	bl	8002b90 <PDOconfigMap>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet != ODR_OK) {
 8002dd4:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00c      	beq.n	8002df6 <PDO_initMapping+0xea>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	22ff      	movs	r2, #255	@ 0xff
 8002de6:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0U) {
 8002de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <PDO_initMapping+0xea>
                *erroneousMap = map;
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df4:	601a      	str	r2, [r3, #0]
            }
        }

        if (i < mappedObjectsCount) {
 8002df6:	7efb      	ldrb	r3, [r7, #27]
 8002df8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d206      	bcs.n	8002e0e <PDO_initMapping+0x102>
            pdoDataLength += OD_IO->stream.dataOffset;
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e06:	4413      	add	r3, r2
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e0a:	e000      	b.n	8002e0e <PDO_initMapping+0x102>
            continue;
 8002e0c:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002e0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e12:	3301      	adds	r3, #1
 8002e14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e1c:	2b07      	cmp	r3, #7
 8002e1e:	d99f      	bls.n	8002d60 <PDO_initMapping+0x54>
        }
    }
    if ((pdoDataLength > CO_PDO_MAX_SIZE) || ((pdoDataLength == 0U) && (mappedObjectsCount > 0U))) {
 8002e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d805      	bhi.n	8002e32 <PDO_initMapping+0x126>
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d109      	bne.n	8002e40 <PDO_initMapping+0x134>
 8002e2c:	7efb      	ldrb	r3, [r7, #27]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d006      	beq.n	8002e40 <PDO_initMapping+0x134>
        if (*erroneousMap == 0U) {
 8002e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d102      	bne.n	8002e40 <PDO_initMapping+0x134>
            *erroneousMap = 1;
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
        }
    }

    if (*erroneousMap == 0U) {
 8002e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d106      	bne.n	8002e56 <PDO_initMapping+0x14a>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002e50:	7efa      	ldrb	r2, [r7, #27]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3728      	adds	r7, #40	@ 0x28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <OD_write_PDO_mapping>:
 * Custom function for writing OD object "PDO mapping parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_PDO_mapping(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08e      	sub	sp, #56	@ 0x38
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES)) {
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d009      	beq.n	8002e88 <OD_write_PDO_mapping+0x28>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d006      	beq.n	8002e88 <OD_write_PDO_mapping+0x28>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <OD_write_PDO_mapping+0x28>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	7d1b      	ldrb	r3, [r3, #20]
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d901      	bls.n	8002e8c <OD_write_PDO_mapping+0x2c>
        return ODR_DEV_INCOMPAT;
 8002e88:	2309      	movs	r3, #9
 8002e8a:	e07e      	b.n	8002f8a <OD_write_PDO_mapping+0x12a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t* PDO = stream->object;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	627b      	str	r3, [r7, #36]	@ 0x24

    /* PDO must be disabled before mapping configuration */
    if ((PDO->valid) || ((PDO->mappedObjectsCount != 0U) && (stream->subIndex > 0U))) {
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d107      	bne.n	8002eaa <OD_write_PDO_mapping+0x4a>
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	7b5b      	ldrb	r3, [r3, #13]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <OD_write_PDO_mapping+0x4e>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	7d1b      	ldrb	r3, [r3, #20]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e06d      	b.n	8002f8a <OD_write_PDO_mapping+0x12a>
    }

    if (stream->subIndex == 0U) {
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	7d1b      	ldrb	r3, [r3, #20]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d145      	bne.n	8002f42 <OD_write_PDO_mapping+0xe2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 8002eb6:	68b8      	ldr	r0, [r7, #8]
 8002eb8:	f7ff fd91 	bl	80029de <CO_getUint8>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	77bb      	strb	r3, [r7, #30]
        size_t pdoDataLength = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8002ec4:	7fbb      	ldrb	r3, [r7, #30]
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d901      	bls.n	8002ece <OD_write_PDO_mapping+0x6e>
            return ODR_MAP_LEN;
 8002eca:	2307      	movs	r3, #7
 8002ecc:	e05d      	b.n	8002f8a <OD_write_PDO_mapping+0x12a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ed4:	e01b      	b.n	8002f0e <OD_write_PDO_mapping+0xae>
            OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8002ed6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002eda:	015b      	lsls	r3, r3, #5
 8002edc:	3310      	adds	r3, #16
 8002ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee0:	4413      	add	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
            size_t dataLength = (size_t)OD_IO->stream.dataLength;
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	617b      	str	r3, [r7, #20]
            size_t mappedLength = (size_t)OD_IO->stream.dataOffset;
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	613b      	str	r3, [r7, #16]

            if (mappedLength > dataLength) {
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d901      	bls.n	8002efc <OD_write_PDO_mapping+0x9c>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 8002ef8:	2306      	movs	r3, #6
 8002efa:	e046      	b.n	8002f8a <OD_write_PDO_mapping+0x12a>
            }
            pdoDataLength += mappedLength;
 8002efc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4413      	add	r3, r2
 8002f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002f04:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f0e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002f12:	7fbb      	ldrb	r3, [r7, #30]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d3de      	bcc.n	8002ed6 <OD_write_PDO_mapping+0x76>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 8002f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d901      	bls.n	8002f22 <OD_write_PDO_mapping+0xc2>
            return ODR_MAP_LEN;
 8002f1e:	2307      	movs	r3, #7
 8002f20:	e033      	b.n	8002f8a <OD_write_PDO_mapping+0x12a>
        }
        if ((pdoDataLength == 0U) && (mappedObjectsCount > 0U)) {
 8002f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d104      	bne.n	8002f32 <OD_write_PDO_mapping+0xd2>
 8002f28:	7fbb      	ldrb	r3, [r7, #30]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <OD_write_PDO_mapping+0xd2>
            return ODR_INVALID_VALUE;
 8002f2e:	230f      	movs	r3, #15
 8002f30:	e02b      	b.n	8002f8a <OD_write_PDO_mapping+0x12a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	7fba      	ldrb	r2, [r7, #30]
 8002f3e:	735a      	strb	r2, [r3, #13]
 8002f40:	e01c      	b.n	8002f7c <OD_write_PDO_mapping+0x11c>
    } else {
        uint32_t val = CO_getUint32(buf);
 8002f42:	68b8      	ldr	r0, [r7, #8]
 8002f44:	f7ff fd68 	bl	8002a18 <CO_getUint32>
 8002f48:	6238      	str	r0, [r7, #32]
        ODR_t odRet = PDOconfigMap(PDO, val, stream->subIndex - 1U, PDO->isRPDO, PDO->OD);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	7d1b      	ldrb	r3, [r3, #20]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	f8d3 1138 	ldr.w	r1, [r3, #312]	@ 0x138
 8002f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	460b      	mov	r3, r1
 8002f62:	6a39      	ldr	r1, [r7, #32]
 8002f64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f66:	f7ff fe13 	bl	8002b90 <PDOconfigMap>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8002f6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <OD_write_PDO_mapping+0x11c>
            return odRet;
 8002f76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f7a:	e006      	b.n	8002f8a <OD_write_PDO_mapping+0x12a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f7ff fa63 	bl	800244e <OD_writeOriginal>
 8002f88:	4603      	mov	r3, r0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3730      	adds	r7, #48	@ 0x30
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <OD_read_PDO_commParam>:
 * Custom function for reading OD object "PDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_PDO_commParam(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b088      	sub	sp, #32
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f7ff f9f9 	bl	800239e <OD_readOriginal>
 8002fac:	4603      	mov	r3, r0
 8002fae:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if ((returnCode == ODR_OK) && (stream->subIndex == 1U) && (*countRead == 4U)) {
 8002fb0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d134      	bne.n	8003022 <OD_read_PDO_commParam+0x90>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	7d1b      	ldrb	r3, [r3, #20]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d130      	bne.n	8003022 <OD_read_PDO_commParam+0x90>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d12c      	bne.n	8003022 <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t* PDO = stream->object;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 8002fce:	68b8      	ldr	r0, [r7, #8]
 8002fd0:	f7ff fd22 	bl	8002a18 <CO_getUint32>
 8002fd4:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fde:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if ((CAN_ID != 0U) && (CAN_ID == (PDO->preDefinedCanId & 0xFF80U))) {
 8002fe0:	8a7b      	ldrh	r3, [r7, #18]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d011      	beq.n	800300a <OD_read_PDO_commParam+0x78>
 8002fe6:	8a7a      	ldrh	r2, [r7, #18]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8002fee:	4619      	mov	r1, r3
 8002ff0:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002ff4:	400b      	ands	r3, r1
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d107      	bne.n	800300a <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000U) | PDO->preDefinedCanId;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	041b      	lsls	r3, r3, #16
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	f8b2 2142 	ldrh.w	r2, [r2, #322]	@ 0x142
 8003006:	4313      	orrs	r3, r2
 8003008:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) {
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d103      	bne.n	800301a <OD_read_PDO_commParam+0x88>
            COB_ID |= 0x80000000U;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003018:	61fb      	str	r3, [r7, #28]
        }

        (void)CO_setUint32(buf, COB_ID);
 800301a:	69f9      	ldr	r1, [r7, #28]
 800301c:	68b8      	ldr	r0, [r7, #8]
 800301e:	f7ff fd09 	bl	8002a34 <CO_setUint32>
    }

    return returnCode;
 8003022:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3720      	adds	r7, #32
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <OD_write_18xx>:
 * Custom function for writing OD object "TPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_18xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b093      	sub	sp, #76	@ 0x4c
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U)) {
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <OD_write_18xx+0x26>
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <OD_write_18xx+0x26>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <OD_write_18xx+0x26>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b04      	cmp	r3, #4
 8003054:	d901      	bls.n	800305a <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8003056:	2309      	movs	r3, #9
 8003058:	e136      	b.n	80032c8 <OD_write_18xx+0x298>
    }

    CO_TPDO_t* TPDO = stream->object;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	63bb      	str	r3, [r7, #56]	@ 0x38
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8003060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003062:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	4618      	mov	r0, r3
 800306e:	f014 f89e 	bl	80171ae <memcpy>

    switch (stream->subIndex) {
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	7d1b      	ldrb	r3, [r3, #20]
 8003076:	3b01      	subs	r3, #1
 8003078:	2b05      	cmp	r3, #5
 800307a:	f200 811a 	bhi.w	80032b2 <OD_write_18xx+0x282>
 800307e:	a201      	add	r2, pc, #4	@ (adr r2, 8003084 <OD_write_18xx+0x54>)
 8003080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003084:	0800309d 	.word	0x0800309d
 8003088:	080031d3 	.word	0x080031d3
 800308c:	08003235 	.word	0x08003235
 8003090:	080032b3 	.word	0x080032b3
 8003094:	08003263 	.word	0x08003263
 8003098:	08003287 	.word	0x08003287
        case 1: { /* COB-ID used by PDO */
            uint32_t COB_ID = CO_getUint32(buf);
 800309c:	68b8      	ldr	r0, [r7, #8]
 800309e:	f7ff fcbb 	bl	8002a18 <CO_getUint32>
 80030a2:	6238      	str	r0, [r7, #32]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	0fdb      	lsrs	r3, r3, #31
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	61fb      	str	r3, [r7, #28]

            /* bits 11...29 must be zero, PDO must be disabled on change, CAN_ID == 0 is
             * not allowed, mapping must be configured before enabling the PDO */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (PDO->valid && (CAN_ID != PDO->configuredCanId)))
 80030b8:	6a3a      	ldr	r2, [r7, #32]
 80030ba:	4b85      	ldr	r3, [pc, #532]	@ (80032d0 <OD_write_18xx+0x2a0>)
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d13d      	bne.n	800313e <OD_write_18xx+0x10e>
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d009      	beq.n	80030dc <OD_write_18xx+0xac>
 80030c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <OD_write_18xx+0xac>
 80030d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d2:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 80030d6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80030d8:	429a      	cmp	r2, r3
 80030da:	d130      	bne.n	800313e <OD_write_18xx+0x10e>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d026      	beq.n	8003130 <OD_write_18xx+0x100>
 80030e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80030e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80030e6:	d92a      	bls.n	800313e <OD_write_18xx+0x10e>
 80030e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80030ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ee:	d903      	bls.n	80030f8 <OD_write_18xx+0xc8>
 80030f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80030f2:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80030f6:	d922      	bls.n	800313e <OD_write_18xx+0x10e>
 80030f8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80030fa:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80030fe:	d903      	bls.n	8003108 <OD_write_18xx+0xd8>
 8003100:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003102:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003106:	d31a      	bcc.n	800313e <OD_write_18xx+0x10e>
 8003108:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800310a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800310e:	d903      	bls.n	8003118 <OD_write_18xx+0xe8>
 8003110:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003112:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8003116:	d312      	bcc.n	800313e <OD_write_18xx+0x10e>
 8003118:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800311a:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 800311e:	d303      	bcc.n	8003128 <OD_write_18xx+0xf8>
 8003120:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003122:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003126:	d30a      	bcc.n	800313e <OD_write_18xx+0x10e>
 8003128:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800312a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800312e:	d806      	bhi.n	800313e <OD_write_18xx+0x10e>
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <OD_write_18xx+0x112>
 8003136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003138:	7b5b      	ldrb	r3, [r3, #13]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <OD_write_18xx+0x112>
                return ODR_INVALID_VALUE;
 800313e:	230f      	movs	r3, #15
 8003140:	e0c2      	b.n	80032c8 <OD_write_18xx+0x298>
            }

            /* parameter changed? */
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId)) {
 8003142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	429a      	cmp	r2, r3
 800314a:	d106      	bne.n	800315a <OD_write_18xx+0x12a>
 800314c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8003152:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8003154:	429a      	cmp	r2, r3
 8003156:	f000 80ae 	beq.w	80032b6 <OD_write_18xx+0x286>
                /* if default CAN-ID is written, store to OD without Node-ID */
                if (CAN_ID == PDO->preDefinedCanId) {
 800315a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315c:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8003160:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8003162:	429a      	cmp	r2, r3
 8003164:	d108      	bne.n	8003178 <OD_write_18xx+0x148>
                    (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fc5e 	bl	8002a34 <CO_setUint32>
                }
                if (!valid) {
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <OD_write_18xx+0x152>
                    CAN_ID = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                }

                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 8003182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003184:	6858      	ldr	r0, [r3, #4]
 8003186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003188:	f8b3 1140 	ldrh.w	r1, [r3, #320]	@ 0x140
 800318c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318e:	7b1b      	ldrb	r3, [r3, #12]
                    PDO->CANdev, PDO->CANdevIdx, CAN_ID, false, PDO->dataLength,
                    TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 8003190:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003192:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 8003196:	2af0      	cmp	r2, #240	@ 0xf0
 8003198:	bf94      	ite	ls
 800319a:	2201      	movls	r2, #1
 800319c:	2200      	movhi	r2, #0
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	4614      	mov	r4, r2
 80031a2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80031a4:	9401      	str	r4, [sp, #4]
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	2300      	movs	r3, #0
 80031aa:	f004 fa45 	bl	8007638 <CO_CANtxBufferInit>
 80031ae:	61b8      	str	r0, [r7, #24]

                if (CANtxBuff == NULL) {
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <OD_write_18xx+0x18a>
                    return ODR_DEV_INCOMPAT;
 80031b6:	2309      	movs	r3, #9
 80031b8:	e086      	b.n	80032c8 <OD_write_18xx+0x298>
                }

                TPDO->CANtxBuff = CANtxBuff;
 80031ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
                PDO->valid = valid;
 80031c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c4:	69fa      	ldr	r2, [r7, #28]
 80031c6:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 80031c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ca:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80031cc:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
            }
            break;
 80031d0:	e071      	b.n	80032b6 <OD_write_18xx+0x286>
        }

        case 2: { /* transmission type */ uint8_t transmissionType = CO_getUint8(buf);
 80031d2:	68b8      	ldr	r0, [r7, #8]
 80031d4:	f7ff fc03 	bl	80029de <CO_getUint8>
 80031d8:	4603      	mov	r3, r0
 80031da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
            if ((transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 80031de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031e2:	2bf0      	cmp	r3, #240	@ 0xf0
 80031e4:	d905      	bls.n	80031f2 <OD_write_18xx+0x1c2>
                && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 80031e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031ea:	2bfd      	cmp	r3, #253	@ 0xfd
 80031ec:	d801      	bhi.n	80031f2 <OD_write_18xx+0x1c2>
                return ODR_INVALID_VALUE;
 80031ee:	230f      	movs	r3, #15
 80031f0:	e06a      	b.n	80032c8 <OD_write_18xx+0x298>
            }
            TPDO->CANtxBuff->syncFlag = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 80031f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031f6:	2bf0      	cmp	r3, #240	@ 0xf0
 80031f8:	bf94      	ite	ls
 80031fa:	2301      	movls	r3, #1
 80031fc:	2300      	movhi	r3, #0
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003202:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8003206:	615a      	str	r2, [r3, #20]
            TPDO->syncCounter = 255;
 8003208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800320a:	22ff      	movs	r2, #255	@ 0xff
 800320c:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#else
            if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
                return ODR_INVALID_VALUE;
            }
#endif
            TPDO->transmissionType = transmissionType;
 8003210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003212:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003216:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
            TPDO->sendRequest = true;
 800321a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800321c:	2201      	movs	r2, #1
 800321e:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = 0;
 8003222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003224:	2200      	movs	r2, #0
 8003226:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            TPDO->eventTimer = 0;
 800322a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800322c:	2200      	movs	r2, #0
 800322e:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
#endif
            break;
 8003232:	e041      	b.n	80032b8 <OD_write_18xx+0x288>
        }

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        case 3: { /* inhibit time */
            if (PDO->valid) {
 8003234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <OD_write_18xx+0x210>
                return ODR_INVALID_VALUE;
 800323c:	230f      	movs	r3, #15
 800323e:	e043      	b.n	80032c8 <OD_write_18xx+0x298>
            }
            uint32_t inhibitTime = CO_getUint16(buf);
 8003240:	68b8      	ldr	r0, [r7, #8]
 8003242:	f7ff fbda 	bl	80029fa <CO_getUint16>
 8003246:	4603      	mov	r3, r0
 8003248:	62bb      	str	r3, [r7, #40]	@ 0x28
            TPDO->inhibitTime_us = inhibitTime * 100U;
 800324a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324c:	2264      	movs	r2, #100	@ 0x64
 800324e:	fb03 f202 	mul.w	r2, r3, r2
 8003252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003254:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
            TPDO->inhibitTimer = 0;
 8003258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800325a:	2200      	movs	r2, #0
 800325c:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            break;
 8003260:	e02a      	b.n	80032b8 <OD_write_18xx+0x288>
        }

        case 5: { /* event-timer */
            uint32_t eventTime = CO_getUint16(buf);
 8003262:	68b8      	ldr	r0, [r7, #8]
 8003264:	f7ff fbc9 	bl	80029fa <CO_getUint16>
 8003268:	4603      	mov	r3, r0
 800326a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            TPDO->eventTime_us = eventTime * 1000U;
 800326c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003272:	fb03 f202 	mul.w	r2, r3, r2
 8003276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003278:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
            TPDO->eventTimer = 0;
 800327c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327e:	2200      	movs	r2, #0
 8003280:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            break;
 8003284:	e018      	b.n	80032b8 <OD_write_18xx+0x288>
        }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        case 6: { /* SYNC start value */
            uint8_t syncStartValue = CO_getUint8(buf);
 8003286:	68b8      	ldr	r0, [r7, #8]
 8003288:	f7ff fba9 	bl	80029de <CO_getUint8>
 800328c:	4603      	mov	r3, r0
 800328e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if (PDO->valid || (syncStartValue > 240U)) {
 8003292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d103      	bne.n	80032a2 <OD_write_18xx+0x272>
 800329a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800329e:	2bf0      	cmp	r3, #240	@ 0xf0
 80032a0:	d901      	bls.n	80032a6 <OD_write_18xx+0x276>
                return ODR_INVALID_VALUE;
 80032a2:	230f      	movs	r3, #15
 80032a4:	e010      	b.n	80032c8 <OD_write_18xx+0x298>
            }
            TPDO->syncStartValue = syncStartValue;
 80032a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a8:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80032ac:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
            break;
 80032b0:	e002      	b.n	80032b8 <OD_write_18xx+0x288>
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <OD_write_18xx+0x288>
            break;
 80032b6:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 80032b8:	f107 0114 	add.w	r1, r7, #20
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f7ff f8c4 	bl	800244e <OD_writeOriginal>
 80032c6:	4603      	mov	r3, r0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3744      	adds	r7, #68	@ 0x44
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd90      	pop	{r4, r7, pc}
 80032d0:	3ffff800 	.word	0x3ffff800

080032d4 <CO_TPDO_init>:
CO_TPDO_init(CO_TPDO_t* TPDO, OD_t* OD, CO_EM_t* em,
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
             CO_SYNC_t* SYNC,
#endif
             uint16_t preDefinedCanId, OD_entry_t* OD_18xx_TPDOCommPar, OD_entry_t* OD_1Axx_TPDOMapPar,
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint32_t* errInfo) {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08e      	sub	sp, #56	@ 0x38
 80032d8:	af02      	add	r7, sp, #8
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
    ODR_t odRet;

    /* verify arguments */
    if ((TPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_18xx_TPDOCommPar == NULL) || (OD_1Axx_TPDOMapPar == NULL)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00e      	beq.n	800330a <CO_TPDO_init+0x36>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <CO_TPDO_init+0x36>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <CO_TPDO_init+0x36>
 80032f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <CO_TPDO_init+0x36>
 80032fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <CO_TPDO_init+0x36>
        || (CANdevTx == NULL)) {
 8003304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <CO_TPDO_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800330a:	f04f 33ff 	mov.w	r3, #4294967295
 800330e:	e144      	b.n	800359a <CO_TPDO_init+0x2c6>
    }

    /* clear object */
    (void)memset(TPDO, 0, sizeof(CO_TPDO_t));
 8003310:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8003314:	2100      	movs	r1, #0
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f013 fea6 	bl	8017068 <memset>

    /* Configure object variables */
    PDO->em = em;
 800331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 8003322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003324:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003326:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO, OD, OD_1Axx_TPDOMapPar, false, errInfo, &erroneousMap);
 800332c:	f107 031c 	add.w	r3, r7, #28
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2300      	movs	r3, #0
 8003338:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800333e:	f7ff fce5 	bl	8002d0c <PDO_initMapping>
 8003342:	4603      	mov	r3, r0
 8003344:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (ret != CO_ERROR_NO) {
 8003348:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <CO_TPDO_init+0x82>
        return ret;
 8003350:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8003354:	e121      	b.n	800359a <CO_TPDO_init+0x2c6>
    }

    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8003356:	23fe      	movs	r3, #254	@ 0xfe
 8003358:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 800335a:	f107 021b 	add.w	r2, r7, #27
 800335e:	2301      	movs	r3, #1
 8003360:	2102      	movs	r1, #2
 8003362:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003364:	f7ff fb9a 	bl	8002a9c <OD_get_u8>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 800336e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00e      	beq.n	8003394 <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 8003376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2U;
 800337c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800337e:	f7ff fb68 	bl	8002a52 <OD_getIndex>
 8003382:	4603      	mov	r3, r0
 8003384:	021b      	lsls	r3, r3, #8
 8003386:	f043 0202 	orr.w	r2, r3, #2
 800338a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800338c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800338e:	f06f 030b 	mvn.w	r3, #11
 8003392:	e102      	b.n	800359a <CO_TPDO_init+0x2c6>
    }
    if ((transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)
 8003394:	7efb      	ldrb	r3, [r7, #27]
 8003396:	2bfd      	cmp	r3, #253	@ 0xfd
 8003398:	d804      	bhi.n	80033a4 <CO_TPDO_init+0xd0>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 800339a:	7efb      	ldrb	r3, [r7, #27]
 800339c:	2bf0      	cmp	r3, #240	@ 0xf0
 800339e:	d901      	bls.n	80033a4 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 80033a0:	23fe      	movs	r3, #254	@ 0xfe
 80033a2:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 80033a4:	7efa      	ldrb	r2, [r7, #27]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
    TPDO->sendRequest = true;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 80033b8:	f107 0214 	add.w	r2, r7, #20
 80033bc:	2301      	movs	r3, #1
 80033be:	2101      	movs	r1, #1
 80033c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80033c2:	f7ff fb95 	bl	8002af0 <OD_get_u32>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 80033cc:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00e      	beq.n	80033f2 <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 80033d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1U;
 80033da:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80033dc:	f7ff fb39 	bl	8002a52 <OD_getIndex>
 80033e0:	4603      	mov	r3, r0
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	f043 0201 	orr.w	r2, r3, #1
 80033e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033ea:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80033ec:	f06f 030b 	mvn.w	r3, #11
 80033f0:	e0d3      	b.n	800359a <CO_TPDO_init+0x2c6>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	0fdb      	lsrs	r3, r3, #31
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003404:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 8003406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00d      	beq.n	8003428 <CO_TPDO_init+0x154>
 800340c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340e:	7b5b      	ldrb	r3, [r3, #13]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <CO_TPDO_init+0x146>
 8003414:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <CO_TPDO_init+0x154>
        valid = false;
 800341a:	2300      	movs	r3, #0
 800341c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0U) {
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <CO_TPDO_init+0x154>
            erroneousMap = 1;
 8003424:	2301      	movs	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00e      	beq.n	800344c <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 800342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d001      	beq.n	800343c <CO_TPDO_init+0x168>
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	e000      	b.n	800343e <CO_TPDO_init+0x16a>
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8003444:	221a      	movs	r2, #26
 8003446:	2101      	movs	r1, #1
 8003448:	f7fe f971 	bl	800172e <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 800344c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <CO_TPDO_init+0x182>
        CAN_ID = 0;
 8003452:	2300      	movs	r3, #0
 8003454:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 8003456:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <CO_TPDO_init+0x19a>
 800345c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800345e:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8003460:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8003464:	400b      	ands	r3, r1
 8003466:	429a      	cmp	r2, r3
 8003468:	d101      	bne.n	800346e <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 800346a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800346c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 800346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003470:	7b1b      	ldrb	r3, [r3, #12]
                                         TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 8003478:	2af0      	cmp	r2, #240	@ 0xf0
 800347a:	bf94      	ite	ls
 800347c:	2201      	movls	r2, #1
 800347e:	2200      	movhi	r2, #0
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	4610      	mov	r0, r2
 8003484:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8003486:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 800348a:	9001      	str	r0, [sp, #4]
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	2300      	movs	r3, #0
 8003490:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003492:	f004 f8d1 	bl	8007638 <CO_CANtxBufferInit>
 8003496:	4602      	mov	r2, r0
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168

    if (TPDO->CANtxBuff == NULL) {
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d102      	bne.n	80034ae <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80034a8:	f04f 33ff 	mov.w	r3, #4294967295
 80034ac:	e075      	b.n	800359a <CO_TPDO_init+0x2c6>
    }

    PDO->valid = valid;
 80034ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034b2:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    uint16_t inhibitTime = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	823b      	strh	r3, [r7, #16]
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 80034bc:	f107 0212 	add.w	r2, r7, #18
 80034c0:	2301      	movs	r3, #1
 80034c2:	2103      	movs	r1, #3
 80034c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80034c6:	f7ff fafe 	bl	8002ac6 <OD_get_u16>
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 80034ca:	f107 0210 	add.w	r2, r7, #16
 80034ce:	2301      	movs	r3, #1
 80034d0:	2105      	movs	r1, #5
 80034d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80034d4:	f7ff faf7 	bl	8002ac6 <OD_get_u16>
    TPDO->inhibitTime_us = (uint32_t)inhibitTime * 100U;
 80034d8:	8a7b      	ldrh	r3, [r7, #18]
 80034da:	461a      	mov	r2, r3
 80034dc:	2364      	movs	r3, #100	@ 0x64
 80034de:	fb03 f202 	mul.w	r2, r3, r2
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    TPDO->eventTime_us = (uint32_t)eventTime * 1000U;
 80034e8:	8a3b      	ldrh	r3, [r7, #16]
 80034ea:	461a      	mov	r2, r3
 80034ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034f0:	fb03 f202 	mul.w	r2, r3, r2
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
#endif

    /* Configure communication parameter - SYNC start value (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    TPDO->syncStartValue = 0;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
    (void)OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f503 72bc 	add.w	r2, r3, #376	@ 0x178
 8003508:	2301      	movs	r3, #1
 800350a:	2106      	movs	r1, #6
 800350c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800350e:	f7ff fac5 	bl	8002a9c <OD_get_u8>
    TPDO->SYNC = SYNC;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
    TPDO->syncCounter = 255;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	22ff      	movs	r2, #255	@ 0xff
 800351e:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = false;
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	2200      	movs	r2, #0
 8003526:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    PDO->OD = OD;
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    PDO->CANdevIdx = CANdevTxIdx;
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003538:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003540:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142
    PDO->configuredCanId = CAN_ID;
 8003544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003546:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8003548:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    PDO->OD_communicationParam_ext.object = TPDO;
 800354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	4a13      	ldr	r2, [pc, #76]	@ (80035a4 <CO_TPDO_init+0x2d0>)
 8003558:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 800355c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355e:	4a12      	ldr	r2, [pc, #72]	@ (80035a8 <CO_TPDO_init+0x2d4>)
 8003560:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    PDO->OD_mappingParam_extension.object = TPDO;
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 800356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356e:	4a0f      	ldr	r2, [pc, #60]	@ (80035ac <CO_TPDO_init+0x2d8>)
 8003570:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8003574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003576:	4a0e      	ldr	r2, [pc, #56]	@ (80035b0 <CO_TPDO_init+0x2dc>)
 8003578:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    (void)OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 800357c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003582:	4619      	mov	r1, r3
 8003584:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003586:	f7ff fa75 	bl	8002a74 <OD_extension_init>
    (void)OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8003590:	4619      	mov	r1, r3
 8003592:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003594:	f7ff fa6e 	bl	8002a74 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3730      	adds	r7, #48	@ 0x30
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	08002f93 	.word	0x08002f93
 80035a8:	08003031 	.word	0x08003031
 80035ac:	0800239f 	.word	0x0800239f
 80035b0:	08002e61 	.word	0x08002e61

080035b4 <CO_TPDOsend>:
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t
CO_TPDOsend(CO_TPDO_t* TPDO) {
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b093      	sub	sp, #76	@ 0x4c
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t* dataTPDO = &TPDO->CANtxBuff->data[0];
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 80035c6:	3305      	adds	r3, #5
 80035c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t verifyLength = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	63bb      	str	r3, [r7, #56]	@ 0x38

#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
                          || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO));
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d004      	beq.n	80035e2 <CO_TPDOsend+0x2e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 80035de:	2bfd      	cmp	r3, #253	@ 0xfd
 80035e0:	d901      	bls.n	80035e6 <CO_TPDOsend+0x32>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <CO_TPDOsend+0x34>
 80035e6:	2300      	movs	r3, #0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80035ea:	2300      	movs	r3, #0
 80035ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80035f0:	e066      	b.n	80036c0 <CO_TPDOsend+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 80035f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80035f6:	015b      	lsls	r3, r3, #5
 80035f8:	3310      	adds	r3, #16
 80035fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035fc:	4413      	add	r3, r2
 80035fe:	623b      	str	r3, [r7, #32]
        OD_stream_t* stream = &OD_IO->stream;
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	61fb      	str	r3, [r7, #28]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t)stream->dataOffset;
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	76fb      	strb	r3, [r7, #27]

        /* additional safety check */
        verifyLength += (OD_size_t)mappedLength;
 800360a:	7efb      	ldrb	r3, [r7, #27]
 800360c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800360e:	4413      	add	r3, r2
 8003610:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (verifyLength > CO_PDO_MAX_SIZE) {
 8003612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003614:	2b08      	cmp	r3, #8
 8003616:	d85a      	bhi.n	80036ce <CO_TPDOsend+0x11a>
            break;
        }

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (ODdataLength > CO_PDO_MAX_SIZE) {
 800361e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003620:	2b08      	cmp	r3, #8
 8003622:	d901      	bls.n	8003628 <CO_TPDOsend+0x74>
            ODdataLength = CO_PDO_MAX_SIZE;
 8003624:	2308      	movs	r3, #8
 8003626:	633b      	str	r3, [r7, #48]	@ 0x30
        }
        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t* dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8003628:	7efb      	ldrb	r3, [r7, #27]
 800362a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800362c:	429a      	cmp	r2, r3
 800362e:	d90a      	bls.n	8003646 <CO_TPDOsend+0x92>
            (void)memset(buf, 0, sizeof(buf));
 8003630:	f107 030c 	add.w	r3, r7, #12
 8003634:	2208      	movs	r2, #8
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f013 fd15 	bl	8017068 <memset>
            dataTPDOCopy = buf;
 800363e:	f107 030c 	add.w	r3, r7, #12
 8003642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003644:	e001      	b.n	800364a <CO_TPDOsend+0x96>
        } else {
            dataTPDOCopy = dataTPDO;
 8003646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003648:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read() and store mappedLength back to stream.dataOffset */
        stream->dataOffset = 0;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	2200      	movs	r2, #0
 800364e:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	699c      	ldr	r4, [r3, #24]
 8003654:	f107 0308 	add.w	r3, r7, #8
 8003658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800365a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800365c:	69f8      	ldr	r0, [r7, #28]
 800365e:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 8003660:	7efa      	ldrb	r2, [r7, #27]
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	60da      	str	r2, [r3, #12]
            }
        }
#endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 8003666:	7efb      	ldrb	r3, [r7, #27]
 8003668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800366a:	429a      	cmp	r2, r3
 800366c:	d906      	bls.n	800367c <CO_TPDOsend+0xc8>
            (void)memcpy(dataTPDO, buf, mappedLength);
 800366e:	7efa      	ldrb	r2, [r7, #27]
 8003670:	f107 030c 	add.w	r3, r7, #12
 8003674:	4619      	mov	r1, r3
 8003676:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003678:	f013 fd99 	bl	80171ae <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
#if OD_FLAGS_PDO_SIZE > 0
        uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 800367c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8003680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003682:	3244      	adds	r2, #68	@ 0x44
 8003684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003688:	617b      	str	r3, [r7, #20]
        if ((flagPDObyte != NULL) && eventDriven) {
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00e      	beq.n	80036ae <CO_TPDOsend+0xfa>
 8003690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <CO_TPDOsend+0xfa>
            *flagPDObyte |= PDO->flagPDObitmask[i];
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800369e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036a0:	440b      	add	r3, r1
 80036a2:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80036a6:	4313      	orrs	r3, r2
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	701a      	strb	r2, [r3, #0]
        }
#endif

        dataTPDO += mappedLength;
 80036ae:	7efb      	ldrb	r3, [r7, #27]
 80036b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036b2:	4413      	add	r3, r2
 80036b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80036b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80036ba:	3301      	adds	r3, #1
 80036bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80036c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c2:	7b5b      	ldrb	r3, [r3, #13]
 80036c4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d392      	bcc.n	80035f2 <CO_TPDOsend+0x3e>
 80036cc:	e000      	b.n	80036d0 <CO_TPDOsend+0x11c>
            break;
 80036ce:	bf00      	nop
        }
#endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    if (verifyLength > CO_PDO_MAX_SIZE || verifyLength != (OD_size_t)PDO->dataLength) {
 80036d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d805      	bhi.n	80036e2 <CO_TPDOsend+0x12e>
 80036d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d8:	7b1b      	ldrb	r3, [r3, #12]
 80036da:	461a      	mov	r2, r3
 80036dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00e      	beq.n	8003700 <CO_TPDOsend+0x14c>
        /* bug in software, should not happen */
        CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL, (0x200000 | verifyLength));
 80036e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 80036f2:	222c      	movs	r2, #44	@ 0x2c
 80036f4:	2101      	movs	r1, #1
 80036f6:	f7fe f81a 	bl	800172e <CO_error>
        return CO_ERROR_DATA_CORRUPT;
 80036fa:	f06f 030c 	mvn.w	r3, #12
 80036fe:	e019      	b.n	8003734 <CO_TPDOsend+0x180>
    }

    TPDO->sendRequest = false;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    TPDO->eventTimer = TPDO->eventTime_us;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 8003720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800372a:	4619      	mov	r1, r3
 800372c:	4610      	mov	r0, r2
 800372e:	f003 fffd 	bl	800772c <CO_CANsend>
 8003732:	4603      	mov	r3, r0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3744      	adds	r7, #68	@ 0x44
 8003738:	46bd      	mov	sp, r7
 800373a:	bd90      	pop	{r4, r7, pc}

0800373c <CO_TPDO_process>:
void
CO_TPDO_process(CO_TPDO_t* TPDO,
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || defined CO_DOXYGEN
                uint32_t timeDifference_us, uint32_t* timerNext_us,
#endif
                bool_t NMTisOperational, bool_t syncWas) {
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	61bb      	str	r3, [r7, #24]
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)) != 0
    (void)timerNext_us;
#endif
    (void)syncWas;

    if (PDO->valid && NMTisOperational) {
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 80dc 	beq.w	8003910 <CO_TPDO_process+0x1d4>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80d8 	beq.w	8003910 <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || (OD_FLAGS_PDO_SIZE > 0)
        if ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d004      	beq.n	8003774 <CO_TPDO_process+0x38>
            || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8003770:	2bfd      	cmp	r3, #253	@ 0xfd
 8003772:	d946      	bls.n	8003802 <CO_TPDO_process+0xc6>
            /* event timer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            if (TPDO->eventTime_us != 0U) {
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800377a:	2b00      	cmp	r3, #0
 800377c:	d018      	beq.n	80037b0 <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	d205      	bcs.n	8003796 <CO_TPDO_process+0x5a>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	e000      	b.n	8003798 <CO_TPDO_process+0x5c>
 8003796:	2300      	movs	r3, #0
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
                if (TPDO->eventTimer == 0U) {
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d103      	bne.n	80037b0 <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#endif
            }
#endif
            /* check for any OD_requestTPDO() */
#if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d123      	bne.n	8003802 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80037ba:	2300      	movs	r3, #0
 80037bc:	77fb      	strb	r3, [r7, #31]
 80037be:	e01b      	b.n	80037f8 <CO_TPDO_process+0xbc>
                    uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 80037c0:	7ffa      	ldrb	r2, [r7, #31]
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	3244      	adds	r2, #68	@ 0x44
 80037c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ca:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00f      	beq.n	80037f2 <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0U) {
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	781a      	ldrb	r2, [r3, #0]
 80037d6:	7ffb      	ldrb	r3, [r7, #31]
 80037d8:	69b9      	ldr	r1, [r7, #24]
 80037da:	440b      	add	r3, r1
 80037dc:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80037e0:	4013      	ands	r3, r2
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d104      	bne.n	80037f2 <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
                            break;
 80037f0:	e007      	b.n	8003802 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80037f2:	7ffb      	ldrb	r3, [r7, #31]
 80037f4:	3301      	adds	r3, #1
 80037f6:	77fb      	strb	r3, [r7, #31]
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	7b5b      	ldrb	r3, [r3, #13]
 80037fc:	7ffa      	ldrb	r2, [r7, #31]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d3de      	bcc.n	80037c0 <CO_TPDO_process+0x84>
#endif
        }
#endif /* ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0) */

        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 8003808:	2bfd      	cmp	r3, #253	@ 0xfd
 800380a:	d91d      	bls.n	8003848 <CO_TPDO_process+0x10c>
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
                                                                          : 0U;
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	d205      	bcs.n	8003824 <CO_TPDO_process+0xe8>
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
                                                                          : 0U;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	e000      	b.n	8003826 <CO_TPDO_process+0xea>
 8003824:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184

            /* send TPDO */
            if (TPDO->sendRequest && (TPDO->inhibitTimer == 0U)) {
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8003832:	2b00      	cmp	r3, #0
 8003834:	d07d      	beq.n	8003932 <CO_TPDO_process+0x1f6>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800383c:	2b00      	cmp	r3, #0
 800383e:	d178      	bne.n	8003932 <CO_TPDO_process+0x1f6>
                (void)CO_TPDOsend(TPDO);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f7ff feb7 	bl	80035b4 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003846:	e074      	b.n	8003932 <CO_TPDO_process+0x1f6>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        else if ((TPDO->SYNC != NULL) && syncWas) {
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 800384e:	2b00      	cmp	r3, #0
 8003850:	d06f      	beq.n	8003932 <CO_TPDO_process+0x1f6>
 8003852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003854:	2b00      	cmp	r3, #0
 8003856:	d06c      	beq.n	8003932 <CO_TPDO_process+0x1f6>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 800385e:	2b00      	cmp	r3, #0
 8003860:	d108      	bne.n	8003874 <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) {
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8003868:	2b00      	cmp	r3, #0
 800386a:	d062      	beq.n	8003932 <CO_TPDO_process+0x1f6>
                    (void)CO_TPDOsend(TPDO);
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f7ff fea1 	bl	80035b4 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003872:	e05e      	b.n	8003932 <CO_TPDO_process+0x1f6>
                }
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255U) {
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 800387a:	2bff      	cmp	r3, #255	@ 0xff
 800387c:	d119      	bne.n	80038b2 <CO_TPDO_process+0x176>
                    if ((TPDO->SYNC->counterOverflowValue != 0U) && (TPDO->syncStartValue != 0U)) {
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8003884:	7c5b      	ldrb	r3, [r3, #17]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <CO_TPDO_process+0x162>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <CO_TPDO_process+0x162>
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	22fe      	movs	r2, #254	@ 0xfe
 8003898:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
 800389c:	e009      	b.n	80038b2 <CO_TPDO_process+0x176>
                    } else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = (TPDO->transmissionType / 2U) + 1U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 316c 	ldrb.w	r3, [r3, #364]	@ 0x16c
 80038a4:	085b      	lsrs	r3, r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC with matched syncStartValue. */
                if (TPDO->syncCounter == 254U) {
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 80038b8:	2bfe      	cmp	r3, #254	@ 0xfe
 80038ba:	d112      	bne.n	80038e2 <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80038c2:	7c9a      	ldrb	r2, [r3, #18]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 3178 	ldrb.w	r3, [r3, #376]	@ 0x178
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d131      	bne.n	8003932 <CO_TPDO_process+0x1f6>
                        TPDO->syncCounter = TPDO->transmissionType;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 216c 	ldrb.w	r2, [r3, #364]	@ 0x16c
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                        (void)CO_TPDOsend(TPDO);
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f7ff fe6a 	bl	80035b4 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80038e0:	e027      	b.n	8003932 <CO_TPDO_process+0x1f6>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0U) {
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 3179 	ldrb.w	r3, [r3, #377]	@ 0x179
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d11a      	bne.n	8003932 <CO_TPDO_process+0x1f6>
                    TPDO->syncCounter = TPDO->transmissionType;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 216c 	ldrb.w	r2, [r3, #364]	@ 0x16c
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
                    (void)CO_TPDOsend(TPDO);
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7ff fe53 	bl	80035b4 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800390e:	e010      	b.n	8003932 <CO_TPDO_process+0x1f6>
        }
#endif

    } else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        TPDO->inhibitTimer = 0;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        TPDO->eventTimer = 0;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
#endif
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        TPDO->syncCounter = 255;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	22ff      	movs	r2, #255	@ 0xff
 800392c:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#endif
    }
}
 8003930:	e000      	b.n	8003934 <CO_TPDO_process+0x1f8>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003932:	bf00      	nop
}
 8003934:	bf00      	nop
 8003936:	3720      	adds	r7, #32
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <CO_getUint8>:
CO_getUint8(const void* buf) {
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	73fb      	strb	r3, [r7, #15]
    return value;
 800394a:	7bfb      	ldrb	r3, [r7, #15]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]
    return value;
 8003966:	68fb      	ldr	r3, [r7, #12]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <OD_getIndex+0x14>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	e000      	b.n	800398a <OD_getIndex+0x16>
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80039a6:	2305      	movs	r3, #5
 80039a8:	e003      	b.n	80039b2 <OD_extension_init+0x1c>
    entry->extension = extension;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 80039be:	b580      	push	{r7, lr}
 80039c0:	b086      	sub	sp, #24
 80039c2:	af02      	add	r7, sp, #8
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	460b      	mov	r3, r1
 80039cc:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80039ce:	7af9      	ldrb	r1, [r7, #11]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	2301      	movs	r3, #1
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7fe ff43 	bl	8002864 <OD_get_value>
 80039de:	4603      	mov	r3, r0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	460b      	mov	r3, r1
 80039f6:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80039f8:	7af9      	ldrb	r1, [r7, #11]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	2304      	movs	r3, #4
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f7fe ff2e 	bl	8002864 <OD_get_value>
 8003a08:	4603      	mov	r3, r0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <OD_set_u32>:
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t
OD_set_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t val, bool_t odOrig) {
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b086      	sub	sp, #24
 8003a16:	af02      	add	r7, sp, #8
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8003a22:	1d3a      	adds	r2, r7, #4
 8003a24:	7af9      	ldrb	r1, [r7, #11]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7fe ff56 	bl	80028de <OD_set_value>
 8003a32:	4603      	mov	r3, r0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SDO_receive(void* object, void* msg) {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t* SDO = (CO_SDOserver_t*)object;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	791b      	ldrb	r3, [r3, #4]
 8003a4e:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	3305      	adds	r3, #5
 8003a54:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8U) {
 8003a56:	7cfb      	ldrb	r3, [r7, #19]
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d115      	bne.n	8003a88 <CO_SDO_receive+0x4c>
        if (data[0] == 0x80U) {
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b80      	cmp	r3, #128	@ 0x80
 8003a62:	d103      	bne.n	8003a6c <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2200      	movs	r2, #0
 8003a68:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8003a6a:	e00d      	b.n	8003a88 <CO_SDO_receive+0x4c>
        } else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d109      	bne.n	8003a88 <CO_SDO_receive+0x4c>
            (void)memcpy(SDO->CANrxData, data, DLC);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	3340      	adds	r3, #64	@ 0x40
 8003a78:	7cfa      	ldrb	r2, [r7, #19]
 8003a7a:	68f9      	ldr	r1, [r7, #12]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f013 fb96 	bl	80171ae <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2201      	movs	r2, #1
 8003a86:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003a88:	bf00      	nop
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <CO_SDOserver_init_canRxTx>:

/* helper for configuring CANrx and CANtx */
static CO_ReturnError_t
CO_SDOserver_init_canRxTx(CO_SDOserver_t* SDO, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANdevTxIdx,
                          uint32_t COB_IDClientToServer, uint32_t COB_IDServerToClient) {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	@ 0x28
 8003a94:	af04      	add	r7, sp, #16
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	80fb      	strh	r3, [r7, #6]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	80bb      	strh	r3, [r7, #4]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    /* proceed only, if parameters change */
    if ((COB_IDClientToServer == SDO->COB_IDClientToServer) && (COB_IDServerToClient == SDO->COB_IDServerToClient)) {
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aaa:	6a3a      	ldr	r2, [r7, #32]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d106      	bne.n	8003abe <CO_SDOserver_init_canRxTx+0x2e>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d101      	bne.n	8003abe <CO_SDOserver_init_canRxTx+0x2e>
        return CO_ERROR_NO;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e04e      	b.n	8003b5c <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a3a      	ldr	r2, [r7, #32]
 8003ac2:	651a      	str	r2, [r3, #80]	@ 0x50
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac8:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000UL) == 0U) ? (uint16_t)COB_IDClientToServer : 0U;
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	db02      	blt.n	8003ad6 <CO_SDOserver_init_canRxTx+0x46>
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	e000      	b.n	8003ad8 <CO_SDOserver_init_canRxTx+0x48>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	82fb      	strh	r3, [r7, #22]
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000UL) == 0U) ? (uint16_t)COB_IDServerToClient : 0U;
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	db02      	blt.n	8003ae6 <CO_SDOserver_init_canRxTx+0x56>
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	e000      	b.n	8003ae8 <CO_SDOserver_init_canRxTx+0x58>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	82bb      	strh	r3, [r7, #20]
    if ((idC2S != 0U) && (idS2C != 0U)) {
 8003aea:	8afb      	ldrh	r3, [r7, #22]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d006      	beq.n	8003afe <CO_SDOserver_init_canRxTx+0x6e>
 8003af0:	8abb      	ldrh	r3, [r7, #20]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	611a      	str	r2, [r3, #16]
 8003afc:	e006      	b.n	8003b0c <CO_SDOserver_init_canRxTx+0x7c>
    } else {
        idC2S = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, idC2S, 0x7FF, false, (void*)SDO, CO_SDO_receive);
 8003b0c:	8afa      	ldrh	r2, [r7, #22]
 8003b0e:	88f9      	ldrh	r1, [r7, #6]
 8003b10:	4b14      	ldr	r3, [pc, #80]	@ (8003b64 <CO_SDOserver_init_canRxTx+0xd4>)
 8003b12:	9302      	str	r3, [sp, #8]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	9301      	str	r3, [sp, #4]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003b20:	68b8      	ldr	r0, [r7, #8]
 8003b22:	f003 fd2b 	bl	800757c <CO_CANrxBufferInit>
 8003b26:	4603      	mov	r3, r0
 8003b28:	74fb      	strb	r3, [r7, #19]

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(SDO->CANdevTx, CANdevTxIdx, idS2C, false, 8, false);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	8aba      	ldrh	r2, [r7, #20]
 8003b30:	88b9      	ldrh	r1, [r7, #4]
 8003b32:	2300      	movs	r3, #0
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	2308      	movs	r3, #8
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f003 fd7c 	bl	8007638 <CO_CANtxBufferInit>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	605a      	str	r2, [r3, #4]

    if (SDO->CANtxBuff == NULL) {
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d104      	bne.n	8003b58 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8003b4e:	23ff      	movs	r3, #255	@ 0xff
 8003b50:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8003b58:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	08003a3d 	.word	0x08003a3d

08003b68 <OD_write_1201_additional>:
 * Custom function for writing OD object _SDO server parameter_, additional channels
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1201_additional(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b08f      	sub	sp, #60	@ 0x3c
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <OD_write_1201_additional+0x20>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <OD_write_1201_additional+0x20>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8003b88:	2309      	movs	r3, #9
 8003b8a:	e0f9      	b.n	8003d80 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t* SDO = (CO_SDOserver_t*)stream->object;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	62fb      	str	r3, [r7, #44]	@ 0x2c

    switch (stream->subIndex) {
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	7d1b      	ldrb	r3, [r3, #20]
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	f200 80e8 	bhi.w	8003d6c <OD_write_1201_additional+0x204>
 8003b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba4 <OD_write_1201_additional+0x3c>)
 8003b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba2:	bf00      	nop
 8003ba4:	08003bb5 	.word	0x08003bb5
 8003ba8:	08003bb9 	.word	0x08003bb9
 8003bac:	08003c7d 	.word	0x08003c7d
 8003bb0:	08003d43 	.word	0x08003d43
        case 0: /* Highest sub-index supported */ return ODR_READONLY; break;
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	e0e3      	b.n	8003d80 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8003bb8:	68b8      	ldr	r0, [r7, #8]
 8003bba:	f7ff fecd 	bl	8003958 <CO_getUint32>
 8003bbe:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bc8:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FFU);
 8003bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bd4:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	0fdb      	lsrs	r3, r3, #31
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || ((valid && SDO->valid) && (CAN_ID != CAN_ID_cur))
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4b69      	ldr	r3, [pc, #420]	@ (8003d88 <OD_write_1201_additional+0x220>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d134      	bne.n	8003c54 <OD_write_1201_additional+0xec>
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <OD_write_1201_additional+0x98>
 8003bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <OD_write_1201_additional+0x98>
 8003bf8:	8afa      	ldrh	r2, [r7, #22]
 8003bfa:	8abb      	ldrh	r3, [r7, #20]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d129      	bne.n	8003c54 <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d028      	beq.n	8003c58 <OD_write_1201_additional+0xf0>
 8003c06:	8afb      	ldrh	r3, [r7, #22]
 8003c08:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c0a:	d923      	bls.n	8003c54 <OD_write_1201_additional+0xec>
 8003c0c:	8afb      	ldrh	r3, [r7, #22]
 8003c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c12:	d903      	bls.n	8003c1c <OD_write_1201_additional+0xb4>
 8003c14:	8afb      	ldrh	r3, [r7, #22]
 8003c16:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8003c1a:	d91b      	bls.n	8003c54 <OD_write_1201_additional+0xec>
 8003c1c:	8afb      	ldrh	r3, [r7, #22]
 8003c1e:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8003c22:	d903      	bls.n	8003c2c <OD_write_1201_additional+0xc4>
 8003c24:	8afb      	ldrh	r3, [r7, #22]
 8003c26:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003c2a:	d313      	bcc.n	8003c54 <OD_write_1201_additional+0xec>
 8003c2c:	8afb      	ldrh	r3, [r7, #22]
 8003c2e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003c32:	d903      	bls.n	8003c3c <OD_write_1201_additional+0xd4>
 8003c34:	8afb      	ldrh	r3, [r7, #22]
 8003c36:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8003c3a:	d30b      	bcc.n	8003c54 <OD_write_1201_additional+0xec>
 8003c3c:	8afb      	ldrh	r3, [r7, #22]
 8003c3e:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8003c42:	d303      	bcc.n	8003c4c <OD_write_1201_additional+0xe4>
 8003c44:	8afb      	ldrh	r3, [r7, #22]
 8003c46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c4a:	d303      	bcc.n	8003c54 <OD_write_1201_additional+0xec>
 8003c4c:	8afb      	ldrh	r3, [r7, #22]
 8003c4e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c52:	d901      	bls.n	8003c58 <OD_write_1201_additional+0xf0>
                return ODR_INVALID_VALUE;
 8003c54:	230f      	movs	r3, #15
 8003c56:	e093      	b.n	8003d80 <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx, COB_ID,
 8003c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8003c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c64:	f8b3 004e 	ldrh.w	r0, [r3, #78]	@ 0x4e
 8003c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c6c:	9301      	str	r3, [sp, #4]
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	4603      	mov	r3, r0
 8003c74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c76:	f7ff ff0b 	bl	8003a90 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDServerToClient);
            break;
 8003c7a:	e07a      	b.n	8003d72 <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8003c7c:	68b8      	ldr	r0, [r7, #8]
 8003c7e:	f7ff fe6b 	bl	8003958 <CO_getUint32>
 8003c82:	6278      	str	r0, [r7, #36]	@ 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8003c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c8c:	847b      	strh	r3, [r7, #34]	@ 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FFU);
 8003c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c98:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	0fdb      	lsrs	r3, r3, #31
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (SDO->valid && (CAN_ID != CAN_ID_cur)))
 8003ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca6:	4b38      	ldr	r3, [pc, #224]	@ (8003d88 <OD_write_1201_additional+0x220>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d134      	bne.n	8003d18 <OD_write_1201_additional+0x1b0>
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d007      	beq.n	8003cc4 <OD_write_1201_additional+0x15c>
 8003cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <OD_write_1201_additional+0x15c>
 8003cbc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003cbe:	8c3b      	ldrh	r3, [r7, #32]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d129      	bne.n	8003d18 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d028      	beq.n	8003d1c <OD_write_1201_additional+0x1b4>
 8003cca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003ccc:	2b7f      	cmp	r3, #127	@ 0x7f
 8003cce:	d923      	bls.n	8003d18 <OD_write_1201_additional+0x1b0>
 8003cd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cd6:	d903      	bls.n	8003ce0 <OD_write_1201_additional+0x178>
 8003cd8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003cda:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8003cde:	d91b      	bls.n	8003d18 <OD_write_1201_additional+0x1b0>
 8003ce0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003ce2:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8003ce6:	d903      	bls.n	8003cf0 <OD_write_1201_additional+0x188>
 8003ce8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003cea:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003cee:	d313      	bcc.n	8003d18 <OD_write_1201_additional+0x1b0>
 8003cf0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003cf2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003cf6:	d903      	bls.n	8003d00 <OD_write_1201_additional+0x198>
 8003cf8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003cfa:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8003cfe:	d30b      	bcc.n	8003d18 <OD_write_1201_additional+0x1b0>
 8003d00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003d02:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8003d06:	d303      	bcc.n	8003d10 <OD_write_1201_additional+0x1a8>
 8003d08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003d0a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d0e:	d303      	bcc.n	8003d18 <OD_write_1201_additional+0x1b0>
 8003d10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003d12:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d16:	d901      	bls.n	8003d1c <OD_write_1201_additional+0x1b4>
                return ODR_INVALID_VALUE;
 8003d18:	230f      	movs	r3, #15
 8003d1a:	e031      	b.n	8003d80 <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx,
 8003d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d22:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 8003d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d28:	f8b3 404e 	ldrh.w	r4, [r3, #78]	@ 0x4e
 8003d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d32:	9201      	str	r2, [sp, #4]
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	4623      	mov	r3, r4
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d3c:	f7ff fea8 	bl	8003a90 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDClientToServer, COB_ID);
            break;
 8003d40:	e017      	b.n	8003d72 <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1U) {
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d001      	beq.n	8003d4c <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 8003d48:	230b      	movs	r3, #11
 8003d4a:	e019      	b.n	8003d80 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8003d4c:	68b8      	ldr	r0, [r7, #8]
 8003d4e:	f7ff fdf5 	bl	800393c <CO_getUint8>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            if ((nodeId < 1U) || (nodeId > 127U)) {
 8003d58:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <OD_write_1201_additional+0x200>
 8003d60:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	da03      	bge.n	8003d70 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 8003d68:	230f      	movs	r3, #15
 8003d6a:	e009      	b.n	8003d80 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default: return ODR_SUB_NOT_EXIST; break;
 8003d6c:	230e      	movs	r3, #14
 8003d6e:	e007      	b.n	8003d80 <OD_write_1201_additional+0x218>
            break;
 8003d70:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f7fe fb68 	bl	800244e <OD_writeOriginal>
 8003d7e:	4603      	mov	r3, r0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3734      	adds	r7, #52	@ 0x34
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd90      	pop	{r4, r7, pc}
 8003d88:	3ffff800 	.word	0x3ffff800

08003d8c <CO_SDOserver_init>:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC */

CO_ReturnError_t
CO_SDOserver_init(CO_SDOserver_t* SDO, OD_t* OD, OD_entry_t* OD_1200_SDOsrvPar, uint8_t nodeId,
                  uint16_t SDOtimeoutTime_ms, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, CO_CANmodule_t* CANdevTx,
                  uint16_t CANdevTxIdx, uint32_t* errInfo) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08c      	sub	sp, #48	@ 0x30
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if ((SDO == NULL) || (OD == NULL) || (CANdevRx == NULL) || (CANdevTx == NULL)) {
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <CO_SDOserver_init+0x26>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <CO_SDOserver_init+0x26>
 8003da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <CO_SDOserver_init+0x26>
 8003dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d102      	bne.n	8003db8 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003db2:	f04f 33ff 	mov.w	r3, #4294967295
 8003db6:	e0f5      	b.n	8003fa4 <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	731a      	strb	r2, [r3, #12]
#if (((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED)) != 0
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000U;
 8003dc4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003dc6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003dca:	fb03 f202 	mul.w	r2, r3, r2
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) != 0
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d117      	bne.n	8003e0e <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if ((nodeId < 1U) || (nodeId > 127U)) {
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <CO_SDOserver_init+0x60>
 8003de4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	da02      	bge.n	8003df2 <CO_SDOserver_init+0x66>
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8003dec:	f04f 33ff 	mov.w	r3, #4294967295
 8003df0:	e0d8      	b.n	8003fa4 <CO_SDOserver_init+0x218>
        }

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8003dfa:	84fb      	strh	r3, [r7, #38]	@ 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 8003e04:	84bb      	strh	r3, [r7, #36]	@ 0x24
        SDO->valid = true;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	611a      	str	r2, [r3, #16]
 8003e0c:	e0a4      	b.n	8003f58 <CO_SDOserver_init+0x1cc>
    } else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff fdb0 	bl	8003974 <OD_getIndex>
 8003e14:	4603      	mov	r3, r0
 8003e16:	847b      	strh	r3, [r7, #34]	@ 0x22

        if (OD_SDOsrvParIdx == (uint16_t)OD_H1200_SDO_SERVER_1_PARAM) {
 8003e18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e1a:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 8003e1e:	d123      	bne.n	8003e68 <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if ((nodeId < 1U) || (nodeId > 127U)) {
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <CO_SDOserver_init+0xa2>
 8003e26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	da02      	bge.n	8003e34 <CO_SDOserver_init+0xa8>
                return CO_ERROR_ILLEGAL_ARGUMENT;
 8003e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e32:	e0b7      	b.n	8003fa4 <CO_SDOserver_init+0x218>
            }

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8003e3c:	84fb      	strh	r3, [r7, #38]	@ 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003e3e:	78fb      	ldrb	r3, [r7, #3]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 8003e46:	84bb      	strh	r3, [r7, #36]	@ 0x24
            SDO->valid = true;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	611a      	str	r2, [r3, #16]

            (void)OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8003e4e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003e50:	2301      	movs	r3, #1
 8003e52:	2101      	movs	r1, #1
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fddc 	bl	8003a12 <OD_set_u32>
            (void)OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8003e5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	2102      	movs	r1, #2
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff fdd6 	bl	8003a12 <OD_set_u32>
 8003e66:	e077      	b.n	8003f58 <CO_SDOserver_init+0x1cc>
        } else if ((OD_SDOsrvParIdx > (uint16_t)OD_H1200_SDO_SERVER_1_PARAM)
 8003e68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e6a:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 8003e6e:	d96f      	bls.n	8003f50 <CO_SDOserver_init+0x1c4>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 8003e70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003e72:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8003e76:	d26b      	bcs.n	8003f50 <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8003e78:	f107 021d 	add.w	r2, r7, #29
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	2100      	movs	r1, #0
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff fd9c 	bl	80039be <OD_get_u8>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1, &COB_IDClientToServer32, true);
 8003e8c:	f107 0218 	add.w	r2, r7, #24
 8003e90:	2301      	movs	r3, #1
 8003e92:	2101      	movs	r1, #1
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff fda7 	bl	80039e8 <OD_get_u32>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f887 3020 	strb.w	r3, [r7, #32]
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2, &COB_IDServerToClient32, true);
 8003ea0:	f107 0214 	add.w	r2, r7, #20
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff fd9d 	bl	80039e8 <OD_get_u32>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	77fb      	strb	r3, [r7, #31]

            if ((odRet0 != ODR_OK) || ((maxSubIndex != 2U) && (maxSubIndex != 3U)) || (odRet1 != ODR_OK)
 8003eb2:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10d      	bne.n	8003ed6 <CO_SDOserver_init+0x14a>
 8003eba:	7f7b      	ldrb	r3, [r7, #29]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d002      	beq.n	8003ec6 <CO_SDOserver_init+0x13a>
 8003ec0:	7f7b      	ldrb	r3, [r7, #29]
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d107      	bne.n	8003ed6 <CO_SDOserver_init+0x14a>
 8003ec6:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <CO_SDOserver_init+0x14a>
                || (odRet2 != ODR_OK)) {
 8003ece:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d008      	beq.n	8003ee8 <CO_SDOserver_init+0x15c>
                if (errInfo != NULL) {
 8003ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <CO_SDOserver_init+0x156>
                    *errInfo = OD_SDOsrvParIdx;
 8003edc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ee0:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 8003ee2:	f06f 030b 	mvn.w	r3, #11
 8003ee6:	e05d      	b.n	8003fa4 <CO_SDOserver_init+0x218>
            }

            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	db05      	blt.n	8003efa <CO_SDOserver_init+0x16e>
                                       ? (uint16_t)(COB_IDClientToServer32 & 0x7FFU)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 8003ef2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	e000      	b.n	8003efc <CO_SDOserver_init+0x170>
 8003efa:	2300      	movs	r3, #0
 8003efc:	84fb      	strh	r3, [r7, #38]	@ 0x26
                                       : 0U;
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	db05      	blt.n	8003f10 <CO_SDOserver_init+0x184>
                                       ? (uint16_t)(COB_IDServerToClient32 & 0x7FFU)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 8003f08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	e000      	b.n	8003f12 <CO_SDOserver_init+0x186>
 8003f10:	2300      	movs	r3, #0
 8003f12:	84bb      	strh	r3, [r7, #36]	@ 0x24
                                       : 0U;

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
            SDO->OD_1200_extension.object = SDO;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	659a      	str	r2, [r3, #88]	@ 0x58
            SDO->OD_1200_extension.read = OD_readOriginal;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4a23      	ldr	r2, [pc, #140]	@ (8003fac <CO_SDOserver_init+0x220>)
 8003f1e:	65da      	str	r2, [r3, #92]	@ 0x5c
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4a23      	ldr	r2, [pc, #140]	@ (8003fb0 <CO_SDOserver_init+0x224>)
 8003f24:	661a      	str	r2, [r3, #96]	@ 0x60
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar, &SDO->OD_1200_extension);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3358      	adds	r3, #88	@ 0x58
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff fd32 	bl	8003996 <OD_extension_init>
 8003f32:	4603      	mov	r3, r0
 8003f34:	77bb      	strb	r3, [r7, #30]
            if (odRetE != ODR_OK) {
 8003f36:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) {
 8003f3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <CO_SDOserver_init+0x1be>
                    *errInfo = OD_SDOsrvParIdx;
 8003f44:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003f46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f48:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 8003f4a:	f06f 030b 	mvn.w	r3, #11
 8003f4e:	e029      	b.n	8003fa4 <CO_SDOserver_init+0x218>
            }
#endif
        } else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8003f50:	f04f 33ff 	mov.w	r3, #4294967295
 8003f54:	e026      	b.n	8003fa4 <CO_SDOserver_init+0x218>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 8003f56:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* store the parameters and configure CANrx and CANtx */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SDO->CANdevRx = CANdevRx;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f62:	649a      	str	r2, [r3, #72]	@ 0x48
    SDO->CANdevRxIdx = CANdevRxIdx;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003f68:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    SDO->CANdevTxIdx = CANdevTxIdx;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8003f72:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	651a      	str	r2, [r3, #80]	@ 0x50
    SDO->COB_IDServerToClient = 0;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
    SDO->CANdevTx = CANdevTx;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f86:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO, CANdevRx, CANdevRxIdx, CANdevTxIdx, CanId_ClientToServer,
 8003f88:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003f8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f8c:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 8003f90:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8003f92:	9201      	str	r2, [sp, #4]
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	4603      	mov	r3, r0
 8003f98:	460a      	mov	r2, r1
 8003f9a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f7ff fd77 	bl	8003a90 <CO_SDOserver_init_canRxTx>
 8003fa2:	4603      	mov	r3, r0
                                     CanId_ServerToClient);
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3728      	adds	r7, #40	@ 0x28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	0800239f 	.word	0x0800239f
 8003fb0:	08003b69 	.word	0x08003b69

08003fb4 <validateAndWriteToOD>:
 * @param crcOperation 0=none, 1=calculate, 2=calculate and compare
 * @parma crcClient crc checksum to campare with
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
validateAndWriteToOD(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, uint8_t crcOperation, uint16_t crcClient) {
 8003fb4:	b590      	push	{r4, r7, lr}
 8003fb6:	b08b      	sub	sp, #44	@ 0x2c
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	71fb      	strb	r3, [r7, #7]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003fd0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (SDO->finished) {
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 8082 	beq.w	80040e0 <validateAndWriteToOD+0x12c>
        /* Verify if size of data downloaded matches size indicated. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran != SDO->sizeInd)) {
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d015      	beq.n	8004010 <validateAndWriteToOD+0x5c>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d00f      	beq.n	8004010 <validateAndWriteToOD+0x5c>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d901      	bls.n	8004000 <validateAndWriteToOD+0x4c>
 8003ffc:	4a73      	ldr	r2, [pc, #460]	@ (80041cc <validateAndWriteToOD+0x218>)
 8003ffe:	e000      	b.n	8004002 <validateAndWriteToOD+0x4e>
 8004000:	4a73      	ldr	r2, [pc, #460]	@ (80041d0 <validateAndWriteToOD+0x21c>)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	751a      	strb	r2, [r3, #20]
            return false;
 800400c:	2300      	movs	r3, #0
 800400e:	e0d8      	b.n	80041c2 <validateAndWriteToOD+0x20e>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be shorter than size of the
         * OD data buffer. If so, add two zero bytes to terminate (unicode) string. Shorten
         * also OD data size, (temporary, send information about EOF into OD_IO.write) */
        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800401c:	b25b      	sxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	da42      	bge.n	80040a8 <validateAndWriteToOD+0xf4>
            && ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd))
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d004      	beq.n	8004032 <validateAndWriteToOD+0x7e>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800402c:	6a3a      	ldr	r2, [r7, #32]
 800402e:	429a      	cmp	r2, r3
 8004030:	d93a      	bls.n	80040a8 <validateAndWriteToOD+0xf4>
            && ((SDO->bufOffsetWr + 2U) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE)) {
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004038:	3302      	adds	r3, #2
 800403a:	2b20      	cmp	r3, #32
 800403c:	d834      	bhi.n	80040a8 <validateAndWriteToOD+0xf4>
            SDO->buf[SDO->bufOffsetWr] = 0;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4413      	add	r3, r2
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            SDO->bufOffsetWr++;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            SDO->sizeTran++;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	66da      	str	r2, [r3, #108]	@ 0x6c
            if ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd)) {
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d004      	beq.n	8004076 <validateAndWriteToOD+0xc2>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004070:	6a3a      	ldr	r2, [r7, #32]
 8004072:	429a      	cmp	r2, r3
 8004074:	d913      	bls.n	800409e <validateAndWriteToOD+0xea>
                SDO->buf[SDO->bufOffsetWr] = 0;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                SDO->bufOffsetWr++;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                SDO->sizeTran++;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	66da      	str	r2, [r3, #108]	@ 0x6c
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	621a      	str	r2, [r3, #32]
 80040a6:	e02d      	b.n	8004104 <validateAndWriteToOD+0x150>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check. */
        else if (sizeInOd == 0U) {
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <validateAndWriteToOD+0x104>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	621a      	str	r2, [r3, #32]
 80040b6:	e025      	b.n	8004104 <validateAndWriteToOD+0x150>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040bc:	6a3a      	ldr	r2, [r7, #32]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d020      	beq.n	8004104 <validateAndWriteToOD+0x150>
            *abortCode = (SDO->sizeTran > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040c6:	6a3a      	ldr	r2, [r7, #32]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d201      	bcs.n	80040d0 <validateAndWriteToOD+0x11c>
 80040cc:	4a3f      	ldr	r2, [pc, #252]	@ (80041cc <validateAndWriteToOD+0x218>)
 80040ce:	e000      	b.n	80040d2 <validateAndWriteToOD+0x11e>
 80040d0:	4a3f      	ldr	r2, [pc, #252]	@ (80041d0 <validateAndWriteToOD+0x21c>)
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	751a      	strb	r2, [r3, #20]
            return false;
 80040dc:	2300      	movs	r3, #0
 80040de:	e070      	b.n	80041c2 <validateAndWriteToOD+0x20e>
        } else { /* MISRA C 2004 14.10 */
        }
    } else {
        /* Verify if size of data downloaded is not too large. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran > SDO->sizeInd)) {
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00d      	beq.n	8004104 <validateAndWriteToOD+0x150>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d907      	bls.n	8004104 <validateAndWriteToOD+0x150>
            *abortCode = CO_SDO_AB_DATA_LONG;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4a35      	ldr	r2, [pc, #212]	@ (80041cc <validateAndWriteToOD+0x218>)
 80040f8:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	751a      	strb	r2, [r3, #20]
            return false;
 8004100:	2300      	movs	r3, #0
 8004102:	e05e      	b.n	80041c2 <validateAndWriteToOD+0x20e>
    (void)crcOperation;
    (void)crcClient;
    (void)bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	613b      	str	r3, [r7, #16]

    CO_LOCK_OD(SDO->CANdevTx);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800410c:	f3ef 8210 	mrs	r2, PRIMASK
 8004110:	617a      	str	r2, [r7, #20]
  return(result);
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004116:	b672      	cpsid	i
}
 8004118:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf, SDO->bufOffsetWr, &countWritten);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f103 0018 	add.w	r0, r3, #24
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004130:	f107 0310 	add.w	r3, r7, #16
 8004134:	47a0      	blx	r4
 8004136:	4603      	mov	r3, r0
 8004138:	77fb      	strb	r3, [r7, #31]
    CO_UNLOCK_OD(SDO->CANdevTx);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004140:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f383 8810 	msr	PRIMASK, r3
}
 8004148:	bf00      	nop

    SDO->bufOffsetWr = 0;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* verify write error value */
    if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 8004152:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d011      	beq.n	800417e <validateAndWriteToOD+0x1ca>
 800415a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004162:	d00c      	beq.n	800417e <validateAndWriteToOD+0x1ca>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004164:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004168:	4618      	mov	r0, r3
 800416a:	f7fe fb5d 	bl	8002828 <OD_getSDOabCode>
 800416e:	4602      	mov	r2, r0
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	751a      	strb	r2, [r3, #20]
        return false;
 800417a:	2300      	movs	r3, #0
 800417c:	e021      	b.n	80041c2 <validateAndWriteToOD+0x20e>
    } else if (SDO->finished && (odRet == ODR_PARTIAL)) {
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00c      	beq.n	80041a0 <validateAndWriteToOD+0x1ec>
 8004186:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800418a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418e:	d107      	bne.n	80041a0 <validateAndWriteToOD+0x1ec>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4a0f      	ldr	r2, [pc, #60]	@ (80041d0 <validateAndWriteToOD+0x21c>)
 8004194:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	751a      	strb	r2, [r3, #20]
        return false;
 800419c:	2300      	movs	r3, #0
 800419e:	e010      	b.n	80041c2 <validateAndWriteToOD+0x20e>
    } else if (!SDO->finished && (odRet == ODR_OK)) {
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10b      	bne.n	80041c0 <validateAndWriteToOD+0x20c>
 80041a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d107      	bne.n	80041c0 <validateAndWriteToOD+0x20c>
        /* OD variable was written completely, but SDO download still has data */
        *abortCode = CO_SDO_AB_DATA_LONG;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4a06      	ldr	r2, [pc, #24]	@ (80041cc <validateAndWriteToOD+0x218>)
 80041b4:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	751a      	strb	r2, [r3, #20]
        return false;
 80041bc:	2300      	movs	r3, #0
 80041be:	e000      	b.n	80041c2 <validateAndWriteToOD+0x20e>
    } else { /* MISRA C 2004 14.10 */
    }

    return true;
 80041c0:	2301      	movs	r3, #1
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	372c      	adds	r7, #44	@ 0x2c
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd90      	pop	{r4, r7, pc}
 80041ca:	bf00      	nop
 80041cc:	06070012 	.word	0x06070012
 80041d0:	06070013 	.word	0x06070013

080041d4 <readFromOd>:
 * @parma countMinimum if data size in buffer is less than countMinimum, then buffer is refilled from OD variable
 * @param calculateCrc if true, crc is calculated
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
readFromOd(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, OD_size_t countMinimum, bool_t calculateCrc) {
 80041d4:	b590      	push	{r4, r7, lr}
 80041d6:	b08d      	sub	sp, #52	@ 0x34
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) == 0
    (void)calculateCrc; /* may be unused */
#endif
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (!SDO->finished && (countRemain < countMinimum)) {
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 80ab 	bne.w	8004352 <readFromOd+0x17e>
 80041fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	429a      	cmp	r2, r3
 8004202:	f080 80a6 	bcs.w	8004352 <readFromOd+0x17e>
        /* first move remaining data to the start of the buffer */
        (void)memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004218:	4413      	add	r3, r2
 800421a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421c:	4619      	mov	r1, r3
 800421e:	f012 ff09 	bl	8017034 <memmove>
        SDO->bufOffsetRd = 0;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        SDO->bufOffsetWr = countRemain;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800422e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	f1c3 0320 	rsb	r3, r3, #32
 8004238:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	613b      	str	r3, [r7, #16]

        CO_LOCK_OD(SDO->CANdevTx);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004242:	f3ef 8210 	mrs	r2, PRIMASK
 8004246:	617a      	str	r2, [r7, #20]
  return(result);
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800424c:	b672      	cpsid	i
}
 800424e:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, &SDO->buf[countRemain], countRdRequest, &countRd);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f103 0018 	add.w	r0, r3, #24
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	3380      	adds	r3, #128	@ 0x80
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	18d1      	adds	r1, r2, r3
 8004262:	f107 0310 	add.w	r3, r7, #16
 8004266:	6a3a      	ldr	r2, [r7, #32]
 8004268:	47a0      	blx	r4
 800426a:	4603      	mov	r3, r0
 800426c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        CO_UNLOCK_OD(SDO->CANdevTx);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004276:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f383 8810 	msr	PRIMASK, r3
}
 800427e:	bf00      	nop

        if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 8004280:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004284:	2b00      	cmp	r3, #0
 8004286:	d011      	beq.n	80042ac <readFromOd+0xd8>
 8004288:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004290:	d00c      	beq.n	80042ac <readFromOd+0xd8>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004292:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe fac6 	bl	8002828 <OD_getSDOabCode>
 800429c:	4602      	mov	r2, r0
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	751a      	strb	r2, [r3, #20]
            return false;
 80042a8:	2300      	movs	r3, #0
 80042aa:	e053      	b.n	8004354 <readFromOd+0x180>
        }

        /* if data is string, send only data up to null termination */
        OD_size_t lastRd = countRd + countRemain;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b0:	4413      	add	r3, r2
 80042b2:	61fb      	str	r3, [r7, #28]
        if ((countRd > 0U) && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)) {
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d027      	beq.n	800430a <readFromOd+0x136>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042c0:	b25b      	sxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	da21      	bge.n	800430a <readFromOd+0x136>
            SDO->buf[lastRd] = 0; /* (SDO->buf is one byte larger) */
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	4413      	add	r3, r2
 80042cc:	3380      	adds	r3, #128	@ 0x80
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char*)&SDO->buf[countRemain]);
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	3380      	adds	r3, #128	@ 0x80
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4413      	add	r3, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fb ffe8 	bl	80002b0 <strlen>
 80042e0:	62b8      	str	r0, [r7, #40]	@ 0x28
            if (countStr == 0U) {
 80042e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <readFromOd+0x118>
                countStr = 1;
 80042e8:	2301      	movs	r3, #1
 80042ea:	62bb      	str	r3, [r7, #40]	@ 0x28
            } /* zero length is not allowed */
            if (countStr < countRd) {
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d20a      	bcs.n	800430a <readFromOd+0x136>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 80042f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f6:	613b      	str	r3, [r7, #16]
                odRet = ODR_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	441a      	add	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	441a      	add	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        if ((SDO->bufOffsetWr == 0U) || (odRet == ODR_PARTIAL)) {
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d004      	beq.n	800432a <readFromOd+0x156>
 8004320:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004328:	d110      	bne.n	800434c <readFromOd+0x178>
            SDO->finished = false;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	675a      	str	r2, [r3, #116]	@ 0x74
            if (SDO->bufOffsetWr < countMinimum) {
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	429a      	cmp	r2, r3
 800433a:	d90a      	bls.n	8004352 <readFromOd+0x17e>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4a07      	ldr	r2, [pc, #28]	@ (800435c <readFromOd+0x188>)
 8004340:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2201      	movs	r2, #1
 8004346:	751a      	strb	r2, [r3, #20]
                return false;
 8004348:	2300      	movs	r3, #0
 800434a:	e003      	b.n	8004354 <readFromOd+0x180>
            }
        } else {
            SDO->finished = true;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2201      	movs	r2, #1
 8004350:	675a      	str	r2, [r3, #116]	@ 0x74
        if (calculateCrc && SDO->block_crcEnabled) {
            SDO->block_crc = crc16_ccitt(&SDO->buf[countRemain], countRd, SDO->block_crc);
        }
#endif
    }
    return true;
 8004352:	2301      	movs	r3, #1
}
 8004354:	4618      	mov	r0, r3
 8004356:	3734      	adds	r7, #52	@ 0x34
 8004358:	46bd      	mov	sp, r7
 800435a:	bd90      	pop	{r4, r7, pc}
 800435c:	06040047 	.word	0x06040047

08004360 <CO_SDOserver_process>:
#endif

CO_SDO_return_t
CO_SDOserver_process(CO_SDOserver_t* SDO, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                     uint32_t* timerNext_us) {
 8004360:	b590      	push	{r4, r7, lr}
 8004362:	b09b      	sub	sp, #108	@ 0x6c
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d103      	bne.n	800437c <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 8004374:	f06f 0301 	mvn.w	r3, #1
 8004378:	f000 bd04 	b.w	8004d84 <CO_SDOserver_process+0xa24>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 800437c:	2301      	movs	r3, #1
 800437e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8004382:	2300      	movs	r3, #0
 8004384:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438a:	2b00      	cmp	r3, #0
 800438c:	bf14      	ite	ne
 800438e:	2301      	movne	r3, #1
 8004390:	2300      	moveq	r3, #0
 8004392:	b2db      	uxtb	r3, r3
 8004394:	657b      	str	r3, [r7, #84]	@ 0x54

    if ((SDO->state == CO_SDO_ST_IDLE) && SDO->valid && !isNew) {
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	7d1b      	ldrb	r3, [r3, #20]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10a      	bne.n	80043b6 <CO_SDOserver_process+0x56>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d006      	beq.n	80043b6 <CO_SDOserver_process+0x56>
 80043a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 80043ae:	2300      	movs	r3, #0
 80043b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80043b4:	e2db      	b.n	800496e <CO_SDOserver_process+0x60e>
    } else if (!NMTisPreOrOperational || !SDO->valid) {
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <CO_SDOserver_process+0x64>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d109      	bne.n	80043d8 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	63da      	str	r2, [r3, #60]	@ 0x3c
        ret = CO_SDO_RT_ok_communicationEnd;
 80043d0:	2300      	movs	r3, #0
 80043d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80043d6:	e2ca      	b.n	800496e <CO_SDOserver_process+0x60e>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 80043d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 82c7 	beq.w	800496e <CO_SDOserver_process+0x60e>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	7d1b      	ldrb	r3, [r3, #20]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f040 80cd 	bne.w	8004586 <CO_SDOserver_process+0x226>
            bool_t upload = false;
 80043ec:	2300      	movs	r3, #0
 80043ee:	663b      	str	r3, [r7, #96]	@ 0x60

            if ((SDO->CANrxData[0] & 0xF0U) == 0x20U) {
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043fa:	2b20      	cmp	r3, #32
 80043fc:	d103      	bne.n	8004406 <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2211      	movs	r2, #17
 8004402:	751a      	strb	r2, [r3, #20]
 8004404:	e00f      	b.n	8004426 <CO_SDOserver_process+0xc6>
            } else if (SDO->CANrxData[0] == 0x40U) {
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800440c:	2b40      	cmp	r3, #64	@ 0x40
 800440e:	d105      	bne.n	800441c <CO_SDOserver_process+0xbc>
                upload = true;
 8004410:	2301      	movs	r3, #1
 8004412:	663b      	str	r3, [r7, #96]	@ 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2221      	movs	r2, #33	@ 0x21
 8004418:	751a      	strb	r2, [r3, #20]
 800441a:	e004      	b.n	8004426 <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 800441c:	4ba9      	ldr	r3, [pc, #676]	@ (80046c4 <CO_SDOserver_process+0x364>)
 800441e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 8004426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d163      	bne.n	80044f4 <CO_SDOserver_process+0x194>
                ODR_t odRet;
                SDO->index = (uint16_t)((((uint16_t)SDO->CANrxData[2]) << 8) | SDO->CANrxData[1]);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004432:	b21b      	sxth	r3, r3
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	b21a      	sxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800443e:	b21b      	sxth	r3, r3
 8004440:	4313      	orrs	r3, r2
 8004442:	b21b      	sxth	r3, r3
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	871a      	strh	r2, [r3, #56]	@ 0x38
                SDO->subIndex = SDO->CANrxData[3];
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex, &SDO->OD_IO, false);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f7fe f87d 	bl	8002560 <OD_find>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f893 103a 	ldrb.w	r1, [r3, #58]	@ 0x3a
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f103 0218 	add.w	r2, r3, #24
 8004472:	2300      	movs	r3, #0
 8004474:	f7fe f8d0 	bl	8002618 <OD_getSub>
 8004478:	4603      	mov	r3, r0
 800447a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                if (odRet != ODR_OK) {
 800447e:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <CO_SDOserver_process+0x13c>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004486:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe f9cc 	bl	8002828 <OD_getSDOabCode>
 8004490:	4603      	mov	r3, r0
 8004492:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	751a      	strb	r2, [r3, #20]
 800449a:	e02b      	b.n	80044f4 <CO_SDOserver_process+0x194>
                } else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_RW) == 0U) {
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d105      	bne.n	80044b6 <CO_SDOserver_process+0x156>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 80044aa:	4b87      	ldr	r3, [pc, #540]	@ (80046c8 <CO_SDOserver_process+0x368>)
 80044ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	751a      	strb	r2, [r3, #20]
 80044b4:	e01e      	b.n	80044f4 <CO_SDOserver_process+0x194>
                    } else if (upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_R) == 0U)) {
 80044b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00c      	beq.n	80044d6 <CO_SDOserver_process+0x176>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d105      	bne.n	80044d6 <CO_SDOserver_process+0x176>
                        abortCode = CO_SDO_AB_WRITEONLY;
 80044ca:	4b80      	ldr	r3, [pc, #512]	@ (80046cc <CO_SDOserver_process+0x36c>)
 80044cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	751a      	strb	r2, [r3, #20]
 80044d4:	e00e      	b.n	80044f4 <CO_SDOserver_process+0x194>
                    } else if (!upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_W) == 0U)) {
 80044d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10b      	bne.n	80044f4 <CO_SDOserver_process+0x194>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d104      	bne.n	80044f4 <CO_SDOserver_process+0x194>
                        abortCode = CO_SDO_AB_READONLY;
 80044ea:	4b79      	ldr	r3, [pc, #484]	@ (80046d0 <CO_SDOserver_process+0x370>)
 80044ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	751a      	strb	r2, [r3, #20]
                }
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            /* load data from object dictionary, if upload and no error */
            if (upload && (abortCode == CO_SDO_AB_NONE)) {
 80044f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d045      	beq.n	8004586 <CO_SDOserver_process+0x226>
 80044fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d142      	bne.n	8004586 <CO_SDOserver_process+0x226>
                SDO->bufOffsetRd = 0;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                SDO->bufOffsetWr = 0;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                SDO->sizeTran = 0;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	66da      	str	r2, [r3, #108]	@ 0x6c
                SDO->finished = false;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	675a      	str	r2, [r3, #116]	@ 0x74

                if (readFromOd(SDO, &abortCode, 7, false)) {
 800451c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8004520:	2300      	movs	r3, #0
 8004522:	2207      	movs	r2, #7
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f7ff fe55 	bl	80041d4 <readFromOd>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d02a      	beq.n	8004586 <CO_SDOserver_process+0x226>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01a      	beq.n	800456e <CO_SDOserver_process+0x20e>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a1a      	ldr	r2, [r3, #32]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	669a      	str	r2, [r3, #104]	@ 0x68

                        if (SDO->sizeInd == 0U) {
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004544:	2b00      	cmp	r3, #0
 8004546:	d105      	bne.n	8004554 <CO_SDOserver_process+0x1f4>
                            SDO->sizeInd = SDO->bufOffsetWr;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	669a      	str	r2, [r3, #104]	@ 0x68
 8004552:	e018      	b.n	8004586 <CO_SDOserver_process+0x226>
                        } else if (SDO->sizeInd != SDO->bufOffsetWr) {
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800455e:	429a      	cmp	r2, r3
 8004560:	d011      	beq.n	8004586 <CO_SDOserver_process+0x226>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004562:	4b5c      	ldr	r3, [pc, #368]	@ (80046d4 <CO_SDOserver_process+0x374>)
 8004564:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	751a      	strb	r2, [r3, #20]
 800456c:	e00b      	b.n	8004586 <CO_SDOserver_process+0x226>
                        } else { /* MISRA C 2004 14.10 */
                        }
                    } else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004574:	b25b      	sxtb	r3, r3
                                           ? SDO->OD_IO.stream.dataLength
                                           : 0U;
 8004576:	2b00      	cmp	r3, #0
 8004578:	db02      	blt.n	8004580 <CO_SDOserver_process+0x220>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	e000      	b.n	8004582 <CO_SDOserver_process+0x222>
 8004580:	2300      	movs	r3, #0
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	6693      	str	r3, [r2, #104]	@ 0x68
                }
            }
#endif    /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        bool isOKstate = (SDO->state != CO_SDO_ST_IDLE);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	7d1b      	ldrb	r3, [r3, #20]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	bf14      	ite	ne
 8004590:	2301      	movne	r3, #1
 8004592:	2300      	moveq	r3, #0
 8004594:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        isOKstate = (SDO->state != CO_SDO_ST_ABORT) && isOKstate;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	7d1b      	ldrb	r3, [r3, #20]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d005      	beq.n	80045ae <CO_SDOserver_process+0x24e>
 80045a2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <CO_SDOserver_process+0x24e>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <CO_SDOserver_process+0x250>
 80045ae:	2300      	movs	r3, #0
 80045b0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80045b4:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        if (isOKstate) {
 80045c0:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 81ca 	beq.w	800495e <CO_SDOserver_process+0x5fe>
            switch (SDO->state) {
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	7d1b      	ldrb	r3, [r3, #20]
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	3b11      	subs	r3, #17
 80045d2:	2b12      	cmp	r3, #18
 80045d4:	f200 81b4 	bhi.w	8004940 <CO_SDOserver_process+0x5e0>
 80045d8:	a201      	add	r2, pc, #4	@ (adr r2, 80045e0 <CO_SDOserver_process+0x280>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	0800462d 	.word	0x0800462d
 80045e4:	08004941 	.word	0x08004941
 80045e8:	080047f9 	.word	0x080047f9
 80045ec:	08004941 	.word	0x08004941
 80045f0:	08004941 	.word	0x08004941
 80045f4:	08004941 	.word	0x08004941
 80045f8:	08004941 	.word	0x08004941
 80045fc:	08004941 	.word	0x08004941
 8004600:	08004941 	.word	0x08004941
 8004604:	08004941 	.word	0x08004941
 8004608:	08004941 	.word	0x08004941
 800460c:	08004941 	.word	0x08004941
 8004610:	08004941 	.word	0x08004941
 8004614:	08004941 	.word	0x08004941
 8004618:	08004941 	.word	0x08004941
 800461c:	08004941 	.word	0x08004941
 8004620:	080048ef 	.word	0x080048ef
 8004624:	08004941 	.word	0x08004941
 8004628:	080048f7 	.word	0x080048f7
                case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
                    if ((SDO->CANrxData[0] & 0x02U) != 0U) {
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80a4 	beq.w	8004784 <CO_SDOserver_process+0x424>
                        /* Expedited transfer, max 4 bytes of data */

                        /* Size of OD variable (>0 if indicated) */
                        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	647b      	str	r3, [r7, #68]	@ 0x44

                        /* Get SDO data size (indicated by SDO client or get from OD) */
                        OD_size_t dataSizeToWrite = 4;
 8004642:	2304      	movs	r3, #4
 8004644:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <CO_SDOserver_process+0x30a>
                            dataSizeToWrite -= ((OD_size_t)(SDO->CANrxData[0]) >> 2) & 0x03U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800465a:	089b      	lsrs	r3, r3, #2
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004668:	e007      	b.n	800467a <CO_SDOserver_process+0x31a>
                        } else if ((sizeInOd > 0U) && (sizeInOd < 4U)) {
 800466a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800466c:	2b00      	cmp	r3, #0
 800466e:	d004      	beq.n	800467a <CO_SDOserver_process+0x31a>
 8004670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004672:	2b03      	cmp	r3, #3
 8004674:	d801      	bhi.n	800467a <CO_SDOserver_process+0x31a>
                            dataSizeToWrite = sizeInOd;
 8004676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004678:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* copy data to the temp buffer, swap data if necessary */
                        uint8_t buf[6] = {0};
 800467a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	809a      	strh	r2, [r3, #4]
                        (void)memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 800468a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800468e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004690:	4618      	mov	r0, r3
 8004692:	f012 fd8c 	bl	80171ae <memcpy>
#endif

                        /* If dataType is string, then size of data downloaded may be shorter as size of
                         * the OD data buffer. If so, add two zero bytes to terminate (unicode) string.
                         * Shorten also OD data size, (temporary, send information about EOF into OD_IO.write) */
                        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800469c:	b25b      	sxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	da22      	bge.n	80046e8 <CO_SDOserver_process+0x388>
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 80046a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <CO_SDOserver_process+0x350>
 80046a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80046aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d21b      	bcs.n	80046e8 <CO_SDOserver_process+0x388>
                            OD_size_t delta = sizeInOd - dataSizeToWrite;
 80046b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	643b      	str	r3, [r7, #64]	@ 0x40
                            dataSizeToWrite += (delta == 1U) ? 1U : 2U;
 80046b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d10c      	bne.n	80046d8 <CO_SDOserver_process+0x378>
 80046be:	2301      	movs	r3, #1
 80046c0:	e00b      	b.n	80046da <CO_SDOserver_process+0x37a>
 80046c2:	bf00      	nop
 80046c4:	05040001 	.word	0x05040001
 80046c8:	06010000 	.word	0x06010000
 80046cc:	06010001 	.word	0x06010001
 80046d0:	06010002 	.word	0x06010002
 80046d4:	06040047 	.word	0x06040047
 80046d8:	2302      	movs	r3, #2
 80046da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80046dc:	4413      	add	r3, r2
 80046de:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80046e4:	621a      	str	r2, [r3, #32]
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 80046e6:	e016      	b.n	8004716 <CO_SDOserver_process+0x3b6>
                        } else if (sizeInOd == 0U) {
 80046e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d103      	bne.n	80046f6 <CO_SDOserver_process+0x396>
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80046f2:	621a      	str	r2, [r3, #32]
 80046f4:	e00f      	b.n	8004716 <CO_SDOserver_process+0x3b6>
                        }
                        /* Verify if size of data downloaded matches data size in OD. */
                        else if (dataSizeToWrite != sizeInOd) {
 80046f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80046f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d00b      	beq.n	8004716 <CO_SDOserver_process+0x3b6>
                            abortCode = (dataSizeToWrite > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80046fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004702:	429a      	cmp	r2, r3
 8004704:	d901      	bls.n	800470a <CO_SDOserver_process+0x3aa>
 8004706:	4b91      	ldr	r3, [pc, #580]	@ (800494c <CO_SDOserver_process+0x5ec>)
 8004708:	e000      	b.n	800470c <CO_SDOserver_process+0x3ac>
 800470a:	4b91      	ldr	r3, [pc, #580]	@ (8004950 <CO_SDOserver_process+0x5f0>)
 800470c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	751a      	strb	r2, [r3, #20]
                            break;
 8004714:	e123      	b.n	800495e <CO_SDOserver_process+0x5fe>
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* Copy data */
                        OD_size_t countWritten = 0;
 8004716:	2300      	movs	r3, #0
 8004718:	623b      	str	r3, [r7, #32]

                        CO_LOCK_OD(SDO->CANdevTx);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800471e:	f3ef 8210 	mrs	r2, PRIMASK
 8004722:	637a      	str	r2, [r7, #52]	@ 0x34
  return(result);
 8004724:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004726:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004728:	b672      	cpsid	i
}
 800472a:	bf00      	nop
                        ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf, dataSizeToWrite, &countWritten);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f103 0018 	add.w	r0, r3, #24
 8004736:	f107 0320 	add.w	r3, r7, #32
 800473a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800473e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004740:	47a0      	blx	r4
 8004742:	4603      	mov	r3, r0
 8004744:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                        CO_UNLOCK_OD(SDO->CANdevTx);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800474e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004752:	f383 8810 	msr	PRIMASK, r3
}
 8004756:	bf00      	nop

                        if (odRet != ODR_OK) {
 8004758:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <CO_SDOserver_process+0x416>
                            abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004760:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004764:	4618      	mov	r0, r3
 8004766:	f7fe f85f 	bl	8002828 <OD_getSDOabCode>
 800476a:	4603      	mov	r3, r0
 800476c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	751a      	strb	r2, [r3, #20]
                            break;
 8004774:	e0f3      	b.n	800495e <CO_SDOserver_process+0x5fe>
                        } else {
                            SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2212      	movs	r2, #18
 800477a:	751a      	strb	r2, [r3, #20]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                            SDO->finished = true;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	675a      	str	r2, [r3, #116]	@ 0x74
#else
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                        SDO->state = CO_SDO_ST_ABORT;
#endif
                    }
                    break;
 8004782:	e0ec      	b.n	800495e <CO_SDOserver_process+0x5fe>
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d028      	beq.n	80047e4 <CO_SDOserver_process+0x484>
                            OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	64bb      	str	r3, [r7, #72]	@ 0x48
                            (void)memcpy((void*)(&size), (const void*)(&SDO->CANrxData[4]), sizeof(size));
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3344      	adds	r3, #68	@ 0x44
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	61fb      	str	r3, [r7, #28]
                            SDO->sizeInd = CO_SWAP_32(size);
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	669a      	str	r2, [r3, #104]	@ 0x68
                            if (sizeInOd > 0U) {
 80047a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d01e      	beq.n	80047ea <CO_SDOserver_process+0x48a>
                                if (SDO->sizeInd > sizeInOd) {
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d205      	bcs.n	80047c2 <CO_SDOserver_process+0x462>
                                    abortCode = CO_SDO_AB_DATA_LONG;
 80047b6:	4b65      	ldr	r3, [pc, #404]	@ (800494c <CO_SDOserver_process+0x5ec>)
 80047b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	751a      	strb	r2, [r3, #20]
                                    break;
 80047c0:	e0cd      	b.n	800495e <CO_SDOserver_process+0x5fe>
                                else if ((SDO->sizeInd < sizeInOd)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d90e      	bls.n	80047ea <CO_SDOserver_process+0x48a>
                                         && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)) {
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047d2:	b25b      	sxtb	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	db08      	blt.n	80047ea <CO_SDOserver_process+0x48a>
                                    abortCode = CO_SDO_AB_DATA_SHORT;
 80047d8:	4b5d      	ldr	r3, [pc, #372]	@ (8004950 <CO_SDOserver_process+0x5f0>)
 80047da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	751a      	strb	r2, [r3, #20]
                                    break;
 80047e2:	e0bc      	b.n	800495e <CO_SDOserver_process+0x5fe>
                            SDO->sizeInd = 0;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	669a      	str	r2, [r3, #104]	@ 0x68
                        SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2212      	movs	r2, #18
 80047ee:	751a      	strb	r2, [r3, #20]
                        SDO->finished = false;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	675a      	str	r2, [r3, #116]	@ 0x74
                    break;
 80047f6:	e0b2      	b.n	800495e <CO_SDOserver_process+0x5fe>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xE0U) == 0x00U) {
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047fe:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d16d      	bne.n	80048e2 <CO_SDOserver_process+0x582>
                        SDO->finished = (SDO->CANrxData[0] & 0x01U) != 0U;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	bf14      	ite	ne
 8004814:	2301      	movne	r3, #1
 8004816:	2300      	moveq	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	675a      	str	r2, [r3, #116]	@ 0x74

                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004826:	f003 0310 	and.w	r3, r3, #16
 800482a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                        if (toggle != SDO->toggle) {
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8004834:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8004838:	429a      	cmp	r2, r3
 800483a:	d005      	beq.n	8004848 <CO_SDOserver_process+0x4e8>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 800483c:	4b45      	ldr	r3, [pc, #276]	@ (8004954 <CO_SDOserver_process+0x5f4>)
 800483e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2201      	movs	r2, #1
 8004844:	751a      	strb	r2, [r3, #20]
                            break;
 8004846:	e08a      	b.n	800495e <CO_SDOserver_process+0x5fe>
                        }

                        /* get data size and write data to the buffer */
                        OD_size_t count = (OD_size_t)(7U - (((OD_size_t)(SDO->CANrxData[0]) >> 1) & 0x07U));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800484e:	085b      	lsrs	r3, r3, #1
 8004850:	b2db      	uxtb	r3, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        (void)memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004866:	18d0      	adds	r0, r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3341      	adds	r3, #65	@ 0x41
 800486c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800486e:	4619      	mov	r1, r3
 8004870:	f012 fc9d 	bl	80171ae <memcpy>
                        SDO->bufOffsetWr += count;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800487a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800487c:	441a      	add	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        SDO->sizeTran += count;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800488a:	441a      	add	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	66da      	str	r2, [r3, #108]	@ 0x6c

                        /* if data size exceeds variable size, abort */
                        if ((SDO->OD_IO.stream.dataLength > 0U) && (SDO->sizeTran > SDO->OD_IO.stream.dataLength)) {
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00b      	beq.n	80048b0 <CO_SDOserver_process+0x550>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d905      	bls.n	80048b0 <CO_SDOserver_process+0x550>
                            abortCode = CO_SDO_AB_DATA_LONG;
 80048a4:	4b29      	ldr	r3, [pc, #164]	@ (800494c <CO_SDOserver_process+0x5ec>)
 80048a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2201      	movs	r2, #1
 80048ac:	751a      	strb	r2, [r3, #20]
                            break;
 80048ae:	e056      	b.n	800495e <CO_SDOserver_process+0x5fe>
                        }

                        /* if necessary, empty the buffer */
                        if (SDO->finished || ((CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr) < (7U + 2U))) {
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d106      	bne.n	80048c6 <CO_SDOserver_process+0x566>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048be:	f1c3 0320 	rsb	r3, r3, #32
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d809      	bhi.n	80048da <CO_SDOserver_process+0x57a>
                            if (!validateAndWriteToOD(SDO, &abortCode, 0, 0)) {
 80048c6:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80048ca:	2300      	movs	r3, #0
 80048cc:	2200      	movs	r2, #0
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f7ff fb70 	bl	8003fb4 <validateAndWriteToOD>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d040      	beq.n	800495c <CO_SDOserver_process+0x5fc>
                                break;
                            }
                        }

                        SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2214      	movs	r2, #20
 80048de:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 80048e0:	e03d      	b.n	800495e <CO_SDOserver_process+0x5fe>
                        abortCode = CO_SDO_AB_CMD;
 80048e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004958 <CO_SDOserver_process+0x5f8>)
 80048e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	751a      	strb	r2, [r3, #20]
                    break;
 80048ec:	e037      	b.n	800495e <CO_SDOserver_process+0x5fe>
                }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
                    SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2222      	movs	r2, #34	@ 0x22
 80048f2:	751a      	strb	r2, [r3, #20]
                    break;
 80048f4:	e033      	b.n	800495e <CO_SDOserver_process+0x5fe>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xEFU) == 0x60U) {
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048fc:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8004900:	2b60      	cmp	r3, #96	@ 0x60
 8004902:	d117      	bne.n	8004934 <CO_SDOserver_process+0x5d4>
                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                        if (toggle != SDO->toggle) {
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8004918:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 800491c:	429a      	cmp	r2, r3
 800491e:	d005      	beq.n	800492c <CO_SDOserver_process+0x5cc>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004920:	4b0c      	ldr	r3, [pc, #48]	@ (8004954 <CO_SDOserver_process+0x5f4>)
 8004922:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2201      	movs	r2, #1
 8004928:	751a      	strb	r2, [r3, #20]
                            break;
 800492a:	e018      	b.n	800495e <CO_SDOserver_process+0x5fe>
                        }
                        SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2224      	movs	r2, #36	@ 0x24
 8004930:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8004932:	e014      	b.n	800495e <CO_SDOserver_process+0x5fe>
                        abortCode = CO_SDO_AB_CMD;
 8004934:	4b08      	ldr	r3, [pc, #32]	@ (8004958 <CO_SDOserver_process+0x5f8>)
 8004936:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	751a      	strb	r2, [r3, #20]
                    break;
 800493e:	e00e      	b.n	800495e <CO_SDOserver_process+0x5fe>
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ:
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */
                default: {
                    /* unknown message received */
                    abortCode = CO_SDO_AB_CMD;
 8004940:	4b05      	ldr	r3, [pc, #20]	@ (8004958 <CO_SDOserver_process+0x5f8>)
 8004942:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2201      	movs	r2, #1
 8004948:	751a      	strb	r2, [r3, #20]
                    break;
 800494a:	e008      	b.n	800495e <CO_SDOserver_process+0x5fe>
 800494c:	06070012 	.word	0x06070012
 8004950:	06070013 	.word	0x06070013
 8004954:	05030000 	.word	0x05030000
 8004958:	05040001 	.word	0x05040001
                                break;
 800495c:	bf00      	nop
                }
            } /* switch (SDO->state) */
        }     /* if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT) */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
        SDO->timeoutTimer = 0;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
        timeDifference_us = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	63da      	str	r2, [r3, #60]	@ 0x3c
    else { /* MISRA C 2004 14.10 */
    }

    /* Timeout timers and transmit bufferFull flag ****************************/
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
    if (ret == CO_SDO_RT_waitingResponse) {
 800496e:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004972:	2b01      	cmp	r3, #1
 8004974:	d11e      	bne.n	80049b4 <CO_SDOserver_process+0x654>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800497e:	429a      	cmp	r2, r3
 8004980:	d205      	bcs.n	800498e <CO_SDOserver_process+0x62e>
            SDO->timeoutTimer += timeDifference_us;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	441a      	add	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004996:	429a      	cmp	r2, r3
 8004998:	d304      	bcc.n	80049a4 <CO_SDOserver_process+0x644>
            abortCode = CO_SDO_AB_TIMEOUT;
 800499a:	4b9c      	ldr	r3, [pc, #624]	@ (8004c0c <CO_SDOserver_process+0x8ac>)
 800499c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <CO_SDOserver_process+0x654>
            ret = CO_SDO_RT_transmittBufferFull;
 80049ae:	2304      	movs	r3, #4
 80049b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 80049b4:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	f040 81ab 	bne.w	8004d14 <CO_SDOserver_process+0x9b4>
        /* clear response buffer */
        (void)memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	3305      	adds	r3, #5
 80049c4:	2208      	movs	r2, #8
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f012 fb4d 	bl	8017068 <memset>

        switch (SDO->state) {
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	7d1b      	ldrb	r3, [r3, #20]
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	3b12      	subs	r3, #18
 80049d6:	2b12      	cmp	r3, #18
 80049d8:	f200 8199 	bhi.w	8004d0e <CO_SDOserver_process+0x9ae>
 80049dc:	a201      	add	r2, pc, #4	@ (adr r2, 80049e4 <CO_SDOserver_process+0x684>)
 80049de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e2:	bf00      	nop
 80049e4:	08004a31 	.word	0x08004a31
 80049e8:	08004d0f 	.word	0x08004d0f
 80049ec:	08004ab3 	.word	0x08004ab3
 80049f0:	08004d0f 	.word	0x08004d0f
 80049f4:	08004d0f 	.word	0x08004d0f
 80049f8:	08004d0f 	.word	0x08004d0f
 80049fc:	08004d0f 	.word	0x08004d0f
 8004a00:	08004d0f 	.word	0x08004d0f
 8004a04:	08004d0f 	.word	0x08004d0f
 8004a08:	08004d0f 	.word	0x08004d0f
 8004a0c:	08004d0f 	.word	0x08004d0f
 8004a10:	08004d0f 	.word	0x08004d0f
 8004a14:	08004d0f 	.word	0x08004d0f
 8004a18:	08004d0f 	.word	0x08004d0f
 8004a1c:	08004d0f 	.word	0x08004d0f
 8004a20:	08004d0f 	.word	0x08004d0f
 8004a24:	08004b0f 	.word	0x08004b0f
 8004a28:	08004d0f 	.word	0x08004d0f
 8004a2c:	08004bdd 	.word	0x08004bdd
            case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
                SDO->CANtxBuff->data[0] = 0x60;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2260      	movs	r2, #96	@ 0x60
 8004a36:	715a      	strb	r2, [r3, #5]
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004a48:	0a1b      	lsrs	r3, r3, #8
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 8004a5e:	721a      	strb	r2, [r3, #8]

                /* reset timeout timer and send message */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                SDO->timeoutTimer = 0;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4610      	mov	r0, r2
 8004a72:	f002 fe5b 	bl	800772c <CO_CANsend>
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                if (SDO->finished) {
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d006      	beq.n	8004a8c <CO_SDOserver_process+0x72c>
                    SDO->state = CO_SDO_ST_IDLE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004a84:	2300      	movs	r3, #0
 8004a86:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                }
#else
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif
                break;
 8004a8a:	e143      	b.n	8004d14 <CO_SDOserver_process+0x9b4>
                    SDO->toggle = 0x00;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    SDO->sizeTran = 0;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	66da      	str	r2, [r3, #108]	@ 0x6c
                    SDO->bufOffsetWr = 0;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                    SDO->bufOffsetRd = 0;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2213      	movs	r2, #19
 8004aae:	751a      	strb	r2, [r3, #20]
                break;
 8004ab0:	e130      	b.n	8004d14 <CO_SDOserver_process+0x9b4>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
                SDO->CANtxBuff->data[0] = 0x20U | SDO->toggle;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f893 2070 	ldrb.w	r2, [r3, #112]	@ 0x70
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f042 0220 	orr.w	r2, r2, #32
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <CO_SDOserver_process+0x772>
 8004ace:	2210      	movs	r2, #16
 8004ad0:	e000      	b.n	8004ad4 <CO_SDOserver_process+0x774>
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                /* reset timeout timer and send message */
                SDO->timeoutTimer = 0;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	67da      	str	r2, [r3, #124]	@ 0x7c
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4610      	mov	r0, r2
 8004aec:	f002 fe1e 	bl	800772c <CO_CANsend>
                if (SDO->finished) {
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d006      	beq.n	8004b06 <CO_SDOserver_process+0x7a6>
                    SDO->state = CO_SDO_ST_IDLE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004afe:	2300      	movs	r3, #0
 8004b00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                } else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
                }
                break;
 8004b04:	e106      	b.n	8004d14 <CO_SDOserver_process+0x9b4>
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2213      	movs	r2, #19
 8004b0a:	751a      	strb	r2, [r3, #20]
                break;
 8004b0c:	e102      	b.n	8004d14 <CO_SDOserver_process+0x9b4>
#endif

            case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                /* data were already loaded from OD variable */
                if ((SDO->sizeInd > 0U) && (SDO->sizeInd <= 4U)) {
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d024      	beq.n	8004b60 <CO_SDOserver_process+0x800>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d820      	bhi.n	8004b60 <CO_SDOserver_process+0x800>
                    /* expedited transfer */
                    SDO->CANtxBuff->data[0] = (uint8_t)(0x43U | ((4U - SDO->sizeInd) << 2U));
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	f1c3 0304 	rsb	r3, r3, #4
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f042 0243 	orr.w	r2, r2, #67	@ 0x43
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	715a      	strb	r2, [r3, #5]
                    (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&SDO->buf[0]), SDO->sizeInd);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f103 0009 	add.w	r0, r3, #9
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f012 fb2e 	bl	80171ae <memcpy>
                    SDO->state = CO_SDO_ST_IDLE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004b5e:	e020      	b.n	8004ba2 <CO_SDOserver_process+0x842>
                } else {
                    /* data will be transferred with segmented transfer */
                    if (SDO->sizeInd > 0U) {
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00e      	beq.n	8004b86 <CO_SDOserver_process+0x826>
                        /* indicate data size, if known */
                        uint32_t sizeInd = SDO->sizeInd;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
                        uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 8004b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b70:	61bb      	str	r3, [r7, #24]
                        SDO->CANtxBuff->data[0] = 0x41;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2241      	movs	r2, #65	@ 0x41
 8004b78:	715a      	strb	r2, [r3, #5]
                        (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&sizeIndSw), sizeof(sizeIndSw));
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	3309      	adds	r3, #9
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	e003      	b.n	8004b8e <CO_SDOserver_process+0x82e>
                    } else {
                        SDO->CANtxBuff->data[0] = 0x40;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2240      	movs	r2, #64	@ 0x40
 8004b8c:	715a      	strb	r2, [r3, #5]
                    }
                    SDO->toggle = 0x00;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    SDO->timeoutTimer = 0;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	67da      	str	r2, [r3, #124]	@ 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2223      	movs	r2, #35	@ 0x23
 8004ba0:	751a      	strb	r2, [r3, #20]
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                /* send message */
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004bb2:	0a1b      	lsrs	r3, r3, #8
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 8004bc8:	721a      	strb	r2, [r3, #8]
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	f002 fda9 	bl	800772c <CO_CANsend>
                break;
 8004bda:	e09b      	b.n	8004d14 <CO_SDOserver_process+0x9b4>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
                /* refill the data buffer if necessary */
                if (!readFromOd(SDO, &abortCode, 7, false)) {
 8004bdc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8004be0:	2300      	movs	r3, #0
 8004be2:	2207      	movs	r2, #7
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f7ff faf5 	bl	80041d4 <readFromOd>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8090 	beq.w	8004d12 <CO_SDOserver_process+0x9b2>
                    break;
                }

                /* SDO command specifier with toggle bit */
                SDO->CANtxBuff->data[0] = SDO->toggle;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	f892 2070 	ldrb.w	r2, [r2, #112]	@ 0x70
 8004bfc:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d103      	bne.n	8004c10 <CO_SDOserver_process+0x8b0>
 8004c08:	2210      	movs	r2, #16
 8004c0a:	e002      	b.n	8004c12 <CO_SDOserver_process+0x8b2>
 8004c0c:	05040000 	.word	0x05040000
 8004c10:	2200      	movs	r2, #0
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	65bb      	str	r3, [r7, #88]	@ 0x58
                /* verify, if this is the last segment */
                if ((count < 7U) || (SDO->finished && (count == 7U))) {
 8004c28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c2a:	2b06      	cmp	r3, #6
 8004c2c:	d906      	bls.n	8004c3c <CO_SDOserver_process+0x8dc>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d01b      	beq.n	8004c6e <CO_SDOserver_process+0x90e>
 8004c36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c38:	2b07      	cmp	r3, #7
 8004c3a:	d118      	bne.n	8004c6e <CO_SDOserver_process+0x90e>
                    /* indicate last segment and nnn */
                    SDO->CANtxBuff->data[0] |= (uint8_t)(((7U - count) << 1U) | 0x01U);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	795a      	ldrb	r2, [r3, #5]
 8004c42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f1c3 0307 	rsb	r3, r3, #7
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	4313      	orrs	r3, r2
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f042 0201 	orr.w	r2, r2, #1
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	715a      	strb	r2, [r3, #5]
                    SDO->state = CO_SDO_ST_IDLE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004c66:	2300      	movs	r3, #0
 8004c68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004c6c:	e007      	b.n	8004c7e <CO_SDOserver_process+0x91e>
                } else {
                    SDO->timeoutTimer = 0;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	67da      	str	r2, [r3, #124]	@ 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2223      	movs	r2, #35	@ 0x23
 8004c78:	751a      	strb	r2, [r3, #20]
                    count = 7;
 8004c7a:	2307      	movs	r3, #7
 8004c7c:	65bb      	str	r3, [r7, #88]	@ 0x58
                }

                /* copy data segment to CAN message */
                (void)memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd, count);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	1d98      	adds	r0, r3, #6
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c90:	4413      	add	r3, r2
 8004c92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c94:	4619      	mov	r1, r3
 8004c96:	f012 fa8a 	bl	80171ae <memcpy>
                SDO->bufOffsetRd += count;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8004ca0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ca2:	441a      	add	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                SDO->sizeTran += count;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004cae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cb0:	441a      	add	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* verify if sizeTran is too large or too short if last segment */
                if (SDO->sizeInd > 0U) {
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d01e      	beq.n	8004cfc <CO_SDOserver_process+0x99c>
                    if (SDO->sizeTran > SDO->sizeInd) {
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d905      	bls.n	8004cd6 <CO_SDOserver_process+0x976>
                        abortCode = CO_SDO_AB_DATA_LONG;
 8004cca:	4b30      	ldr	r3, [pc, #192]	@ (8004d8c <CO_SDOserver_process+0xa2c>)
 8004ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	751a      	strb	r2, [r3, #20]
                        break;
 8004cd4:	e01e      	b.n	8004d14 <CO_SDOserver_process+0x9b4>
                    } else if ((ret == CO_SDO_RT_ok_communicationEnd) && (SDO->sizeTran < SDO->sizeInd)) {
 8004cd6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10e      	bne.n	8004cfc <CO_SDOserver_process+0x99c>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d208      	bcs.n	8004cfc <CO_SDOserver_process+0x99c>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 8004cea:	4b29      	ldr	r3, [pc, #164]	@ (8004d90 <CO_SDOserver_process+0xa30>)
 8004cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ret = CO_SDO_RT_waitingResponse;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                        SDO->state = CO_SDO_ST_ABORT;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	751a      	strb	r2, [r3, #20]
                        break;
 8004cfa:	e00b      	b.n	8004d14 <CO_SDOserver_process+0x9b4>
                    } else { /* MISRA C 2004 14.10 */
                    }
                }

                /* send message */
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f002 fd10 	bl	800772c <CO_CANsend>
                break;
 8004d0c:	e002      	b.n	8004d14 <CO_SDOserver_process+0x9b4>
            case CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ2:
            case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
            case CO_SDO_ST_UPLOAD_BLK_END_CRSP:
            default: {
                /* none */
                break;
 8004d0e:	bf00      	nop
 8004d10:	e000      	b.n	8004d14 <CO_SDOserver_process+0x9b4>
                    break;
 8004d12:	bf00      	nop
            }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8004d14:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d131      	bne.n	8004d80 <CO_SDOserver_process+0xa20>
        if (SDO->state == CO_SDO_ST_ABORT) {
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	7d1b      	ldrb	r3, [r3, #20]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d12c      	bne.n	8004d80 <CO_SDOserver_process+0xa20>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8004d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d28:	617b      	str	r3, [r7, #20]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2280      	movs	r2, #128	@ 0x80
 8004d30:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004d42:	0a1b      	lsrs	r3, r3, #8
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 8004d58:	721a      	strb	r2, [r3, #8]

            (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&code), sizeof(code));
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	3309      	adds	r3, #9
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	601a      	str	r2, [r3, #0]
            (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	f002 fcdc 	bl	800772c <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 8004d7a:	23f6      	movs	r3, #246	@ 0xf6
 8004d7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 8004d80:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	376c      	adds	r7, #108	@ 0x6c
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd90      	pop	{r4, r7, pc}
 8004d8c:	06070012 	.word	0x06070012
 8004d90:	06070013 	.word	0x06070013

08004d94 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	73fb      	strb	r3, [r7, #15]
    return value;
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60fb      	str	r3, [r7, #12]
    return value;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <OD_getIndex+0x14>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	e000      	b.n	8004de2 <OD_getIndex+0x16>
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8004dfe:	2305      	movs	r3, #5
 8004e00:	e003      	b.n	8004e0a <OD_extension_init+0x1c>
    entry->extension = extension;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b086      	sub	sp, #24
 8004e1a:	af02      	add	r7, sp, #8
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	460b      	mov	r3, r1
 8004e24:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004e26:	7af9      	ldrb	r1, [r7, #11]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7fd fd17 	bl	8002864 <OD_get_value>
 8004e36:	4603      	mov	r3, r0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	607a      	str	r2, [r7, #4]
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004e50:	7af9      	ldrb	r1, [r7, #11]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	2304      	movs	r3, #4
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7fd fd02 	bl	8002864 <OD_get_value>
 8004e60:	4603      	mov	r3, r0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <CO_SYNCsend>:
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t
CO_SYNCsend(CO_SYNC_t* SYNC) {
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b082      	sub	sp, #8
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) {
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	7c9b      	ldrb	r3, [r3, #18]
 8004e76:	3301      	adds	r3, #1
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	749a      	strb	r2, [r3, #18]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	7c9a      	ldrb	r2, [r3, #18]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	7c5b      	ldrb	r3, [r3, #17]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d902      	bls.n	8004e90 <CO_SYNCsend+0x26>
        SYNC->counter = 1;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	749a      	strb	r2, [r3, #18]
    }
    SYNC->timer = 0;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	bf0c      	ite	eq
 8004e9e:	2301      	moveq	r3, #1
 8004ea0:	2300      	movne	r3, #0
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	7c92      	ldrb	r2, [r2, #18]
 8004eb2:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	f002 fc34 	bl	800772c <CO_CANsend>
 8004ec4:	4603      	mov	r3, r0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SYNC_receive(void* object, void* msg) {
 8004ece:	b480      	push	{r7}
 8004ed0:	b087      	sub	sp, #28
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	6039      	str	r1, [r7, #0]
    CO_SYNC_t* SYNC = object;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	791b      	ldrb	r3, [r3, #4]
 8004ee0:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0U) {
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	7c5b      	ldrb	r3, [r3, #17]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10c      	bne.n	8004f08 <CO_SYNC_receive+0x3a>
        if (DLC == 0U) {
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d102      	bne.n	8004efa <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	e019      	b.n	8004f2e <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x40U;
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	721a      	strb	r2, [r3, #8]
 8004f06:	e012      	b.n	8004f2e <CO_SYNC_receive+0x60>
        }
    } else {
        if (DLC == 1U) {
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d109      	bne.n	8004f22 <CO_SYNC_receive+0x54>
            const uint8_t* data = CO_CANrxMsg_readData(msg);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	3305      	adds	r3, #5
 8004f12:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	781a      	ldrb	r2, [r3, #0]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	e005      	b.n	8004f2e <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x80U;
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00c      	beq.n	8004f4e <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bf0c      	ite	eq
 8004f3c:	2301      	moveq	r3, #1
 8004f3e:	2300      	movne	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 8004f4e:	bf00      	nop
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
	...

08004f5c <OD_write_1005>:
 * Custom function for writing OD object "COB-ID sync message"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1005(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8004f5c:	b590      	push	{r4, r7, lr}
 8004f5e:	b08f      	sub	sp, #60	@ 0x3c
 8004f60:	af04      	add	r7, sp, #16
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00c      	beq.n	8004f8a <OD_write_1005+0x2e>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	7d1b      	ldrb	r3, [r3, #20]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d108      	bne.n	8004f8a <OD_write_1005+0x2e>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <OD_write_1005+0x2e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d102      	bne.n	8004f8a <OD_write_1005+0x2e>
        || (countWritten == NULL)) {
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <OD_write_1005+0x32>
        return ODR_DEV_INCOMPAT;
 8004f8a:	2309      	movs	r3, #9
 8004f8c:	e0a2      	b.n	80050d4 <OD_write_1005+0x178>
    }

    CO_SYNC_t* SYNC = stream->object;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8004f94:	68b8      	ldr	r0, [r7, #8]
 8004f96:	f7ff ff0b 	bl	8004db0 <CO_getUint32>
 8004f9a:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fa4:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    bool_t isProducer = (cobIdSync & 0x40000000U) != 0U;
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bf14      	ite	ne
 8004fb0:	2301      	movne	r3, #1
 8004fb2:	2300      	moveq	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	61bb      	str	r3, [r7, #24]
    if (((cobIdSync & 0xBFFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8004fb8:	6a3a      	ldr	r2, [r7, #32]
 8004fba:	4b48      	ldr	r3, [pc, #288]	@ (80050dc <OD_write_1005+0x180>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d133      	bne.n	800502a <OD_write_1005+0xce>
 8004fc2:	8bfb      	ldrh	r3, [r7, #30]
 8004fc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fc6:	d930      	bls.n	800502a <OD_write_1005+0xce>
 8004fc8:	8bfb      	ldrh	r3, [r7, #30]
 8004fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fce:	d903      	bls.n	8004fd8 <OD_write_1005+0x7c>
 8004fd0:	8bfb      	ldrh	r3, [r7, #30]
 8004fd2:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8004fd6:	d928      	bls.n	800502a <OD_write_1005+0xce>
 8004fd8:	8bfb      	ldrh	r3, [r7, #30]
 8004fda:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8004fde:	d903      	bls.n	8004fe8 <OD_write_1005+0x8c>
 8004fe0:	8bfb      	ldrh	r3, [r7, #30]
 8004fe2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004fe6:	d320      	bcc.n	800502a <OD_write_1005+0xce>
 8004fe8:	8bfb      	ldrh	r3, [r7, #30]
 8004fea:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004fee:	d903      	bls.n	8004ff8 <OD_write_1005+0x9c>
 8004ff0:	8bfb      	ldrh	r3, [r7, #30]
 8004ff2:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8004ff6:	d318      	bcc.n	800502a <OD_write_1005+0xce>
 8004ff8:	8bfb      	ldrh	r3, [r7, #30]
 8004ffa:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8004ffe:	d303      	bcc.n	8005008 <OD_write_1005+0xac>
 8005000:	8bfb      	ldrh	r3, [r7, #30]
 8005002:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005006:	d310      	bcc.n	800502a <OD_write_1005+0xce>
 8005008:	8bfb      	ldrh	r3, [r7, #30]
 800500a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800500e:	d80c      	bhi.n	800502a <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && (CAN_ID != SYNC->CAN_ID))) {
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <OD_write_1005+0xd2>
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <OD_write_1005+0xd2>
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8005024:	8bfa      	ldrh	r2, [r7, #30]
 8005026:	429a      	cmp	r2, r3
 8005028:	d001      	beq.n	800502e <OD_write_1005+0xd2>
        return ODR_INVALID_VALUE;
 800502a:	230f      	movs	r3, #15
 800502c:	e052      	b.n	80050d4 <OD_write_1005+0x178>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8005034:	8bfa      	ldrh	r2, [r7, #30]
 8005036:	429a      	cmp	r2, r3
 8005038:	d039      	beq.n	80050ae <OD_write_1005+0x152>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(SYNC->CANdevRx, SYNC->CANdevRxIdx, CAN_ID, 0x7FF, false,
 800503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	8e99      	ldrh	r1, [r3, #52]	@ 0x34
 8005042:	8bfa      	ldrh	r2, [r7, #30]
 8005044:	4b26      	ldr	r3, [pc, #152]	@ (80050e0 <OD_write_1005+0x184>)
 8005046:	9302      	str	r3, [sp, #8]
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	9301      	str	r3, [sp, #4]
 800504c:	2300      	movs	r3, #0
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8005054:	f002 fa92 	bl	800757c <CO_CANrxBufferInit>
 8005058:	4603      	mov	r3, r0
 800505a:	75fb      	strb	r3, [r7, #23]
                                                     (void*)SYNC, CO_SYNC_receive);

        if (CANret != CO_ERROR_NO) {
 800505c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8005064:	2309      	movs	r3, #9
 8005066:	e035      	b.n	80050d4 <OD_write_1005+0x178>
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 8005068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
                                             (SYNC->counterOverflowValue != 0U) ? 1U : 0U, false);
 8005072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005074:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <OD_write_1005+0x122>
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <OD_write_1005+0x124>
 800507e:	2300      	movs	r3, #0
 8005080:	8bfa      	ldrh	r2, [r7, #30]
 8005082:	2400      	movs	r4, #0
 8005084:	9401      	str	r4, [sp, #4]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2300      	movs	r3, #0
 800508a:	f002 fad5 	bl	8007638 <CO_CANtxBufferInit>
 800508e:	4602      	mov	r2, r0
 8005090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005092:	62da      	str	r2, [r3, #44]	@ 0x2c

        if (SYNC->CANtxBuff == NULL) {
 8005094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d104      	bne.n	80050a6 <OD_write_1005+0x14a>
            SYNC->isProducer = false;
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	2200      	movs	r2, #0
 80050a0:	625a      	str	r2, [r3, #36]	@ 0x24
            return ODR_DEV_INCOMPAT;
 80050a2:	2309      	movs	r3, #9
 80050a4:	e016      	b.n	80050d4 <OD_write_1005+0x178>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	8bfa      	ldrh	r2, [r7, #30]
 80050aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = isProducer;
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (isProducer) {
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d005      	beq.n	80050c6 <OD_write_1005+0x16a>
        SYNC->counter = 0;
 80050ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050bc:	2200      	movs	r2, #0
 80050be:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	2200      	movs	r2, #0
 80050c4:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f7fd f9be 	bl	800244e <OD_writeOriginal>
 80050d2:	4603      	mov	r3, r0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	372c      	adds	r7, #44	@ 0x2c
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd90      	pop	{r4, r7, pc}
 80050dc:	bffff800 	.word	0xbffff800
 80050e0:	08004ecf 	.word	0x08004ecf

080050e4 <OD_write_1019>:
 * Custom function for writing OD object "Synchronous counter overflow value"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1019(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80050e4:	b590      	push	{r4, r7, lr}
 80050e6:	b089      	sub	sp, #36	@ 0x24
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint8_t))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00c      	beq.n	8005112 <OD_write_1019+0x2e>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	7d1b      	ldrb	r3, [r3, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d108      	bne.n	8005112 <OD_write_1019+0x2e>
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <OD_write_1019+0x2e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d102      	bne.n	8005112 <OD_write_1019+0x2e>
        || (countWritten == NULL)) {
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <OD_write_1019+0x32>
        return ODR_DEV_INCOMPAT;
 8005112:	2309      	movs	r3, #9
 8005114:	e040      	b.n	8005198 <OD_write_1019+0xb4>
    }

    CO_SYNC_t* SYNC = stream->object;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 800511c:	68b8      	ldr	r0, [r7, #8]
 800511e:	f7ff fe39 	bl	8004d94 <CO_getUint8>
 8005122:	4603      	mov	r3, r0
 8005124:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if ((syncCounterOvf == 1U) || (syncCounterOvf > 240U)) {
 8005126:	7cfb      	ldrb	r3, [r7, #19]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d002      	beq.n	8005132 <OD_write_1019+0x4e>
 800512c:	7cfb      	ldrb	r3, [r7, #19]
 800512e:	2bf0      	cmp	r3, #240	@ 0xf0
 8005130:	d901      	bls.n	8005136 <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 8005132:	230f      	movs	r3, #15
 8005134:	e030      	b.n	8005198 <OD_write_1019+0xb4>
    }
    if (*SYNC->OD_1006_period != 0U) {
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 8005140:	2317      	movs	r3, #23
 8005142:	e029      	b.n	8005198 <OD_write_1019+0xb4>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, SYNC->CAN_ID, false,
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8005154:	7cfb      	ldrb	r3, [r7, #19]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <OD_write_1019+0x7a>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <OD_write_1019+0x7c>
 800515e:	2300      	movs	r3, #0
 8005160:	2400      	movs	r4, #0
 8005162:	9401      	str	r4, [sp, #4]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	2300      	movs	r3, #0
 8005168:	f002 fa66 	bl	8007638 <CO_CANtxBufferInit>
 800516c:	4602      	mov	r2, r0
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	62da      	str	r2, [r3, #44]	@ 0x2c
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);

    if (SYNC->CANtxBuff == NULL) {
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d104      	bne.n	8005184 <OD_write_1019+0xa0>
        SYNC->isProducer = false;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2200      	movs	r2, #0
 800517e:	625a      	str	r2, [r3, #36]	@ 0x24
        return ODR_DEV_INCOMPAT;
 8005180:	2309      	movs	r3, #9
 8005182:	e009      	b.n	8005198 <OD_write_1019+0xb4>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	7cfa      	ldrb	r2, [r7, #19]
 8005188:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f7fd f95c 	bl	800244e <OD_writeOriginal>
 8005196:	4603      	mov	r3, r0
}
 8005198:	4618      	mov	r0, r3
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	bd90      	pop	{r4, r7, pc}

080051a0 <CO_SYNC_init>:
             OD_entry_t* OD_1007_syncWindowLen, OD_entry_t* OD_1019_syncCounterOvf, CO_CANmodule_t* CANdevRx,
             uint16_t CANdevRxIdx,
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08c      	sub	sp, #48	@ 0x30
 80051a4:	af04      	add	r7, sp, #16
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if ((SYNC == NULL) || (em == NULL) || (OD_1005_cobIdSync == NULL)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00e      	beq.n	80051d2 <CO_SYNC_init+0x32>
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00b      	beq.n	80051d2 <CO_SYNC_init+0x32>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d008      	beq.n	80051d2 <CO_SYNC_init+0x32>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        || (OD_1006_commCyclePeriod == NULL) || (CANdevTx == NULL)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d005      	beq.n	80051d2 <CO_SYNC_init+0x32>
 80051c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <CO_SYNC_init+0x32>
#endif
        || (CANdevRx == NULL)) {
 80051cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <CO_SYNC_init+0x38>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80051d2:	f04f 33ff 	mov.w	r3, #4294967295
 80051d6:	e0fd      	b.n	80053d4 <CO_SYNC_init+0x234>
    }

    /* clear object */
    (void)memset(SYNC, 0, sizeof(CO_SYNC_t));
 80051d8:	225c      	movs	r2, #92	@ 0x5c
 80051da:	2100      	movs	r1, #0
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f011 ff43 	bl	8017068 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 80051e2:	2380      	movs	r3, #128	@ 0x80
 80051e4:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 80051e6:	f107 0218 	add.w	r2, r7, #24
 80051ea:	2301      	movs	r3, #1
 80051ec:	2100      	movs	r1, #0
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7ff fe26 	bl	8004e40 <OD_get_u32>
 80051f4:	4603      	mov	r3, r0
 80051f6:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 80051f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00c      	beq.n	800521a <CO_SYNC_init+0x7a>
        if (errInfo != NULL) {
 8005200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005202:	2b00      	cmp	r3, #0
 8005204:	d006      	beq.n	8005214 <CO_SYNC_init+0x74>
            *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff fde0 	bl	8004dcc <OD_getIndex>
 800520c:	4603      	mov	r3, r0
 800520e:	461a      	mov	r2, r3
 8005210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005212:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8005214:	f06f 030b 	mvn.w	r3, #11
 8005218:	e0dc      	b.n	80053d4 <CO_SYNC_init+0x234>
    }
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->OD_1005_extension.object = SYNC;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	639a      	str	r2, [r3, #56]	@ 0x38
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4a6e      	ldr	r2, [pc, #440]	@ (80053dc <CO_SYNC_init+0x23c>)
 8005224:	63da      	str	r2, [r3, #60]	@ 0x3c
    SYNC->OD_1005_extension.write = OD_write_1005;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4a6d      	ldr	r2, [pc, #436]	@ (80053e0 <CO_SYNC_init+0x240>)
 800522a:	641a      	str	r2, [r3, #64]	@ 0x40
    (void)OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3338      	adds	r3, #56	@ 0x38
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fddb 	bl	8004dee <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0, sizeof(uint32_t), NULL);
 8005238:	2300      	movs	r3, #0
 800523a:	2204      	movs	r2, #4
 800523c:	2100      	movs	r1, #0
 800523e:	6838      	ldr	r0, [r7, #0]
 8005240:	f7fd fb8a 	bl	8002958 <OD_getPtr>
 8005244:	4602      	mov	r2, r0
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	61da      	str	r2, [r3, #28]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    if (SYNC->OD_1006_period == NULL) {
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10c      	bne.n	800526c <CO_SYNC_init+0xcc>
        if (errInfo != NULL) {
 8005252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d006      	beq.n	8005266 <CO_SYNC_init+0xc6>
            *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 8005258:	6838      	ldr	r0, [r7, #0]
 800525a:	f7ff fdb7 	bl	8004dcc <OD_getIndex>
 800525e:	4603      	mov	r3, r0
 8005260:	461a      	mov	r2, r3
 8005262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005264:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8005266:	f06f 030b 	mvn.w	r3, #11
 800526a:	e0b3      	b.n	80053d4 <CO_SYNC_init+0x234>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0, sizeof(uint32_t), NULL);
 800526c:	2300      	movs	r3, #0
 800526e:	2204      	movs	r2, #4
 8005270:	2100      	movs	r1, #0
 8005272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005274:	f7fd fb70 	bl	8002958 <OD_getPtr>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	621a      	str	r2, [r3, #32]
    if ((OD_1007_syncWindowLen != NULL) && (SYNC->OD_1007_window == NULL)) {
 800527e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005280:	2b00      	cmp	r3, #0
 8005282:	d010      	beq.n	80052a6 <CO_SYNC_init+0x106>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10c      	bne.n	80052a6 <CO_SYNC_init+0x106>
        if (errInfo != NULL) {
 800528c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	d006      	beq.n	80052a0 <CO_SYNC_init+0x100>
            *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 8005292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005294:	f7ff fd9a 	bl	8004dcc <OD_getIndex>
 8005298:	4603      	mov	r3, r0
 800529a:	461a      	mov	r2, r3
 800529c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800529e:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80052a0:	f06f 030b 	mvn.w	r3, #11
 80052a4:	e096      	b.n	80053d4 <CO_SYNC_init+0x234>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and configure extension */
    uint8_t syncCounterOvf = 0;
 80052a6:	2300      	movs	r3, #0
 80052a8:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 80052aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d033      	beq.n	8005318 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 80052b0:	f107 0217 	add.w	r2, r7, #23
 80052b4:	2301      	movs	r3, #1
 80052b6:	2100      	movs	r1, #0
 80052b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80052ba:	f7ff fdac 	bl	8004e16 <OD_get_u8>
 80052be:	4603      	mov	r3, r0
 80052c0:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 80052c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00c      	beq.n	80052e4 <CO_SYNC_init+0x144>
            if (errInfo != NULL) {
 80052ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d006      	beq.n	80052de <CO_SYNC_init+0x13e>
                *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 80052d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80052d2:	f7ff fd7b 	bl	8004dcc <OD_getIndex>
 80052d6:	4603      	mov	r3, r0
 80052d8:	461a      	mov	r2, r3
 80052da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052dc:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 80052de:	f06f 030b 	mvn.w	r3, #11
 80052e2:	e077      	b.n	80053d4 <CO_SYNC_init+0x234>
        }
        if (syncCounterOvf == 1U) {
 80052e4:	7dfb      	ldrb	r3, [r7, #23]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d102      	bne.n	80052f0 <CO_SYNC_init+0x150>
            syncCounterOvf = 2;
 80052ea:	2302      	movs	r3, #2
 80052ec:	75fb      	strb	r3, [r7, #23]
 80052ee:	e004      	b.n	80052fa <CO_SYNC_init+0x15a>
        } else if (syncCounterOvf > 240U) {
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
 80052f2:	2bf0      	cmp	r3, #240	@ 0xf0
 80052f4:	d901      	bls.n	80052fa <CO_SYNC_init+0x15a>
            syncCounterOvf = 240;
 80052f6:	23f0      	movs	r3, #240	@ 0xf0
 80052f8:	75fb      	strb	r3, [r7, #23]
        } else { /* MISRA C 2004 14.10 */
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->OD_1019_extension.object = SYNC;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	64da      	str	r2, [r3, #76]	@ 0x4c
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4a36      	ldr	r2, [pc, #216]	@ (80053dc <CO_SYNC_init+0x23c>)
 8005304:	651a      	str	r2, [r3, #80]	@ 0x50
        SYNC->OD_1019_extension.write = OD_write_1019;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a36      	ldr	r2, [pc, #216]	@ (80053e4 <CO_SYNC_init+0x244>)
 800530a:	655a      	str	r2, [r3, #84]	@ 0x54
        (void)OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	334c      	adds	r3, #76	@ 0x4c
 8005310:	4619      	mov	r1, r3
 8005312:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005314:	f7ff fd6b 	bl	8004dee <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8005318:	7dfa      	ldrb	r2, [r7, #23]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = (cobIdSync & 0x40000000U) != 0U;
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	bf14      	ite	ne
 800532e:	2301      	movne	r3, #1
 8005330:	2300      	moveq	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	461a      	mov	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	625a      	str	r2, [r3, #36]	@ 0x24
    SYNC->CANdevTx = CANdevTx;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800533e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    SYNC->CANdevRx = CANdevRx;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005354:	631a      	str	r2, [r3, #48]	@ 0x30
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800535a:	869a      	strh	r2, [r3, #52]	@ 0x34
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANdevTxIdx = CANdevTxIdx;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8005360:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
#endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, (uint16_t)(cobIdSync & 0x7FFU), 0x7FF, false,
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800536c:	b29a      	uxth	r2, r3
 800536e:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8005370:	4b1d      	ldr	r3, [pc, #116]	@ (80053e8 <CO_SYNC_init+0x248>)
 8005372:	9302      	str	r3, [sp, #8]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	2300      	movs	r3, #0
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8005380:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005382:	f002 f8fb 	bl	800757c <CO_CANrxBufferInit>
 8005386:	4603      	mov	r3, r0
 8005388:	77bb      	strb	r3, [r7, #30]
                                              (void*)SYNC, CO_SYNC_receive);
    if (ret != CO_ERROR_NO) {
 800538a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <CO_SYNC_init+0x1f8>
        return ret;
 8005392:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005396:	e01d      	b.n	80053d4 <CO_SYNC_init+0x234>
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	b29b      	uxth	r3, r3
 800539c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053a0:	b29a      	uxth	r2, r3
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <CO_SYNC_init+0x20c>
 80053a8:	2301      	movs	r3, #1
 80053aa:	e000      	b.n	80053ae <CO_SYNC_init+0x20e>
 80053ac:	2300      	movs	r3, #0
 80053ae:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 80053b0:	2000      	movs	r0, #0
 80053b2:	9001      	str	r0, [sp, #4]
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	2300      	movs	r3, #0
 80053b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80053ba:	f002 f93d 	bl	8007638 <CO_CANtxBufferInit>
 80053be:	4602      	mov	r2, r0
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (SYNC->CANtxBuff == NULL) {
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d102      	bne.n	80053d2 <CO_SYNC_init+0x232>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80053cc:	f04f 33ff 	mov.w	r3, #4294967295
 80053d0:	e000      	b.n	80053d4 <CO_SYNC_init+0x234>
    }
#endif

    return CO_ERROR_NO;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3720      	adds	r7, #32
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	0800239f 	.word	0x0800239f
 80053e0:	08004f5d 	.word	0x08004f5d
 80053e4:	080050e5 	.word	0x080050e5
 80053e8:	08004ecf 	.word	0x08004ecf

080053ec <CO_SYNC_process>:
    }
}
#endif

CO_SYNC_status_t
CO_SYNC_process(CO_SYNC_t* SYNC, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	@ 0x28
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 80053fa:	2300      	movs	r3, #0
 80053fc:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 8088 	beq.w	8005516 <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	4413      	add	r3, r2
 800540e:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) {
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	429a      	cmp	r2, r3
 8005418:	d902      	bls.n	8005420 <CO_SYNC_process+0x34>
            SYNC->timer = timerNew;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	619a      	str	r2, [r3, #24]
        }

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d007      	beq.n	8005438 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 800542e:	2301      	movs	r3, #1
 8005430:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = (SYNC->OD_1006_period != NULL) ? *SYNC->OD_1006_period : 0U;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <CO_SYNC_process+0x5c>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	e000      	b.n	800544a <CO_SYNC_process+0x5e>
 8005448:	2300      	movs	r3, #0
 800544a:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0U) {
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d031      	beq.n	80054b6 <CO_SYNC_process+0xca>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
            if (SYNC->isProducer) {
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	429a      	cmp	r2, r3
 8005462:	d828      	bhi.n	80054b6 <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 8005464:	2301      	movs	r3, #1
 8005466:	77fb      	strb	r3, [r7, #31]
                    (void)CO_SYNCsend(SYNC);
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f7ff fcfe 	bl	8004e6a <CO_SYNCsend>
 800546e:	e022      	b.n	80054b6 <CO_SYNC_process+0xca>
#endif
            } else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

                /* Verify timeout of SYNC */
                if (SYNC->timeoutError == 1U) {
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	7c1b      	ldrb	r3, [r3, #16]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d11e      	bne.n	80054b6 <CO_SYNC_process+0xca>
                    /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                    uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	085b      	lsrs	r3, r3, #1
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4413      	add	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]
                    if (periodTimeout < OD_1006_period) {
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	429a      	cmp	r2, r3
 8005488:	d202      	bcs.n	8005490 <CO_SYNC_process+0xa4>
                        periodTimeout = 0xFFFFFFFFU;
 800548a:	f04f 33ff 	mov.w	r3, #4294967295
 800548e:	61bb      	str	r3, [r7, #24]
                    }

                    if (SYNC->timer > periodTimeout) {
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	429a      	cmp	r2, r3
 8005498:	d20d      	bcs.n	80054b6 <CO_SYNC_process+0xca>
                        CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80054a8:	2218      	movs	r2, #24
 80054aa:	2101      	movs	r1, #1
 80054ac:	f7fc f93f 	bl	800172e <CO_error>
                        SYNC->timeoutError = 2;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2202      	movs	r2, #2
 80054b4:	741a      	strb	r2, [r3, #16]
                } else { /* MISRA C 2004 14.10 */
                }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if ((SYNC->OD_1007_window != NULL) && (*SYNC->OD_1007_window > 0U) && (SYNC->timer > *SYNC->OD_1007_window)) {
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d015      	beq.n	80054ea <CO_SYNC_process+0xfe>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d010      	beq.n	80054ea <CO_SYNC_process+0xfe>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	699a      	ldr	r2, [r3, #24]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d909      	bls.n	80054ea <CO_SYNC_process+0xfe>
            if (!SYNC->syncIsOutsideWindow) {
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 80054de:	2302      	movs	r3, #2
 80054e0:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	615a      	str	r2, [r3, #20]
 80054e8:	e002      	b.n	80054f0 <CO_SYNC_process+0x104>
        } else {
            SYNC->syncIsOutsideWindow = false;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0U) {
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	7a1b      	ldrb	r3, [r3, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01a      	beq.n	800552e <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	7a1b      	ldrb	r3, [r3, #8]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	f248 2340 	movw	r3, #33344	@ 0x8240
 8005506:	2219      	movs	r2, #25
 8005508:	2101      	movs	r1, #1
 800550a:	f7fc f910 	bl	800172e <CO_error>
            SYNC->receiveError = 0;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	721a      	strb	r2, [r3, #8]
 8005514:	e00b      	b.n	800552e <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 800552e:	7ffb      	ldrb	r3, [r7, #31]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d10f      	bne.n	8005554 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2U) {
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	7c1b      	ldrb	r3, [r3, #16]
 8005538:	2b02      	cmp	r3, #2
 800553a:	d108      	bne.n	800554e <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	2300      	movs	r3, #0
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	2300      	movs	r3, #0
 8005546:	2218      	movs	r2, #24
 8005548:	2100      	movs	r1, #0
 800554a:	f7fc f8f0 	bl	800172e <CO_error>
        }
        SYNC->timeoutError = 1;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 8005554:	7ffb      	ldrb	r3, [r7, #31]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3720      	adds	r7, #32
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <CO_getUint16>:
CO_getUint16(const void* buf) {
 800555e:	b480      	push	{r7}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	b29b      	uxth	r3, r3
 800556c:	81fb      	strh	r3, [r7, #14]
    return value;
 800556e:	89fb      	ldrh	r3, [r7, #14]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <CO_getUint32>:
CO_getUint32(const void* buf) {
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60fb      	str	r3, [r7, #12]
    return value;
 800558a:	68fb      	ldr	r3, [r7, #12]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <OD_getIndex+0x14>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	e000      	b.n	80055ae <OD_getIndex+0x16>
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80055ca:	2305      	movs	r3, #5
 80055cc:	e003      	b.n	80055d6 <OD_extension_init+0x1c>
    entry->extension = extension;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b086      	sub	sp, #24
 80055e6:	af02      	add	r7, sp, #8
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
 80055ee:	460b      	mov	r3, r1
 80055f0:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80055f2:	7af9      	ldrb	r1, [r7, #11]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	2304      	movs	r3, #4
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f7fd f931 	bl	8002864 <OD_get_value>
 8005602:	4603      	mov	r3, r0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_TIME_receive(void* object, void* msg) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
    CO_TIME_t* TIME = object;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	791b      	ldrb	r3, [r3, #4]
 800561e:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	3305      	adds	r3, #5
 8005624:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8005626:	7cfb      	ldrb	r3, [r7, #19]
 8005628:	2b06      	cmp	r3, #6
 800562a:	d108      	bne.n	800563e <CO_TIME_receive+0x32>
        (void)memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2206      	movs	r2, #6
 8005630:	68f9      	ldr	r1, [r7, #12]
 8005632:	4618      	mov	r0, r3
 8005634:	f011 fdbb 	bl	80171ae <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2201      	movs	r2, #1
 800563c:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 800563e:	bf00      	nop
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <OD_write_1012>:
 * Custom function for writing OD object "COB-ID time stamp"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1012(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00c      	beq.n	8005676 <OD_write_1012+0x2e>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	7d1b      	ldrb	r3, [r3, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d108      	bne.n	8005676 <OD_write_1012+0x2e>
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d005      	beq.n	8005676 <OD_write_1012+0x2e>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b04      	cmp	r3, #4
 800566e:	d102      	bne.n	8005676 <OD_write_1012+0x2e>
        || (countWritten == NULL)) {
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <OD_write_1012+0x32>
        return ODR_DEV_INCOMPAT;
 8005676:	2309      	movs	r3, #9
 8005678:	e051      	b.n	800571e <OD_write_1012+0xd6>
    }

    CO_TIME_t* TIME = stream->object;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 8005680:	68b8      	ldr	r0, [r7, #8]
 8005682:	f7ff ff7b 	bl	800557c <CO_getUint32>
 8005686:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005690:	82fb      	strh	r3, [r7, #22]
    if (((cobIdTimeStamp & 0x3FFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4b24      	ldr	r3, [pc, #144]	@ (8005728 <OD_write_1012+0xe0>)
 8005696:	4013      	ands	r3, r2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d126      	bne.n	80056ea <OD_write_1012+0xa2>
 800569c:	8afb      	ldrh	r3, [r7, #22]
 800569e:	2b7f      	cmp	r3, #127	@ 0x7f
 80056a0:	d923      	bls.n	80056ea <OD_write_1012+0xa2>
 80056a2:	8afb      	ldrh	r3, [r7, #22]
 80056a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056a8:	d903      	bls.n	80056b2 <OD_write_1012+0x6a>
 80056aa:	8afb      	ldrh	r3, [r7, #22]
 80056ac:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80056b0:	d91b      	bls.n	80056ea <OD_write_1012+0xa2>
 80056b2:	8afb      	ldrh	r3, [r7, #22]
 80056b4:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80056b8:	d903      	bls.n	80056c2 <OD_write_1012+0x7a>
 80056ba:	8afb      	ldrh	r3, [r7, #22]
 80056bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80056c0:	d313      	bcc.n	80056ea <OD_write_1012+0xa2>
 80056c2:	8afb      	ldrh	r3, [r7, #22]
 80056c4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80056c8:	d903      	bls.n	80056d2 <OD_write_1012+0x8a>
 80056ca:	8afb      	ldrh	r3, [r7, #22]
 80056cc:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 80056d0:	d30b      	bcc.n	80056ea <OD_write_1012+0xa2>
 80056d2:	8afb      	ldrh	r3, [r7, #22]
 80056d4:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 80056d8:	d303      	bcc.n	80056e2 <OD_write_1012+0x9a>
 80056da:	8afb      	ldrh	r3, [r7, #22]
 80056dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056e0:	d303      	bcc.n	80056ea <OD_write_1012+0xa2>
 80056e2:	8afb      	ldrh	r3, [r7, #22]
 80056e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056e8:	d901      	bls.n	80056ee <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 80056ea:	230f      	movs	r3, #15
 80056ec:	e017      	b.n	800571e <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	0fdb      	lsrs	r3, r3, #31
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	bf14      	ite	ne
 8005704:	2301      	movne	r3, #1
 8005706:	2300      	moveq	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f7fc fe99 	bl	800244e <OD_writeOriginal>
 800571c:	4603      	mov	r3, r0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3720      	adds	r7, #32
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	3ffff800 	.word	0x3ffff800

0800572c <CO_TIME_init>:
CO_ReturnError_t
CO_TIME_init(CO_TIME_t* TIME, OD_entry_t* OD_1012_cobIdTimeStamp, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 800572c:	b580      	push	{r7, lr}
 800572e:	b08c      	sub	sp, #48	@ 0x30
 8005730:	af04      	add	r7, sp, #16
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
 8005738:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if ((TIME == NULL) || (OD_1012_cobIdTimeStamp == NULL) || (CANdevRx == NULL)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d005      	beq.n	800574c <CO_TIME_init+0x20>
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <CO_TIME_init+0x20>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d102      	bne.n	8005752 <CO_TIME_init+0x26>
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800574c:	f04f 33ff 	mov.w	r3, #4294967295
 8005750:	e061      	b.n	8005816 <CO_TIME_init+0xea>
    }

    (void)memset(TIME, 0, sizeof(CO_TIME_t));
 8005752:	222c      	movs	r2, #44	@ 0x2c
 8005754:	2100      	movs	r1, #0
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f011 fc86 	bl	8017068 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 800575c:	f107 0214 	add.w	r2, r7, #20
 8005760:	2301      	movs	r3, #1
 8005762:	2100      	movs	r1, #0
 8005764:	68b8      	ldr	r0, [r7, #8]
 8005766:	f7ff ff3c 	bl	80055e2 <OD_get_u32>
 800576a:	4603      	mov	r3, r0
 800576c:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 800576e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00c      	beq.n	8005790 <CO_TIME_init+0x64>
        if (errInfo != NULL) {
 8005776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005778:	2b00      	cmp	r3, #0
 800577a:	d006      	beq.n	800578a <CO_TIME_init+0x5e>
            *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 800577c:	68b8      	ldr	r0, [r7, #8]
 800577e:	f7ff ff0b 	bl	8005598 <OD_getIndex>
 8005782:	4603      	mov	r3, r0
 8005784:	461a      	mov	r2, r3
 8005786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005788:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800578a:	f06f 030b 	mvn.w	r3, #11
 800578e:	e042      	b.n	8005816 <CO_TIME_init+0xea>
    }
#if ((CO_CONFIG_TIME)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    TIME->OD_1012_extension.object = TIME;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4a21      	ldr	r2, [pc, #132]	@ (8005820 <CO_TIME_init+0xf4>)
 800579a:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4a21      	ldr	r2, [pc, #132]	@ (8005824 <CO_TIME_init+0xf8>)
 80057a0:	625a      	str	r2, [r3, #36]	@ 0x24
    (void)OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	331c      	adds	r3, #28
 80057a6:	4619      	mov	r1, r3
 80057a8:	68b8      	ldr	r0, [r7, #8]
 80057aa:	f7ff ff06 	bl	80055ba <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057b6:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	0fdb      	lsrs	r3, r3, #31
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	461a      	mov	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bf14      	ite	ne
 80057ce:	2301      	movne	r3, #1
 80057d0:	2300      	moveq	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	461a      	mov	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
    if (TIME->isConsumer) {
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d015      	beq.n	8005814 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, cobId, 0x7FF, false, (void*)TIME,
 80057e8:	8bba      	ldrh	r2, [r7, #28]
 80057ea:	8879      	ldrh	r1, [r7, #2]
 80057ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005828 <CO_TIME_init+0xfc>)
 80057ee:	9302      	str	r3, [sp, #8]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	2300      	movs	r3, #0
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f001 febd 	bl	800757c <CO_CANrxBufferInit>
 8005802:	4603      	mov	r3, r0
 8005804:	76fb      	strb	r3, [r7, #27]
                                                  CO_TIME_receive);
        if (ret != CO_ERROR_NO) {
 8005806:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d002      	beq.n	8005814 <CO_TIME_init+0xe8>
            return ret;
 800580e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005812:	e000      	b.n	8005816 <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3720      	adds	r7, #32
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	0800239f 	.word	0x0800239f
 8005824:	08005649 	.word	0x08005649
 8005828:	0800560d 	.word	0x0800560d

0800582c <CO_TIME_process>:
    }
}
#endif

bool_t
CO_TIME_process(CO_TIME_t* TIME, bool_t NMTisPreOrOperational, uint32_t timeDifference_us) {
 800582c:	b580      	push	{r7, lr}
 800582e:	b08a      	sub	sp, #40	@ 0x28
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8005838:	2300      	movs	r3, #0
 800583a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d024      	beq.n	800588c <CO_TIME_process+0x60>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d020      	beq.n	800588c <CO_TIME_process+0x60>
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d01f      	beq.n	8005892 <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff fe91 	bl	800557c <CO_getUint32>
 800585a:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3304      	adds	r3, #4
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff fe7c 	bl	800555e <CO_getUint16>
 8005866:	4603      	mov	r3, r0
 8005868:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFFU;
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8bfa      	ldrh	r2, [r7, #30]
 8005878:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 8005880:	2301      	movs	r3, #1
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	619a      	str	r2, [r3, #24]
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 800588a:	e002      	b.n	8005892 <CO_TIME_process+0x66>
        }
    } else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && (timeDifference_us > 0U)) {
 8005896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005898:	2b00      	cmp	r3, #0
 800589a:	d132      	bne.n	8005902 <CO_TIME_process+0xd6>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d02f      	beq.n	8005902 <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	89db      	ldrh	r3, [r3, #14]
 80058a6:	461a      	mov	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4413      	add	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]
        ms = us / 1000U;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	4a16      	ldr	r2, [pc, #88]	@ (800590c <CO_TIME_process+0xe0>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	099b      	lsrs	r3, r3, #6
 80058b8:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = (uint16_t)(us % 1000U);
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4b13      	ldr	r3, [pc, #76]	@ (800590c <CO_TIME_process+0xe0>)
 80058be:	fba3 1302 	umull	r1, r3, r3, r2
 80058c2:	099b      	lsrs	r3, r3, #6
 80058c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	441a      	add	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000U * 60U * 60U * 24U)) {
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005910 <CO_TIME_process+0xe4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d90b      	bls.n	8005902 <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000U * 60U * 60U * 24U);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	4b09      	ldr	r3, [pc, #36]	@ (8005914 <CO_TIME_process+0xe8>)
 80058f0:	4413      	add	r3, r2
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	6093      	str	r3, [r2, #8]
            TIME->days += 1U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	899b      	ldrh	r3, [r3, #12]
 80058fa:	3301      	adds	r3, #1
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	819a      	strh	r2, [r3, #12]
    } else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005904:	4618      	mov	r0, r3
 8005906:	3728      	adds	r7, #40	@ 0x28
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	10624dd3 	.word	0x10624dd3
 8005910:	05265bff 	.word	0x05265bff
 8005914:	fad9a400 	.word	0xfad9a400

08005918 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0

CO_ReturnError_t
CO_LEDs_init(CO_LEDs_t* LEDs) {
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005920:	2300      	movs	r3, #0
 8005922:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d102      	bne.n	8005930 <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800592a:	f04f 33ff 	mov.w	r3, #4294967295
 800592e:	e006      	b.n	800593e <CO_LEDs_init+0x26>
    }

    /* clear the object */
    (void)memset(LEDs, 0, sizeof(CO_LEDs_t));
 8005930:	220c      	movs	r2, #12
 8005932:	2100      	movs	r1, #0
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f011 fb97 	bl	8017068 <memset>

    return ret;
 800593a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <CO_LEDs_process>:

void
CO_LEDs_process(CO_LEDs_t* LEDs, uint32_t timeDifference_us, CO_NMT_internalState_t NMTstate, bool_t LSSconfig,
                bool_t ErrCANbusOff, bool_t ErrCANbusWarn, bool_t ErrRpdo, bool_t ErrSync, bool_t ErrHbCons,
                bool_t ErrOther, bool_t firmwareDownload, uint32_t* timerNext_us) {
 8005948:	b480      	push	{r7}
 800594a:	b089      	sub	sp, #36	@ 0x24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	4613      	mov	r3, r2
 8005956:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 8005960:	2300      	movs	r3, #0
 8005962:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	441a      	add	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000U) {
 8005970:	e112      	b.n	8005b98 <CO_LEDs_process+0x250>
        bool_t rdFlickerNext = (LEDs->LEDred & (uint8_t)CO_LED_flicker) == 0U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	7a5b      	ldrb	r3, [r3, #9]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	bf0c      	ite	eq
 800597e:	2301      	moveq	r3, #1
 8005980:	2300      	movne	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	613b      	str	r3, [r7, #16]

        tick = true;
 8005986:	2301      	movs	r3, #1
 8005988:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000U;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f5a3 4343 	sub.w	r3, r3, #49920	@ 0xc300
 8005992:	3b50      	subs	r3, #80	@ 0x50
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3U) {
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	791b      	ldrb	r3, [r3, #4]
 800599c:	3301      	adds	r3, #1
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	711a      	strb	r2, [r3, #4]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	791b      	ldrb	r3, [r3, #4]
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	f240 80dd 	bls.w	8005b68 <CO_LEDs_process+0x220>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	711a      	strb	r2, [r3, #4]
            rd = 0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	77fb      	strb	r3, [r7, #31]
            gr = 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	77bb      	strb	r3, [r7, #30]

            if ((LEDs->LEDred & CO_LED_blink) == 0U) {
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	7a5b      	ldrb	r3, [r3, #9]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d104      	bne.n	80059d2 <CO_LEDs_process+0x8a>
                rd |= CO_LED_blink;
 80059c8:	7ffb      	ldrb	r3, [r7, #31]
 80059ca:	f043 0302 	orr.w	r3, r3, #2
 80059ce:	77fb      	strb	r3, [r7, #31]
 80059d0:	e003      	b.n	80059da <CO_LEDs_process+0x92>
            } else {
                gr |= CO_LED_blink;
 80059d2:	7fbb      	ldrb	r3, [r7, #30]
 80059d4:	f043 0302 	orr.w	r3, r3, #2
 80059d8:	77bb      	strb	r3, [r7, #30]
            }

            switch (++LEDs->LEDtmrflash_1) {
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	795b      	ldrb	r3, [r3, #5]
 80059de:	3301      	adds	r3, #1
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	715a      	strb	r2, [r3, #5]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	795b      	ldrb	r3, [r3, #5]
 80059ea:	2b06      	cmp	r3, #6
 80059ec:	d010      	beq.n	8005a10 <CO_LEDs_process+0xc8>
 80059ee:	2b06      	cmp	r3, #6
 80059f0:	dc12      	bgt.n	8005a18 <CO_LEDs_process+0xd0>
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d002      	beq.n	80059fc <CO_LEDs_process+0xb4>
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d005      	beq.n	8005a06 <CO_LEDs_process+0xbe>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: /* none */ break;
 80059fa:	e00d      	b.n	8005a18 <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 80059fc:	7ffb      	ldrb	r3, [r7, #31]
 80059fe:	f043 0304 	orr.w	r3, r3, #4
 8005a02:	77fb      	strb	r3, [r7, #31]
 8005a04:	e009      	b.n	8005a1a <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 8005a06:	7fbb      	ldrb	r3, [r7, #30]
 8005a08:	f043 0304 	orr.w	r3, r3, #4
 8005a0c:	77bb      	strb	r3, [r7, #30]
 8005a0e:	e004      	b.n	8005a1a <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	715a      	strb	r2, [r3, #5]
 8005a16:	e000      	b.n	8005a1a <CO_LEDs_process+0xd2>
                default: /* none */ break;
 8005a18:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	799b      	ldrb	r3, [r3, #6]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	719a      	strb	r2, [r3, #6]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	799b      	ldrb	r3, [r3, #6]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	2b07      	cmp	r3, #7
 8005a2e:	d821      	bhi.n	8005a74 <CO_LEDs_process+0x12c>
 8005a30:	a201      	add	r2, pc, #4	@ (adr r2, 8005a38 <CO_LEDs_process+0xf0>)
 8005a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a36:	bf00      	nop
 8005a38:	08005a59 	.word	0x08005a59
 8005a3c:	08005a63 	.word	0x08005a63
 8005a40:	08005a59 	.word	0x08005a59
 8005a44:	08005a63 	.word	0x08005a63
 8005a48:	08005a75 	.word	0x08005a75
 8005a4c:	08005a75 	.word	0x08005a75
 8005a50:	08005a75 	.word	0x08005a75
 8005a54:	08005a6d 	.word	0x08005a6d
                case 1:
                case 3: rd |= CO_LED_flash_2; break;
 8005a58:	7ffb      	ldrb	r3, [r7, #31]
 8005a5a:	f043 0308 	orr.w	r3, r3, #8
 8005a5e:	77fb      	strb	r3, [r7, #31]
 8005a60:	e009      	b.n	8005a76 <CO_LEDs_process+0x12e>
                case 2:
                case 4: gr |= CO_LED_flash_2; break;
 8005a62:	7fbb      	ldrb	r3, [r7, #30]
 8005a64:	f043 0308 	orr.w	r3, r3, #8
 8005a68:	77bb      	strb	r3, [r7, #30]
 8005a6a:	e004      	b.n	8005a76 <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	719a      	strb	r2, [r3, #6]
 8005a72:	e000      	b.n	8005a76 <CO_LEDs_process+0x12e>
                default: /* none */ break;
 8005a74:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	79db      	ldrb	r3, [r3, #7]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	71da      	strb	r2, [r3, #7]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	79db      	ldrb	r3, [r3, #7]
 8005a86:	2b0a      	cmp	r3, #10
 8005a88:	bf8c      	ite	hi
 8005a8a:	2201      	movhi	r2, #1
 8005a8c:	2200      	movls	r2, #0
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	2a00      	cmp	r2, #0
 8005a92:	d12c      	bne.n	8005aee <CO_LEDs_process+0x1a6>
 8005a94:	2201      	movs	r2, #1
 8005a96:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9a:	f003 0254 	and.w	r2, r3, #84	@ 0x54
 8005a9e:	2a00      	cmp	r2, #0
 8005aa0:	bf14      	ite	ne
 8005aa2:	2201      	movne	r2, #1
 8005aa4:	2200      	moveq	r2, #0
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	2a00      	cmp	r2, #0
 8005aaa:	d117      	bne.n	8005adc <CO_LEDs_process+0x194>
 8005aac:	f003 022a 	and.w	r2, r3, #42	@ 0x2a
 8005ab0:	2a00      	cmp	r2, #0
 8005ab2:	bf14      	ite	ne
 8005ab4:	2201      	movne	r2, #1
 8005ab6:	2200      	moveq	r2, #0
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	2a00      	cmp	r2, #0
 8005abc:	d109      	bne.n	8005ad2 <CO_LEDs_process+0x18a>
 8005abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	bf14      	ite	ne
 8005ac6:	2301      	movne	r3, #1
 8005ac8:	2300      	moveq	r3, #0
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10a      	bne.n	8005ae6 <CO_LEDs_process+0x19e>
                case 5: rd |= CO_LED_flash_3; break;
                case 2:
                case 4:
                case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: /* none */ break;
 8005ad0:	e00d      	b.n	8005aee <CO_LEDs_process+0x1a6>
                case 5: rd |= CO_LED_flash_3; break;
 8005ad2:	7ffb      	ldrb	r3, [r7, #31]
 8005ad4:	f043 0310 	orr.w	r3, r3, #16
 8005ad8:	77fb      	strb	r3, [r7, #31]
 8005ada:	e009      	b.n	8005af0 <CO_LEDs_process+0x1a8>
                case 6: gr |= CO_LED_flash_3; break;
 8005adc:	7fbb      	ldrb	r3, [r7, #30]
 8005ade:	f043 0310 	orr.w	r3, r3, #16
 8005ae2:	77bb      	strb	r3, [r7, #30]
 8005ae4:	e004      	b.n	8005af0 <CO_LEDs_process+0x1a8>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	71da      	strb	r2, [r3, #7]
 8005aec:	e000      	b.n	8005af0 <CO_LEDs_process+0x1a8>
                default: /* none */ break;
 8005aee:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	7a1b      	ldrb	r3, [r3, #8]
 8005af4:	3301      	adds	r3, #1
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	721a      	strb	r2, [r3, #8]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	7a1b      	ldrb	r3, [r3, #8]
 8005b00:	2b0c      	cmp	r3, #12
 8005b02:	bf8c      	ite	hi
 8005b04:	2201      	movhi	r2, #1
 8005b06:	2200      	movls	r2, #0
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	2a00      	cmp	r2, #0
 8005b0c:	d137      	bne.n	8005b7e <CO_LEDs_process+0x236>
 8005b0e:	2201      	movs	r2, #1
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	f403 72aa 	and.w	r2, r3, #340	@ 0x154
 8005b18:	2a00      	cmp	r2, #0
 8005b1a:	bf14      	ite	ne
 8005b1c:	2201      	movne	r2, #1
 8005b1e:	2200      	moveq	r2, #0
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	2a00      	cmp	r2, #0
 8005b24:	d117      	bne.n	8005b56 <CO_LEDs_process+0x20e>
 8005b26:	f003 02aa 	and.w	r2, r3, #170	@ 0xaa
 8005b2a:	2a00      	cmp	r2, #0
 8005b2c:	bf14      	ite	ne
 8005b2e:	2201      	movne	r2, #1
 8005b30:	2200      	moveq	r2, #0
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	2a00      	cmp	r2, #0
 8005b36:	d109      	bne.n	8005b4c <CO_LEDs_process+0x204>
 8005b38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bf14      	ite	ne
 8005b40:	2301      	movne	r3, #1
 8005b42:	2300      	moveq	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10a      	bne.n	8005b60 <CO_LEDs_process+0x218>
                case 2:
                case 4:
                case 6:
                case 8: gr |= CO_LED_flash_4; break;
                case 12: LEDs->LEDtmrflash_4 = 0; break;
                default: /* none */ break;
 8005b4a:	e018      	b.n	8005b7e <CO_LEDs_process+0x236>
                case 7: rd |= CO_LED_flash_4; break;
 8005b4c:	7ffb      	ldrb	r3, [r7, #31]
 8005b4e:	f043 0320 	orr.w	r3, r3, #32
 8005b52:	77fb      	strb	r3, [r7, #31]
 8005b54:	e014      	b.n	8005b80 <CO_LEDs_process+0x238>
                case 8: gr |= CO_LED_flash_4; break;
 8005b56:	7fbb      	ldrb	r3, [r7, #30]
 8005b58:	f043 0320 	orr.w	r3, r3, #32
 8005b5c:	77bb      	strb	r3, [r7, #30]
 8005b5e:	e00f      	b.n	8005b80 <CO_LEDs_process+0x238>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	721a      	strb	r2, [r3, #8]
 8005b66:	e00b      	b.n	8005b80 <CO_LEDs_process+0x238>
            }
        } else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	7a5b      	ldrb	r3, [r3, #9]
 8005b6c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005b70:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	7a9b      	ldrb	r3, [r3, #10]
 8005b76:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005b7a:	77bb      	strb	r3, [r7, #30]
 8005b7c:	e000      	b.n	8005b80 <CO_LEDs_process+0x238>
                default: /* none */ break;
 8005b7e:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) {
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d004      	beq.n	8005b90 <CO_LEDs_process+0x248>
            rd |= CO_LED_flicker;
 8005b86:	7ffb      	ldrb	r3, [r7, #31]
 8005b88:	f043 0301 	orr.w	r3, r3, #1
 8005b8c:	77fb      	strb	r3, [r7, #31]
 8005b8e:	e003      	b.n	8005b98 <CO_LEDs_process+0x250>
        } else {
            gr |= CO_LED_flicker;
 8005b90:	7fbb      	ldrb	r3, [r7, #30]
 8005b92:	f043 0301 	orr.w	r3, r3, #1
 8005b96:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000U) {
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	f63f aee6 	bhi.w	8005972 <CO_LEDs_process+0x2a>
        }

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d077      	beq.n	8005c9c <CO_LEDs_process+0x354>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if (ErrCANbusOff) {
 8005bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <CO_LEDs_process+0x270>
            rd_co = 1;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	75fb      	strb	r3, [r7, #23]
 8005bb6:	e032      	b.n	8005c1e <CO_LEDs_process+0x2d6>
        } else if (NMTstate == CO_NMT_INITIALIZING) {
 8005bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d104      	bne.n	8005bca <CO_LEDs_process+0x282>
            rd_co = rd & CO_LED_flicker;
 8005bc0:	7ffb      	ldrb	r3, [r7, #31]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	75fb      	strb	r3, [r7, #23]
 8005bc8:	e029      	b.n	8005c1e <CO_LEDs_process+0x2d6>
        } else if (ErrRpdo) {
 8005bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <CO_LEDs_process+0x292>
            rd_co = rd & CO_LED_flash_4;
 8005bd0:	7ffb      	ldrb	r3, [r7, #31]
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	75fb      	strb	r3, [r7, #23]
 8005bd8:	e021      	b.n	8005c1e <CO_LEDs_process+0x2d6>
        } else if (ErrSync) {
 8005bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d004      	beq.n	8005bea <CO_LEDs_process+0x2a2>
            rd_co = rd & CO_LED_flash_3;
 8005be0:	7ffb      	ldrb	r3, [r7, #31]
 8005be2:	f003 0310 	and.w	r3, r3, #16
 8005be6:	75fb      	strb	r3, [r7, #23]
 8005be8:	e019      	b.n	8005c1e <CO_LEDs_process+0x2d6>
        } else if (ErrHbCons) {
 8005bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d004      	beq.n	8005bfa <CO_LEDs_process+0x2b2>
            rd_co = rd & CO_LED_flash_2;
 8005bf0:	7ffb      	ldrb	r3, [r7, #31]
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	75fb      	strb	r3, [r7, #23]
 8005bf8:	e011      	b.n	8005c1e <CO_LEDs_process+0x2d6>
        } else if (ErrCANbusWarn) {
 8005bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d004      	beq.n	8005c0a <CO_LEDs_process+0x2c2>
            rd_co = rd & CO_LED_flash_1;
 8005c00:	7ffb      	ldrb	r3, [r7, #31]
 8005c02:	f003 0304 	and.w	r3, r3, #4
 8005c06:	75fb      	strb	r3, [r7, #23]
 8005c08:	e009      	b.n	8005c1e <CO_LEDs_process+0x2d6>
        } else if (ErrOther) {
 8005c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d004      	beq.n	8005c1a <CO_LEDs_process+0x2d2>
            rd_co = rd & CO_LED_blink;
 8005c10:	7ffb      	ldrb	r3, [r7, #31]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	75fb      	strb	r3, [r7, #23]
 8005c18:	e001      	b.n	8005c1e <CO_LEDs_process+0x2d6>
        } else {
            rd_co = 0;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	75fb      	strb	r3, [r7, #23]
        }

        /* CANopen green RUN LED */
        if (LSSconfig) {
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d004      	beq.n	8005c2e <CO_LEDs_process+0x2e6>
            gr_co = gr & CO_LED_flicker;
 8005c24:	7fbb      	ldrb	r3, [r7, #30]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	75bb      	strb	r3, [r7, #22]
 8005c2c:	e022      	b.n	8005c74 <CO_LEDs_process+0x32c>
        } else if (firmwareDownload) {
 8005c2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d004      	beq.n	8005c3e <CO_LEDs_process+0x2f6>
            gr_co = gr & CO_LED_flash_3;
 8005c34:	7fbb      	ldrb	r3, [r7, #30]
 8005c36:	f003 0310 	and.w	r3, r3, #16
 8005c3a:	75bb      	strb	r3, [r7, #22]
 8005c3c:	e01a      	b.n	8005c74 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_STOPPED) {
 8005c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d104      	bne.n	8005c50 <CO_LEDs_process+0x308>
            gr_co = gr & CO_LED_flash_1;
 8005c46:	7fbb      	ldrb	r3, [r7, #30]
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	75bb      	strb	r3, [r7, #22]
 8005c4e:	e011      	b.n	8005c74 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_PRE_OPERATIONAL) {
 8005c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c54:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c56:	d104      	bne.n	8005c62 <CO_LEDs_process+0x31a>
            gr_co = gr & CO_LED_blink;
 8005c58:	7fbb      	ldrb	r3, [r7, #30]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	75bb      	strb	r3, [r7, #22]
 8005c60:	e008      	b.n	8005c74 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_OPERATIONAL) {
 8005c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c66:	2b05      	cmp	r3, #5
 8005c68:	d102      	bne.n	8005c70 <CO_LEDs_process+0x328>
            gr_co = 1;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	75bb      	strb	r3, [r7, #22]
 8005c6e:	e001      	b.n	8005c74 <CO_LEDs_process+0x32c>
        } else {
            gr_co = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	75bb      	strb	r3, [r7, #22]
        }

        if (rd_co != 0U) {
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <CO_LEDs_process+0x33a>
            rd |= CO_LED_CANopen;
 8005c7a:	7ffb      	ldrb	r3, [r7, #31]
 8005c7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c80:	77fb      	strb	r3, [r7, #31]
        }
        if (gr_co != 0U) {
 8005c82:	7dbb      	ldrb	r3, [r7, #22]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <CO_LEDs_process+0x348>
            gr |= CO_LED_CANopen;
 8005c88:	7fbb      	ldrb	r3, [r7, #30]
 8005c8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c8e:	77bb      	strb	r3, [r7, #30]
        }
        LEDs->LEDred = rd;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	7ffa      	ldrb	r2, [r7, #31]
 8005c94:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	7fba      	ldrb	r2, [r7, #30]
 8005c9a:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8005c9c:	bf00      	nop
 8005c9e:	3724      	adds	r7, #36	@ 0x24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <CO_LSSslave_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_LSSslave_receive(void* object, void* msg) {
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b090      	sub	sp, #64	@ 0x40
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t* LSSslave = (CO_LSSslave_t*)object;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	791b      	ldrb	r3, [r3, #4]
 8005cba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if ((DLC == 8U) && !CO_FLAG_READ(LSSslave->sendResponse)) {
 8005cbe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	f040 814f 	bne.w	8005f66 <CO_LSSslave_receive+0x2be>
 8005cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f040 814a 	bne.w	8005f66 <CO_LSSslave_receive+0x2be>
        bool_t request_LSSslave_process = false;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        const uint8_t* data = CO_CANrxMsg_readData(msg);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	3305      	adds	r3, #5
 8005cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t cs = data[0];
 8005cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8005ce4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d12d      	bne.n	8005d48 <CO_LSSslave_receive+0xa0>
            uint8_t mode = data[1];
 8005cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cee:	3301      	adds	r3, #1
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 8005cf4:	7ffb      	ldrb	r3, [r7, #31]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <CO_LSSslave_receive+0x58>
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d020      	beq.n	8005d40 <CO_LSSslave_receive+0x98>
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
                    break;
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
                default:
                    /* none */
                    break;
 8005cfe:	e12c      	b.n	8005f5a <CO_LSSslave_receive+0x2b2>
                    if ((LSSslave->lssState == CO_LSS_STATE_CONFIGURATION)
 8005d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d02:	7c1b      	ldrb	r3, [r3, #16]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d110      	bne.n	8005d2a <CO_LSSslave_receive+0x82>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8005d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d0e:	2bff      	cmp	r3, #255	@ 0xff
 8005d10:	d10b      	bne.n	8005d2a <CO_LSSslave_receive+0x82>
                        && (*LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)) {
 8005d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2bff      	cmp	r3, #255	@ 0xff
 8005d1a:	d006      	beq.n	8005d2a <CO_LSSslave_receive+0x82>
                        LSSslave->service = cs;
 8005d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d1e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005d22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 8005d26:	2301      	movs	r3, #1
 8005d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	741a      	strb	r2, [r3, #16]
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
 8005d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d32:	3314      	adds	r3, #20
 8005d34:	2210      	movs	r2, #16
 8005d36:	2100      	movs	r1, #0
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f011 f995 	bl	8017068 <memset>
                    break;
 8005d3e:	e10c      	b.n	8005f5a <CO_LSSslave_receive+0x2b2>
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
 8005d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d42:	2201      	movs	r2, #1
 8005d44:	741a      	strb	r2, [r3, #16]
 8005d46:	e108      	b.n	8005f5a <CO_LSSslave_receive+0x2b2>
            }
        } else if (LSSslave->lssState == CO_LSS_STATE_WAITING) {
 8005d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d4a:	7c1b      	ldrb	r3, [r3, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f040 80f0 	bne.w	8005f32 <CO_LSSslave_receive+0x28a>
            switch (cs) {
 8005d52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d56:	3b40      	subs	r3, #64	@ 0x40
 8005d58:	2b11      	cmp	r3, #17
 8005d5a:	f200 80f9 	bhi.w	8005f50 <CO_LSSslave_receive+0x2a8>
 8005d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d64 <CO_LSSslave_receive+0xbc>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005dad 	.word	0x08005dad
 8005d68:	08005dbd 	.word	0x08005dbd
 8005d6c:	08005dcd 	.word	0x08005dcd
 8005d70:	08005ddd 	.word	0x08005ddd
 8005d74:	08005f51 	.word	0x08005f51
 8005d78:	08005f51 	.word	0x08005f51
 8005d7c:	08005f51 	.word	0x08005f51
 8005d80:	08005f51 	.word	0x08005f51
 8005d84:	08005f51 	.word	0x08005f51
 8005d88:	08005f51 	.word	0x08005f51
 8005d8c:	08005f51 	.word	0x08005f51
 8005d90:	08005f51 	.word	0x08005f51
 8005d94:	08005f51 	.word	0x08005f51
 8005d98:	08005f51 	.word	0x08005f51
 8005d9c:	08005f51 	.word	0x08005f51
 8005da0:	08005f51 	.word	0x08005f51
 8005da4:	08005f51 	.word	0x08005f51
 8005da8:	08005e39 	.word	0x08005e39
                case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dae:	3301      	adds	r3, #1
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	61bb      	str	r3, [r7, #24]
                    LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005db8:	615a      	str	r2, [r3, #20]
                    break;
 8005dba:	e0ce      	b.n	8005f5a <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	617b      	str	r3, [r7, #20]
                    LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc8:	619a      	str	r2, [r3, #24]
                    break;
 8005dca:	e0c6      	b.n	8005f5a <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_REV: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dce:	3301      	adds	r3, #1
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	613b      	str	r3, [r7, #16]
                    LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd8:	61da      	str	r2, [r3, #28]
                    break;
 8005dda:	e0be      	b.n	8005f5a <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dde:	3301      	adds	r3, #1
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60fb      	str	r3, [r7, #12]
                    LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005de8:	621a      	str	r2, [r3, #32]

                    if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress, LSSslave->lssSelect)) {
 8005dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	f040 80ae 	bne.w	8005f54 <CO_LSSslave_receive+0x2ac>
 8005df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	f040 80a7 	bne.w	8005f54 <CO_LSSslave_receive+0x2ac>
 8005e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	f040 80a0 	bne.w	8005f54 <CO_LSSslave_receive+0x2ac>
 8005e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	f040 8099 	bne.w	8005f54 <CO_LSSslave_receive+0x2ac>
                        LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e24:	2201      	movs	r2, #1
 8005e26:	741a      	strb	r2, [r3, #16]
                        LSSslave->service = cs;
 8005e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e2a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005e2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 8005e32:	2301      	movs	r3, #1
 8005e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    }
                    break;
 8005e36:	e08d      	b.n	8005f54 <CO_LSSslave_receive+0x2ac>
                }
                case CO_LSS_IDENT_FASTSCAN: {
                    /* fastscan is only active on unconfigured nodes */
                    if ((*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8005e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2bff      	cmp	r3, #255	@ 0xff
 8005e40:	f040 808a 	bne.w	8005f58 <CO_LSSslave_receive+0x2b0>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)) {
 8005e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e4a:	2bff      	cmp	r3, #255	@ 0xff
 8005e4c:	f040 8084 	bne.w	8005f58 <CO_LSSslave_receive+0x2b0>
                        uint8_t bitCheck = data[5];
 8005e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e52:	3305      	adds	r3, #5
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                        uint8_t lssSub = data[6];
 8005e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5c:	3306      	adds	r3, #6
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                        uint8_t lssNext = data[7];
 8005e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e66:	3307      	adds	r3, #7
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                        uint32_t valSw;
                        uint32_t idNumber;
                        bool_t ack;

                        if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub)
 8005e6e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005e72:	2b1f      	cmp	r3, #31
 8005e74:	d903      	bls.n	8005e7e <CO_LSSslave_receive+0x1d6>
 8005e76:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005e7a:	2b80      	cmp	r3, #128	@ 0x80
 8005e7c:	d16d      	bne.n	8005f5a <CO_LSSslave_receive+0x2b2>
 8005e7e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d869      	bhi.n	8005f5a <CO_LSSslave_receive+0x2b2>
                            || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
 8005e86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	d865      	bhi.n	8005f5a <CO_LSSslave_receive+0x2b2>
                            /* Invalid request */
                            break;
                        }

                        (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e90:	3301      	adds	r3, #1
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60bb      	str	r3, [r7, #8]
                        idNumber = CO_SWAP_32(valSw);
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	627b      	str	r3, [r7, #36]	@ 0x24
                        ack = false;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	63bb      	str	r3, [r7, #56]	@ 0x38

                        if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 8005e9e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005ea2:	2b80      	cmp	r3, #128	@ 0x80
 8005ea4:	d10d      	bne.n	8005ec2 <CO_LSSslave_receive+0x21a>
                            /* Confirm, Reset */
                            ack = true;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
                            LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                            (void)memset(&LSSslave->lssFastscan, 0, sizeof(LSSslave->lssFastscan));
 8005eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb4:	3324      	adds	r3, #36	@ 0x24
 8005eb6:	2210      	movs	r2, #16
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f011 f8d4 	bl	8017068 <memset>
 8005ec0:	e02c      	b.n	8005f1c <CO_LSSslave_receive+0x274>
                        } else if (LSSslave->fastscanPos == lssSub) {
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005ec8:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d125      	bne.n	8005f1c <CO_LSSslave_receive+0x274>
                            uint32_t mask = 0xFFFFFFFFU << bitCheck;
 8005ed0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8005edc:	623b      	str	r3, [r7, #32]

                            if ((LSSslave->lssAddress.addr[lssSub] & mask) == (idNumber & mask)) {
 8005ede:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	405a      	eors	r2, r3
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d113      	bne.n	8005f1c <CO_LSSslave_receive+0x274>
                                /* all requested bits match */
                                ack = true;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
                                LSSslave->fastscanPos = lssNext;
 8005ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005efa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005efe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

                                if ((bitCheck == 0U) && (lssNext < lssSub)) {
 8005f02:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d108      	bne.n	8005f1c <CO_LSSslave_receive+0x274>
 8005f0a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005f0e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d202      	bcs.n	8005f1c <CO_LSSslave_receive+0x274>
                                    /* complete match, enter configuration state */
                                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f18:	2201      	movs	r2, #1
 8005f1a:	741a      	strb	r2, [r3, #16]
                                }
                            }
                        } else { /* MISRA C 2004 14.10 */
                        }
                        if (ack) {
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01a      	beq.n	8005f58 <CO_LSSslave_receive+0x2b0>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE_FASTSCAN_DIRECT_RESPOND) != 0
                            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                            (void)memset(&LSSslave->TXbuff->data[1], 0, sizeof(LSSslave->TXbuff->data) - 1U);
                            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                            LSSslave->service = cs;
 8005f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f24:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005f28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                            request_LSSslave_process = true;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
                        }
                    }
                    break;
 8005f30:	e012      	b.n	8005f58 <CO_LSSslave_receive+0x2b0>
                    /* none */
                    break;
                }
            }
        } else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            (void)memcpy((void*)(&LSSslave->CANdata[0]), (const void*)(&data[0]), sizeof(LSSslave->CANdata));
 8005f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f34:	3349      	adds	r3, #73	@ 0x49
 8005f36:	2208      	movs	r2, #8
 8005f38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f011 f937 	bl	80171ae <memcpy>
            LSSslave->service = cs;
 8005f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f42:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005f46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            request_LSSslave_process = true;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f4e:	e004      	b.n	8005f5a <CO_LSSslave_receive+0x2b2>
                    break;
 8005f50:	bf00      	nop
 8005f52:	e002      	b.n	8005f5a <CO_LSSslave_receive+0x2b2>
                    break;
 8005f54:	bf00      	nop
 8005f56:	e000      	b.n	8005f5a <CO_LSSslave_receive+0x2b2>
                    break;
 8005f58:	bf00      	nop
        }

        if (request_LSSslave_process) {
 8005f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <CO_LSSslave_receive+0x2be>
            CO_FLAG_SET(LSSslave->sendResponse);
 8005f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f62:	2201      	movs	r2, #1
 8005f64:	645a      	str	r2, [r3, #68]	@ 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 8005f66:	bf00      	nop
 8005f68:	3740      	adds	r7, #64	@ 0x40
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop

08005f70 <CO_LSSslave_init>:

CO_ReturnError_t
CO_LSSslave_init(CO_LSSslave_t* LSSslave, CO_LSS_address_t* lssAddress, uint16_t* pendingBitRate,
                 uint8_t* pendingNodeID, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANidLssMaster,
                 CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint16_t CANidLssSlave) {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08a      	sub	sp, #40	@ 0x28
 8005f74:	af04      	add	r7, sp, #16
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((LSSslave == NULL) || (pendingBitRate == NULL) || (pendingNodeID == NULL) || (CANdevRx == NULL)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d018      	beq.n	8005fba <CO_LSSslave_init+0x4a>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d015      	beq.n	8005fba <CO_LSSslave_init+0x4a>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d012      	beq.n	8005fba <CO_LSSslave_init+0x4a>
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00f      	beq.n	8005fba <CO_LSSslave_init+0x4a>
        || (CANdevTx == NULL) || !CO_LSS_NODE_ID_VALID(*pendingNodeID)) {
 8005f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00c      	beq.n	8005fba <CO_LSSslave_init+0x4a>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <CO_LSSslave_init+0x42>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	b25b      	sxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	da06      	bge.n	8005fc0 <CO_LSSslave_init+0x50>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2bff      	cmp	r3, #255	@ 0xff
 8005fb8:	d002      	beq.n	8005fc0 <CO_LSSslave_init+0x50>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005fba:	f04f 33ff 	mov.w	r3, #4294967295
 8005fbe:	e046      	b.n	800604e <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    (void)memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8005fc0:	2274      	movs	r2, #116	@ 0x74
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f011 f84f 	bl	8017068 <memset>

    /* Configure object variables */
    (void)memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2210      	movs	r2, #16
 8005fce:	68b9      	ldr	r1, [r7, #8]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f011 f8ec 	bl	80171ae <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	639a      	str	r2, [r3, #56]	@ 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	63da      	str	r2, [r3, #60]	@ 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781a      	ldrb	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CANidLssMaster, 0x7FF, false, (void*)LSSslave, CO_LSSslave_receive);
 8006000:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006002:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8006004:	4b14      	ldr	r3, [pc, #80]	@ (8006058 <CO_LSSslave_init+0xe8>)
 8006006:	9302      	str	r3, [sp, #8]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	9301      	str	r3, [sp, #4]
 800600c:	2300      	movs	r3, #0
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8006014:	6a38      	ldr	r0, [r7, #32]
 8006016:	f001 fab1 	bl	800757c <CO_CANrxBufferInit>
 800601a:	4603      	mov	r3, r0
 800601c:	75fb      	strb	r3, [r7, #23]

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006022:	66da      	str	r2, [r3, #108]	@ 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CANidLssSlave, false, 8, false);
 8006024:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006026:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8006028:	2300      	movs	r3, #0
 800602a:	9301      	str	r3, [sp, #4]
 800602c:	2308      	movs	r3, #8
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	2300      	movs	r3, #0
 8006032:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006034:	f001 fb00 	bl	8007638 <CO_CANtxBufferInit>
 8006038:	4602      	mov	r2, r0
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	671a      	str	r2, [r3, #112]	@ 0x70

    if (LSSslave->TXbuff == NULL) {
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8006046:	23ff      	movs	r3, #255	@ 0xff
 8006048:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800604a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	08005ca9 	.word	0x08005ca9

0800605c <CO_LSSslave_process>:
        LSSslave->pFunctLSScfgStore = pFunctLSScfgStore;
    }
}

bool_t
CO_LSSslave_process(CO_LSSslave_t* LSSslave) {
 800605c:	b580      	push	{r7, lr}
 800605e:	b08c      	sub	sp, #48	@ 0x30
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8006064:	2300      	movs	r3, #0
 8006066:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 8202 	beq.w	8006476 <CO_LSSslave_process+0x41a>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 8006072:	2300      	movs	r3, #0
 8006074:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t valSw;

        (void)memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800607a:	3305      	adds	r3, #5
 800607c:	2208      	movs	r2, #8
 800607e:	2100      	movs	r1, #0
 8006080:	4618      	mov	r0, r3
 8006082:	f010 fff1 	bl	8017068 <memset>

        switch (LSSslave->service) {
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800608c:	3b04      	subs	r3, #4
 800608e:	2b5a      	cmp	r3, #90	@ 0x5a
 8006090:	f200 81dc 	bhi.w	800644c <CO_LSSslave_process+0x3f0>
 8006094:	a201      	add	r2, pc, #4	@ (adr r2, 800609c <CO_LSSslave_process+0x40>)
 8006096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609a:	bf00      	nop
 800609c:	08006209 	.word	0x08006209
 80060a0:	0800644d 	.word	0x0800644d
 80060a4:	0800644d 	.word	0x0800644d
 80060a8:	0800644d 	.word	0x0800644d
 80060ac:	0800644d 	.word	0x0800644d
 80060b0:	0800644d 	.word	0x0800644d
 80060b4:	0800644d 	.word	0x0800644d
 80060b8:	0800644d 	.word	0x0800644d
 80060bc:	0800644d 	.word	0x0800644d
 80060c0:	0800644d 	.word	0x0800644d
 80060c4:	0800644d 	.word	0x0800644d
 80060c8:	0800644d 	.word	0x0800644d
 80060cc:	0800644d 	.word	0x0800644d
 80060d0:	0800621d 	.word	0x0800621d
 80060d4:	0800644d 	.word	0x0800644d
 80060d8:	0800626b 	.word	0x0800626b
 80060dc:	0800644d 	.word	0x0800644d
 80060e0:	08006307 	.word	0x08006307
 80060e4:	0800644d 	.word	0x0800644d
 80060e8:	08006343 	.word	0x08006343
 80060ec:	0800644d 	.word	0x0800644d
 80060f0:	0800644d 	.word	0x0800644d
 80060f4:	0800644d 	.word	0x0800644d
 80060f8:	0800644d 	.word	0x0800644d
 80060fc:	0800644d 	.word	0x0800644d
 8006100:	0800644d 	.word	0x0800644d
 8006104:	0800644d 	.word	0x0800644d
 8006108:	0800644d 	.word	0x0800644d
 800610c:	0800644d 	.word	0x0800644d
 8006110:	0800644d 	.word	0x0800644d
 8006114:	0800644d 	.word	0x0800644d
 8006118:	0800644d 	.word	0x0800644d
 800611c:	0800644d 	.word	0x0800644d
 8006120:	0800644d 	.word	0x0800644d
 8006124:	0800644d 	.word	0x0800644d
 8006128:	0800644d 	.word	0x0800644d
 800612c:	0800644d 	.word	0x0800644d
 8006130:	0800644d 	.word	0x0800644d
 8006134:	0800644d 	.word	0x0800644d
 8006138:	0800644d 	.word	0x0800644d
 800613c:	0800644d 	.word	0x0800644d
 8006140:	0800644d 	.word	0x0800644d
 8006144:	0800644d 	.word	0x0800644d
 8006148:	0800644d 	.word	0x0800644d
 800614c:	0800644d 	.word	0x0800644d
 8006150:	0800644d 	.word	0x0800644d
 8006154:	0800644d 	.word	0x0800644d
 8006158:	0800644d 	.word	0x0800644d
 800615c:	0800644d 	.word	0x0800644d
 8006160:	0800644d 	.word	0x0800644d
 8006164:	0800644d 	.word	0x0800644d
 8006168:	0800644d 	.word	0x0800644d
 800616c:	0800644d 	.word	0x0800644d
 8006170:	0800644d 	.word	0x0800644d
 8006174:	0800644d 	.word	0x0800644d
 8006178:	0800644d 	.word	0x0800644d
 800617c:	0800644d 	.word	0x0800644d
 8006180:	0800644d 	.word	0x0800644d
 8006184:	0800644d 	.word	0x0800644d
 8006188:	0800644d 	.word	0x0800644d
 800618c:	0800644d 	.word	0x0800644d
 8006190:	0800644d 	.word	0x0800644d
 8006194:	0800644d 	.word	0x0800644d
 8006198:	0800620f 	.word	0x0800620f
 800619c:	0800644d 	.word	0x0800644d
 80061a0:	0800644d 	.word	0x0800644d
 80061a4:	0800644d 	.word	0x0800644d
 80061a8:	0800644d 	.word	0x0800644d
 80061ac:	0800644d 	.word	0x0800644d
 80061b0:	0800644d 	.word	0x0800644d
 80061b4:	0800644d 	.word	0x0800644d
 80061b8:	0800644d 	.word	0x0800644d
 80061bc:	0800644d 	.word	0x0800644d
 80061c0:	0800644d 	.word	0x0800644d
 80061c4:	0800644d 	.word	0x0800644d
 80061c8:	0800644d 	.word	0x0800644d
 80061cc:	0800644d 	.word	0x0800644d
 80061d0:	0800643f 	.word	0x0800643f
 80061d4:	0800644d 	.word	0x0800644d
 80061d8:	0800644d 	.word	0x0800644d
 80061dc:	0800644d 	.word	0x0800644d
 80061e0:	0800644d 	.word	0x0800644d
 80061e4:	0800644d 	.word	0x0800644d
 80061e8:	0800644d 	.word	0x0800644d
 80061ec:	0800644d 	.word	0x0800644d
 80061f0:	0800644d 	.word	0x0800644d
 80061f4:	08006399 	.word	0x08006399
 80061f8:	080063bb 	.word	0x080063bb
 80061fc:	080063dd 	.word	0x080063dd
 8006200:	080063ff 	.word	0x080063ff
 8006204:	08006421 	.word	0x08006421
            case CO_LSS_SWITCH_STATE_GLOBAL: {
                /* Node-Id was unconfigured before, now it is configured,
                 * enter the NMT Reset communication autonomously. */
                resetCommunication = true;
 8006208:	2301      	movs	r3, #1
 800620a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800620c:	e125      	b.n	800645a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006212:	2244      	movs	r2, #68	@ 0x44
 8006214:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 8006216:	2301      	movs	r3, #1
 8006218:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800621a:	e11e      	b.n	800645a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_NODE_ID: {
                nid = LSSslave->CANdata[1];
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8006222:	74fb      	strb	r3, [r7, #19]
                errorCode = CO_LSS_CFG_NODE_ID_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if (CO_LSS_NODE_ID_VALID(nid)) {
 800622a:	7cfb      	ldrb	r3, [r7, #19]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <CO_LSSslave_process+0x1dc>
 8006230:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006234:	2b00      	cmp	r3, #0
 8006236:	da02      	bge.n	800623e <CO_LSSslave_process+0x1e2>
 8006238:	7cfb      	ldrb	r3, [r7, #19]
 800623a:	2bff      	cmp	r3, #255	@ 0xff
 800623c:	d104      	bne.n	8006248 <CO_LSSslave_process+0x1ec>
                    *LSSslave->pendingNodeID = nid;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006242:	7cfa      	ldrb	r2, [r7, #19]
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	e002      	b.n	800624e <CO_LSSslave_process+0x1f2>
                } else {
                    errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 8006248:	2301      	movs	r3, #1
 800624a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8006258:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800625e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8006262:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 8006264:	2301      	movs	r3, #1
 8006266:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8006268:	e0f7      	b.n	800645a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 80ee 	beq.w	8006450 <CO_LSSslave_process+0x3f4>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                tableSelector = LSSslave->CANdata[1];
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800627a:	777b      	strb	r3, [r7, #29]
                tableIndex = LSSslave->CANdata[2];
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8006282:	773b      	strb	r3, [r7, #28]
                errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8006290:	7f7b      	ldrb	r3, [r7, #29]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d121      	bne.n	80062da <CO_LSSslave_process+0x27e>
 8006296:	7f3b      	ldrb	r3, [r7, #28]
 8006298:	2b05      	cmp	r3, #5
 800629a:	d01e      	beq.n	80062da <CO_LSSslave_process+0x27e>
 800629c:	7f3b      	ldrb	r3, [r7, #28]
 800629e:	2b09      	cmp	r3, #9
 80062a0:	d81b      	bhi.n	80062da <CO_LSSslave_process+0x27e>
                    uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 80062a2:	7f3b      	ldrb	r3, [r7, #28]
 80062a4:	4a76      	ldr	r2, [pc, #472]	@ (8006480 <CO_LSSslave_process+0x424>)
 80062a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062aa:	837b      	strh	r3, [r7, #26]
                    bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(LSSslave->functLSScheckBitRateObject,
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80062b4:	8b79      	ldrh	r1, [r7, #26]
 80062b6:	4610      	mov	r0, r2
 80062b8:	4798      	blx	r3
 80062ba:	6178      	str	r0, [r7, #20]
                                                                                bit);

                    if (bit_rate_supported) {
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d004      	beq.n	80062cc <CO_LSSslave_process+0x270>
                        *LSSslave->pendingBitRate = bit;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c6:	8b7a      	ldrh	r2, [r7, #26]
 80062c8:	801a      	strh	r2, [r3, #0]
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 80062ca:	e009      	b.n	80062e0 <CO_LSSslave_process+0x284>
                    } else {
                        errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 80062cc:	23ff      	movs	r3, #255	@ 0xff
 80062ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                        errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 80062d8:	e002      	b.n	80062e0 <CO_LSSslave_process+0x284>
                    }
                } else {
                    /* we currently only support CiA301 bit timing table */
                    errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 80062da:	2301      	movs	r3, #1
 80062dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80062ea:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80062f4:	719a      	strb	r2, [r3, #6]
                LSSslave->TXbuff->data[2] = errorCodeManuf;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062fa:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80062fe:	71da      	strb	r2, [r3, #7]
                CANsend = true;
 8006300:	2301      	movs	r3, #1
 8006302:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8006304:	e0a9      	b.n	800645a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 80a2 	beq.w	8006454 <CO_LSSslave_process+0x3f8>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                /* notify application */
                if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 809f 	beq.w	8006458 <CO_LSSslave_process+0x3fc>
                    uint16_t delay = ((uint16_t)LSSslave->CANdata[2]) << 8;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	83fb      	strh	r3, [r7, #30]
                    delay |= LSSslave->CANdata[1];
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800632a:	461a      	mov	r2, r3
 800632c:	8bfb      	ldrh	r3, [r7, #30]
 800632e:	4313      	orrs	r3, r2
 8006330:	83fb      	strh	r3, [r7, #30]
                    LSSslave->pFunctLSSactivateBitRate(LSSslave->functLSSactivateBitRateObject, delay);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800633a:	8bf9      	ldrh	r1, [r7, #30]
 800633c:	4610      	mov	r0, r2
 800633e:	4798      	blx	r3
                }
                break;
 8006340:	e08a      	b.n	8006458 <CO_LSSslave_process+0x3fc>
            }
            case CO_LSS_CFG_STORE: {
                errorCode = CO_LSS_CFG_STORE_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if (LSSslave->pFunctLSScfgStore == NULL) {
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800634c:	2b00      	cmp	r3, #0
 800634e:	d103      	bne.n	8006358 <CO_LSSslave_process+0x2fc>
                    /* storing is not supported. Reply error */
                    errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 8006350:	2301      	movs	r3, #1
 8006352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006356:	e011      	b.n	800637c <CO_LSSslave_process+0x320>
                } else {
                    bool_t result;
                    /* Store "pending" to "persistent" */
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006364:	7811      	ldrb	r1, [r2, #0]
                                                         *LSSslave->pendingBitRate);
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6b92      	ldr	r2, [r2, #56]	@ 0x38
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 800636a:	8812      	ldrh	r2, [r2, #0]
 800636c:	4798      	blx	r3
 800636e:	6238      	str	r0, [r7, #32]
                    if (!result) {
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d102      	bne.n	800637c <CO_LSSslave_process+0x320>
                        errorCode = CO_LSS_CFG_STORE_FAILED;
 8006376:	2302      	movs	r3, #2
 8006378:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                    }
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8006386:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8006390:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 8006392:	2301      	movs	r3, #1
 8006394:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8006396:	e060      	b.n	800645a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_VENDOR: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80063a2:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ae:	3306      	adds	r3, #6
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	601a      	str	r2, [r3, #0]
                CANsend = true;
 80063b4:	2301      	movs	r3, #1
 80063b6:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80063b8:	e04f      	b.n	800645a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_PRODUCT: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80063c4:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d0:	3306      	adds	r3, #6
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	601a      	str	r2, [r3, #0]
                CANsend = true;
 80063d6:	2301      	movs	r3, #1
 80063d8:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80063da:	e03e      	b.n	800645a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_REV: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80063e6:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f2:	3306      	adds	r3, #6
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	601a      	str	r2, [r3, #0]
                CANsend = true;
 80063f8:	2301      	movs	r3, #1
 80063fa:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80063fc:	e02d      	b.n	800645a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_SERIAL: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8006408:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006414:	3306      	adds	r3, #6
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	601a      	str	r2, [r3, #0]
                CANsend = true;
 800641a:	2301      	movs	r3, #1
 800641c:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800641e:	e01c      	b.n	800645a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_NODE_ID: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 800642a:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8006436:	719a      	strb	r2, [r3, #6]
                CANsend = true;
 8006438:	2301      	movs	r3, #1
 800643a:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800643c:	e00d      	b.n	800645a <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006442:	224f      	movs	r2, #79	@ 0x4f
 8006444:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 8006446:	2301      	movs	r3, #1
 8006448:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800644a:	e006      	b.n	800645a <CO_LSSslave_process+0x3fe>
            }
            default: {
                /* none */
                break;
 800644c:	bf00      	nop
 800644e:	e004      	b.n	800645a <CO_LSSslave_process+0x3fe>
                    break;
 8006450:	bf00      	nop
 8006452:	e002      	b.n	800645a <CO_LSSslave_process+0x3fe>
                    break;
 8006454:	bf00      	nop
 8006456:	e000      	b.n	800645a <CO_LSSslave_process+0x3fe>
                break;
 8006458:	bf00      	nop
            }
        }

        if (CANsend) {
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	2b00      	cmp	r3, #0
 800645e:	d007      	beq.n	8006470 <CO_LSSslave_process+0x414>
            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006468:	4619      	mov	r1, r3
 800646a:	4610      	mov	r0, r2
 800646c:	f001 f95e 	bl	800772c <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    return resetCommunication;
 8006476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006478:	4618      	mov	r0, r3
 800647a:	3730      	adds	r7, #48	@ 0x30
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	0801ae4c 	.word	0x0801ae4c

08006484 <CO_isError>:
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	08db      	lsrs	r3, r3, #3
 8006494:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8006496:	78fb      	ldrb	r3, [r7, #3]
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	2201      	movs	r2, #1
 800649e:	fa02 f303 	lsl.w	r3, r2, r3
 80064a2:	73bb      	strb	r3, [r7, #14]
               : false;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00a      	beq.n	80064c0 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	2b09      	cmp	r3, #9
 80064ae:	d807      	bhi.n	80064c0 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	5cd2      	ldrb	r2, [r2, r3]
 80064b6:	7bbb      	ldrb	r3, [r7, #14]
 80064b8:	4013      	ands	r3, r2
 80064ba:	b2db      	uxtb	r3, r3
               : false;
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <CO_isError+0x40>
 80064c0:	2301      	movs	r3, #1
 80064c2:	e000      	b.n	80064c6 <CO_isError+0x42>
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <CO_getErrorRegister>:
CO_getErrorRegister(CO_EM_t* em) {
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d007      	beq.n	80064f0 <CO_getErrorRegister+0x1e>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d003      	beq.n	80064f0 <CO_getErrorRegister+0x1e>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	e000      	b.n	80064f2 <CO_getErrorRegister+0x20>
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <CO_NMT_getInternalState>:
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t
CO_NMT_getInternalState(CO_NMT_t* NMT) {
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <CO_NMT_getInternalState+0x16>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f993 3000 	ldrsb.w	r3, [r3]
 8006512:	e000      	b.n	8006516 <CO_NMT_getInternalState+0x18>
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <CO_LSSslave_getState>:
 *
 * @param LSSslave This object.
 * @return @ref CO_LSS_STATE_state
 */
static inline uint8_t
CO_LSSslave_getState(CO_LSSslave_t* LSSslave) {
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <CO_LSSslave_getState+0x14>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	7c1b      	ldrb	r3, [r3, #16]
 8006534:	e000      	b.n	8006538 <CO_LSSslave_getState+0x16>
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <CO_new>:
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t*
CO_new(CO_config_t* config, uint32_t* heapMemoryUsed) {
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
    CO_t* co = NULL;
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t* coFinal = NULL;
 8006552:	2300      	movs	r3, #0
 8006554:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 8006556:	2300      	movs	r3, #0
 8006558:	613b      	str	r3, [r7, #16]
#else
        (void)config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1U, sizeof(*co));
 800655a:	2140      	movs	r1, #64	@ 0x40
 800655c:	2001      	movs	r0, #1
 800655e:	f00f fb09 	bl	8015b74 <calloc>
 8006562:	4603      	mov	r3, r0
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 80ef 	beq.w	800674c <CO_new+0x208>
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	3340      	adds	r3, #64	@ 0x40
 8006572:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1U) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8006574:	212c      	movs	r1, #44	@ 0x2c
 8006576:	2001      	movs	r0, #1
 8006578:	f00f fafc 	bl	8015b74 <calloc>
 800657c:	4603      	mov	r3, r0
 800657e:	461a      	mov	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	611a      	str	r2, [r3, #16]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 80df 	beq.w	800674c <CO_new+0x208>
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	332c      	adds	r3, #44	@ 0x2c
 8006592:	613b      	str	r3, [r7, #16]
        }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1U) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 8006594:	2308      	movs	r3, #8
 8006596:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8006598:	2130      	movs	r1, #48	@ 0x30
 800659a:	2001      	movs	r0, #1
 800659c:	f00f faea 	bl	8015b74 <calloc>
 80065a0:	4603      	mov	r3, r0
 80065a2:	461a      	mov	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	615a      	str	r2, [r3, #20]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 80cd 	beq.w	800674c <CO_new+0x208>
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	3330      	adds	r3, #48	@ 0x30
 80065b6:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 80065b8:	7afb      	ldrb	r3, [r7, #11]
 80065ba:	2110      	movs	r1, #16
 80065bc:	4618      	mov	r0, r3
 80065be:	f00f fad9 	bl	8015b74 <calloc>
 80065c2:	4603      	mov	r3, r0
 80065c4:	461a      	mov	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	619a      	str	r2, [r3, #24]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 80bc 	beq.w	800674c <CO_new+0x208>
 80065d4:	7afb      	ldrb	r3, [r7, #11]
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4413      	add	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1U) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 80065de:	2150      	movs	r1, #80	@ 0x50
 80065e0:	2001      	movs	r0, #1
 80065e2:	f00f fac7 	bl	8015b74 <calloc>
 80065e6:	4603      	mov	r3, r0
 80065e8:	461a      	mov	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	61da      	str	r2, [r3, #28]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 80aa 	beq.w	800674c <CO_new+0x208>
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	3350      	adds	r3, #80	@ 0x50
 80065fc:	613b      	str	r3, [r7, #16]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
#endif
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1U;
 80065fe:	2311      	movs	r3, #17
 8006600:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2U) {
 8006602:	7abb      	ldrb	r3, [r7, #10]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d912      	bls.n	800662e <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8006608:	7abb      	ldrb	r3, [r7, #10]
 800660a:	2108      	movs	r1, #8
 800660c:	4618      	mov	r0, r3
 800660e:	f00f fab1 	bl	8015b74 <calloc>
 8006612:	4603      	mov	r3, r0
 8006614:	461a      	mov	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	621a      	str	r2, [r3, #32]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 8094 	beq.w	800674c <CO_new+0x208>
 8006624:	7abb      	ldrb	r3, [r7, #10]
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4413      	add	r3, r2
 800662c:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0U) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 800662e:	21ac      	movs	r1, #172	@ 0xac
 8006630:	2001      	movs	r0, #1
 8006632:	f00f fa9f 	bl	8015b74 <calloc>
 8006636:	4603      	mov	r3, r0
 8006638:	461a      	mov	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	625a      	str	r2, [r3, #36]	@ 0x24
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 8082 	beq.w	800674c <CO_new+0x208>
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	33ac      	adds	r3, #172	@ 0xac
 800664c:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1U) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 800664e:	212c      	movs	r1, #44	@ 0x2c
 8006650:	2001      	movs	r0, #1
 8006652:	f00f fa8f 	bl	8015b74 <calloc>
 8006656:	4603      	mov	r3, r0
 8006658:	461a      	mov	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	629a      	str	r2, [r3, #40]	@ 0x28
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006662:	2b00      	cmp	r3, #0
 8006664:	d072      	beq.n	800674c <CO_new+0x208>
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	332c      	adds	r3, #44	@ 0x2c
 800666a:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1U) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 800666c:	215c      	movs	r1, #92	@ 0x5c
 800666e:	2001      	movs	r0, #1
 8006670:	f00f fa80 	bl	8015b74 <calloc>
 8006674:	4603      	mov	r3, r0
 8006676:	461a      	mov	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006680:	2b00      	cmp	r3, #0
 8006682:	d063      	beq.n	800674c <CO_new+0x208>
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	335c      	adds	r3, #92	@ 0x5c
 8006688:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0U) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 800668a:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 800668e:	2001      	movs	r0, #1
 8006690:	f00f fa70 	bl	8015b74 <calloc>
 8006694:	4603      	mov	r3, r0
 8006696:	461a      	mov	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	635a      	str	r2, [r3, #52]	@ 0x34
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d053      	beq.n	800674c <CO_new+0x208>
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80066aa:	613b      	str	r3, [r7, #16]
        }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
        if (CO_GET_CNT(LEDS) == 1U) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 80066ac:	210c      	movs	r1, #12
 80066ae:	2001      	movs	r0, #1
 80066b0:	f00f fa60 	bl	8015b74 <calloc>
 80066b4:	4603      	mov	r3, r0
 80066b6:	461a      	mov	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d043      	beq.n	800674c <CO_new+0x208>
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	330c      	adds	r3, #12
 80066c8:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1U) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 80066ca:	2174      	movs	r1, #116	@ 0x74
 80066cc:	2001      	movs	r0, #1
 80066ce:	f00f fa51 	bl	8015b74 <calloc>
 80066d2:	4603      	mov	r3, r0
 80066d4:	461a      	mov	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d034      	beq.n	800674c <CO_new+0x208>
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	3374      	adds	r3, #116	@ 0x74
 80066e6:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1U, sizeof(*co->CANmodule));
 80066e8:	2138      	movs	r1, #56	@ 0x38
 80066ea:	2001      	movs	r0, #1
 80066ec:	f00f fa42 	bl	8015b74 <calloc>
 80066f0:	4603      	mov	r3, r0
 80066f2:	461a      	mov	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	605a      	str	r2, [r3, #4]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d025      	beq.n	800674c <CO_new+0x208>
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	3338      	adds	r3, #56	@ 0x38
 8006704:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8006706:	210c      	movs	r1, #12
 8006708:	200d      	movs	r0, #13
 800670a:	f00f fa33 	bl	8015b74 <calloc>
 800670e:	4603      	mov	r3, r0
 8006710:	461a      	mov	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	609a      	str	r2, [r3, #8]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d016      	beq.n	800674c <CO_new+0x208>
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	339c      	adds	r3, #156	@ 0x9c
 8006722:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8006724:	2118      	movs	r1, #24
 8006726:	2006      	movs	r0, #6
 8006728:	f00f fa24 	bl	8015b74 <calloc>
 800672c:	4603      	mov	r3, r0
 800672e:	461a      	mov	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	60da      	str	r2, [r3, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <CO_new+0x208>
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	3390      	adds	r3, #144	@ 0x90
 8006740:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2201      	movs	r2, #1
 8006746:	601a      	str	r2, [r3, #0]
        coFinal = co;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d102      	bne.n	8006758 <CO_new+0x214>
        CO_delete(co);
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 f80b 	bl	800676e <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <CO_new+0x220>
        *heapMemoryUsed = mem;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8006764:	697b      	ldr	r3, [r7, #20]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <CO_delete>:

void
CO_delete(CO_t* co) {
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d053      	beq.n	8006824 <CO_delete+0xb6>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	4618      	mov	r0, r3
 8006782:	f000 fee5 	bl	8007550 <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	4618      	mov	r0, r3
 800678c:	f00f fa16 	bl	8015bbc <free>
    CO_free(co->CANrx);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	4618      	mov	r0, r3
 8006796:	f00f fa11 	bl	8015bbc <free>
    CO_free(co->CANmodule);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	4618      	mov	r0, r3
 80067a0:	f00f fa0c 	bl	8015bbc <free>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_MASTER) != 0
    CO_free(co->LSSmaster);
#endif

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    CO_free(co->LSSslave);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a8:	4618      	mov	r0, r3
 80067aa:	f00f fa07 	bl	8015bbc <free>
#if ((CO_CONFIG_GFC)&CO_CONFIG_GFC_ENABLE) != 0
    CO_free(co->GFC);
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    CO_free(co->LEDs);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b2:	4618      	mov	r0, r3
 80067b4:	f00f fa02 	bl	8015bbc <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    CO_free(co->TPDO);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067bc:	4618      	mov	r0, r3
 80067be:	f00f f9fd 	bl	8015bbc <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
    CO_free(co->RPDO);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c6:	4618      	mov	r0, r3
 80067c8:	f00f f9f8 	bl	8015bbc <free>
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    CO_free(co->SYNC);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d0:	4618      	mov	r0, r3
 80067d2:	f00f f9f3 	bl	8015bbc <free>
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    CO_free(co->TIME);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067da:	4618      	mov	r0, r3
 80067dc:	f00f f9ee 	bl	8015bbc <free>
#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e4:	4618      	mov	r0, r3
 80067e6:	f00f f9e9 	bl	8015bbc <free>

    /* Emergency */
    CO_free(co->em);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f00f f9e4 	bl	8015bbc <free>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    CO_free(co->em_fifo);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f00f f9df 	bl	8015bbc <free>
#if ((CO_CONFIG_NODE_GUARDING)&CO_CONFIG_NODE_GUARDING_MASTER_ENABLE) != 0
    CO_free(co->NGmaster);
#endif

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    CO_free(co->HBconsMonitoredNodes);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	4618      	mov	r0, r3
 8006804:	f00f f9da 	bl	8015bbc <free>
    CO_free(co->HBcons);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	4618      	mov	r0, r3
 800680e:	f00f f9d5 	bl	8015bbc <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	4618      	mov	r0, r3
 8006818:	f00f f9d0 	bl	8015bbc <free>

    /* CANopen object */
    CO_free(co);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f00f f9cd 	bl	8015bbc <free>
 8006822:	e000      	b.n	8006826 <CO_delete+0xb8>
        return;
 8006824:	bf00      	nop
}
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <CO_CANinit>:
#endif
    return en;
}

CO_ReturnError_t
CO_CANinit(CO_t* co, void* CANptr, uint16_t bitRate) {
 800682c:	b580      	push	{r7, lr}
 800682e:	b08a      	sub	sp, #40	@ 0x28
 8006830:	af04      	add	r7, sp, #16
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	4613      	mov	r3, r2
 8006838:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) {
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d102      	bne.n	8006846 <CO_CANinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006840:	f04f 33ff 	mov.w	r3, #4294967295
 8006844:	e01a      	b.n	800687c <CO_CANinit+0x50>
    }

    co->CANmodule->CANnormal = false;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 800684e:	68b8      	ldr	r0, [r7, #8]
 8006850:	f000 fd8e 	bl	8007370 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule, CANptr, co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), co->CANtx,
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6858      	ldr	r0, [r3, #4]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6899      	ldr	r1, [r3, #8]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	88fa      	ldrh	r2, [r7, #6]
 8006862:	9202      	str	r2, [sp, #8]
 8006864:	2206      	movs	r2, #6
 8006866:	9201      	str	r2, [sp, #4]
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	230d      	movs	r3, #13
 800686c:	460a      	mov	r2, r1
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	f000 fda6 	bl	80073c0 <CO_CANmodule_init>
 8006874:	4603      	mov	r3, r0
 8006876:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_TX_MSGS), bitRate);

    return err;
 8006878:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3718      	adds	r7, #24
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <CO_LSSinit>:

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
CO_ReturnError_t
CO_LSSinit(CO_t* co, CO_LSS_address_t* lssAddress, uint8_t* pendingNodeID, uint16_t* pendingBitRate) {
 8006884:	b580      	push	{r7, lr}
 8006886:	b08c      	sub	sp, #48	@ 0x30
 8006888:	af06      	add	r7, sp, #24
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if ((co == NULL) || (CO_GET_CNT(LSS_SLV) != 1U)) {
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d102      	bne.n	800689e <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006898:	f04f 33ff 	mov.w	r3, #4294967295
 800689c:	e01a      	b.n	80068d4 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave, lssAddress, pendingBitRate, pendingNodeID, co->CANmodule,
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	6852      	ldr	r2, [r2, #4]
 80068aa:	f240 71e4 	movw	r1, #2020	@ 0x7e4
 80068ae:	9105      	str	r1, [sp, #20]
 80068b0:	2105      	movs	r1, #5
 80068b2:	9104      	str	r1, [sp, #16]
 80068b4:	9203      	str	r2, [sp, #12]
 80068b6:	f240 72e5 	movw	r2, #2021	@ 0x7e5
 80068ba:	9202      	str	r2, [sp, #8]
 80068bc:	220c      	movs	r2, #12
 80068be:	9201      	str	r2, [sp, #4]
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	68b9      	ldr	r1, [r7, #8]
 80068c8:	f7ff fb52 	bl	8005f70 <CO_LSSslave_init>
 80068cc:	4603      	mov	r3, r0
 80068ce:	75fb      	strb	r3, [r7, #23]
                           CO_GET_CO(RX_IDX_LSS_SLV), CO_CAN_ID_LSS_MST, co->CANmodule, CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 80068d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <CO_CANopenInit>:
#endif /* (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE */

CO_ReturnError_t
CO_CANopenInit(CO_t* co, CO_NMT_t* NMT, CO_EM_t* em, OD_t* od, OD_entry_t* OD_statusBits, uint16_t NMTcontrol,
               uint16_t firstHBTime_ms, uint16_t SDOserverTimeoutTime_ms, uint16_t SDOclientTimeoutTime_ms,
               bool_t SDOclientBlockTransfer, uint8_t nodeId, uint32_t* errInfo) {
 80068dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068de:	b091      	sub	sp, #68	@ 0x44
 80068e0:	af0a      	add	r7, sp, #40	@ 0x28
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_STATUS_BITS) == 0
    (void)OD_statusBits; /* may be unused */
#endif

    if ((co == NULL) || ((CO_GET_CNT(NMT) == 0U) && (NMT == NULL)) || ((CO_GET_CNT(EM) == 0U) && (em == NULL))) {
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d102      	bne.n	80068f6 <CO_CANopenInit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80068f0:	f04f 33ff 	mov.w	r3, #4294967295
 80068f4:	e12f      	b.n	8006b56 <CO_CANopenInit+0x27a>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0U) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d102      	bne.n	8006902 <CO_CANopenInit+0x26>
        em = co->em;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if ((CO_GET_CNT(LSS_SLV) == 1U) && (nodeId == CO_LSS_NODE_ID_ASSIGNMENT)) {
 8006908:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800690c:	2bff      	cmp	r3, #255	@ 0xff
 800690e:	d103      	bne.n	8006918 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2201      	movs	r2, #1
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	e00a      	b.n	800692e <CO_CANopenInit+0x52>
    } else
#endif
        if ((nodeId < 1U) || (nodeId > 127U)) {
 8006918:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <CO_CANopenInit+0x4c>
 8006920:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8006924:	2b00      	cmp	r3, #0
 8006926:	da02      	bge.n	800692e <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006928:	f04f 33ff 	mov.w	r3, #4294967295
 800692c:	e113      	b.n	8006b56 <CO_CANopenInit+0x27a>
    } else { /* MISRA C 2004 14.10 */
    }

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    if (CO_GET_CNT(LEDS) == 1U) {
        err = CO_LEDs_init(co->LEDs);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe fff0 	bl	8005918 <CO_LEDs_init>
 8006938:	4603      	mov	r3, r0
 800693a:	747b      	strb	r3, [r7, #17]
        if (err != CO_ERROR_NO) {
 800693c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <CO_CANopenInit+0x6e>
            return err;
 8006944:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006948:	e105      	b.n	8006b56 <CO_CANopenInit+0x27a>
        }
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 8006952:	f06f 0312 	mvn.w	r3, #18
 8006956:	e0fe      	b.n	8006b56 <CO_CANopenInit+0x27a>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	69d8      	ldr	r0, [r3, #28]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	685c      	ldr	r4, [r3, #4]
 8006960:	4b7f      	ldr	r3, [pc, #508]	@ (8006b60 <CO_CANopenInit+0x284>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f103 050c 	add.w	r5, r3, #12
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6a1e      	ldr	r6, [r3, #32]
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
                         co->em_fifo, (CO_GET_CNT(ARR_1003) + 1U),
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY), CO_GET_CO(TX_IDX_EM_PROD),
 800696e:	4b7c      	ldr	r3, [pc, #496]	@ (8006b60 <CO_CANopenInit+0x284>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8006974:	336c      	adds	r3, #108	@ 0x6c
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) != 0
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
#endif
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8006976:	4a7a      	ldr	r2, [pc, #488]	@ (8006b60 <CO_CANopenInit+0x284>)
 8006978:	6812      	ldr	r2, [r2, #0]
 800697a:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 800697c:	3218      	adds	r2, #24
 800697e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006980:	9105      	str	r1, [sp, #20]
 8006982:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 8006986:	9104      	str	r1, [sp, #16]
 8006988:	9203      	str	r2, [sp, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	9202      	str	r2, [sp, #8]
 800698e:	9301      	str	r3, [sp, #4]
 8006990:	2311      	movs	r3, #17
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	4633      	mov	r3, r6
 8006996:	462a      	mov	r2, r5
 8006998:	4621      	mov	r1, r4
 800699a:	f7fa fc9d 	bl	80012d8 <CO_EM_init>
 800699e:	4603      	mov	r3, r0
 80069a0:	747b      	strb	r3, [r7, #17]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
                         co->CANmodule, CO_GET_CO(RX_IDX_EM_CONS),
#endif
                         nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 80069a2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <CO_CANopenInit+0xd4>
            return err;
 80069aa:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80069ae:	e0d2      	b.n	8006b56 <CO_CANopenInit+0x27a>
        }
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        err = CO_NMT_init(co->NMT, OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME), em, nodeId, NMTcontrol, firstHBTime_ms,
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	691c      	ldr	r4, [r3, #16]
 80069b4:	4b6a      	ldr	r3, [pc, #424]	@ (8006b60 <CO_CANopenInit+0x284>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f103 0590 	add.w	r5, r3, #144	@ 0x90
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	6852      	ldr	r2, [r2, #4]
 80069c6:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 80069ca:	b289      	uxth	r1, r1
 80069cc:	f501 61e0 	add.w	r1, r1, #1792	@ 0x700
 80069d0:	b289      	uxth	r1, r1
 80069d2:	f897 6048 	ldrb.w	r6, [r7, #72]	@ 0x48
 80069d6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80069d8:	9008      	str	r0, [sp, #32]
 80069da:	9107      	str	r1, [sp, #28]
 80069dc:	2104      	movs	r1, #4
 80069de:	9106      	str	r1, [sp, #24]
 80069e0:	9205      	str	r2, [sp, #20]
 80069e2:	2200      	movs	r2, #0
 80069e4:	9204      	str	r2, [sp, #16]
 80069e6:	2200      	movs	r2, #0
 80069e8:	9203      	str	r2, [sp, #12]
 80069ea:	9302      	str	r3, [sp, #8]
 80069ec:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	4633      	mov	r3, r6
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	4629      	mov	r1, r5
 80069fa:	4620      	mov	r0, r4
 80069fc:	f7fb fafa 	bl	8001ff4 <CO_NMT_init>
 8006a00:	4603      	mov	r3, r0
 8006a02:	747b      	strb	r3, [r7, #17]
                          co->CANmodule, CO_GET_CO(RX_IDX_NMT_SLV), CO_CAN_ID_NMT_SERVICE,
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
                          co->CANmodule, CO_GET_CO(TX_IDX_NMT_MST), CO_CAN_ID_NMT_SERVICE,
#endif
                          co->CANmodule, CO_GET_CO(TX_IDX_HB_PROD), CO_CAN_ID_HEARTBEAT + nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 8006a04:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <CO_CANopenInit+0x136>
            return err;
 8006a0c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006a10:	e0a1      	b.n	8006b56 <CO_CANopenInit+0x27a>
        }
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6958      	ldr	r0, [r3, #20]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	699c      	ldr	r4, [r3, #24]
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME), co->CANmodule, CO_GET_CO(RX_IDX_HB_CONS),
 8006a1a:	4b51      	ldr	r3, [pc, #324]	@ (8006b60 <CO_CANopenInit+0x284>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 8006a20:	3384      	adds	r3, #132	@ 0x84
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	6852      	ldr	r2, [r2, #4]
 8006a26:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006a28:	9103      	str	r1, [sp, #12]
 8006a2a:	2104      	movs	r1, #4
 8006a2c:	9102      	str	r1, [sp, #8]
 8006a2e:	9201      	str	r2, [sp, #4]
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	2308      	movs	r3, #8
 8006a34:	4622      	mov	r2, r4
 8006a36:	6879      	ldr	r1, [r7, #4]
 8006a38:	f7fa ffe4 	bl	8001a04 <CO_HBconsumer_init>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	747b      	strb	r3, [r7, #17]
                                 errInfo);
        if (err != CO_ERROR_NO) {
 8006a40:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <CO_CANopenInit+0x172>
            return err;
 8006a48:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006a4c:	e083      	b.n	8006b56 <CO_CANopenInit+0x27a>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0U) {
        OD_entry_t* SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 8006a4e:	4b44      	ldr	r3, [pc, #272]	@ (8006b60 <CO_CANopenInit+0x284>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	33b4      	adds	r3, #180	@ 0xb4
 8006a56:	617b      	str	r3, [r7, #20]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006a58:	2300      	movs	r3, #0
 8006a5a:	827b      	strh	r3, [r7, #18]
 8006a5c:	e02f      	b.n	8006abe <CO_CANopenInit+0x1e2>
            err = CO_SDOserver_init(&co->SDOserver[i], od, SDOsrvPar, nodeId, SDOserverTimeoutTime_ms, co->CANmodule,
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a62:	8a7b      	ldrh	r3, [r7, #18]
 8006a64:	21ac      	movs	r1, #172	@ 0xac
 8006a66:	fb01 f303 	mul.w	r3, r1, r3
 8006a6a:	18d5      	adds	r5, r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	8a7a      	ldrh	r2, [r7, #18]
 8006a72:	3203      	adds	r2, #3
 8006a74:	b292      	uxth	r2, r2
 8006a76:	68f9      	ldr	r1, [r7, #12]
 8006a78:	6849      	ldr	r1, [r1, #4]
 8006a7a:	8a78      	ldrh	r0, [r7, #18]
 8006a7c:	3003      	adds	r0, #3
 8006a7e:	b280      	uxth	r0, r0
 8006a80:	f897 6048 	ldrb.w	r6, [r7, #72]	@ 0x48
 8006a84:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8006a86:	9405      	str	r4, [sp, #20]
 8006a88:	9004      	str	r0, [sp, #16]
 8006a8a:	9103      	str	r1, [sp, #12]
 8006a8c:	9202      	str	r2, [sp, #8]
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	4633      	mov	r3, r6
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f7fd f976 	bl	8003d8c <CO_SDOserver_init>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	747b      	strb	r3, [r7, #17]
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i, co->CANmodule, CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err != CO_ERROR_NO) {
 8006aa4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <CO_CANopenInit+0x1d6>
                return err;
 8006aac:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006ab0:	e051      	b.n	8006b56 <CO_CANopenInit+0x27a>
            }
            SDOsrvPar++;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	330c      	adds	r3, #12
 8006ab6:	617b      	str	r3, [r7, #20]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006ab8:	8a7b      	ldrh	r3, [r7, #18]
 8006aba:	3301      	adds	r3, #1
 8006abc:	827b      	strh	r3, [r7, #18]
 8006abe:	8a7b      	ldrh	r3, [r7, #18]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d0cc      	beq.n	8006a5e <CO_CANopenInit+0x182>
    }
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        err = CO_TIME_init(co->TIME, OD_GET(H1012, OD_H1012_COBID_TIME), co->CANmodule, CO_GET_CO(RX_IDX_TIME),
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006ac8:	4b25      	ldr	r3, [pc, #148]	@ (8006b60 <CO_CANopenInit+0x284>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	2302      	movs	r3, #2
 8006adc:	f7fe fe26 	bl	800572c <CO_TIME_init>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	747b      	strb	r3, [r7, #17]
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 8006ae4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <CO_CANopenInit+0x216>
            return err;
 8006aec:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006af0:	e031      	b.n	8006b56 <CO_CANopenInit+0x27a>
    }
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    if (CO_GET_CNT(SYNC) == 1U) {
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8006af6:	4b1a      	ldr	r3, [pc, #104]	@ (8006b60 <CO_CANopenInit+0x284>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f103 0624 	add.w	r6, r3, #36	@ 0x24
 8006b00:	4b17      	ldr	r3, [pc, #92]	@ (8006b60 <CO_CANopenInit+0x284>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8006b0a:	4b15      	ldr	r3, [pc, #84]	@ (8006b60 <CO_CANopenInit+0x284>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8006b10:	333c      	adds	r3, #60	@ 0x3c
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8006b12:	4a13      	ldr	r2, [pc, #76]	@ (8006b60 <CO_CANopenInit+0x284>)
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8006b18:	32a8      	adds	r2, #168	@ 0xa8
 8006b1a:	68f9      	ldr	r1, [r7, #12]
 8006b1c:	6849      	ldr	r1, [r1, #4]
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	6840      	ldr	r0, [r0, #4]
 8006b22:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8006b24:	9406      	str	r4, [sp, #24]
 8006b26:	2400      	movs	r4, #0
 8006b28:	9405      	str	r4, [sp, #20]
 8006b2a:	9004      	str	r0, [sp, #16]
 8006b2c:	2001      	movs	r0, #1
 8006b2e:	9003      	str	r0, [sp, #12]
 8006b30:	9102      	str	r1, [sp, #8]
 8006b32:	9201      	str	r2, [sp, #4]
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	4663      	mov	r3, ip
 8006b38:	4632      	mov	r2, r6
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	f7fe fb2f 	bl	80051a0 <CO_SYNC_init>
 8006b42:	4603      	mov	r3, r0
 8006b44:	747b      	strb	r3, [r7, #17]
                           co->CANmodule, CO_GET_CO(RX_IDX_SYNC),
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 8006b46:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <CO_CANopenInit+0x278>
            return err;
 8006b4e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006b52:	e000      	b.n	8006b56 <CO_CANopenInit+0x27a>
            }
        }
    }
#endif

    return CO_ERROR_NO;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	200001e0 	.word	0x200001e0

08006b64 <CO_CANopenInitPDO>:

CO_ReturnError_t
CO_CANopenInitPDO(CO_t* co, CO_EM_t* em, OD_t* od, uint8_t nodeId, uint32_t* errInfo) {
 8006b64:	b590      	push	{r4, r7, lr}
 8006b66:	b08f      	sub	sp, #60	@ 0x3c
 8006b68:	af06      	add	r7, sp, #24
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
 8006b70:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d102      	bne.n	8006b7e <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006b78:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7c:	e064      	b.n	8006c48 <CO_CANopenInitPDO+0xe4>
    }
    if ((nodeId < 1U) || (nodeId > 127U) || co->nodeIdUnconfigured) {
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d007      	beq.n	8006b94 <CO_CANopenInitPDO+0x30>
 8006b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	db03      	blt.n	8006b94 <CO_CANopenInitPDO+0x30>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d009      	beq.n	8006ba8 <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured) ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <CO_CANopenInitPDO+0x3e>
 8006b9c:	f06f 0312 	mvn.w	r3, #18
 8006ba0:	e052      	b.n	8006c48 <CO_CANopenInitPDO+0xe4>
 8006ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba6:	e04f      	b.n	8006c48 <CO_CANopenInitPDO+0xe4>
    }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    if (CO_GET_CNT(TPDO) > 0U) {
        OD_entry_t* TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 8006ba8:	4b29      	ldr	r3, [pc, #164]	@ (8006c50 <CO_CANopenInitPDO+0xec>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	33cc      	adds	r3, #204	@ 0xcc
 8006bb0:	617b      	str	r3, [r7, #20]
        OD_entry_t* TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 8006bb2:	4b27      	ldr	r3, [pc, #156]	@ (8006c50 <CO_CANopenInitPDO+0xec>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	33d8      	adds	r3, #216	@ 0xd8
 8006bba:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	837b      	strh	r3, [r7, #26]
 8006bc0:	e03e      	b.n	8006c40 <CO_CANopenInitPDO+0xdc>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 8006bc6:	8b7b      	ldrh	r3, [r7, #26]
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d809      	bhi.n	8006be0 <CO_CANopenInitPDO+0x7c>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (uint16_t)((CO_CAN_ID_TPDO_1 + (i * 0x100U)) + nodeId);
 8006bcc:	8b7b      	ldrh	r3, [r7, #26]
 8006bce:	021b      	lsls	r3, r3, #8
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	4413      	add	r3, r2
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8006bde:	833b      	strh	r3, [r7, #24]
                uint16_t pdoOffset = i % 4;
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i], od, em,
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006be4:	8b7b      	ldrh	r3, [r7, #26]
 8006be6:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8006bea:	fb01 f303 	mul.w	r3, r1, r3
 8006bee:	18d0      	adds	r0, r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	8b7a      	ldrh	r2, [r7, #26]
 8006bfa:	3202      	adds	r2, #2
 8006bfc:	b292      	uxth	r2, r2
 8006bfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c00:	9105      	str	r1, [sp, #20]
 8006c02:	9204      	str	r2, [sp, #16]
 8006c04:	9303      	str	r3, [sp, #12]
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	9302      	str	r3, [sp, #8]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	9301      	str	r3, [sp, #4]
 8006c0e:	8b3b      	ldrh	r3, [r7, #24]
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	4623      	mov	r3, r4
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	6879      	ldr	r1, [r7, #4]
 8006c18:	f7fc fb5c 	bl	80032d4 <CO_TPDO_init>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	74fb      	strb	r3, [r7, #19]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
                               co->SYNC,
#endif
                               preDefinedCanId, TPDOcomm, TPDOmap, co->CANmodule, CO_GET_CO(TX_IDX_TPDO) + i, errInfo);
            if (err != CO_ERROR_NO) {
 8006c20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <CO_CANopenInitPDO+0xca>
                return err;
 8006c28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c2c:	e00c      	b.n	8006c48 <CO_CANopenInitPDO+0xe4>
            }
            TPDOcomm++;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	330c      	adds	r3, #12
 8006c32:	617b      	str	r3, [r7, #20]
            TPDOmap++;
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	330c      	adds	r3, #12
 8006c38:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006c3a:	8b7b      	ldrh	r3, [r7, #26]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	837b      	strh	r3, [r7, #26]
 8006c40:	8b7b      	ldrh	r3, [r7, #26]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0bd      	beq.n	8006bc2 <CO_CANopenInitPDO+0x5e>
        }
    }
#endif

    return CO_ERROR_NO;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3724      	adds	r7, #36	@ 0x24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd90      	pop	{r4, r7, pc}
 8006c50:	200001e0 	.word	0x200001e0

08006c54 <CO_process>:
    return CO_ERROR_NO;
}
#endif

CO_NMT_reset_cmd_t
CO_process(CO_t* co, bool_t enableGateway, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8006c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c56:	b09b      	sub	sp, #108	@ 0x6c
 8006c58:	af08      	add	r7, sp, #32
 8006c5a:	61f8      	str	r0, [r7, #28]
 8006c5c:	61b9      	str	r1, [r7, #24]
 8006c5e:	617a      	str	r2, [r7, #20]
 8006c60:	613b      	str	r3, [r7, #16]
    (void)enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8006c62:	2300      	movs	r3, #0
 8006c64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7ff fc46 	bl	80064fe <CO_NMT_getInternalState>
 8006c72:	4603      	mov	r3, r0
 8006c74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8006c78:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006c7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c7e:	d003      	beq.n	8006c88 <CO_process+0x34>
 8006c80:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006c84:	2b05      	cmp	r3, #5
 8006c86:	d101      	bne.n	8006c8c <CO_process+0x38>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e000      	b.n	8006c8e <CO_process+0x3a>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 fdf2 	bl	800787e <CO_CANmodule_process>

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE)
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_process(co->LSSslave)) {
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7ff f9dc 	bl	800605c <CO_LSSslave_process>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <CO_process+0x5c>
            reset = CO_RESET_COMM;
 8006caa:	2301      	movs	r3, #1
 8006cac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    bool_t unc = co->nodeIdUnconfigured;
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	8a5b      	ldrh	r3, [r3, #18]
 8006cbc:	867b      	strh	r3, [r7, #50]	@ 0x32
    bool_t LSSslave_configuration = false;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	643b      	str	r3, [r7, #64]	@ 0x40
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION) {
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff fc2b 	bl	8006522 <CO_LSSslave_getState>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d101      	bne.n	8006cd6 <CO_process+0x82>
            LSSslave_configuration = true;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
#define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS false
#endif

    if (CO_GET_CNT(LEDS) == 1U) {
        bool_t ErrSync = CO_isError(co->em, CO_EM_SYNC_TIME_OUT);
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	2118      	movs	r1, #24
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff fbd1 	bl	8006484 <CO_isError>
 8006ce2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        bool_t ErrHbCons = CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER);
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	211b      	movs	r1, #27
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7ff fbca 	bl	8006484 <CO_isError>
 8006cf0:	62b8      	str	r0, [r7, #40]	@ 0x28
        bool_t ErrHbConsRemote = CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	211c      	movs	r1, #28
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff fbc3 	bl	8006484 <CO_isError>
 8006cfe:	6278      	str	r0, [r7, #36]	@ 0x24
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8006d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d102      	bne.n	8006d10 <CO_process+0xbc>
 8006d0a:	f997 5023 	ldrsb.w	r5, [r7, #35]	@ 0x23
 8006d0e:	e000      	b.n	8006d12 <CO_process+0xbe>
 8006d10:	2500      	movs	r5, #0
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U, (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 8006d12:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006d14:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	bf14      	ite	ne
 8006d1c:	2301      	movne	r3, #1
 8006d1e:	2300      	moveq	r3, #0
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	60fb      	str	r3, [r7, #12]
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U, (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 8006d24:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8006d26:	f240 3303 	movw	r3, #771	@ 0x303
 8006d2a:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	bf14      	ite	ne
 8006d30:	2301      	movne	r3, #1
 8006d32:	2300      	moveq	r3, #0
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	60bb      	str	r3, [r7, #8]
 8006d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <CO_process+0xee>
 8006d3e:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8006d40:	e000      	b.n	8006d44 <CO_process+0xf0>
 8006d42:	2400      	movs	r4, #0
                        false, /* RPDO event timer timeout */
                        unc ? false : ErrSync, unc ? false : (ErrHbCons || ErrHbConsRemote),
 8006d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d107      	bne.n	8006d5a <CO_process+0x106>
 8006d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d102      	bne.n	8006d56 <CO_process+0x102>
 8006d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <CO_process+0x106>
 8006d56:	2301      	movs	r3, #1
 8006d58:	e000      	b.n	8006d5c <CO_process+0x108>
 8006d5a:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8006d5c:	607b      	str	r3, [r7, #4]
                        CO_getErrorRegister(co->em) != 0U, CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS, timerNext_us);
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7ff fbb5 	bl	80064d2 <CO_getErrorRegister>
 8006d68:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	bf14      	ite	ne
 8006d6e:	2301      	movne	r3, #1
 8006d70:	2300      	moveq	r3, #0
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	461a      	mov	r2, r3
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	9307      	str	r3, [sp, #28]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	9306      	str	r3, [sp, #24]
 8006d7e:	9205      	str	r2, [sp, #20]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	9304      	str	r3, [sp, #16]
 8006d84:	9403      	str	r4, [sp, #12]
 8006d86:	2300      	movs	r3, #0
 8006d88:	9302      	str	r3, [sp, #8]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	9301      	str	r3, [sp, #4]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d94:	462a      	mov	r2, r5
 8006d96:	6979      	ldr	r1, [r7, #20]
 8006d98:	4630      	mov	r0, r6
 8006d9a:	f7fe fdd5 	bl	8005948 <CO_LEDs_process>
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <CO_process+0x158>
        return reset;
 8006da6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006daa:	e047      	b.n	8006e3c <CO_process+0x1e8>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        CO_EM_process(co->em, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	69d8      	ldr	r0, [r3, #28]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006db6:	f7fa fb6f 	bl	8001498 <CO_EM_process>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        reset = CO_NMT_process(co->NMT, &NMTstate, timeDifference_us, timerNext_us);
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	6918      	ldr	r0, [r3, #16]
 8006dbe:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	f7fb f9d3 	bl	8002170 <CO_NMT_process>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8006dd0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006dd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dd6:	d003      	beq.n	8006de0 <CO_process+0x18c>
 8006dd8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006ddc:	2b05      	cmp	r3, #5
 8006dde:	d101      	bne.n	8006de4 <CO_process+0x190>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <CO_process+0x192>
 8006de4:	2300      	movs	r3, #0
 8006de6:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006de8:	2300      	movs	r3, #0
 8006dea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006dee:	e011      	b.n	8006e14 <CO_process+0x1c0>
        (void)CO_SDOserver_process(&co->SDOserver[i], NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006df4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006df8:	21ac      	movs	r1, #172	@ 0xac
 8006dfa:	fb01 f303 	mul.w	r3, r1, r3
 8006dfe:	18d0      	adds	r0, r2, r3
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e06:	f7fd faab 	bl	8004360 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006e0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006e0e:	3301      	adds	r3, #1
 8006e10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006e14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d0e9      	beq.n	8006df0 <CO_process+0x19c>
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        CO_HBconsumer_process(co->HBcons, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	6958      	ldr	r0, [r3, #20]
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e26:	f7fa ff2d 	bl	8001c84 <CO_HBconsumer_process>
    CO_nodeGuardingMaster_process(co->NGmaster, timeDifference_us, timerNext_us);
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        (void)CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fe fcfa 	bl	800582c <CO_TIME_process>
    if (CO_GET_CNT(GTWA) == 1U) {
        CO_GTWA_process(co->gtwa, enableGateway, timeDifference_us, timerNext_us);
    }
#endif

    return reset;
 8006e38:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	374c      	adds	r7, #76	@ 0x4c
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e44 <CO_process_SYNC>:

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
bool_t
CO_process_SYNC(CO_t* co, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61fb      	str	r3, [r7, #28]

    if ((!co->nodeIdUnconfigured) && (CO_GET_CNT(SYNC) == 1U)) {
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d131      	bne.n	8006ec0 <CO_process_SYNC+0x7c>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff fb4c 	bl	80064fe <CO_NMT_getInternalState>
 8006e66:	4603      	mov	r3, r0
 8006e68:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8006e6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006e6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e70:	d003      	beq.n	8006e7a <CO_process_SYNC+0x36>
 8006e72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006e76:	2b05      	cmp	r3, #5
 8006e78:	d101      	bne.n	8006e7e <CO_process_SYNC+0x3a>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <CO_process_SYNC+0x3c>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC, NMTisPreOrOperational, timeDifference_us,
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	6979      	ldr	r1, [r7, #20]
 8006e8c:	f7fe faae 	bl	80053ec <CO_SYNC_process>
 8006e90:	4603      	mov	r3, r0
 8006e92:	74fb      	strb	r3, [r7, #19]
                                                        timerNext_us);

        switch (sync_process) {
 8006e94:	7cfb      	ldrb	r3, [r7, #19]
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d009      	beq.n	8006eae <CO_process_SYNC+0x6a>
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	dc0d      	bgt.n	8006eba <CO_process_SYNC+0x76>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00d      	beq.n	8006ebe <CO_process_SYNC+0x7a>
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d000      	beq.n	8006ea8 <CO_process_SYNC+0x64>
            case CO_SYNC_NONE: break;
            case CO_SYNC_RX_TX: syncWas = true; break;
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
            default:
                /* MISRA C 2004 15.3 */
                break;
 8006ea6:	e008      	b.n	8006eba <CO_process_SYNC+0x76>
            case CO_SYNC_RX_TX: syncWas = true; break;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	61fb      	str	r3, [r7, #28]
 8006eac:	e008      	b.n	8006ec0 <CO_process_SYNC+0x7c>
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fc7d 	bl	80077b2 <CO_CANclearPendingSyncPDOs>
 8006eb8:	e002      	b.n	8006ec0 <CO_process_SYNC+0x7c>
                break;
 8006eba:	bf00      	nop
 8006ebc:	e000      	b.n	8006ec0 <CO_process_SYNC+0x7c>
            case CO_SYNC_NONE: break;
 8006ebe:	bf00      	nop
        }
    }

    return syncWas;
 8006ec0:	69fb      	ldr	r3, [r7, #28]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3720      	adds	r7, #32
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <CO_process_RPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
void
CO_process_RPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b086      	sub	sp, #24
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	607a      	str	r2, [r7, #4]
 8006ed6:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10e      	bne.n	8006efe <CO_process_RPDO+0x34>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7ff fb0a 	bl	80064fe <CO_NMT_getInternalState>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b05      	cmp	r3, #5
 8006eee:	bf0c      	ite	eq
 8006ef0:	2301      	moveq	r3, #1
 8006ef2:	2300      	movne	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	617b      	str	r3, [r7, #20]

    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006ef8:	2300      	movs	r3, #0
 8006efa:	827b      	strh	r3, [r7, #18]
 8006efc:	e000      	b.n	8006f00 <CO_process_RPDO+0x36>
        return;
 8006efe:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <CO_process_TPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
void
CO_process_TPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b088      	sub	sp, #32
 8006f0a:	af02      	add	r7, sp, #8
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	607a      	str	r2, [r7, #4]
 8006f12:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d124      	bne.n	8006f66 <CO_process_TPDO+0x60>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff faec 	bl	80064fe <CO_NMT_getInternalState>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b05      	cmp	r3, #5
 8006f2a:	bf0c      	ite	eq
 8006f2c:	2301      	moveq	r3, #1
 8006f2e:	2300      	movne	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006f34:	2300      	movs	r3, #0
 8006f36:	82fb      	strh	r3, [r7, #22]
 8006f38:	e011      	b.n	8006f5e <CO_process_TPDO+0x58>
        CO_TPDO_process(&co->TPDO[i],
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f3e:	8afb      	ldrh	r3, [r7, #22]
 8006f40:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8006f44:	fb01 f303 	mul.w	r3, r1, r3
 8006f48:	18d0      	adds	r0, r2, r3
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	f7fc fbf2 	bl	800373c <CO_TPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006f58:	8afb      	ldrh	r3, [r7, #22]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	82fb      	strh	r3, [r7, #22]
 8006f5e:	8afb      	ldrh	r3, [r7, #22]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d0ea      	beq.n	8006f3a <CO_process_TPDO+0x34>
 8006f64:	e000      	b.n	8006f68 <CO_process_TPDO+0x62>
        return;
 8006f66:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8006f78:	4a13      	ldr	r2, [pc, #76]	@ (8006fc8 <canopen_app_init+0x58>)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 8006f82:	f107 0308 	add.w	r3, r7, #8
 8006f86:	4619      	mov	r1, r3
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f7ff fadb 	bl	8006544 <CO_new>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	4a0e      	ldr	r2, [pc, #56]	@ (8006fcc <canopen_app_init+0x5c>)
 8006f92:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 8006f94:	4b0d      	ldr	r3, [pc, #52]	@ (8006fcc <canopen_app_init+0x5c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d104      	bne.n	8006fa6 <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 8006f9c:	480c      	ldr	r0, [pc, #48]	@ (8006fd0 <canopen_app_init+0x60>)
 8006f9e:	f00f ff11 	bl	8016dc4 <puts>
        return 1;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e00c      	b.n	8006fc0 <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	480a      	ldr	r0, [pc, #40]	@ (8006fd4 <canopen_app_init+0x64>)
 8006fac:	f00f fea2 	bl	8016cf4 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 8006fb0:	4b05      	ldr	r3, [pc, #20]	@ (8006fc8 <canopen_app_init+0x58>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a05      	ldr	r2, [pc, #20]	@ (8006fcc <canopen_app_init+0x5c>)
 8006fb6:	6812      	ldr	r2, [r2, #0]
 8006fb8:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 8006fba:	f000 f80d 	bl	8006fd8 <canopen_app_resetCommunication>
    return 0;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	200003f0 	.word	0x200003f0
 8006fcc:	200003f4 	.word	0x200003f4
 8006fd0:	0801a420 	.word	0x0801a420
 8006fd4:	0801a440 	.word	0x0801a440

08006fd8 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 8006fd8:	b590      	push	{r4, r7, lr}
 8006fda:	b08f      	sub	sp, #60	@ 0x3c
 8006fdc:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 8006fde:	487d      	ldr	r0, [pc, #500]	@ (80071d4 <canopen_app_resetCommunication+0x1fc>)
 8006fe0:	f00f fef0 	bl	8016dc4 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 8006fe4:	4b7c      	ldr	r3, [pc, #496]	@ (80071d8 <canopen_app_resetCommunication+0x200>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8006fee:	4b7b      	ldr	r3, [pc, #492]	@ (80071dc <canopen_app_resetCommunication+0x204>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 f9bc 	bl	8007370 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 8006ff8:	4b77      	ldr	r3, [pc, #476]	@ (80071d8 <canopen_app_resetCommunication+0x200>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 faa6 	bl	8007550 <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 8007004:	4b74      	ldr	r3, [pc, #464]	@ (80071d8 <canopen_app_resetCommunication+0x200>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a74      	ldr	r2, [pc, #464]	@ (80071dc <canopen_app_resetCommunication+0x204>)
 800700a:	6811      	ldr	r1, [r2, #0]
 800700c:	2200      	movs	r2, #0
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff fc0c 	bl	800682c <CO_CANinit>
 8007014:	4603      	mov	r3, r0
 8007016:	461a      	mov	r2, r3
 8007018:	4b71      	ldr	r3, [pc, #452]	@ (80071e0 <canopen_app_resetCommunication+0x208>)
 800701a:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 800701c:	4b70      	ldr	r3, [pc, #448]	@ (80071e0 <canopen_app_resetCommunication+0x208>)
 800701e:	f993 3000 	ldrsb.w	r3, [r3]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d008      	beq.n	8007038 <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 8007026:	4b6e      	ldr	r3, [pc, #440]	@ (80071e0 <canopen_app_resetCommunication+0x208>)
 8007028:	f993 3000 	ldrsb.w	r3, [r3]
 800702c:	4619      	mov	r1, r3
 800702e:	486d      	ldr	r0, [pc, #436]	@ (80071e4 <canopen_app_resetCommunication+0x20c>)
 8007030:	f00f fe60 	bl	8016cf4 <iprintf>
        return 1;
 8007034:	2301      	movs	r3, #1
 8007036:	e0c8      	b.n	80071ca <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8007038:	4b6b      	ldr	r3, [pc, #428]	@ (80071e8 <canopen_app_resetCommunication+0x210>)
 800703a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800703c:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 800703e:	4b6a      	ldr	r3, [pc, #424]	@ (80071e8 <canopen_app_resetCommunication+0x210>)
 8007040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8007042:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8007044:	4b68      	ldr	r3, [pc, #416]	@ (80071e8 <canopen_app_resetCommunication+0x210>)
 8007046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8007048:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 800704a:	4b67      	ldr	r3, [pc, #412]	@ (80071e8 <canopen_app_resetCommunication+0x210>)
 800704c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 800704e:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8007050:	4b61      	ldr	r3, [pc, #388]	@ (80071d8 <canopen_app_resetCommunication+0x200>)
 8007052:	6818      	ldr	r0, [r3, #0]
 8007054:	4b61      	ldr	r3, [pc, #388]	@ (80071dc <canopen_app_resetCommunication+0x204>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	461a      	mov	r2, r3
 800705a:	4b60      	ldr	r3, [pc, #384]	@ (80071dc <canopen_app_resetCommunication+0x204>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3302      	adds	r3, #2
 8007060:	f107 0108 	add.w	r1, r7, #8
 8007064:	f7ff fc0e 	bl	8006884 <CO_LSSinit>
 8007068:	4603      	mov	r3, r0
 800706a:	461a      	mov	r2, r3
 800706c:	4b5c      	ldr	r3, [pc, #368]	@ (80071e0 <canopen_app_resetCommunication+0x208>)
 800706e:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8007070:	4b5b      	ldr	r3, [pc, #364]	@ (80071e0 <canopen_app_resetCommunication+0x208>)
 8007072:	f993 3000 	ldrsb.w	r3, [r3]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d008      	beq.n	800708c <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 800707a:	4b59      	ldr	r3, [pc, #356]	@ (80071e0 <canopen_app_resetCommunication+0x208>)
 800707c:	f993 3000 	ldrsb.w	r3, [r3]
 8007080:	4619      	mov	r1, r3
 8007082:	485a      	ldr	r0, [pc, #360]	@ (80071ec <canopen_app_resetCommunication+0x214>)
 8007084:	f00f fe36 	bl	8016cf4 <iprintf>
        return 2;
 8007088:	2302      	movs	r3, #2
 800708a:	e09e      	b.n	80071ca <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 800708c:	4b53      	ldr	r3, [pc, #332]	@ (80071dc <canopen_app_resetCommunication+0x204>)
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	4b52      	ldr	r3, [pc, #328]	@ (80071dc <canopen_app_resetCommunication+0x204>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	7812      	ldrb	r2, [r2, #0]
 8007096:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8007098:	2300      	movs	r3, #0
 800709a:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 800709c:	4b4e      	ldr	r3, [pc, #312]	@ (80071d8 <canopen_app_resetCommunication+0x200>)
 800709e:	6818      	ldr	r0, [r3, #0]
 80070a0:	4b53      	ldr	r3, [pc, #332]	@ (80071f0 <canopen_app_resetCommunication+0x218>)
 80070a2:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 80070a4:	4b4d      	ldr	r3, [pc, #308]	@ (80071dc <canopen_app_resetCommunication+0x204>)
 80070a6:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 80070a8:	785b      	ldrb	r3, [r3, #1]
 80070aa:	1d3a      	adds	r2, r7, #4
 80070ac:	9207      	str	r2, [sp, #28]
 80070ae:	9306      	str	r3, [sp, #24]
 80070b0:	2300      	movs	r3, #0
 80070b2:	9305      	str	r3, [sp, #20]
 80070b4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80070b8:	9304      	str	r3, [sp, #16]
 80070ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80070be:	9303      	str	r3, [sp, #12]
 80070c0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80070c4:	9302      	str	r3, [sp, #8]
 80070c6:	f242 1311 	movw	r3, #8465	@ 0x2111
 80070ca:	9301      	str	r3, [sp, #4]
 80070cc:	2300      	movs	r3, #0
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	460b      	mov	r3, r1
 80070d2:	2200      	movs	r2, #0
 80070d4:	2100      	movs	r1, #0
 80070d6:	f7ff fc01 	bl	80068dc <CO_CANopenInit>
 80070da:	4603      	mov	r3, r0
 80070dc:	461a      	mov	r2, r3
 80070de:	4b40      	ldr	r3, [pc, #256]	@ (80071e0 <canopen_app_resetCommunication+0x208>)
 80070e0:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 80070e2:	4b3f      	ldr	r3, [pc, #252]	@ (80071e0 <canopen_app_resetCommunication+0x208>)
 80070e4:	f993 3000 	ldrsb.w	r3, [r3]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d01a      	beq.n	8007122 <canopen_app_resetCommunication+0x14a>
 80070ec:	4b3c      	ldr	r3, [pc, #240]	@ (80071e0 <canopen_app_resetCommunication+0x208>)
 80070ee:	f993 3000 	ldrsb.w	r3, [r3]
 80070f2:	f113 0f13 	cmn.w	r3, #19
 80070f6:	d014      	beq.n	8007122 <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 80070f8:	4b39      	ldr	r3, [pc, #228]	@ (80071e0 <canopen_app_resetCommunication+0x208>)
 80070fa:	f993 3000 	ldrsb.w	r3, [r3]
 80070fe:	f113 0f0c 	cmn.w	r3, #12
 8007102:	d105      	bne.n	8007110 <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4619      	mov	r1, r3
 8007108:	483a      	ldr	r0, [pc, #232]	@ (80071f4 <canopen_app_resetCommunication+0x21c>)
 800710a:	f00f fdf3 	bl	8016cf4 <iprintf>
 800710e:	e006      	b.n	800711e <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 8007110:	4b33      	ldr	r3, [pc, #204]	@ (80071e0 <canopen_app_resetCommunication+0x208>)
 8007112:	f993 3000 	ldrsb.w	r3, [r3]
 8007116:	4619      	mov	r1, r3
 8007118:	4837      	ldr	r0, [pc, #220]	@ (80071f8 <canopen_app_resetCommunication+0x220>)
 800711a:	f00f fdeb 	bl	8016cf4 <iprintf>
        }
        return 3;
 800711e:	2303      	movs	r3, #3
 8007120:	e053      	b.n	80071ca <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 8007122:	4b2d      	ldr	r3, [pc, #180]	@ (80071d8 <canopen_app_resetCommunication+0x200>)
 8007124:	6818      	ldr	r0, [r3, #0]
 8007126:	4b2c      	ldr	r3, [pc, #176]	@ (80071d8 <canopen_app_resetCommunication+0x200>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	69d9      	ldr	r1, [r3, #28]
 800712c:	4b30      	ldr	r3, [pc, #192]	@ (80071f0 <canopen_app_resetCommunication+0x218>)
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	4b2a      	ldr	r3, [pc, #168]	@ (80071dc <canopen_app_resetCommunication+0x204>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	785c      	ldrb	r4, [r3, #1]
 8007136:	1d3b      	adds	r3, r7, #4
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	4623      	mov	r3, r4
 800713c:	f7ff fd12 	bl	8006b64 <CO_CANopenInitPDO>
 8007140:	4603      	mov	r3, r0
 8007142:	461a      	mov	r2, r3
 8007144:	4b26      	ldr	r3, [pc, #152]	@ (80071e0 <canopen_app_resetCommunication+0x208>)
 8007146:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8007148:	4b25      	ldr	r3, [pc, #148]	@ (80071e0 <canopen_app_resetCommunication+0x208>)
 800714a:	f993 3000 	ldrsb.w	r3, [r3]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d014      	beq.n	800717c <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8007152:	4b23      	ldr	r3, [pc, #140]	@ (80071e0 <canopen_app_resetCommunication+0x208>)
 8007154:	f993 3000 	ldrsb.w	r3, [r3]
 8007158:	f113 0f0c 	cmn.w	r3, #12
 800715c:	d105      	bne.n	800716a <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4619      	mov	r1, r3
 8007162:	4824      	ldr	r0, [pc, #144]	@ (80071f4 <canopen_app_resetCommunication+0x21c>)
 8007164:	f00f fdc6 	bl	8016cf4 <iprintf>
 8007168:	e006      	b.n	8007178 <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 800716a:	4b1d      	ldr	r3, [pc, #116]	@ (80071e0 <canopen_app_resetCommunication+0x208>)
 800716c:	f993 3000 	ldrsb.w	r3, [r3]
 8007170:	4619      	mov	r1, r3
 8007172:	4822      	ldr	r0, [pc, #136]	@ (80071fc <canopen_app_resetCommunication+0x224>)
 8007174:	f00f fdbe 	bl	8016cf4 <iprintf>
        }
        return 4;
 8007178:	2304      	movs	r3, #4
 800717a:	e026      	b.n	80071ca <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 800717c:	4b17      	ldr	r3, [pc, #92]	@ (80071dc <canopen_app_resetCommunication+0x204>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	4618      	mov	r0, r3
 8007184:	f00b fc36 	bl	80129f4 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 8007188:	4b13      	ldr	r3, [pc, #76]	@ (80071d8 <canopen_app_resetCommunication+0x200>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d002      	beq.n	8007198 <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 8007192:	481b      	ldr	r0, [pc, #108]	@ (8007200 <canopen_app_resetCommunication+0x228>)
 8007194:	f00f fe16 	bl	8016dc4 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8007198:	4b0f      	ldr	r3, [pc, #60]	@ (80071d8 <canopen_app_resetCommunication+0x200>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 f8f6 	bl	8007390 <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 80071a4:	4817      	ldr	r0, [pc, #92]	@ (8007204 <canopen_app_resetCommunication+0x22c>)
 80071a6:	f00f fe0d 	bl	8016dc4 <puts>
    fflush(stdout);
 80071aa:	4b17      	ldr	r3, [pc, #92]	@ (8007208 <canopen_app_resetCommunication+0x230>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f00f fcc9 	bl	8016b48 <fflush>
    time_old = time_current = HAL_GetTick();
 80071b6:	f005 f8c3 	bl	800c340 <HAL_GetTick>
 80071ba:	4603      	mov	r3, r0
 80071bc:	4a13      	ldr	r2, [pc, #76]	@ (800720c <canopen_app_resetCommunication+0x234>)
 80071be:	6013      	str	r3, [r2, #0]
 80071c0:	4b12      	ldr	r3, [pc, #72]	@ (800720c <canopen_app_resetCommunication+0x234>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a12      	ldr	r2, [pc, #72]	@ (8007210 <canopen_app_resetCommunication+0x238>)
 80071c6:	6013      	str	r3, [r2, #0]
    return 0;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	371c      	adds	r7, #28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd90      	pop	{r4, r7, pc}
 80071d2:	bf00      	nop
 80071d4:	0801a468 	.word	0x0801a468
 80071d8:	200003f4 	.word	0x200003f4
 80071dc:	200003f0 	.word	0x200003f0
 80071e0:	20000400 	.word	0x20000400
 80071e4:	0801a490 	.word	0x0801a490
 80071e8:	20000000 	.word	0x20000000
 80071ec:	0801a4b8 	.word	0x0801a4b8
 80071f0:	200001e0 	.word	0x200001e0
 80071f4:	0801a4e4 	.word	0x0801a4e4
 80071f8:	0801a50c 	.word	0x0801a50c
 80071fc:	0801a538 	.word	0x0801a538
 8007200:	0801a560 	.word	0x0801a560
 8007204:	0801a588 	.word	0x0801a588
 8007208:	20000218 	.word	0x20000218
 800720c:	200003fc 	.word	0x200003fc
 8007210:	200003f8 	.word	0x200003f8

08007214 <canopen_app_process>:

void
canopen_app_process() {
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 800721a:	f005 f891 	bl	800c340 <HAL_GetTick>
 800721e:	4603      	mov	r3, r0
 8007220:	4a2c      	ldr	r2, [pc, #176]	@ (80072d4 <canopen_app_process+0xc0>)
 8007222:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 8007224:	4b2b      	ldr	r3, [pc, #172]	@ (80072d4 <canopen_app_process+0xc0>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	4b2b      	ldr	r3, [pc, #172]	@ (80072d8 <canopen_app_process+0xc4>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	429a      	cmp	r2, r3
 800722e:	d04c      	beq.n	80072ca <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 8007230:	4b28      	ldr	r3, [pc, #160]	@ (80072d4 <canopen_app_process+0xc0>)
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	4b28      	ldr	r3, [pc, #160]	@ (80072d8 <canopen_app_process+0xc4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800723e:	fb02 f303 	mul.w	r3, r2, r3
 8007242:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8007244:	4b23      	ldr	r3, [pc, #140]	@ (80072d4 <canopen_app_process+0xc0>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a23      	ldr	r2, [pc, #140]	@ (80072d8 <canopen_app_process+0xc4>)
 800724a:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 800724c:	4b23      	ldr	r3, [pc, #140]	@ (80072dc <canopen_app_process+0xc8>)
 800724e:	6818      	ldr	r0, [r3, #0]
 8007250:	2300      	movs	r3, #0
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	2100      	movs	r1, #0
 8007256:	f7ff fcfd 	bl	8006c54 <CO_process>
 800725a:	4603      	mov	r3, r0
 800725c:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 800725e:	4b1f      	ldr	r3, [pc, #124]	@ (80072dc <canopen_app_process+0xc8>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007264:	7a5a      	ldrb	r2, [r3, #9]
 8007266:	4b1e      	ldr	r3, [pc, #120]	@ (80072e0 <canopen_app_process+0xcc>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	09d2      	lsrs	r2, r2, #7
 800726c:	b2d2      	uxtb	r2, r2
 800726e:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 8007270:	4b1a      	ldr	r3, [pc, #104]	@ (80072dc <canopen_app_process+0xc8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007276:	7a9a      	ldrb	r2, [r3, #10]
 8007278:	4b19      	ldr	r3, [pc, #100]	@ (80072e0 <canopen_app_process+0xcc>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	09d2      	lsrs	r2, r2, #7
 800727e:	b2d2      	uxtb	r2, r2
 8007280:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 8007282:	78fb      	ldrb	r3, [r7, #3]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d118      	bne.n	80072ba <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 8007288:	4b15      	ldr	r3, [pc, #84]	@ (80072e0 <canopen_app_process+0xcc>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	4618      	mov	r0, r3
 8007290:	f00b fc20 	bl	8012ad4 <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8007294:	4b12      	ldr	r3, [pc, #72]	@ (80072e0 <canopen_app_process+0xcc>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4618      	mov	r0, r3
 800729a:	f000 f869 	bl	8007370 <CO_CANsetConfigurationMode>
            CO_delete(CO);
 800729e:	4b0f      	ldr	r3, [pc, #60]	@ (80072dc <canopen_app_process+0xc8>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff fa63 	bl	800676e <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 80072a8:	480e      	ldr	r0, [pc, #56]	@ (80072e4 <canopen_app_process+0xd0>)
 80072aa:	f00f fd8b 	bl	8016dc4 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 80072ae:	4b0c      	ldr	r3, [pc, #48]	@ (80072e0 <canopen_app_process+0xcc>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff fe5c 	bl	8006f70 <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 80072b8:	e007      	b.n	80072ca <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 80072ba:	78fb      	ldrb	r3, [r7, #3]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d104      	bne.n	80072ca <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 80072c0:	4809      	ldr	r0, [pc, #36]	@ (80072e8 <canopen_app_process+0xd4>)
 80072c2:	f00f fd7f 	bl	8016dc4 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 80072c6:	f006 fd00 	bl	800dcca <HAL_NVIC_SystemReset>
}
 80072ca:	bf00      	nop
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	200003fc 	.word	0x200003fc
 80072d8:	200003f8 	.word	0x200003f8
 80072dc:	200003f4 	.word	0x200003f4
 80072e0:	200003f0 	.word	0x200003f0
 80072e4:	0801a5a4 	.word	0x0801a5a4
 80072e8:	0801a5cc 	.word	0x0801a5cc

080072ec <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 80072f2:	4b1e      	ldr	r3, [pc, #120]	@ (800736c <canopen_app_interrupt+0x80>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80072f8:	f3ef 8210 	mrs	r2, PRIMASK
 80072fc:	607a      	str	r2, [r7, #4]
  return(result);
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8007302:	b672      	cpsid	i
}
 8007304:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 8007306:	4b19      	ldr	r3, [pc, #100]	@ (800736c <canopen_app_interrupt+0x80>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d120      	bne.n	8007352 <canopen_app_interrupt+0x66>
 8007310:	4b16      	ldr	r3, [pc, #88]	@ (800736c <canopen_app_interrupt+0x80>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01a      	beq.n	8007352 <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 8007320:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007324:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 8007326:	4b11      	ldr	r3, [pc, #68]	@ (800736c <canopen_app_interrupt+0x80>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2200      	movs	r2, #0
 800732c:	68b9      	ldr	r1, [r7, #8]
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff fd88 	bl	8006e44 <CO_process_SYNC>
 8007334:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 8007336:	4b0d      	ldr	r3, [pc, #52]	@ (800736c <canopen_app_interrupt+0x80>)
 8007338:	6818      	ldr	r0, [r3, #0]
 800733a:	2300      	movs	r3, #0
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	68f9      	ldr	r1, [r7, #12]
 8007340:	f7ff fdc3 	bl	8006eca <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8007344:	4b09      	ldr	r3, [pc, #36]	@ (800736c <canopen_app_interrupt+0x80>)
 8007346:	6818      	ldr	r0, [r3, #0]
 8007348:	2300      	movs	r3, #0
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	68f9      	ldr	r1, [r7, #12]
 800734e:	f7ff fdda 	bl	8006f06 <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 8007352:	4b06      	ldr	r3, [pc, #24]	@ (800736c <canopen_app_interrupt+0x80>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800735a:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	f383 8810 	msr	PRIMASK, r3
}
 8007362:	bf00      	nop
}
 8007364:	bf00      	nop
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	200003f4 	.word	0x200003f4

08007370 <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d004      	beq.n	8007388 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	4618      	mov	r0, r3
 8007384:	f005 feb6 	bl	800d0f4 <HAL_CAN_Stop>
#endif
    }
}
 8007388:	bf00      	nop
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00b      	beq.n	80073b8 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f005 fe60 	bl	800d06c <HAL_CAN_Start>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d102      	bne.n	80073b8 <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	615a      	str	r2, [r3, #20]
        }
    }
}
 80073b8:	bf00      	nop
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b090      	sub	sp, #64	@ 0x40
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <CO_CANmodule_init+0x20>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <CO_CANmodule_init+0x20>
 80073da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80073e0:	f04f 33ff 	mov.w	r3, #4294967295
 80073e4:	e0ab      	b.n	800753e <CO_CANmodule_init+0x17e>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 80073ec:	4a56      	ldr	r2, [pc, #344]	@ (8007548 <CO_CANmodule_init+0x188>)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	887a      	ldrh	r2, [r7, #2]
 80073fc:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007402:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800740a:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2201      	movs	r2, #1
 8007428:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	849a      	strh	r2, [r3, #36]	@ 0x24
    CANmodule->errOld = 0U;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007436:	2300      	movs	r3, #0
 8007438:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800743a:	e02b      	b.n	8007494 <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 800743c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800743e:	4613      	mov	r3, r2
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	461a      	mov	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4413      	add	r3, r2
 800744c:	2200      	movs	r2, #0
 800744e:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8007450:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007452:	4613      	mov	r3, r2
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	4413      	add	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	461a      	mov	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4413      	add	r3, r2
 8007460:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007464:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8007466:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007468:	4613      	mov	r3, r2
 800746a:	005b      	lsls	r3, r3, #1
 800746c:	4413      	add	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	461a      	mov	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4413      	add	r3, r2
 8007476:	2200      	movs	r2, #0
 8007478:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 800747a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800747c:	4613      	mov	r3, r2
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	4413      	add	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	461a      	mov	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4413      	add	r3, r2
 800748a:	2200      	movs	r2, #0
 800748c:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 800748e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007490:	3301      	adds	r3, #1
 8007492:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007494:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007496:	887b      	ldrh	r3, [r7, #2]
 8007498:	429a      	cmp	r2, r3
 800749a:	d3cf      	bcc.n	800743c <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 800749c:	2300      	movs	r3, #0
 800749e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80074a0:	e00c      	b.n	80074bc <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 80074a2:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80074a4:	4613      	mov	r3, r2
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	4413      	add	r3, r2
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	461a      	mov	r2, r3
 80074ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074b0:	4413      	add	r3, r2
 80074b2:	2200      	movs	r2, #0
 80074b4:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 80074b6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80074b8:	3301      	adds	r3, #1
 80074ba:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80074bc:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80074be:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d3ed      	bcc.n	80074a2 <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	4798      	blx	r3
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
#else
    if (((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance == CAN1) {
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a1d      	ldr	r2, [pc, #116]	@ (800754c <CO_CANmodule_init+0x18c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d102      	bne.n	80074e0 <CO_CANmodule_init+0x120>
        FilterConfig.FilterBank = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074de:	e001      	b.n	80074e4 <CO_CANmodule_init+0x124>
    } else {
        FilterConfig.FilterBank = 14;
 80074e0:	230e      	movs	r3, #14
 80074e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80074e8:	2301      	movs	r3, #1
 80074ea:	633b      	str	r3, [r7, #48]	@ 0x30
    FilterConfig.FilterIdHigh = 0x0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80074fc:	2300      	movs	r3, #0
 80074fe:	627b      	str	r3, [r7, #36]	@ 0x24

    FilterConfig.FilterActivation = ENABLE;
 8007500:	2301      	movs	r3, #1
 8007502:	637b      	str	r3, [r7, #52]	@ 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 8007504:	230e      	movs	r3, #14
 8007506:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f107 0214 	add.w	r2, r7, #20
 8007510:	4611      	mov	r1, r2
 8007512:	4618      	mov	r0, r3
 8007514:	f005 fccc 	bl	800ceb0 <HAL_CAN_ConfigFilter>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <CO_CANmodule_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800751e:	f04f 33ff 	mov.w	r3, #4294967295
 8007522:	e00c      	b.n	800753e <CO_CANmodule_init+0x17e>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2113      	movs	r1, #19
 800752a:	4618      	mov	r0, r3
 800752c:	f006 f852 	bl	800d5d4 <HAL_CAN_ActivateNotification>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <CO_CANmodule_init+0x17c>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007536:	f04f 33ff 	mov.w	r3, #4294967295
 800753a:	e000      	b.n	800753e <CO_CANmodule_init+0x17e>
    }
#endif

    return CO_ERROR_NO;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3740      	adds	r7, #64	@ 0x40
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20000404 	.word	0x20000404
 800754c:	40006400 	.word	0x40006400

08007550 <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d009      	beq.n	8007572 <CO_CANmodule_disable+0x22>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d005      	beq.n	8007572 <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	4618      	mov	r0, r3
 800756e:	f005 fdc1 	bl	800d0f4 <HAL_CAN_Stop>
#endif
    }
}
 8007572:	bf00      	nop
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	4608      	mov	r0, r1
 8007586:	4611      	mov	r1, r2
 8007588:	461a      	mov	r2, r3
 800758a:	4603      	mov	r3, r0
 800758c:	817b      	strh	r3, [r7, #10]
 800758e:	460b      	mov	r3, r1
 8007590:	813b      	strh	r3, [r7, #8]
 8007592:	4613      	mov	r3, r2
 8007594:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8007596:	2300      	movs	r3, #0
 8007598:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d03c      	beq.n	800761a <CO_CANrxBufferInit+0x9e>
 80075a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d039      	beq.n	800761a <CO_CANrxBufferInit+0x9e>
 80075a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d036      	beq.n	800761a <CO_CANrxBufferInit+0x9e>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	891b      	ldrh	r3, [r3, #8]
 80075b0:	897a      	ldrh	r2, [r7, #10]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d231      	bcs.n	800761a <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6859      	ldr	r1, [r3, #4]
 80075ba:	897a      	ldrh	r2, [r7, #10]
 80075bc:	4613      	mov	r3, r2
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	440b      	add	r3, r1
 80075c6:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075cc:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075d2:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 80075d4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80075d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075dc:	b21b      	sxth	r3, r3
 80075de:	6a3a      	ldr	r2, [r7, #32]
 80075e0:	2a00      	cmp	r2, #0
 80075e2:	d001      	beq.n	80075e8 <CO_CANrxBufferInit+0x6c>
 80075e4:	4a13      	ldr	r2, [pc, #76]	@ (8007634 <CO_CANrxBufferInit+0xb8>)
 80075e6:	e000      	b.n	80075ea <CO_CANrxBufferInit+0x6e>
 80075e8:	2200      	movs	r2, #0
 80075ea:	4313      	orrs	r3, r2
 80075ec:	b21b      	sxth	r3, r3
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 80075f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075fc:	b21b      	sxth	r3, r3
 80075fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007606:	b21b      	sxth	r3, r3
 8007608:	b29a      	uxth	r2, r3
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d004      	beq.n	8007620 <CO_CANrxBufferInit+0xa4>
            __NOP();
 8007616:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007618:	e002      	b.n	8007620 <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800761a:	23ff      	movs	r3, #255	@ 0xff
 800761c:	75fb      	strb	r3, [r7, #23]
 800761e:	e000      	b.n	8007622 <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007620:	bf00      	nop
    }

    return ret;
 8007622:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007626:	4618      	mov	r0, r3
 8007628:	371c      	adds	r7, #28
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	ffff8000 	.word	0xffff8000

08007638 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	607b      	str	r3, [r7, #4]
 8007642:	460b      	mov	r3, r1
 8007644:	817b      	strh	r3, [r7, #10]
 8007646:	4613      	mov	r3, r2
 8007648:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 800764a:	2300      	movs	r3, #0
 800764c:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d024      	beq.n	800769e <CO_CANtxBufferInit+0x66>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8a1b      	ldrh	r3, [r3, #16]
 8007658:	897a      	ldrh	r2, [r7, #10]
 800765a:	429a      	cmp	r2, r3
 800765c:	d21f      	bcs.n	800769e <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	68d9      	ldr	r1, [r3, #12]
 8007662:	897a      	ldrh	r2, [r7, #10]
 8007664:	4613      	mov	r3, r2
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	4413      	add	r3, r2
 800766a:	00db      	lsls	r3, r3, #3
 800766c:	440b      	add	r3, r1
 800766e:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 8007670:	893b      	ldrh	r3, [r7, #8]
 8007672:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	2a00      	cmp	r2, #0
 800767a:	d002      	beq.n	8007682 <CO_CANtxBufferInit+0x4a>
 800767c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007680:	e000      	b.n	8007684 <CO_CANtxBufferInit+0x4c>
 8007682:	2200      	movs	r2, #0
 8007684:	431a      	orrs	r2, r3
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007690:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2200      	movs	r2, #0
 8007696:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800769c:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 800769e:	697b      	ldr	r3, [r7, #20]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	371c      	adds	r7, #28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 80076b6:	2300      	movs	r3, #0
 80076b8:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f005 fe30 	bl	800d326 <HAL_CAN_GetTxMailboxesFreeLevel>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d028      	beq.n	800771e <prv_send_can_message+0x72>
        /*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
        tx_hdr.ExtId = 0u;
 80076cc:	4b16      	ldr	r3, [pc, #88]	@ (8007728 <prv_send_can_message+0x7c>)
 80076ce:	2200      	movs	r2, #0
 80076d0:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 80076d2:	4b15      	ldr	r3, [pc, #84]	@ (8007728 <prv_send_can_message+0x7c>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	791b      	ldrb	r3, [r3, #4]
 80076dc:	461a      	mov	r2, r3
 80076de:	4b12      	ldr	r3, [pc, #72]	@ (8007728 <prv_send_can_message+0x7c>)
 80076e0:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076ea:	4a0f      	ldr	r2, [pc, #60]	@ (8007728 <prv_send_can_message+0x7c>)
 80076ec:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	0b9b      	lsrs	r3, r3, #14
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	4a0b      	ldr	r2, [pc, #44]	@ (8007728 <prv_send_can_message+0x7c>)
 80076fa:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6898      	ldr	r0, [r3, #8]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	1d5a      	adds	r2, r3, #5
 8007706:	f107 0308 	add.w	r3, r7, #8
 800770a:	4907      	ldr	r1, [pc, #28]	@ (8007728 <prv_send_can_message+0x7c>)
 800770c:	f005 fd3b 	bl	800d186 <HAL_CAN_AddTxMessage>
 8007710:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 8007712:	2b00      	cmp	r3, #0
 8007714:	bf0c      	ite	eq
 8007716:	2301      	moveq	r3, #1
 8007718:	2300      	movne	r3, #0
 800771a:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 800771c:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 800771e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	20000408 	.word	0x20000408

0800772c <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 8007736:	2300      	movs	r3, #0
 8007738:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00c      	beq.n	800775c <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d106      	bne.n	8007758 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	8a5b      	ldrh	r3, [r3, #18]
 800774e:	f043 0308 	orr.w	r3, r3, #8
 8007752:	b29a      	uxth	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8007758:	23f7      	movs	r3, #247	@ 0xf7
 800775a:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800775c:	f3ef 8310 	mrs	r3, PRIMASK
 8007760:	613b      	str	r3, [r7, #16]
  return(result);
 8007762:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007768:	b672      	cpsid	i
}
 800776a:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff ff9c 	bl	80076ac <prv_send_can_message>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d004      	beq.n	8007784 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	695a      	ldr	r2, [r3, #20]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	61da      	str	r2, [r3, #28]
 8007782:	e009      	b.n	8007798 <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2201      	movs	r2, #1
 8007788:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800778e:	b29b      	uxth	r3, r3
 8007790:	3301      	adds	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f383 8810 	msr	PRIMASK, r3
}
 80077a4:	bf00      	nop

    return err;
 80077a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 80077b2:	b480      	push	{r7}
 80077b4:	b087      	sub	sp, #28
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80077be:	f3ef 8310 	mrs	r3, PRIMASK
 80077c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80077c4:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80077ca:	b672      	cpsid	i
}
 80077cc:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d004      	beq.n	80077e0 <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 80077dc:	2301      	movs	r3, #1
 80077de:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d032      	beq.n	8007850 <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	8a1b      	ldrh	r3, [r3, #16]
 80077ee:	827b      	strh	r3, [r7, #18]
 80077f0:	e02b      	b.n	800784a <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68d9      	ldr	r1, [r3, #12]
 80077f6:	8a7a      	ldrh	r2, [r7, #18]
 80077f8:	4613      	mov	r3, r2
 80077fa:	005b      	lsls	r3, r3, #1
 80077fc:	4413      	add	r3, r2
 80077fe:	00db      	lsls	r3, r3, #3
 8007800:	440b      	add	r3, r1
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01d      	beq.n	8007844 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68d9      	ldr	r1, [r3, #12]
 800780c:	8a7a      	ldrh	r2, [r7, #18]
 800780e:	4613      	mov	r3, r2
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	4413      	add	r3, r2
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	440b      	add	r3, r1
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d012      	beq.n	8007844 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68d9      	ldr	r1, [r3, #12]
 8007822:	8a7a      	ldrh	r2, [r7, #18]
 8007824:	4613      	mov	r3, r2
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	4413      	add	r3, r2
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	440b      	add	r3, r1
 800782e:	2200      	movs	r2, #0
 8007830:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b29a      	uxth	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	849a      	strh	r2, [r3, #36]	@ 0x24
                    tpdoDeleted = 2U;
 8007840:	2302      	movs	r3, #2
 8007842:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8007844:	8a7b      	ldrh	r3, [r7, #18]
 8007846:	3b01      	subs	r3, #1
 8007848:	827b      	strh	r3, [r7, #18]
 800784a:	8a7b      	ldrh	r3, [r7, #18]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1d0      	bne.n	80077f2 <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007854:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	f383 8810 	msr	PRIMASK, r3
}
 800785c:	bf00      	nop
    if (tpdoDeleted) {
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d006      	beq.n	8007872 <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	8a5b      	ldrh	r3, [r3, #18]
 8007868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800786c:	b29a      	uxth	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	825a      	strh	r2, [r3, #18]
    }
}
 8007872:	bf00      	nop
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 8007886:	2300      	movs	r3, #0
 8007888:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d02e      	beq.n	8007902 <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	8a5b      	ldrh	r3, [r3, #18]
 80078a8:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	629a      	str	r2, [r3, #40]	@ 0x28

        if (err & CAN_ESR_BOFF) {
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d004      	beq.n	80078c4 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 80078ba:	89fb      	ldrh	r3, [r7, #14]
 80078bc:	f043 0304 	orr.w	r3, r3, #4
 80078c0:	81fb      	strh	r3, [r7, #14]
 80078c2:	e01b      	b.n	80078fc <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 80078c4:	89fb      	ldrh	r3, [r7, #14]
 80078c6:	f423 7341 	bic.w	r3, r3, #772	@ 0x304
 80078ca:	f023 0303 	bic.w	r3, r3, #3
 80078ce:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d005      	beq.n	80078e6 <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 80078da:	89fb      	ldrh	r3, [r7, #14]
 80078dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078e0:	f043 0301 	orr.w	r3, r3, #1
 80078e4:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d005      	beq.n	80078fc <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 80078f0:	89fb      	ldrh	r3, [r7, #14]
 80078f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80078f6:	f043 0302 	orr.w	r3, r3, #2
 80078fa:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	89fa      	ldrh	r2, [r7, #14]
 8007900:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 8007902:	bf00      	nop
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <save_CAN_data_to_sensor>:
}
#else

extern Sensor CAN;

void save_CAN_data_to_sensor(Sensor *sensor, uint8_t data){
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	460b      	mov	r3, r1
 8007918:	70fb      	strb	r3, [r7, #3]
	if (sensor->index == 0){
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8007920:	2b00      	cmp	r3, #0
 8007922:	d113      	bne.n	800794c <save_CAN_data_to_sensor+0x3e>
		sensor->data[0]=sensor->sensorType;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 240c 	ldrb.w	r2, [r3, #1036]	@ 0x40c
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	701a      	strb	r2, [r3, #0]
		//update_sensor_timestamp(sensor);
		memcpy(&sensor->data[1], &(sensor->timestamp), sizeof(sensor->timestamp));  // guarda timestamp em binário
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3301      	adds	r3, #1
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	f202 4204 	addw	r2, r2, #1028	@ 0x404
 8007938:	6812      	ldr	r2, [r2, #0]
 800793a:	601a      	str	r2, [r3, #0]
		sensor->index = 5;  // avança o índice após 1 byte de tipo + 4 bytes de timestamp
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2205      	movs	r2, #5
 8007940:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
		sensor->sent_low=0;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
	}
	if (sensor->index == (sensor_length/2)){
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8007952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007956:	d112      	bne.n	800797e <save_CAN_data_to_sensor+0x70>
		sensor->data[sensor_length/2]=sensor->sensorType;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 240c 	ldrb.w	r2, [r3, #1036]	@ 0x40c
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
		//update_sensor_timestamp(sensor);
		memcpy(&sensor->data[(sensor_length/2)+1], &(sensor->timestamp), sizeof(sensor->timestamp));  // guarda timestamp em binário
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f203 2301 	addw	r3, r3, #513	@ 0x201
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	f202 4204 	addw	r2, r2, #1028	@ 0x404
 8007970:	6812      	ldr	r2, [r2, #0]
 8007972:	601a      	str	r2, [r3, #0]
		sensor->index = (sensor_length/2) + 5;  // avança o índice após 1 byte de tipo + 4 bytes de timestamp
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f240 2205 	movw	r2, #517	@ 0x205
 800797a:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
	}
	sensor->data[sensor->index]=data;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8007984:	4619      	mov	r1, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	78fa      	ldrb	r2, [r7, #3]
 800798a:	545a      	strb	r2, [r3, r1]
	if (sensor->index == (sensor_length-1))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8007992:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8007996:	4293      	cmp	r3, r2
 8007998:	d103      	bne.n	80079a2 <save_CAN_data_to_sensor+0x94>
		sensor->send_high=1;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2403 	strb.w	r2, [r3, #1027]	@ 0x403
	sensor->index = (sensor->index + 1) % sensor_length;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80079a8:	3301      	adds	r3, #1
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b08c      	sub	sp, #48	@ 0x30
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
    //prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK) {
 80079cc:	f107 0308 	add.w	r3, r7, #8
 80079d0:	f107 0210 	add.w	r2, r7, #16
 80079d4:	2100      	movs	r1, #0
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f005 fcda 	bl	800d390 <HAL_CAN_GetRxMessage>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d111      	bne.n	8007a06 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		for(int i=0;i<sizeof(rxData);i++){
 80079e2:	2300      	movs	r3, #0
 80079e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079e6:	e00b      	b.n	8007a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
			save_CAN_data_to_sensor(&CAN,rxData[i]);
 80079e8:	f107 0208 	add.w	r2, r7, #8
 80079ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ee:	4413      	add	r3, r2
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	4619      	mov	r1, r3
 80079f4:	4806      	ldr	r0, [pc, #24]	@ (8007a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80079f6:	f7ff ff8a 	bl	800790e <save_CAN_data_to_sensor>
		for(int i=0;i<sizeof(rxData);i++){
 80079fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079fc:	3301      	adds	r3, #1
 80079fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a02:	2b07      	cmp	r3, #7
 8007a04:	d9f0      	bls.n	80079e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
		}
	}
}
 8007a06:	bf00      	nop
 8007a08:	3730      	adds	r7, #48	@ 0x30
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20003aa8 	.word	0x20003aa8

08007a14 <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08c      	sub	sp, #48	@ 0x30
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
    //prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &rxHeader, rxData) == HAL_OK) {
 8007a1c:	f107 0308 	add.w	r3, r7, #8
 8007a20:	f107 0210 	add.w	r2, r7, #16
 8007a24:	2101      	movs	r1, #1
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f005 fcb2 	bl	800d390 <HAL_CAN_GetRxMessage>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d111      	bne.n	8007a56 <HAL_CAN_RxFifo1MsgPendingCallback+0x42>
		for(int i=0;i<sizeof(rxData);i++){
 8007a32:	2300      	movs	r3, #0
 8007a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a36:	e00b      	b.n	8007a50 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>
			save_CAN_data_to_sensor(&CAN,rxData[i]);
 8007a38:	f107 0208 	add.w	r2, r7, #8
 8007a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a3e:	4413      	add	r3, r2
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	4619      	mov	r1, r3
 8007a44:	4806      	ldr	r0, [pc, #24]	@ (8007a60 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 8007a46:	f7ff ff62 	bl	800790e <save_CAN_data_to_sensor>
		for(int i=0;i<sizeof(rxData);i++){
 8007a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a52:	2b07      	cmp	r3, #7
 8007a54:	d9f0      	bls.n	8007a38 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>
		}
	}
}
 8007a56:	bf00      	nop
 8007a58:	3730      	adds	r7, #48	@ 0x30
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	20003aa8 	.word	0x20003aa8

08007a64 <CO_CANinterrupt_TX>:
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b088      	sub	sp, #32
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	621a      	str	r2, [r3, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	61da      	str	r2, [r3, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d05d      	beq.n	8007b40 <CO_CANinterrupt_TX+0xdc>
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	61fb      	str	r3, [r7, #28]
        uint16_t i;
        bool anyFailed = false;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	767b      	strb	r3, [r7, #25]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a92:	613b      	str	r3, [r7, #16]
  return(result);
 8007a94:	693a      	ldr	r2, [r7, #16]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007a9a:	b672      	cpsid	i
}
 8007a9c:	bf00      	nop

        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	8a1b      	ldrh	r3, [r3, #16]
 8007aa2:	837b      	strh	r3, [r7, #26]
 8007aa4:	e021      	b.n	8007aea <CO_CANinterrupt_TX+0x86>
            /* Try to send message */
            if (buffer->bufferFull) {
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d017      	beq.n	8007ade <CO_CANinterrupt_TX+0x7a>
                if (prv_send_can_message(CANmodule, buffer)) {
 8007aae:	69f9      	ldr	r1, [r7, #28]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff fdfb 	bl	80076ac <prv_send_can_message>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00e      	beq.n	8007ada <CO_CANinterrupt_TX+0x76>
                    buffer->bufferFull = false;
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	849a      	strh	r2, [r3, #36]	@ 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	695a      	ldr	r2, [r3, #20]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	61da      	str	r2, [r3, #28]
 8007ad8:	e001      	b.n	8007ade <CO_CANinterrupt_TX+0x7a>
                }else{
                	anyFailed = true;
 8007ada:	2301      	movs	r3, #1
 8007adc:	767b      	strb	r3, [r7, #25]
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8007ade:	8b7b      	ldrh	r3, [r7, #26]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	837b      	strh	r3, [r7, #26]
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	3318      	adds	r3, #24
 8007ae8:	61fb      	str	r3, [r7, #28]
 8007aea:	8b7b      	ldrh	r3, [r7, #26]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1da      	bne.n	8007aa6 <CO_CANinterrupt_TX+0x42>
                }
            }
        }

        /* Apenas recalcula CANtxCount se houve falhas no envio */
		if (anyFailed) {
 8007af0:	7e7b      	ldrb	r3, [r7, #25]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d01d      	beq.n	8007b32 <CO_CANinterrupt_TX+0xce>
			uint16_t remaining = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	82fb      	strh	r3, [r7, #22]
			for (uint16_t j = 0; j < CANmodule->txSize; ++j) {
 8007afa:	2300      	movs	r3, #0
 8007afc:	82bb      	strh	r3, [r7, #20]
 8007afe:	e010      	b.n	8007b22 <CO_CANinterrupt_TX+0xbe>
				if (CANmodule->txArray[j].bufferFull) {
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68d9      	ldr	r1, [r3, #12]
 8007b04:	8aba      	ldrh	r2, [r7, #20]
 8007b06:	4613      	mov	r3, r2
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	4413      	add	r3, r2
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	440b      	add	r3, r1
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d002      	beq.n	8007b1c <CO_CANinterrupt_TX+0xb8>
					remaining++;
 8007b16:	8afb      	ldrh	r3, [r7, #22]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	82fb      	strh	r3, [r7, #22]
			for (uint16_t j = 0; j < CANmodule->txSize; ++j) {
 8007b1c:	8abb      	ldrh	r3, [r7, #20]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	82bb      	strh	r3, [r7, #20]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	8a1b      	ldrh	r3, [r3, #16]
 8007b26:	8aba      	ldrh	r2, [r7, #20]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d3e9      	bcc.n	8007b00 <CO_CANinterrupt_TX+0x9c>
				}
			}
			CANmodule->CANtxCount = remaining;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	8afa      	ldrh	r2, [r7, #22]
 8007b30:	849a      	strh	r2, [r3, #36]	@ 0x24
		}

        CO_UNLOCK_CAN_SEND(CANmodule);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f383 8810 	msr	PRIMASK, r3
}
 8007b3e:	bf00      	nop
    }
}
 8007b40:	bf00      	nop
 8007b42:	3720      	adds	r7, #32
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007b50:	4b04      	ldr	r3, [pc, #16]	@ (8007b64 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2101      	movs	r1, #1
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff ff84 	bl	8007a64 <CO_CANinterrupt_TX>
}
 8007b5c:	bf00      	nop
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	20000404 	.word	0x20000404

08007b68 <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007b70:	4b04      	ldr	r3, [pc, #16]	@ (8007b84 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2101      	movs	r1, #1
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff ff74 	bl	8007a64 <CO_CANinterrupt_TX>
}
 8007b7c:	bf00      	nop
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	20000404 	.word	0x20000404

08007b88 <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007b90:	4b04      	ldr	r3, [pc, #16]	@ (8007ba4 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2101      	movs	r1, #1
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff ff64 	bl	8007a64 <CO_CANinterrupt_TX>
}
 8007b9c:	bf00      	nop
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	20000404 	.word	0x20000404

08007ba8 <gps_RxEventCallback>:
		flagGPS=0;
	}
};


void gps_RxEventCallback(uint16_t Size){
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	4603      	mov	r3, r0
 8007bb0:	80fb      	strh	r3, [r7, #6]
	uint16_t size_data=0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	81fb      	strh	r3, [r7, #14]
	// Garantir terminação da string
	if (Size < NMEA_BUF_SIZE) {
 8007bb6:	88fb      	ldrh	r3, [r7, #6]
 8007bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bbc:	d207      	bcs.n	8007bce <gps_RxEventCallback+0x26>
		rx_dma_buffer[Size] = '\0';
 8007bbe:	88fb      	ldrh	r3, [r7, #6]
 8007bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8007c30 <gps_RxEventCallback+0x88>)
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	54d1      	strb	r1, [r2, r3]
		size_data=Size+1;
 8007bc6:	88fb      	ldrh	r3, [r7, #6]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	81fb      	strh	r3, [r7, #14]
 8007bcc:	e006      	b.n	8007bdc <gps_RxEventCallback+0x34>
	} else {
		rx_dma_buffer[NMEA_BUF_SIZE-1] = '\0';
 8007bce:	4b18      	ldr	r3, [pc, #96]	@ (8007c30 <gps_RxEventCallback+0x88>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
		size_data=NMEA_BUF_SIZE;
 8007bd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bda:	81fb      	strh	r3, [r7, #14]
	}
	flagGPS=1;
 8007bdc:	4b15      	ldr	r3, [pc, #84]	@ (8007c34 <gps_RxEventCallback+0x8c>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	601a      	str	r2, [r3, #0]

	//salvar dados no sensor
	for (uint16_t i = 0; i < size_data; ++i) {
 8007be2:	2300      	movs	r3, #0
 8007be4:	81bb      	strh	r3, [r7, #12]
 8007be6:	e00b      	b.n	8007c00 <gps_RxEventCallback+0x58>
		uint8_t byte = rx_dma_buffer[i];
 8007be8:	89bb      	ldrh	r3, [r7, #12]
 8007bea:	4a11      	ldr	r2, [pc, #68]	@ (8007c30 <gps_RxEventCallback+0x88>)
 8007bec:	5cd3      	ldrb	r3, [r2, r3]
 8007bee:	72fb      	strb	r3, [r7, #11]
		save_data_to_sensor(&gps, byte);
 8007bf0:	7afb      	ldrb	r3, [r7, #11]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4810      	ldr	r0, [pc, #64]	@ (8007c38 <gps_RxEventCallback+0x90>)
 8007bf6:	f003 fa9d 	bl	800b134 <save_data_to_sensor>
	for (uint16_t i = 0; i < size_data; ++i) {
 8007bfa:	89bb      	ldrh	r3, [r7, #12]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	81bb      	strh	r3, [r7, #12]
 8007c00:	89ba      	ldrh	r2, [r7, #12]
 8007c02:	89fb      	ldrh	r3, [r7, #14]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d3ef      	bcc.n	8007be8 <gps_RxEventCallback+0x40>
    //processReceivedData((char *)rx_dma_buffer);
    // Reiniciar recepção DMA para próxima sentença


	//para teste de LoRa em pista reitrar dps
	memcpy(loraGpsMsg.sentence, rx_dma_buffer, size_data);
 8007c08:	89fb      	ldrh	r3, [r7, #14]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	4908      	ldr	r1, [pc, #32]	@ (8007c30 <gps_RxEventCallback+0x88>)
 8007c0e:	480b      	ldr	r0, [pc, #44]	@ (8007c3c <gps_RxEventCallback+0x94>)
 8007c10:	f00f facd 	bl	80171ae <memcpy>
	loraGpsMsg.len = size_data;
 8007c14:	4a09      	ldr	r2, [pc, #36]	@ (8007c3c <gps_RxEventCallback+0x94>)
 8007c16:	89fb      	ldrh	r3, [r7, #14]
 8007c18:	f8a2 3200 	strh.w	r3, [r2, #512]	@ 0x200


    HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rx_dma_buffer, NMEA_BUF_SIZE);
 8007c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c20:	4903      	ldr	r1, [pc, #12]	@ (8007c30 <gps_RxEventCallback+0x88>)
 8007c22:	4807      	ldr	r0, [pc, #28]	@ (8007c40 <gps_RxEventCallback+0x98>)
 8007c24:	f00c f9c9 	bl	8013fba <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8007c28:	bf00      	nop
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	200037d4 	.word	0x200037d4
 8007c34:	200037d0 	.word	0x200037d0
 8007c38:	200033c0 	.word	0x200033c0
 8007c3c:	20002da0 	.word	0x20002da0
 8007c40:	20000fe0 	.word	0x20000fe0

08007c44 <SPI1_DMA_Reset>:
static int flagSetMag = 1;
static int flagReadMag = 1;
static int flagMagDone = 1;


void SPI1_DMA_Reset(void) {
 8007c44:	b580      	push	{r7, lr}
 8007c46:	af00      	add	r7, sp, #0
    // Aborta transferências DMA em curso (só as do SPI1)
    if (hspi1.hdmarx) {
 8007c48:	4b79      	ldr	r3, [pc, #484]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 820e 	beq.w	800806e <SPI1_DMA_Reset+0x42a>
        HAL_DMA_Abort(hspi1.hdmarx);
 8007c52:	4b77      	ldr	r3, [pc, #476]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c56:	4618      	mov	r0, r3
 8007c58:	f006 f9ac 	bl	800dfb4 <HAL_DMA_Abort>
        __HAL_DMA_CLEAR_FLAG(hspi1.hdmarx, __HAL_DMA_GET_TC_FLAG_INDEX(hspi1.hdmarx));
 8007c5c:	4b74      	ldr	r3, [pc, #464]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	4b73      	ldr	r3, [pc, #460]	@ (8007e34 <SPI1_DMA_Reset+0x1f0>)
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d96c      	bls.n	8007d44 <SPI1_DMA_Reset+0x100>
 8007c6a:	4b71      	ldr	r3, [pc, #452]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a71      	ldr	r2, [pc, #452]	@ (8007e38 <SPI1_DMA_Reset+0x1f4>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d062      	beq.n	8007d3c <SPI1_DMA_Reset+0xf8>
 8007c76:	4b6e      	ldr	r3, [pc, #440]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a6f      	ldr	r2, [pc, #444]	@ (8007e3c <SPI1_DMA_Reset+0x1f8>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d05a      	beq.n	8007d38 <SPI1_DMA_Reset+0xf4>
 8007c82:	4b6b      	ldr	r3, [pc, #428]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a6d      	ldr	r2, [pc, #436]	@ (8007e40 <SPI1_DMA_Reset+0x1fc>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d052      	beq.n	8007d34 <SPI1_DMA_Reset+0xf0>
 8007c8e:	4b68      	ldr	r3, [pc, #416]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a6b      	ldr	r2, [pc, #428]	@ (8007e44 <SPI1_DMA_Reset+0x200>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d04a      	beq.n	8007d30 <SPI1_DMA_Reset+0xec>
 8007c9a:	4b65      	ldr	r3, [pc, #404]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a69      	ldr	r2, [pc, #420]	@ (8007e48 <SPI1_DMA_Reset+0x204>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d041      	beq.n	8007d2a <SPI1_DMA_Reset+0xe6>
 8007ca6:	4b62      	ldr	r3, [pc, #392]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a67      	ldr	r2, [pc, #412]	@ (8007e4c <SPI1_DMA_Reset+0x208>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d038      	beq.n	8007d24 <SPI1_DMA_Reset+0xe0>
 8007cb2:	4b5f      	ldr	r3, [pc, #380]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a65      	ldr	r2, [pc, #404]	@ (8007e50 <SPI1_DMA_Reset+0x20c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d02f      	beq.n	8007d1e <SPI1_DMA_Reset+0xda>
 8007cbe:	4b5c      	ldr	r3, [pc, #368]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a63      	ldr	r2, [pc, #396]	@ (8007e54 <SPI1_DMA_Reset+0x210>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d026      	beq.n	8007d18 <SPI1_DMA_Reset+0xd4>
 8007cca:	4b59      	ldr	r3, [pc, #356]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a61      	ldr	r2, [pc, #388]	@ (8007e58 <SPI1_DMA_Reset+0x214>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d01d      	beq.n	8007d12 <SPI1_DMA_Reset+0xce>
 8007cd6:	4b56      	ldr	r3, [pc, #344]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a5f      	ldr	r2, [pc, #380]	@ (8007e5c <SPI1_DMA_Reset+0x218>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d014      	beq.n	8007d0c <SPI1_DMA_Reset+0xc8>
 8007ce2:	4b53      	ldr	r3, [pc, #332]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a5d      	ldr	r2, [pc, #372]	@ (8007e60 <SPI1_DMA_Reset+0x21c>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d00b      	beq.n	8007d06 <SPI1_DMA_Reset+0xc2>
 8007cee:	4b50      	ldr	r3, [pc, #320]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a5b      	ldr	r2, [pc, #364]	@ (8007e64 <SPI1_DMA_Reset+0x220>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d102      	bne.n	8007d00 <SPI1_DMA_Reset+0xbc>
 8007cfa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007cfe:	e01e      	b.n	8007d3e <SPI1_DMA_Reset+0xfa>
 8007d00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007d04:	e01b      	b.n	8007d3e <SPI1_DMA_Reset+0xfa>
 8007d06:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007d0a:	e018      	b.n	8007d3e <SPI1_DMA_Reset+0xfa>
 8007d0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007d10:	e015      	b.n	8007d3e <SPI1_DMA_Reset+0xfa>
 8007d12:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007d16:	e012      	b.n	8007d3e <SPI1_DMA_Reset+0xfa>
 8007d18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d1c:	e00f      	b.n	8007d3e <SPI1_DMA_Reset+0xfa>
 8007d1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d22:	e00c      	b.n	8007d3e <SPI1_DMA_Reset+0xfa>
 8007d24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d28:	e009      	b.n	8007d3e <SPI1_DMA_Reset+0xfa>
 8007d2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d2e:	e006      	b.n	8007d3e <SPI1_DMA_Reset+0xfa>
 8007d30:	2320      	movs	r3, #32
 8007d32:	e004      	b.n	8007d3e <SPI1_DMA_Reset+0xfa>
 8007d34:	2320      	movs	r3, #32
 8007d36:	e002      	b.n	8007d3e <SPI1_DMA_Reset+0xfa>
 8007d38:	2320      	movs	r3, #32
 8007d3a:	e000      	b.n	8007d3e <SPI1_DMA_Reset+0xfa>
 8007d3c:	2320      	movs	r3, #32
 8007d3e:	4a4a      	ldr	r2, [pc, #296]	@ (8007e68 <SPI1_DMA_Reset+0x224>)
 8007d40:	60d3      	str	r3, [r2, #12]
 8007d42:	e194      	b.n	800806e <SPI1_DMA_Reset+0x42a>
 8007d44:	4b3a      	ldr	r3, [pc, #232]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	4b47      	ldr	r3, [pc, #284]	@ (8007e6c <SPI1_DMA_Reset+0x228>)
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	f240 808e 	bls.w	8007e70 <SPI1_DMA_Reset+0x22c>
 8007d54:	4b36      	ldr	r3, [pc, #216]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a37      	ldr	r2, [pc, #220]	@ (8007e38 <SPI1_DMA_Reset+0x1f4>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d062      	beq.n	8007e26 <SPI1_DMA_Reset+0x1e2>
 8007d60:	4b33      	ldr	r3, [pc, #204]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a35      	ldr	r2, [pc, #212]	@ (8007e3c <SPI1_DMA_Reset+0x1f8>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d05a      	beq.n	8007e22 <SPI1_DMA_Reset+0x1de>
 8007d6c:	4b30      	ldr	r3, [pc, #192]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a33      	ldr	r2, [pc, #204]	@ (8007e40 <SPI1_DMA_Reset+0x1fc>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d052      	beq.n	8007e1e <SPI1_DMA_Reset+0x1da>
 8007d78:	4b2d      	ldr	r3, [pc, #180]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a31      	ldr	r2, [pc, #196]	@ (8007e44 <SPI1_DMA_Reset+0x200>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d04a      	beq.n	8007e1a <SPI1_DMA_Reset+0x1d6>
 8007d84:	4b2a      	ldr	r3, [pc, #168]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a2f      	ldr	r2, [pc, #188]	@ (8007e48 <SPI1_DMA_Reset+0x204>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d041      	beq.n	8007e14 <SPI1_DMA_Reset+0x1d0>
 8007d90:	4b27      	ldr	r3, [pc, #156]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a2d      	ldr	r2, [pc, #180]	@ (8007e4c <SPI1_DMA_Reset+0x208>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d038      	beq.n	8007e0e <SPI1_DMA_Reset+0x1ca>
 8007d9c:	4b24      	ldr	r3, [pc, #144]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a2b      	ldr	r2, [pc, #172]	@ (8007e50 <SPI1_DMA_Reset+0x20c>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d02f      	beq.n	8007e08 <SPI1_DMA_Reset+0x1c4>
 8007da8:	4b21      	ldr	r3, [pc, #132]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a29      	ldr	r2, [pc, #164]	@ (8007e54 <SPI1_DMA_Reset+0x210>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d026      	beq.n	8007e02 <SPI1_DMA_Reset+0x1be>
 8007db4:	4b1e      	ldr	r3, [pc, #120]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a27      	ldr	r2, [pc, #156]	@ (8007e58 <SPI1_DMA_Reset+0x214>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d01d      	beq.n	8007dfc <SPI1_DMA_Reset+0x1b8>
 8007dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a25      	ldr	r2, [pc, #148]	@ (8007e5c <SPI1_DMA_Reset+0x218>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d014      	beq.n	8007df6 <SPI1_DMA_Reset+0x1b2>
 8007dcc:	4b18      	ldr	r3, [pc, #96]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a23      	ldr	r2, [pc, #140]	@ (8007e60 <SPI1_DMA_Reset+0x21c>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d00b      	beq.n	8007df0 <SPI1_DMA_Reset+0x1ac>
 8007dd8:	4b15      	ldr	r3, [pc, #84]	@ (8007e30 <SPI1_DMA_Reset+0x1ec>)
 8007dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a21      	ldr	r2, [pc, #132]	@ (8007e64 <SPI1_DMA_Reset+0x220>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d102      	bne.n	8007dea <SPI1_DMA_Reset+0x1a6>
 8007de4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007de8:	e01e      	b.n	8007e28 <SPI1_DMA_Reset+0x1e4>
 8007dea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007dee:	e01b      	b.n	8007e28 <SPI1_DMA_Reset+0x1e4>
 8007df0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007df4:	e018      	b.n	8007e28 <SPI1_DMA_Reset+0x1e4>
 8007df6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007dfa:	e015      	b.n	8007e28 <SPI1_DMA_Reset+0x1e4>
 8007dfc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007e00:	e012      	b.n	8007e28 <SPI1_DMA_Reset+0x1e4>
 8007e02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e06:	e00f      	b.n	8007e28 <SPI1_DMA_Reset+0x1e4>
 8007e08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e0c:	e00c      	b.n	8007e28 <SPI1_DMA_Reset+0x1e4>
 8007e0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e12:	e009      	b.n	8007e28 <SPI1_DMA_Reset+0x1e4>
 8007e14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007e18:	e006      	b.n	8007e28 <SPI1_DMA_Reset+0x1e4>
 8007e1a:	2320      	movs	r3, #32
 8007e1c:	e004      	b.n	8007e28 <SPI1_DMA_Reset+0x1e4>
 8007e1e:	2320      	movs	r3, #32
 8007e20:	e002      	b.n	8007e28 <SPI1_DMA_Reset+0x1e4>
 8007e22:	2320      	movs	r3, #32
 8007e24:	e000      	b.n	8007e28 <SPI1_DMA_Reset+0x1e4>
 8007e26:	2320      	movs	r3, #32
 8007e28:	4a0f      	ldr	r2, [pc, #60]	@ (8007e68 <SPI1_DMA_Reset+0x224>)
 8007e2a:	6093      	str	r3, [r2, #8]
 8007e2c:	e11f      	b.n	800806e <SPI1_DMA_Reset+0x42a>
 8007e2e:	bf00      	nop
 8007e30:	20000c00 	.word	0x20000c00
 8007e34:	40026458 	.word	0x40026458
 8007e38:	40026010 	.word	0x40026010
 8007e3c:	40026410 	.word	0x40026410
 8007e40:	40026070 	.word	0x40026070
 8007e44:	40026470 	.word	0x40026470
 8007e48:	40026028 	.word	0x40026028
 8007e4c:	40026428 	.word	0x40026428
 8007e50:	40026088 	.word	0x40026088
 8007e54:	40026488 	.word	0x40026488
 8007e58:	40026040 	.word	0x40026040
 8007e5c:	40026440 	.word	0x40026440
 8007e60:	400260a0 	.word	0x400260a0
 8007e64:	400264a0 	.word	0x400264a0
 8007e68:	40026400 	.word	0x40026400
 8007e6c:	400260b8 	.word	0x400260b8
 8007e70:	4b6e      	ldr	r3, [pc, #440]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	4b6d      	ldr	r3, [pc, #436]	@ (8008030 <SPI1_DMA_Reset+0x3ec>)
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d96c      	bls.n	8007f58 <SPI1_DMA_Reset+0x314>
 8007e7e:	4b6b      	ldr	r3, [pc, #428]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a6b      	ldr	r2, [pc, #428]	@ (8008034 <SPI1_DMA_Reset+0x3f0>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d062      	beq.n	8007f50 <SPI1_DMA_Reset+0x30c>
 8007e8a:	4b68      	ldr	r3, [pc, #416]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a69      	ldr	r2, [pc, #420]	@ (8008038 <SPI1_DMA_Reset+0x3f4>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d05a      	beq.n	8007f4c <SPI1_DMA_Reset+0x308>
 8007e96:	4b65      	ldr	r3, [pc, #404]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a67      	ldr	r2, [pc, #412]	@ (800803c <SPI1_DMA_Reset+0x3f8>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d052      	beq.n	8007f48 <SPI1_DMA_Reset+0x304>
 8007ea2:	4b62      	ldr	r3, [pc, #392]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a65      	ldr	r2, [pc, #404]	@ (8008040 <SPI1_DMA_Reset+0x3fc>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d04a      	beq.n	8007f44 <SPI1_DMA_Reset+0x300>
 8007eae:	4b5f      	ldr	r3, [pc, #380]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a63      	ldr	r2, [pc, #396]	@ (8008044 <SPI1_DMA_Reset+0x400>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d041      	beq.n	8007f3e <SPI1_DMA_Reset+0x2fa>
 8007eba:	4b5c      	ldr	r3, [pc, #368]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a61      	ldr	r2, [pc, #388]	@ (8008048 <SPI1_DMA_Reset+0x404>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d038      	beq.n	8007f38 <SPI1_DMA_Reset+0x2f4>
 8007ec6:	4b59      	ldr	r3, [pc, #356]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a5f      	ldr	r2, [pc, #380]	@ (800804c <SPI1_DMA_Reset+0x408>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d02f      	beq.n	8007f32 <SPI1_DMA_Reset+0x2ee>
 8007ed2:	4b56      	ldr	r3, [pc, #344]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a5d      	ldr	r2, [pc, #372]	@ (8008050 <SPI1_DMA_Reset+0x40c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d026      	beq.n	8007f2c <SPI1_DMA_Reset+0x2e8>
 8007ede:	4b53      	ldr	r3, [pc, #332]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a5b      	ldr	r2, [pc, #364]	@ (8008054 <SPI1_DMA_Reset+0x410>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d01d      	beq.n	8007f26 <SPI1_DMA_Reset+0x2e2>
 8007eea:	4b50      	ldr	r3, [pc, #320]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a59      	ldr	r2, [pc, #356]	@ (8008058 <SPI1_DMA_Reset+0x414>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d014      	beq.n	8007f20 <SPI1_DMA_Reset+0x2dc>
 8007ef6:	4b4d      	ldr	r3, [pc, #308]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a57      	ldr	r2, [pc, #348]	@ (800805c <SPI1_DMA_Reset+0x418>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d00b      	beq.n	8007f1a <SPI1_DMA_Reset+0x2d6>
 8007f02:	4b4a      	ldr	r3, [pc, #296]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a55      	ldr	r2, [pc, #340]	@ (8008060 <SPI1_DMA_Reset+0x41c>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d102      	bne.n	8007f14 <SPI1_DMA_Reset+0x2d0>
 8007f0e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007f12:	e01e      	b.n	8007f52 <SPI1_DMA_Reset+0x30e>
 8007f14:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007f18:	e01b      	b.n	8007f52 <SPI1_DMA_Reset+0x30e>
 8007f1a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007f1e:	e018      	b.n	8007f52 <SPI1_DMA_Reset+0x30e>
 8007f20:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007f24:	e015      	b.n	8007f52 <SPI1_DMA_Reset+0x30e>
 8007f26:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007f2a:	e012      	b.n	8007f52 <SPI1_DMA_Reset+0x30e>
 8007f2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007f30:	e00f      	b.n	8007f52 <SPI1_DMA_Reset+0x30e>
 8007f32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007f36:	e00c      	b.n	8007f52 <SPI1_DMA_Reset+0x30e>
 8007f38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007f3c:	e009      	b.n	8007f52 <SPI1_DMA_Reset+0x30e>
 8007f3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007f42:	e006      	b.n	8007f52 <SPI1_DMA_Reset+0x30e>
 8007f44:	2320      	movs	r3, #32
 8007f46:	e004      	b.n	8007f52 <SPI1_DMA_Reset+0x30e>
 8007f48:	2320      	movs	r3, #32
 8007f4a:	e002      	b.n	8007f52 <SPI1_DMA_Reset+0x30e>
 8007f4c:	2320      	movs	r3, #32
 8007f4e:	e000      	b.n	8007f52 <SPI1_DMA_Reset+0x30e>
 8007f50:	2320      	movs	r3, #32
 8007f52:	4a44      	ldr	r2, [pc, #272]	@ (8008064 <SPI1_DMA_Reset+0x420>)
 8007f54:	60d3      	str	r3, [r2, #12]
 8007f56:	e08a      	b.n	800806e <SPI1_DMA_Reset+0x42a>
 8007f58:	4b34      	ldr	r3, [pc, #208]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a35      	ldr	r2, [pc, #212]	@ (8008034 <SPI1_DMA_Reset+0x3f0>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	f000 8081 	beq.w	8008068 <SPI1_DMA_Reset+0x424>
 8007f66:	4b31      	ldr	r3, [pc, #196]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a32      	ldr	r2, [pc, #200]	@ (8008038 <SPI1_DMA_Reset+0x3f4>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d05a      	beq.n	8008028 <SPI1_DMA_Reset+0x3e4>
 8007f72:	4b2e      	ldr	r3, [pc, #184]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a30      	ldr	r2, [pc, #192]	@ (800803c <SPI1_DMA_Reset+0x3f8>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d052      	beq.n	8008024 <SPI1_DMA_Reset+0x3e0>
 8007f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a2e      	ldr	r2, [pc, #184]	@ (8008040 <SPI1_DMA_Reset+0x3fc>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d04a      	beq.n	8008020 <SPI1_DMA_Reset+0x3dc>
 8007f8a:	4b28      	ldr	r3, [pc, #160]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a2c      	ldr	r2, [pc, #176]	@ (8008044 <SPI1_DMA_Reset+0x400>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d041      	beq.n	800801a <SPI1_DMA_Reset+0x3d6>
 8007f96:	4b25      	ldr	r3, [pc, #148]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8008048 <SPI1_DMA_Reset+0x404>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d038      	beq.n	8008014 <SPI1_DMA_Reset+0x3d0>
 8007fa2:	4b22      	ldr	r3, [pc, #136]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a28      	ldr	r2, [pc, #160]	@ (800804c <SPI1_DMA_Reset+0x408>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d02f      	beq.n	800800e <SPI1_DMA_Reset+0x3ca>
 8007fae:	4b1f      	ldr	r3, [pc, #124]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a26      	ldr	r2, [pc, #152]	@ (8008050 <SPI1_DMA_Reset+0x40c>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d026      	beq.n	8008008 <SPI1_DMA_Reset+0x3c4>
 8007fba:	4b1c      	ldr	r3, [pc, #112]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a24      	ldr	r2, [pc, #144]	@ (8008054 <SPI1_DMA_Reset+0x410>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d01d      	beq.n	8008002 <SPI1_DMA_Reset+0x3be>
 8007fc6:	4b19      	ldr	r3, [pc, #100]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a22      	ldr	r2, [pc, #136]	@ (8008058 <SPI1_DMA_Reset+0x414>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d014      	beq.n	8007ffc <SPI1_DMA_Reset+0x3b8>
 8007fd2:	4b16      	ldr	r3, [pc, #88]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a20      	ldr	r2, [pc, #128]	@ (800805c <SPI1_DMA_Reset+0x418>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d00b      	beq.n	8007ff6 <SPI1_DMA_Reset+0x3b2>
 8007fde:	4b13      	ldr	r3, [pc, #76]	@ (800802c <SPI1_DMA_Reset+0x3e8>)
 8007fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a1e      	ldr	r2, [pc, #120]	@ (8008060 <SPI1_DMA_Reset+0x41c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d102      	bne.n	8007ff0 <SPI1_DMA_Reset+0x3ac>
 8007fea:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007fee:	e03c      	b.n	800806a <SPI1_DMA_Reset+0x426>
 8007ff0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ff4:	e039      	b.n	800806a <SPI1_DMA_Reset+0x426>
 8007ff6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007ffa:	e036      	b.n	800806a <SPI1_DMA_Reset+0x426>
 8007ffc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008000:	e033      	b.n	800806a <SPI1_DMA_Reset+0x426>
 8008002:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008006:	e030      	b.n	800806a <SPI1_DMA_Reset+0x426>
 8008008:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800800c:	e02d      	b.n	800806a <SPI1_DMA_Reset+0x426>
 800800e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008012:	e02a      	b.n	800806a <SPI1_DMA_Reset+0x426>
 8008014:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008018:	e027      	b.n	800806a <SPI1_DMA_Reset+0x426>
 800801a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800801e:	e024      	b.n	800806a <SPI1_DMA_Reset+0x426>
 8008020:	2320      	movs	r3, #32
 8008022:	e022      	b.n	800806a <SPI1_DMA_Reset+0x426>
 8008024:	2320      	movs	r3, #32
 8008026:	e020      	b.n	800806a <SPI1_DMA_Reset+0x426>
 8008028:	2320      	movs	r3, #32
 800802a:	e01e      	b.n	800806a <SPI1_DMA_Reset+0x426>
 800802c:	20000c00 	.word	0x20000c00
 8008030:	40026058 	.word	0x40026058
 8008034:	40026010 	.word	0x40026010
 8008038:	40026410 	.word	0x40026410
 800803c:	40026070 	.word	0x40026070
 8008040:	40026470 	.word	0x40026470
 8008044:	40026028 	.word	0x40026028
 8008048:	40026428 	.word	0x40026428
 800804c:	40026088 	.word	0x40026088
 8008050:	40026488 	.word	0x40026488
 8008054:	40026040 	.word	0x40026040
 8008058:	40026440 	.word	0x40026440
 800805c:	400260a0 	.word	0x400260a0
 8008060:	400264a0 	.word	0x400264a0
 8008064:	40026000 	.word	0x40026000
 8008068:	2320      	movs	r3, #32
 800806a:	4a7a      	ldr	r2, [pc, #488]	@ (8008254 <SPI1_DMA_Reset+0x610>)
 800806c:	6093      	str	r3, [r2, #8]
    }
    if (hspi1.hdmatx) {
 800806e:	4b7a      	ldr	r3, [pc, #488]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 8008070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 81f0 	beq.w	8008458 <SPI1_DMA_Reset+0x814>
        HAL_DMA_Abort(hspi1.hdmatx);
 8008078:	4b77      	ldr	r3, [pc, #476]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 800807a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800807c:	4618      	mov	r0, r3
 800807e:	f005 ff99 	bl	800dfb4 <HAL_DMA_Abort>
        __HAL_DMA_CLEAR_FLAG(hspi1.hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(hspi1.hdmatx));
 8008082:	4b75      	ldr	r3, [pc, #468]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 8008084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	461a      	mov	r2, r3
 800808a:	4b74      	ldr	r3, [pc, #464]	@ (800825c <SPI1_DMA_Reset+0x618>)
 800808c:	429a      	cmp	r2, r3
 800808e:	d96c      	bls.n	800816a <SPI1_DMA_Reset+0x526>
 8008090:	4b71      	ldr	r3, [pc, #452]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 8008092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a72      	ldr	r2, [pc, #456]	@ (8008260 <SPI1_DMA_Reset+0x61c>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d062      	beq.n	8008162 <SPI1_DMA_Reset+0x51e>
 800809c:	4b6e      	ldr	r3, [pc, #440]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 800809e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a70      	ldr	r2, [pc, #448]	@ (8008264 <SPI1_DMA_Reset+0x620>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d05a      	beq.n	800815e <SPI1_DMA_Reset+0x51a>
 80080a8:	4b6b      	ldr	r3, [pc, #428]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 80080aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a6e      	ldr	r2, [pc, #440]	@ (8008268 <SPI1_DMA_Reset+0x624>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d052      	beq.n	800815a <SPI1_DMA_Reset+0x516>
 80080b4:	4b68      	ldr	r3, [pc, #416]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 80080b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a6c      	ldr	r2, [pc, #432]	@ (800826c <SPI1_DMA_Reset+0x628>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d04a      	beq.n	8008156 <SPI1_DMA_Reset+0x512>
 80080c0:	4b65      	ldr	r3, [pc, #404]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 80080c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a6a      	ldr	r2, [pc, #424]	@ (8008270 <SPI1_DMA_Reset+0x62c>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d041      	beq.n	8008150 <SPI1_DMA_Reset+0x50c>
 80080cc:	4b62      	ldr	r3, [pc, #392]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 80080ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a68      	ldr	r2, [pc, #416]	@ (8008274 <SPI1_DMA_Reset+0x630>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d038      	beq.n	800814a <SPI1_DMA_Reset+0x506>
 80080d8:	4b5f      	ldr	r3, [pc, #380]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 80080da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a66      	ldr	r2, [pc, #408]	@ (8008278 <SPI1_DMA_Reset+0x634>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d02f      	beq.n	8008144 <SPI1_DMA_Reset+0x500>
 80080e4:	4b5c      	ldr	r3, [pc, #368]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 80080e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a64      	ldr	r2, [pc, #400]	@ (800827c <SPI1_DMA_Reset+0x638>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d026      	beq.n	800813e <SPI1_DMA_Reset+0x4fa>
 80080f0:	4b59      	ldr	r3, [pc, #356]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 80080f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a62      	ldr	r2, [pc, #392]	@ (8008280 <SPI1_DMA_Reset+0x63c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d01d      	beq.n	8008138 <SPI1_DMA_Reset+0x4f4>
 80080fc:	4b56      	ldr	r3, [pc, #344]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 80080fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a60      	ldr	r2, [pc, #384]	@ (8008284 <SPI1_DMA_Reset+0x640>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d014      	beq.n	8008132 <SPI1_DMA_Reset+0x4ee>
 8008108:	4b53      	ldr	r3, [pc, #332]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 800810a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a5e      	ldr	r2, [pc, #376]	@ (8008288 <SPI1_DMA_Reset+0x644>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d00b      	beq.n	800812c <SPI1_DMA_Reset+0x4e8>
 8008114:	4b50      	ldr	r3, [pc, #320]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 8008116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a5c      	ldr	r2, [pc, #368]	@ (800828c <SPI1_DMA_Reset+0x648>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d102      	bne.n	8008126 <SPI1_DMA_Reset+0x4e2>
 8008120:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008124:	e01e      	b.n	8008164 <SPI1_DMA_Reset+0x520>
 8008126:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800812a:	e01b      	b.n	8008164 <SPI1_DMA_Reset+0x520>
 800812c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008130:	e018      	b.n	8008164 <SPI1_DMA_Reset+0x520>
 8008132:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008136:	e015      	b.n	8008164 <SPI1_DMA_Reset+0x520>
 8008138:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800813c:	e012      	b.n	8008164 <SPI1_DMA_Reset+0x520>
 800813e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008142:	e00f      	b.n	8008164 <SPI1_DMA_Reset+0x520>
 8008144:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008148:	e00c      	b.n	8008164 <SPI1_DMA_Reset+0x520>
 800814a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800814e:	e009      	b.n	8008164 <SPI1_DMA_Reset+0x520>
 8008150:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008154:	e006      	b.n	8008164 <SPI1_DMA_Reset+0x520>
 8008156:	2320      	movs	r3, #32
 8008158:	e004      	b.n	8008164 <SPI1_DMA_Reset+0x520>
 800815a:	2320      	movs	r3, #32
 800815c:	e002      	b.n	8008164 <SPI1_DMA_Reset+0x520>
 800815e:	2320      	movs	r3, #32
 8008160:	e000      	b.n	8008164 <SPI1_DMA_Reset+0x520>
 8008162:	2320      	movs	r3, #32
 8008164:	4a4a      	ldr	r2, [pc, #296]	@ (8008290 <SPI1_DMA_Reset+0x64c>)
 8008166:	60d3      	str	r3, [r2, #12]
 8008168:	e176      	b.n	8008458 <SPI1_DMA_Reset+0x814>
 800816a:	4b3b      	ldr	r3, [pc, #236]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 800816c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	461a      	mov	r2, r3
 8008172:	4b48      	ldr	r3, [pc, #288]	@ (8008294 <SPI1_DMA_Reset+0x650>)
 8008174:	429a      	cmp	r2, r3
 8008176:	f240 808f 	bls.w	8008298 <SPI1_DMA_Reset+0x654>
 800817a:	4b37      	ldr	r3, [pc, #220]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 800817c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a37      	ldr	r2, [pc, #220]	@ (8008260 <SPI1_DMA_Reset+0x61c>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d062      	beq.n	800824c <SPI1_DMA_Reset+0x608>
 8008186:	4b34      	ldr	r3, [pc, #208]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 8008188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a35      	ldr	r2, [pc, #212]	@ (8008264 <SPI1_DMA_Reset+0x620>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d05a      	beq.n	8008248 <SPI1_DMA_Reset+0x604>
 8008192:	4b31      	ldr	r3, [pc, #196]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 8008194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a33      	ldr	r2, [pc, #204]	@ (8008268 <SPI1_DMA_Reset+0x624>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d052      	beq.n	8008244 <SPI1_DMA_Reset+0x600>
 800819e:	4b2e      	ldr	r3, [pc, #184]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 80081a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a31      	ldr	r2, [pc, #196]	@ (800826c <SPI1_DMA_Reset+0x628>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d04a      	beq.n	8008240 <SPI1_DMA_Reset+0x5fc>
 80081aa:	4b2b      	ldr	r3, [pc, #172]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 80081ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a2f      	ldr	r2, [pc, #188]	@ (8008270 <SPI1_DMA_Reset+0x62c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d041      	beq.n	800823a <SPI1_DMA_Reset+0x5f6>
 80081b6:	4b28      	ldr	r3, [pc, #160]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 80081b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a2d      	ldr	r2, [pc, #180]	@ (8008274 <SPI1_DMA_Reset+0x630>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d038      	beq.n	8008234 <SPI1_DMA_Reset+0x5f0>
 80081c2:	4b25      	ldr	r3, [pc, #148]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 80081c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a2b      	ldr	r2, [pc, #172]	@ (8008278 <SPI1_DMA_Reset+0x634>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d02f      	beq.n	800822e <SPI1_DMA_Reset+0x5ea>
 80081ce:	4b22      	ldr	r3, [pc, #136]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 80081d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a29      	ldr	r2, [pc, #164]	@ (800827c <SPI1_DMA_Reset+0x638>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d026      	beq.n	8008228 <SPI1_DMA_Reset+0x5e4>
 80081da:	4b1f      	ldr	r3, [pc, #124]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 80081dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a27      	ldr	r2, [pc, #156]	@ (8008280 <SPI1_DMA_Reset+0x63c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d01d      	beq.n	8008222 <SPI1_DMA_Reset+0x5de>
 80081e6:	4b1c      	ldr	r3, [pc, #112]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 80081e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a25      	ldr	r2, [pc, #148]	@ (8008284 <SPI1_DMA_Reset+0x640>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d014      	beq.n	800821c <SPI1_DMA_Reset+0x5d8>
 80081f2:	4b19      	ldr	r3, [pc, #100]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 80081f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a23      	ldr	r2, [pc, #140]	@ (8008288 <SPI1_DMA_Reset+0x644>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d00b      	beq.n	8008216 <SPI1_DMA_Reset+0x5d2>
 80081fe:	4b16      	ldr	r3, [pc, #88]	@ (8008258 <SPI1_DMA_Reset+0x614>)
 8008200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a21      	ldr	r2, [pc, #132]	@ (800828c <SPI1_DMA_Reset+0x648>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d102      	bne.n	8008210 <SPI1_DMA_Reset+0x5cc>
 800820a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800820e:	e01e      	b.n	800824e <SPI1_DMA_Reset+0x60a>
 8008210:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008214:	e01b      	b.n	800824e <SPI1_DMA_Reset+0x60a>
 8008216:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800821a:	e018      	b.n	800824e <SPI1_DMA_Reset+0x60a>
 800821c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008220:	e015      	b.n	800824e <SPI1_DMA_Reset+0x60a>
 8008222:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008226:	e012      	b.n	800824e <SPI1_DMA_Reset+0x60a>
 8008228:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800822c:	e00f      	b.n	800824e <SPI1_DMA_Reset+0x60a>
 800822e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008232:	e00c      	b.n	800824e <SPI1_DMA_Reset+0x60a>
 8008234:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008238:	e009      	b.n	800824e <SPI1_DMA_Reset+0x60a>
 800823a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800823e:	e006      	b.n	800824e <SPI1_DMA_Reset+0x60a>
 8008240:	2320      	movs	r3, #32
 8008242:	e004      	b.n	800824e <SPI1_DMA_Reset+0x60a>
 8008244:	2320      	movs	r3, #32
 8008246:	e002      	b.n	800824e <SPI1_DMA_Reset+0x60a>
 8008248:	2320      	movs	r3, #32
 800824a:	e000      	b.n	800824e <SPI1_DMA_Reset+0x60a>
 800824c:	2320      	movs	r3, #32
 800824e:	4a10      	ldr	r2, [pc, #64]	@ (8008290 <SPI1_DMA_Reset+0x64c>)
 8008250:	6093      	str	r3, [r2, #8]
 8008252:	e101      	b.n	8008458 <SPI1_DMA_Reset+0x814>
 8008254:	40026000 	.word	0x40026000
 8008258:	20000c00 	.word	0x20000c00
 800825c:	40026458 	.word	0x40026458
 8008260:	40026010 	.word	0x40026010
 8008264:	40026410 	.word	0x40026410
 8008268:	40026070 	.word	0x40026070
 800826c:	40026470 	.word	0x40026470
 8008270:	40026028 	.word	0x40026028
 8008274:	40026428 	.word	0x40026428
 8008278:	40026088 	.word	0x40026088
 800827c:	40026488 	.word	0x40026488
 8008280:	40026040 	.word	0x40026040
 8008284:	40026440 	.word	0x40026440
 8008288:	400260a0 	.word	0x400260a0
 800828c:	400264a0 	.word	0x400264a0
 8008290:	40026400 	.word	0x40026400
 8008294:	400260b8 	.word	0x400260b8
 8008298:	4b85      	ldr	r3, [pc, #532]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 800829a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	461a      	mov	r2, r3
 80082a0:	4b84      	ldr	r3, [pc, #528]	@ (80084b4 <SPI1_DMA_Reset+0x870>)
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d96c      	bls.n	8008380 <SPI1_DMA_Reset+0x73c>
 80082a6:	4b82      	ldr	r3, [pc, #520]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80082a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a82      	ldr	r2, [pc, #520]	@ (80084b8 <SPI1_DMA_Reset+0x874>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d062      	beq.n	8008378 <SPI1_DMA_Reset+0x734>
 80082b2:	4b7f      	ldr	r3, [pc, #508]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80082b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a80      	ldr	r2, [pc, #512]	@ (80084bc <SPI1_DMA_Reset+0x878>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d05a      	beq.n	8008374 <SPI1_DMA_Reset+0x730>
 80082be:	4b7c      	ldr	r3, [pc, #496]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80082c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a7e      	ldr	r2, [pc, #504]	@ (80084c0 <SPI1_DMA_Reset+0x87c>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d052      	beq.n	8008370 <SPI1_DMA_Reset+0x72c>
 80082ca:	4b79      	ldr	r3, [pc, #484]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80082cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a7c      	ldr	r2, [pc, #496]	@ (80084c4 <SPI1_DMA_Reset+0x880>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d04a      	beq.n	800836c <SPI1_DMA_Reset+0x728>
 80082d6:	4b76      	ldr	r3, [pc, #472]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80082d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a7a      	ldr	r2, [pc, #488]	@ (80084c8 <SPI1_DMA_Reset+0x884>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d041      	beq.n	8008366 <SPI1_DMA_Reset+0x722>
 80082e2:	4b73      	ldr	r3, [pc, #460]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80082e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a78      	ldr	r2, [pc, #480]	@ (80084cc <SPI1_DMA_Reset+0x888>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d038      	beq.n	8008360 <SPI1_DMA_Reset+0x71c>
 80082ee:	4b70      	ldr	r3, [pc, #448]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80082f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a76      	ldr	r2, [pc, #472]	@ (80084d0 <SPI1_DMA_Reset+0x88c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d02f      	beq.n	800835a <SPI1_DMA_Reset+0x716>
 80082fa:	4b6d      	ldr	r3, [pc, #436]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80082fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a74      	ldr	r2, [pc, #464]	@ (80084d4 <SPI1_DMA_Reset+0x890>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d026      	beq.n	8008354 <SPI1_DMA_Reset+0x710>
 8008306:	4b6a      	ldr	r3, [pc, #424]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 8008308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a72      	ldr	r2, [pc, #456]	@ (80084d8 <SPI1_DMA_Reset+0x894>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d01d      	beq.n	800834e <SPI1_DMA_Reset+0x70a>
 8008312:	4b67      	ldr	r3, [pc, #412]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 8008314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a70      	ldr	r2, [pc, #448]	@ (80084dc <SPI1_DMA_Reset+0x898>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d014      	beq.n	8008348 <SPI1_DMA_Reset+0x704>
 800831e:	4b64      	ldr	r3, [pc, #400]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 8008320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a6e      	ldr	r2, [pc, #440]	@ (80084e0 <SPI1_DMA_Reset+0x89c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d00b      	beq.n	8008342 <SPI1_DMA_Reset+0x6fe>
 800832a:	4b61      	ldr	r3, [pc, #388]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 800832c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a6c      	ldr	r2, [pc, #432]	@ (80084e4 <SPI1_DMA_Reset+0x8a0>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d102      	bne.n	800833c <SPI1_DMA_Reset+0x6f8>
 8008336:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800833a:	e01e      	b.n	800837a <SPI1_DMA_Reset+0x736>
 800833c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008340:	e01b      	b.n	800837a <SPI1_DMA_Reset+0x736>
 8008342:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008346:	e018      	b.n	800837a <SPI1_DMA_Reset+0x736>
 8008348:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800834c:	e015      	b.n	800837a <SPI1_DMA_Reset+0x736>
 800834e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008352:	e012      	b.n	800837a <SPI1_DMA_Reset+0x736>
 8008354:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008358:	e00f      	b.n	800837a <SPI1_DMA_Reset+0x736>
 800835a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800835e:	e00c      	b.n	800837a <SPI1_DMA_Reset+0x736>
 8008360:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008364:	e009      	b.n	800837a <SPI1_DMA_Reset+0x736>
 8008366:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800836a:	e006      	b.n	800837a <SPI1_DMA_Reset+0x736>
 800836c:	2320      	movs	r3, #32
 800836e:	e004      	b.n	800837a <SPI1_DMA_Reset+0x736>
 8008370:	2320      	movs	r3, #32
 8008372:	e002      	b.n	800837a <SPI1_DMA_Reset+0x736>
 8008374:	2320      	movs	r3, #32
 8008376:	e000      	b.n	800837a <SPI1_DMA_Reset+0x736>
 8008378:	2320      	movs	r3, #32
 800837a:	4a5b      	ldr	r2, [pc, #364]	@ (80084e8 <SPI1_DMA_Reset+0x8a4>)
 800837c:	60d3      	str	r3, [r2, #12]
 800837e:	e06b      	b.n	8008458 <SPI1_DMA_Reset+0x814>
 8008380:	4b4b      	ldr	r3, [pc, #300]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 8008382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a4c      	ldr	r2, [pc, #304]	@ (80084b8 <SPI1_DMA_Reset+0x874>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d062      	beq.n	8008452 <SPI1_DMA_Reset+0x80e>
 800838c:	4b48      	ldr	r3, [pc, #288]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 800838e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a4a      	ldr	r2, [pc, #296]	@ (80084bc <SPI1_DMA_Reset+0x878>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d05a      	beq.n	800844e <SPI1_DMA_Reset+0x80a>
 8008398:	4b45      	ldr	r3, [pc, #276]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 800839a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a48      	ldr	r2, [pc, #288]	@ (80084c0 <SPI1_DMA_Reset+0x87c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d052      	beq.n	800844a <SPI1_DMA_Reset+0x806>
 80083a4:	4b42      	ldr	r3, [pc, #264]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80083a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a46      	ldr	r2, [pc, #280]	@ (80084c4 <SPI1_DMA_Reset+0x880>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d04a      	beq.n	8008446 <SPI1_DMA_Reset+0x802>
 80083b0:	4b3f      	ldr	r3, [pc, #252]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80083b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a44      	ldr	r2, [pc, #272]	@ (80084c8 <SPI1_DMA_Reset+0x884>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d041      	beq.n	8008440 <SPI1_DMA_Reset+0x7fc>
 80083bc:	4b3c      	ldr	r3, [pc, #240]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80083be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a42      	ldr	r2, [pc, #264]	@ (80084cc <SPI1_DMA_Reset+0x888>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d038      	beq.n	800843a <SPI1_DMA_Reset+0x7f6>
 80083c8:	4b39      	ldr	r3, [pc, #228]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80083ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a40      	ldr	r2, [pc, #256]	@ (80084d0 <SPI1_DMA_Reset+0x88c>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d02f      	beq.n	8008434 <SPI1_DMA_Reset+0x7f0>
 80083d4:	4b36      	ldr	r3, [pc, #216]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80083d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a3e      	ldr	r2, [pc, #248]	@ (80084d4 <SPI1_DMA_Reset+0x890>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d026      	beq.n	800842e <SPI1_DMA_Reset+0x7ea>
 80083e0:	4b33      	ldr	r3, [pc, #204]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80083e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a3c      	ldr	r2, [pc, #240]	@ (80084d8 <SPI1_DMA_Reset+0x894>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d01d      	beq.n	8008428 <SPI1_DMA_Reset+0x7e4>
 80083ec:	4b30      	ldr	r3, [pc, #192]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80083ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a3a      	ldr	r2, [pc, #232]	@ (80084dc <SPI1_DMA_Reset+0x898>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d014      	beq.n	8008422 <SPI1_DMA_Reset+0x7de>
 80083f8:	4b2d      	ldr	r3, [pc, #180]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80083fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a38      	ldr	r2, [pc, #224]	@ (80084e0 <SPI1_DMA_Reset+0x89c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00b      	beq.n	800841c <SPI1_DMA_Reset+0x7d8>
 8008404:	4b2a      	ldr	r3, [pc, #168]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 8008406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a36      	ldr	r2, [pc, #216]	@ (80084e4 <SPI1_DMA_Reset+0x8a0>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d102      	bne.n	8008416 <SPI1_DMA_Reset+0x7d2>
 8008410:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008414:	e01e      	b.n	8008454 <SPI1_DMA_Reset+0x810>
 8008416:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800841a:	e01b      	b.n	8008454 <SPI1_DMA_Reset+0x810>
 800841c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008420:	e018      	b.n	8008454 <SPI1_DMA_Reset+0x810>
 8008422:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008426:	e015      	b.n	8008454 <SPI1_DMA_Reset+0x810>
 8008428:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800842c:	e012      	b.n	8008454 <SPI1_DMA_Reset+0x810>
 800842e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008432:	e00f      	b.n	8008454 <SPI1_DMA_Reset+0x810>
 8008434:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008438:	e00c      	b.n	8008454 <SPI1_DMA_Reset+0x810>
 800843a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800843e:	e009      	b.n	8008454 <SPI1_DMA_Reset+0x810>
 8008440:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008444:	e006      	b.n	8008454 <SPI1_DMA_Reset+0x810>
 8008446:	2320      	movs	r3, #32
 8008448:	e004      	b.n	8008454 <SPI1_DMA_Reset+0x810>
 800844a:	2320      	movs	r3, #32
 800844c:	e002      	b.n	8008454 <SPI1_DMA_Reset+0x810>
 800844e:	2320      	movs	r3, #32
 8008450:	e000      	b.n	8008454 <SPI1_DMA_Reset+0x810>
 8008452:	2320      	movs	r3, #32
 8008454:	4a24      	ldr	r2, [pc, #144]	@ (80084e8 <SPI1_DMA_Reset+0x8a4>)
 8008456:	6093      	str	r3, [r2, #8]
    }

    // Reset ao periférico SPI1
    __HAL_RCC_SPI1_FORCE_RESET();
 8008458:	4b24      	ldr	r3, [pc, #144]	@ (80084ec <SPI1_DMA_Reset+0x8a8>)
 800845a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800845c:	4a23      	ldr	r2, [pc, #140]	@ (80084ec <SPI1_DMA_Reset+0x8a8>)
 800845e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008462:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_SPI1_RELEASE_RESET();
 8008464:	4b21      	ldr	r3, [pc, #132]	@ (80084ec <SPI1_DMA_Reset+0x8a8>)
 8008466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008468:	4a20      	ldr	r2, [pc, #128]	@ (80084ec <SPI1_DMA_Reset+0x8a8>)
 800846a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800846e:	6253      	str	r3, [r2, #36]	@ 0x24

    // Re-inicializa SPI1
    HAL_SPI_DeInit(&hspi1);
 8008470:	480f      	ldr	r0, [pc, #60]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 8008472:	f009 fb74 	bl	8011b5e <HAL_SPI_DeInit>
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8008476:	480e      	ldr	r0, [pc, #56]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 8008478:	f009 fae8 	bl	8011a4c <HAL_SPI_Init>
        // aqui podes sinalizar erro (ex: LED ou debug UART)
    }

    // Religar SPI ao DMA (caso tenha sido perdido)
    if (hspi1.hdmarx) __HAL_LINKDMA(&hspi1, hdmarx, *hspi1.hdmarx);
 800847c:	4b0c      	ldr	r3, [pc, #48]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 800847e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008480:	2b00      	cmp	r3, #0
 8008482:	d007      	beq.n	8008494 <SPI1_DMA_Reset+0x850>
 8008484:	4b0a      	ldr	r3, [pc, #40]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 8008486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008488:	4a09      	ldr	r2, [pc, #36]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 800848a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800848c:	4b08      	ldr	r3, [pc, #32]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 800848e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008490:	4a07      	ldr	r2, [pc, #28]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 8008492:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hspi1.hdmatx) __HAL_LINKDMA(&hspi1, hdmatx, *hspi1.hdmatx);
 8008494:	4b06      	ldr	r3, [pc, #24]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 8008496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008498:	2b00      	cmp	r3, #0
 800849a:	d007      	beq.n	80084ac <SPI1_DMA_Reset+0x868>
 800849c:	4b04      	ldr	r3, [pc, #16]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 800849e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084a0:	4a03      	ldr	r2, [pc, #12]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80084a2:	6493      	str	r3, [r2, #72]	@ 0x48
 80084a4:	4b02      	ldr	r3, [pc, #8]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80084a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084a8:	4a01      	ldr	r2, [pc, #4]	@ (80084b0 <SPI1_DMA_Reset+0x86c>)
 80084aa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80084ac:	bf00      	nop
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20000c00 	.word	0x20000c00
 80084b4:	40026058 	.word	0x40026058
 80084b8:	40026010 	.word	0x40026010
 80084bc:	40026410 	.word	0x40026410
 80084c0:	40026070 	.word	0x40026070
 80084c4:	40026470 	.word	0x40026470
 80084c8:	40026028 	.word	0x40026028
 80084cc:	40026428 	.word	0x40026428
 80084d0:	40026088 	.word	0x40026088
 80084d4:	40026488 	.word	0x40026488
 80084d8:	40026040 	.word	0x40026040
 80084dc:	40026440 	.word	0x40026440
 80084e0:	400260a0 	.word	0x400260a0
 80084e4:	400264a0 	.word	0x400264a0
 80084e8:	40026000 	.word	0x40026000
 80084ec:	40023800 	.word	0x40023800

080084f0 <IMU_TxRxCpltCallback>:

void IMU_TxRxCpltCallback(void){
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08e      	sub	sp, #56	@ 0x38
 80084f4:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);  // CS high (end of SPI transaction)
 80084f6:	2201      	movs	r2, #1
 80084f8:	2120      	movs	r1, #32
 80084fa:	487a      	ldr	r0, [pc, #488]	@ (80086e4 <IMU_TxRxCpltCallback+0x1f4>)
 80084fc:	f006 faea 	bl	800ead4 <HAL_GPIO_WritePin>

    // If a magnetometer read was in progress:
    if (flagSetMag == 1) {
 8008500:	4b79      	ldr	r3, [pc, #484]	@ (80086e8 <IMU_TxRxCpltCallback+0x1f8>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d148      	bne.n	800859a <IMU_TxRxCpltCallback+0xaa>
        // Bank 0 selected, now initiate magnetometer data read (9 bytes)
        flagSetMag = 0;
 8008508:	4b77      	ldr	r3, [pc, #476]	@ (80086e8 <IMU_TxRxCpltCallback+0x1f8>)
 800850a:	2200      	movs	r2, #0
 800850c:	601a      	str	r2, [r3, #0]
        uint8_t addrMag[10];
        addrMag[0] = 0x3B | 0x80;      // starting at EXT_SLV_SENS_DATA_00 (0x3B) with read bit
 800850e:	23bb      	movs	r3, #187	@ 0xbb
 8008510:	753b      	strb	r3, [r7, #20]
        for(int i = 1; i < 10; ++i) addrMag[i] = 0x00;
 8008512:	2301      	movs	r3, #1
 8008514:	637b      	str	r3, [r7, #52]	@ 0x34
 8008516:	e008      	b.n	800852a <IMU_TxRxCpltCallback+0x3a>
 8008518:	f107 0214 	add.w	r2, r7, #20
 800851c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800851e:	4413      	add	r3, r2
 8008520:	2200      	movs	r2, #0
 8008522:	701a      	strb	r2, [r3, #0]
 8008524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008526:	3301      	adds	r3, #1
 8008528:	637b      	str	r3, [r7, #52]	@ 0x34
 800852a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800852c:	2b09      	cmp	r3, #9
 800852e:	ddf3      	ble.n	8008518 <IMU_TxRxCpltCallback+0x28>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); // CS low
 8008530:	2200      	movs	r2, #0
 8008532:	2120      	movs	r1, #32
 8008534:	486b      	ldr	r0, [pc, #428]	@ (80086e4 <IMU_TxRxCpltCallback+0x1f4>)
 8008536:	f006 facd 	bl	800ead4 <HAL_GPIO_WritePin>
        flagReadMag = 1;
 800853a:	4b6c      	ldr	r3, [pc, #432]	@ (80086ec <IMU_TxRxCpltCallback+0x1fc>)
 800853c:	2201      	movs	r2, #1
 800853e:	601a      	str	r2, [r3, #0]
        int error = HAL_SPI_TransmitReceive_DMA(&hspi1, addrMag, magSPI, 10);  // read 9 bytes + dummy
 8008540:	f107 0114 	add.w	r1, r7, #20
 8008544:	230a      	movs	r3, #10
 8008546:	4a6a      	ldr	r2, [pc, #424]	@ (80086f0 <IMU_TxRxCpltCallback+0x200>)
 8008548:	486a      	ldr	r0, [pc, #424]	@ (80086f4 <IMU_TxRxCpltCallback+0x204>)
 800854a:	f009 fe4f 	bl	80121ec <HAL_SPI_TransmitReceive_DMA>
 800854e:	4603      	mov	r3, r0
 8008550:	623b      	str	r3, [r7, #32]
    	if (error != HAL_OK){
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 80c1 	beq.w	80086dc <IMU_TxRxCpltCallback+0x1ec>
    		SPI1_DMA_Reset();
 800855a:	f7ff fb73 	bl	8007c44 <SPI1_DMA_Reset>
    		error =HAL_SPI_TransmitReceive_DMA(&hspi1, addrMag, magSPI, 10);
 800855e:	f107 0114 	add.w	r1, r7, #20
 8008562:	230a      	movs	r3, #10
 8008564:	4a62      	ldr	r2, [pc, #392]	@ (80086f0 <IMU_TxRxCpltCallback+0x200>)
 8008566:	4863      	ldr	r0, [pc, #396]	@ (80086f4 <IMU_TxRxCpltCallback+0x204>)
 8008568:	f009 fe40 	bl	80121ec <HAL_SPI_TransmitReceive_DMA>
 800856c:	4603      	mov	r3, r0
 800856e:	623b      	str	r3, [r7, #32]
    		if (error != HAL_OK){
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 80b2 	beq.w	80086dc <IMU_TxRxCpltCallback+0x1ec>
    			snprintf((char *)tx_buffer, sizeof(tx_buffer),"ERRO NO SPI DO IMU!!!\r\n");
 8008578:	4a5f      	ldr	r2, [pc, #380]	@ (80086f8 <IMU_TxRxCpltCallback+0x208>)
 800857a:	2180      	movs	r1, #128	@ 0x80
 800857c:	485f      	ldr	r0, [pc, #380]	@ (80086fc <IMU_TxRxCpltCallback+0x20c>)
 800857e:	f00e fc29 	bl	8016dd4 <sniprintf>
				HAL_UART_Transmit(&huart2, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8008582:	485e      	ldr	r0, [pc, #376]	@ (80086fc <IMU_TxRxCpltCallback+0x20c>)
 8008584:	f7f7 fe94 	bl	80002b0 <strlen>
 8008588:	4603      	mov	r3, r0
 800858a:	b29a      	uxth	r2, r3
 800858c:	f04f 33ff 	mov.w	r3, #4294967295
 8008590:	495a      	ldr	r1, [pc, #360]	@ (80086fc <IMU_TxRxCpltCallback+0x20c>)
 8008592:	485b      	ldr	r0, [pc, #364]	@ (8008700 <IMU_TxRxCpltCallback+0x210>)
 8008594:	f00b fc86 	bl	8013ea4 <HAL_UART_Transmit>
 8008598:	e0a0      	b.n	80086dc <IMU_TxRxCpltCallback+0x1ec>
    		}
    	}
        //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
        return;  // wait for magnetometer data DMA to complete
    }
    if (flagReadMag == 1) {
 800859a:	4b54      	ldr	r3, [pc, #336]	@ (80086ec <IMU_TxRxCpltCallback+0x1fc>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d11f      	bne.n	80085e2 <IMU_TxRxCpltCallback+0xf2>
        // Magnetometer data received
        flagReadMag = 0;
 80085a2:	4b52      	ldr	r3, [pc, #328]	@ (80086ec <IMU_TxRxCpltCallback+0x1fc>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	601a      	str	r2, [r3, #0]
        // Copy raw magnetometer bytes (skip magSPI[0] dummy and [1] ST1, take [2..7] = HXL..HZH)
        for(int i = 0; i < 6; ++i) {
 80085a8:	2300      	movs	r3, #0
 80085aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80085ac:	e013      	b.n	80085d6 <IMU_TxRxCpltCallback+0xe6>
            magData[i] = magSPI[2 + i];
 80085ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b0:	3302      	adds	r3, #2
 80085b2:	4a4f      	ldr	r2, [pc, #316]	@ (80086f0 <IMU_TxRxCpltCallback+0x200>)
 80085b4:	5cd1      	ldrb	r1, [r2, r3]
 80085b6:	4a53      	ldr	r2, [pc, #332]	@ (8008704 <IMU_TxRxCpltCallback+0x214>)
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	4413      	add	r3, r2
 80085bc:	460a      	mov	r2, r1
 80085be:	701a      	strb	r2, [r3, #0]
            save_data_to_sensor(&mag,magData[i]);//guardar dados em memória
 80085c0:	4a50      	ldr	r2, [pc, #320]	@ (8008704 <IMU_TxRxCpltCallback+0x214>)
 80085c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c4:	4413      	add	r3, r2
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	4619      	mov	r1, r3
 80085ca:	484f      	ldr	r0, [pc, #316]	@ (8008708 <IMU_TxRxCpltCallback+0x218>)
 80085cc:	f002 fdb2 	bl	800b134 <save_data_to_sensor>
        for(int i = 0; i < 6; ++i) {
 80085d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d2:	3301      	adds	r3, #1
 80085d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80085d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d8:	2b05      	cmp	r3, #5
 80085da:	dde8      	ble.n	80085ae <IMU_TxRxCpltCallback+0xbe>
        }
        flagMagDone = 1;   // mark new magnetometer data ready
 80085dc:	4b4b      	ldr	r3, [pc, #300]	@ (800870c <IMU_TxRxCpltCallback+0x21c>)
 80085de:	2201      	movs	r2, #1
 80085e0:	601a      	str	r2, [r3, #0]
        // Note: ST2 is magSPI[9] if needed to check overflow (HOFL) or clear DRDY:contentReference[oaicite:11]{index=11}
    }

    // Existing accel/gyro handling:
    if (flagsetbank == 1) {
 80085e2:	4b4b      	ldr	r3, [pc, #300]	@ (8008710 <IMU_TxRxCpltCallback+0x220>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d143      	bne.n	8008672 <IMU_TxRxCpltCallback+0x182>
        // Bank selected for accel/gyro, now start reading 12 bytes (accel+gyro)
        flagsetbank = 0;
 80085ea:	4b49      	ldr	r3, [pc, #292]	@ (8008710 <IMU_TxRxCpltCallback+0x220>)
 80085ec:	2200      	movs	r2, #0
 80085ee:	601a      	str	r2, [r3, #0]
        uint8_t addr[13];
        addr[0] = 0x2D | 0x80;        // ACCEL_XOUT_H | 0x80
 80085f0:	23ad      	movs	r3, #173	@ 0xad
 80085f2:	713b      	strb	r3, [r7, #4]
        for(int i = 1; i < 13; ++i) addr[i] = 0x00;
 80085f4:	2301      	movs	r3, #1
 80085f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085f8:	e007      	b.n	800860a <IMU_TxRxCpltCallback+0x11a>
 80085fa:	1d3a      	adds	r2, r7, #4
 80085fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085fe:	4413      	add	r3, r2
 8008600:	2200      	movs	r2, #0
 8008602:	701a      	strb	r2, [r3, #0]
 8008604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008606:	3301      	adds	r3, #1
 8008608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800860a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860c:	2b0c      	cmp	r3, #12
 800860e:	ddf4      	ble.n	80085fa <IMU_TxRxCpltCallback+0x10a>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8008610:	2200      	movs	r2, #0
 8008612:	2120      	movs	r1, #32
 8008614:	4833      	ldr	r0, [pc, #204]	@ (80086e4 <IMU_TxRxCpltCallback+0x1f4>)
 8008616:	f006 fa5d 	bl	800ead4 <HAL_GPIO_WritePin>
        flagreadregs = 1;
 800861a:	4b3e      	ldr	r3, [pc, #248]	@ (8008714 <IMU_TxRxCpltCallback+0x224>)
 800861c:	2201      	movs	r2, #1
 800861e:	601a      	str	r2, [r3, #0]
        int error = HAL_SPI_TransmitReceive_DMA(&hspi1, addr, accelSPI, 13);
 8008620:	1d39      	adds	r1, r7, #4
 8008622:	230d      	movs	r3, #13
 8008624:	4a3c      	ldr	r2, [pc, #240]	@ (8008718 <IMU_TxRxCpltCallback+0x228>)
 8008626:	4833      	ldr	r0, [pc, #204]	@ (80086f4 <IMU_TxRxCpltCallback+0x204>)
 8008628:	f009 fde0 	bl	80121ec <HAL_SPI_TransmitReceive_DMA>
 800862c:	4603      	mov	r3, r0
 800862e:	627b      	str	r3, [r7, #36]	@ 0x24
    	if (error != HAL_OK){
 8008630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008632:	2b00      	cmp	r3, #0
 8008634:	d052      	beq.n	80086dc <IMU_TxRxCpltCallback+0x1ec>
    		SPI1_DMA_Reset();
 8008636:	f7ff fb05 	bl	8007c44 <SPI1_DMA_Reset>
    		error = HAL_SPI_TransmitReceive_DMA(&hspi1, addr, accelSPI, 13);
 800863a:	1d39      	adds	r1, r7, #4
 800863c:	230d      	movs	r3, #13
 800863e:	4a36      	ldr	r2, [pc, #216]	@ (8008718 <IMU_TxRxCpltCallback+0x228>)
 8008640:	482c      	ldr	r0, [pc, #176]	@ (80086f4 <IMU_TxRxCpltCallback+0x204>)
 8008642:	f009 fdd3 	bl	80121ec <HAL_SPI_TransmitReceive_DMA>
 8008646:	4603      	mov	r3, r0
 8008648:	627b      	str	r3, [r7, #36]	@ 0x24
    		if (error != HAL_OK){
 800864a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864c:	2b00      	cmp	r3, #0
 800864e:	d045      	beq.n	80086dc <IMU_TxRxCpltCallback+0x1ec>
    			snprintf((char *)tx_buffer, sizeof(tx_buffer),"ERRO NO SPI DO IMU!!!\r\n");
 8008650:	4a29      	ldr	r2, [pc, #164]	@ (80086f8 <IMU_TxRxCpltCallback+0x208>)
 8008652:	2180      	movs	r1, #128	@ 0x80
 8008654:	4829      	ldr	r0, [pc, #164]	@ (80086fc <IMU_TxRxCpltCallback+0x20c>)
 8008656:	f00e fbbd 	bl	8016dd4 <sniprintf>
				HAL_UART_Transmit(&huart2, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 800865a:	4828      	ldr	r0, [pc, #160]	@ (80086fc <IMU_TxRxCpltCallback+0x20c>)
 800865c:	f7f7 fe28 	bl	80002b0 <strlen>
 8008660:	4603      	mov	r3, r0
 8008662:	b29a      	uxth	r2, r3
 8008664:	f04f 33ff 	mov.w	r3, #4294967295
 8008668:	4924      	ldr	r1, [pc, #144]	@ (80086fc <IMU_TxRxCpltCallback+0x20c>)
 800866a:	4825      	ldr	r0, [pc, #148]	@ (8008700 <IMU_TxRxCpltCallback+0x210>)
 800866c:	f00b fc1a 	bl	8013ea4 <HAL_UART_Transmit>
 8008670:	e034      	b.n	80086dc <IMU_TxRxCpltCallback+0x1ec>
    		}
    	}
        //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
        return;
    }
    if (flagreadregs == 1) {
 8008672:	4b28      	ldr	r3, [pc, #160]	@ (8008714 <IMU_TxRxCpltCallback+0x224>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d130      	bne.n	80086dc <IMU_TxRxCpltCallback+0x1ec>
        // Accel/Gyro data received
        flagreadregs = 0;
 800867a:	4b26      	ldr	r3, [pc, #152]	@ (8008714 <IMU_TxRxCpltCallback+0x224>)
 800867c:	2200      	movs	r2, #0
 800867e:	601a      	str	r2, [r3, #0]
        // Demultiplex 12 bytes into accelData and gyroData
        for (int i = 0; i < 6; ++i) {
 8008680:	2300      	movs	r3, #0
 8008682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008684:	e024      	b.n	80086d0 <IMU_TxRxCpltCallback+0x1e0>
            accelData[i] = accelSPI[1 + i];      // bytes 1-6: accel X,Y,Z
 8008686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008688:	3301      	adds	r3, #1
 800868a:	4a23      	ldr	r2, [pc, #140]	@ (8008718 <IMU_TxRxCpltCallback+0x228>)
 800868c:	5cd1      	ldrb	r1, [r2, r3]
 800868e:	4a23      	ldr	r2, [pc, #140]	@ (800871c <IMU_TxRxCpltCallback+0x22c>)
 8008690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008692:	4413      	add	r3, r2
 8008694:	460a      	mov	r2, r1
 8008696:	701a      	strb	r2, [r3, #0]
            save_data_to_sensor(&accel,accelData[i]);//guardar dados em memória
 8008698:	4a20      	ldr	r2, [pc, #128]	@ (800871c <IMU_TxRxCpltCallback+0x22c>)
 800869a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869c:	4413      	add	r3, r2
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	4619      	mov	r1, r3
 80086a2:	481f      	ldr	r0, [pc, #124]	@ (8008720 <IMU_TxRxCpltCallback+0x230>)
 80086a4:	f002 fd46 	bl	800b134 <save_data_to_sensor>
            gyroData[i]  = accelSPI[7 + i];      // bytes 7-12: gyro X,Y,Z
 80086a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086aa:	3307      	adds	r3, #7
 80086ac:	4a1a      	ldr	r2, [pc, #104]	@ (8008718 <IMU_TxRxCpltCallback+0x228>)
 80086ae:	5cd1      	ldrb	r1, [r2, r3]
 80086b0:	4a1c      	ldr	r2, [pc, #112]	@ (8008724 <IMU_TxRxCpltCallback+0x234>)
 80086b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b4:	4413      	add	r3, r2
 80086b6:	460a      	mov	r2, r1
 80086b8:	701a      	strb	r2, [r3, #0]
            save_data_to_sensor(&gyro,gyroData[i]);//guardar dados em memória
 80086ba:	4a1a      	ldr	r2, [pc, #104]	@ (8008724 <IMU_TxRxCpltCallback+0x234>)
 80086bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086be:	4413      	add	r3, r2
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	4619      	mov	r1, r3
 80086c4:	4818      	ldr	r0, [pc, #96]	@ (8008728 <IMU_TxRxCpltCallback+0x238>)
 80086c6:	f002 fd35 	bl	800b134 <save_data_to_sensor>
        for (int i = 0; i < 6; ++i) {
 80086ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086cc:	3301      	adds	r3, #1
 80086ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d2:	2b05      	cmp	r3, #5
 80086d4:	ddd7      	ble.n	8008686 <IMU_TxRxCpltCallback+0x196>
        }
        flagreceive = 1;  // mark new accel/gyro data ready
 80086d6:	4b15      	ldr	r3, [pc, #84]	@ (800872c <IMU_TxRxCpltCallback+0x23c>)
 80086d8:	2201      	movs	r2, #1
 80086da:	601a      	str	r2, [r3, #0]
    }
}
 80086dc:	3738      	adds	r7, #56	@ 0x38
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	40020800 	.word	0x40020800
 80086e8:	200001f0 	.word	0x200001f0
 80086ec:	200001f4 	.word	0x200001f4
 80086f0:	20003a80 	.word	0x20003a80
 80086f4:	20000c00 	.word	0x20000c00
 80086f8:	0801a5e8 	.word	0x0801a5e8
 80086fc:	200039d8 	.word	0x200039d8
 8008700:	20001028 	.word	0x20001028
 8008704:	20003a78 	.word	0x20003a78
 8008708:	200018f0 	.word	0x200018f0
 800870c:	200001f8 	.word	0x200001f8
 8008710:	200001ec 	.word	0x200001ec
 8008714:	200001e8 	.word	0x200001e8
 8008718:	20003a68 	.word	0x20003a68
 800871c:	20003a58 	.word	0x20003a58
 8008720:	200010d0 	.word	0x200010d0
 8008724:	20003a60 	.word	0x20003a60
 8008728:	200014e0 	.word	0x200014e0
 800872c:	200001e4 	.word	0x200001e4

08008730 <ICM20948_SetBank>:
        HAL_UART_Transmit(&huart2, tx_buffer, strlen((char*)tx_buffer), HAL_MAX_DELAY);
        flagMagDone = 0;
    }
};

void ICM20948_SetBank(uint8_t bank) {
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	4603      	mov	r3, r0
 8008738:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    uint8_t rxData[2];
    data[0] = 0x7F;           // Endereço REG_BANK_SEL (0x7F), MSB=0 (escrita)
 800873a:	237f      	movs	r3, #127	@ 0x7f
 800873c:	743b      	strb	r3, [r7, #16]
    data[1] = (bank << 4);    // Valor com banco (bits 5:4)
 800873e:	79fb      	ldrb	r3, [r7, #7]
 8008740:	011b      	lsls	r3, r3, #4
 8008742:	b2db      	uxtb	r3, r3
 8008744:	747b      	strb	r3, [r7, #17]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); // CS baixo
 8008746:	2200      	movs	r2, #0
 8008748:	2120      	movs	r1, #32
 800874a:	4819      	ldr	r0, [pc, #100]	@ (80087b0 <ICM20948_SetBank+0x80>)
 800874c:	f006 f9c2 	bl	800ead4 <HAL_GPIO_WritePin>
    int error = HAL_SPI_TransmitReceive_DMA(&hspi1, data, rxData, 2);
 8008750:	f107 020c 	add.w	r2, r7, #12
 8008754:	f107 0110 	add.w	r1, r7, #16
 8008758:	2302      	movs	r3, #2
 800875a:	4816      	ldr	r0, [pc, #88]	@ (80087b4 <ICM20948_SetBank+0x84>)
 800875c:	f009 fd46 	bl	80121ec <HAL_SPI_TransmitReceive_DMA>
 8008760:	4603      	mov	r3, r0
 8008762:	617b      	str	r3, [r7, #20]
	if (error != HAL_OK){
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d01e      	beq.n	80087a8 <ICM20948_SetBank+0x78>
		SPI1_DMA_Reset();
 800876a:	f7ff fa6b 	bl	8007c44 <SPI1_DMA_Reset>
		error = HAL_SPI_TransmitReceive_DMA(&hspi1, data, rxData, 2);
 800876e:	f107 020c 	add.w	r2, r7, #12
 8008772:	f107 0110 	add.w	r1, r7, #16
 8008776:	2302      	movs	r3, #2
 8008778:	480e      	ldr	r0, [pc, #56]	@ (80087b4 <ICM20948_SetBank+0x84>)
 800877a:	f009 fd37 	bl	80121ec <HAL_SPI_TransmitReceive_DMA>
 800877e:	4603      	mov	r3, r0
 8008780:	617b      	str	r3, [r7, #20]
		if (error != HAL_OK){
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00f      	beq.n	80087a8 <ICM20948_SetBank+0x78>
			snprintf((char *)tx_buffer, sizeof(tx_buffer),"ERRO NO SPI DO IMU!!!\r\n");
 8008788:	4a0b      	ldr	r2, [pc, #44]	@ (80087b8 <ICM20948_SetBank+0x88>)
 800878a:	2180      	movs	r1, #128	@ 0x80
 800878c:	480b      	ldr	r0, [pc, #44]	@ (80087bc <ICM20948_SetBank+0x8c>)
 800878e:	f00e fb21 	bl	8016dd4 <sniprintf>
			HAL_UART_Transmit(&huart2, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
 8008792:	480a      	ldr	r0, [pc, #40]	@ (80087bc <ICM20948_SetBank+0x8c>)
 8008794:	f7f7 fd8c 	bl	80002b0 <strlen>
 8008798:	4603      	mov	r3, r0
 800879a:	b29a      	uxth	r2, r3
 800879c:	f04f 33ff 	mov.w	r3, #4294967295
 80087a0:	4906      	ldr	r1, [pc, #24]	@ (80087bc <ICM20948_SetBank+0x8c>)
 80087a2:	4807      	ldr	r0, [pc, #28]	@ (80087c0 <ICM20948_SetBank+0x90>)
 80087a4:	f00b fb7e 	bl	8013ea4 <HAL_UART_Transmit>
		}
	}
};
 80087a8:	bf00      	nop
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	40020800 	.word	0x40020800
 80087b4:	20000c00 	.word	0x20000c00
 80087b8:	0801a5e8 	.word	0x0801a5e8
 80087bc:	200039d8 	.word	0x200039d8
 80087c0:	20001028 	.word	0x20001028

080087c4 <ICM20948_WriteReg>:



void ICM20948_WriteReg(uint8_t bank, uint8_t reg, uint8_t value) {
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b088      	sub	sp, #32
 80087c8:	af02      	add	r7, sp, #8
 80087ca:	4603      	mov	r3, r0
 80087cc:	71fb      	strb	r3, [r7, #7]
 80087ce:	460b      	mov	r3, r1
 80087d0:	71bb      	strb	r3, [r7, #6]
 80087d2:	4613      	mov	r3, r2
 80087d4:	717b      	strb	r3, [r7, #5]

    uint8_t data[2];
    uint8_t rxData[2];
    uint8_t txData[2];

    data[0] = 0x7F;           // Endereço REG_BANK_SEL (0x7F), MSB=0 (escrita)
 80087d6:	237f      	movs	r3, #127	@ 0x7f
 80087d8:	743b      	strb	r3, [r7, #16]
    data[1] = (bank << 4);    // Valor com banco (bits 5:4)
 80087da:	79fb      	ldrb	r3, [r7, #7]
 80087dc:	011b      	lsls	r3, r3, #4
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	747b      	strb	r3, [r7, #17]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); // CS baixo
 80087e2:	2200      	movs	r2, #0
 80087e4:	2120      	movs	r1, #32
 80087e6:	481c      	ldr	r0, [pc, #112]	@ (8008858 <ICM20948_WriteReg+0x94>)
 80087e8:	f006 f974 	bl	800ead4 <HAL_GPIO_WritePin>
    int error = HAL_SPI_TransmitReceive(&hspi1, data, rxData, 2, HAL_MAX_DELAY);
 80087ec:	f107 020c 	add.w	r2, r7, #12
 80087f0:	f107 0110 	add.w	r1, r7, #16
 80087f4:	f04f 33ff 	mov.w	r3, #4294967295
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	2302      	movs	r3, #2
 80087fc:	4817      	ldr	r0, [pc, #92]	@ (800885c <ICM20948_WriteReg+0x98>)
 80087fe:	f009 f9d6 	bl	8011bae <HAL_SPI_TransmitReceive>
 8008802:	4603      	mov	r3, r0
 8008804:	617b      	str	r3, [r7, #20]
    if (error != HAL_OK){
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d121      	bne.n	8008850 <ICM20948_WriteReg+0x8c>
    	return;
    }
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);   // CS alto
 800880c:	2201      	movs	r2, #1
 800880e:	2120      	movs	r1, #32
 8008810:	4811      	ldr	r0, [pc, #68]	@ (8008858 <ICM20948_WriteReg+0x94>)
 8008812:	f006 f95f 	bl	800ead4 <HAL_GPIO_WritePin>
    txData[0] = reg & 0x7F;  // Endereço do registo (MSB=0 para escrita)
 8008816:	79bb      	ldrb	r3, [r7, #6]
 8008818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800881c:	b2db      	uxtb	r3, r3
 800881e:	723b      	strb	r3, [r7, #8]
    txData[1] = value;
 8008820:	797b      	ldrb	r3, [r7, #5]
 8008822:	727b      	strb	r3, [r7, #9]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); // CS baixo
 8008824:	2200      	movs	r2, #0
 8008826:	2120      	movs	r1, #32
 8008828:	480b      	ldr	r0, [pc, #44]	@ (8008858 <ICM20948_WriteReg+0x94>)
 800882a:	f006 f953 	bl	800ead4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, txData,rxData, 2, HAL_MAX_DELAY);
 800882e:	f107 020c 	add.w	r2, r7, #12
 8008832:	f107 0108 	add.w	r1, r7, #8
 8008836:	f04f 33ff 	mov.w	r3, #4294967295
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	2302      	movs	r3, #2
 800883e:	4807      	ldr	r0, [pc, #28]	@ (800885c <ICM20948_WriteReg+0x98>)
 8008840:	f009 f9b5 	bl	8011bae <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);   // CS alto
 8008844:	2201      	movs	r2, #1
 8008846:	2120      	movs	r1, #32
 8008848:	4803      	ldr	r0, [pc, #12]	@ (8008858 <ICM20948_WriteReg+0x94>)
 800884a:	f006 f943 	bl	800ead4 <HAL_GPIO_WritePin>
 800884e:	e000      	b.n	8008852 <ICM20948_WriteReg+0x8e>
    	return;
 8008850:	bf00      	nop
};
 8008852:	3718      	adds	r7, #24
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	40020800 	.word	0x40020800
 800885c:	20000c00 	.word	0x20000c00

08008860 <ICM20948_Setup>:


void ICM20948_Setup(){
 8008860:	b580      	push	{r7, lr}
 8008862:	af00      	add	r7, sp, #0
	// Desabilita interface I2C (USER_CTRL I2C_IF_DIS)
	ICM20948_WriteReg(0, 0x03, 0x10);  // USER_CTRL (0x03) = 0x10 (I2C_IF_DIS = 1)
 8008864:	2210      	movs	r2, #16
 8008866:	2103      	movs	r1, #3
 8008868:	2000      	movs	r0, #0
 800886a:	f7ff ffab 	bl	80087c4 <ICM20948_WriteReg>
	HAL_Delay(10);
 800886e:	200a      	movs	r0, #10
 8008870:	f003 fd72 	bl	800c358 <HAL_Delay>

	// Sair de modo sleep, configurar clock interno (PWR_MGMT_1)
	ICM20948_WriteReg(0, 0x06, 0x01);  // PWR_MGMT_1 (0x06) = 0x01 (auto select CLK)
 8008874:	2201      	movs	r2, #1
 8008876:	2106      	movs	r1, #6
 8008878:	2000      	movs	r0, #0
 800887a:	f7ff ffa3 	bl	80087c4 <ICM20948_WriteReg>
	HAL_Delay(10);
 800887e:	200a      	movs	r0, #10
 8008880:	f003 fd6a 	bl	800c358 <HAL_Delay>
	// Habilita acelerômetro e giroscópio (PWR_MGMT_2)
	ICM20948_WriteReg(0, 0x07, 0x00);  // PWR_MGMT_2 (0x07) = 0x00 (todos eixos ativados)
 8008884:	2200      	movs	r2, #0
 8008886:	2107      	movs	r1, #7
 8008888:	2000      	movs	r0, #0
 800888a:	f7ff ff9b 	bl	80087c4 <ICM20948_WriteReg>
	HAL_Delay(10);
 800888e:	200a      	movs	r0, #10
 8008890:	f003 fd62 	bl	800c358 <HAL_Delay>

	// Configura faixa de aceleração e giroscópio (banco 2)
	ICM20948_WriteReg(2, 0x14, 0x00);  // ACCEL_CONFIG: ±2g, DLPF off
 8008894:	2200      	movs	r2, #0
 8008896:	2114      	movs	r1, #20
 8008898:	2002      	movs	r0, #2
 800889a:	f7ff ff93 	bl	80087c4 <ICM20948_WriteReg>
	ICM20948_WriteReg(2, 0x01, 0x00);  // GYRO_CONFIG1: ±250°/s, DLPF off
 800889e:	2200      	movs	r2, #0
 80088a0:	2101      	movs	r1, #1
 80088a2:	2002      	movs	r0, #2
 80088a4:	f7ff ff8e 	bl	80087c4 <ICM20948_WriteReg>
	HAL_Delay(10);
 80088a8:	200a      	movs	r0, #10
 80088aa:	f003 fd55 	bl	800c358 <HAL_Delay>

	//---------------------Magnetómetro--------------------------//
	// Enable I2C master and disable I2C slave interface on ICM-20948
	ICM20948_WriteReg(0, 0x03, 0x30);  // USER_CTRL = 0x30 (I2C_MST_EN=1, I2C_IF_DIS=1)
 80088ae:	2230      	movs	r2, #48	@ 0x30
 80088b0:	2103      	movs	r1, #3
 80088b2:	2000      	movs	r0, #0
 80088b4:	f7ff ff86 	bl	80087c4 <ICM20948_WriteReg>
	HAL_Delay(10);
 80088b8:	200a      	movs	r0, #10
 80088ba:	f003 fd4d 	bl	800c358 <HAL_Delay>

	// Configure AK09916 magnetometer (onboard ICM-20948) for continuous 100Hz mode
	ICM20948_WriteReg(3, 0x13, 0x0C);  // I2C_SLV4_ADDR = 0x0C (mag address, write mode)
 80088be:	220c      	movs	r2, #12
 80088c0:	2113      	movs	r1, #19
 80088c2:	2003      	movs	r0, #3
 80088c4:	f7ff ff7e 	bl	80087c4 <ICM20948_WriteReg>
	ICM20948_WriteReg(3, 0x14, 0x31);  // I2C_SLV4_REG  = 0x31 (mag CNTL2 register)
 80088c8:	2231      	movs	r2, #49	@ 0x31
 80088ca:	2114      	movs	r1, #20
 80088cc:	2003      	movs	r0, #3
 80088ce:	f7ff ff79 	bl	80087c4 <ICM20948_WriteReg>
	ICM20948_WriteReg(3, 0x16, 0x08);  // I2C_SLV4_DO   = 0x08 (value to write: continuous 100Hz mode)
 80088d2:	2208      	movs	r2, #8
 80088d4:	2116      	movs	r1, #22
 80088d6:	2003      	movs	r0, #3
 80088d8:	f7ff ff74 	bl	80087c4 <ICM20948_WriteReg>
	ICM20948_WriteReg(3, 0x15, 0x80);  // I2C_SLV4_CTRL = 0x80 (trigger Slave4 one-byte write)
 80088dc:	2280      	movs	r2, #128	@ 0x80
 80088de:	2115      	movs	r1, #21
 80088e0:	2003      	movs	r0, #3
 80088e2:	f7ff ff6f 	bl	80087c4 <ICM20948_WriteReg>
	HAL_Delay(10);  // wait for write to complete :contentReference[oaicite:1]{index=1}
 80088e6:	200a      	movs	r0, #10
 80088e8:	f003 fd36 	bl	800c358 <HAL_Delay>

	// Set up I2C Slave0 to read 9 bytes from magnetometer (ST1 through ST2)
	ICM20948_WriteReg(3, 0x03, 0x8C);  // I2C_SLV0_ADDR = 0x8C (mag address 0x0C, read mode MSB=1)
 80088ec:	228c      	movs	r2, #140	@ 0x8c
 80088ee:	2103      	movs	r1, #3
 80088f0:	2003      	movs	r0, #3
 80088f2:	f7ff ff67 	bl	80087c4 <ICM20948_WriteReg>
	ICM20948_WriteReg(3, 0x04, 0x10);  // I2C_SLV0_REG  = 0x10 (start at mag ST1 register)
 80088f6:	2210      	movs	r2, #16
 80088f8:	2104      	movs	r1, #4
 80088fa:	2003      	movs	r0, #3
 80088fc:	f7ff ff62 	bl	80087c4 <ICM20948_WriteReg>
	ICM20948_WriteReg(3, 0x05, 0x88);  // I2C_SLV0_CTRL = 0x88 (enable, read 9 bytes: ST1->ST2)
 8008900:	2288      	movs	r2, #136	@ 0x88
 8008902:	2105      	movs	r1, #5
 8008904:	2003      	movs	r0, #3
 8008906:	f7ff ff5d 	bl	80087c4 <ICM20948_WriteReg>
	HAL_Delay(10);
 800890a:	200a      	movs	r0, #10
 800890c:	f003 fd24 	bl	800c358 <HAL_Delay>
};
 8008910:	bf00      	nop
 8008912:	bd80      	pop	{r7, pc}

08008914 <ICM20948_ISR>:


void ICM20948_ISR(int flagSetMag_input){
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
	flagSetMag=flagSetMag_input;
 800891c:	4a06      	ldr	r2, [pc, #24]	@ (8008938 <ICM20948_ISR+0x24>)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6013      	str	r3, [r2, #0]
    flagsetbank=1;
 8008922:	4b06      	ldr	r3, [pc, #24]	@ (800893c <ICM20948_ISR+0x28>)
 8008924:	2201      	movs	r2, #1
 8008926:	601a      	str	r2, [r3, #0]
    ICM20948_SetBank(0);
 8008928:	2000      	movs	r0, #0
 800892a:	f7ff ff01 	bl	8008730 <ICM20948_SetBank>
};
 800892e:	bf00      	nop
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	200001f0 	.word	0x200001f0
 800893c:	200001ec 	.word	0x200001ec

08008940 <HAL_TIM_IC_CaptureCallback>:
int counter_pwm_front_susp_timer=0;
int counter_pwm_rear_susp_timer=0;
int counter_pwm_steering_angle_timer=0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008940:	b5b0      	push	{r4, r5, r7, lr}
 8008942:	b08c      	sub	sp, #48	@ 0x30
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,1);
	if(htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == speed_pwm_timer)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	7f1b      	ldrb	r3, [r3, #28]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d131      	bne.n	80089b4 <HAL_TIM_IC_CaptureCallback+0x74>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a8b      	ldr	r2, [pc, #556]	@ (8008b84 <HAL_TIM_IC_CaptureCallback+0x244>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d12c      	bne.n	80089b4 <HAL_TIM_IC_CaptureCallback+0x74>
    {
		capture_value_speed = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800895a:	2100      	movs	r1, #0
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f00a fe3d 	bl	80135dc <HAL_TIM_ReadCapturedValue>
 8008962:	4603      	mov	r3, r0
 8008964:	4a88      	ldr	r2, [pc, #544]	@ (8008b88 <HAL_TIM_IC_CaptureCallback+0x248>)
 8008966:	6013      	str	r3, [r2, #0]
		capture_value2_speed = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8008968:	2104      	movs	r1, #4
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f00a fe36 	bl	80135dc <HAL_TIM_ReadCapturedValue>
 8008970:	4603      	mov	r3, r0
 8008972:	4a86      	ldr	r2, [pc, #536]	@ (8008b8c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8008974:	6013      	str	r3, [r2, #0]
		if(capture_value_speed)
 8008976:	4b84      	ldr	r3, [pc, #528]	@ (8008b88 <HAL_TIM_IC_CaptureCallback+0x248>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d01a      	beq.n	80089b4 <HAL_TIM_IC_CaptureCallback+0x74>
		{
			HAL_TIM_IC_Stop(htim,TIM_CHANNEL_1);
 800897e:	2100      	movs	r1, #0
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f00a fa0b 	bl	8012d9c <HAL_TIM_IC_Stop>
			frequency_speed = timer_peripheral_freq / capture_value_speed;
 8008986:	4b80      	ldr	r3, [pc, #512]	@ (8008b88 <HAL_TIM_IC_CaptureCallback+0x248>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	ee07 3a90 	vmov	s15, r3
 800898e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008992:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008b90 <HAL_TIM_IC_CaptureCallback+0x250>
 8008996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800899a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800899e:	ee17 2a90 	vmov	r2, s15
 80089a2:	4b7c      	ldr	r3, [pc, #496]	@ (8008b94 <HAL_TIM_IC_CaptureCallback+0x254>)
 80089a4:	601a      	str	r2, [r3, #0]
			save_data_to_sensor(&speed_sensor,frequency_speed);
 80089a6:	4b7b      	ldr	r3, [pc, #492]	@ (8008b94 <HAL_TIM_IC_CaptureCallback+0x254>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	4619      	mov	r1, r3
 80089ae:	487a      	ldr	r0, [pc, #488]	@ (8008b98 <HAL_TIM_IC_CaptureCallback+0x258>)
 80089b0:	f002 fbc0 	bl	800b134 <save_data_to_sensor>
			//snprintf((char*)tx_buffer, sizeof(tx_buffer),"PWM in speed entered freq=%d\r\n", frequency_speed);
			//HAL_UART_Transmit(&huart2, tx_buffer, strlen((char*)tx_buffer), HAL_MAX_DELAY);
		}
	}
    if(htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == front_susp_timer)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	7f1b      	ldrb	r3, [r3, #28]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d145      	bne.n	8008a48 <HAL_TIM_IC_CaptureCallback+0x108>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a76      	ldr	r2, [pc, #472]	@ (8008b9c <HAL_TIM_IC_CaptureCallback+0x25c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d140      	bne.n	8008a48 <HAL_TIM_IC_CaptureCallback+0x108>
    {

    	uint32_t capture_value_f_susp = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80089c6:	2100      	movs	r1, #0
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f00a fe07 	bl	80135dc <HAL_TIM_ReadCapturedValue>
 80089ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
    	uint32_t capture_value2_f_susp = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80089d0:	2104      	movs	r1, #4
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f00a fe02 	bl	80135dc <HAL_TIM_ReadCapturedValue>
 80089d8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if(capture_value_f_susp)
 80089da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d02e      	beq.n	8008a3e <HAL_TIM_IC_CaptureCallback+0xfe>
		{
			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
			HAL_TIM_IC_Stop(htim,TIM_CHANNEL_1);
 80089e0:	2100      	movs	r1, #0
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f00a f9da 	bl	8012d9c <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(htim,TIM_CHANNEL_2);
 80089e8:	2104      	movs	r1, #4
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f00a f9d6 	bl	8012d9c <HAL_TIM_IC_Stop>
			//__HAL_TIM_SET_COUNTER(htim, 0); // reset para próxima medição
			if (counter_pwm_front_susp_timer==1){
 80089f0:	4b6b      	ldr	r3, [pc, #428]	@ (8008ba0 <HAL_TIM_IC_CaptureCallback+0x260>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d122      	bne.n	8008a3e <HAL_TIM_IC_CaptureCallback+0xfe>
				uint32_t duty_cycle_f_susp = 100.0 * capture_value2_f_susp / capture_value_f_susp;
 80089f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089fa:	f7f7 fda3 	bl	8000544 <__aeabi_ui2d>
 80089fe:	f04f 0200 	mov.w	r2, #0
 8008a02:	4b68      	ldr	r3, [pc, #416]	@ (8008ba4 <HAL_TIM_IC_CaptureCallback+0x264>)
 8008a04:	f7f7 fe18 	bl	8000638 <__aeabi_dmul>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	461d      	mov	r5, r3
 8008a10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a12:	f7f7 fd97 	bl	8000544 <__aeabi_ui2d>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	f7f7 ff35 	bl	800088c <__aeabi_ddiv>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	4610      	mov	r0, r2
 8008a28:	4619      	mov	r1, r3
 8008a2a:	f7f8 f8dd 	bl	8000be8 <__aeabi_d2uiz>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	627b      	str	r3, [r7, #36]	@ 0x24
				save_data_to_sensor(&front_susp_sensor,duty_cycle_f_susp);
 8008a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	4619      	mov	r1, r3
 8008a38:	485b      	ldr	r0, [pc, #364]	@ (8008ba8 <HAL_TIM_IC_CaptureCallback+0x268>)
 8008a3a:	f002 fb7b 	bl	800b134 <save_data_to_sensor>
				//snprintf((char*)tx_buffer, sizeof(tx_buffer),"PWM in f susp entered %d\r\n", duty_cycle_f_susp);
				//HAL_UART_Transmit(&huart2, tx_buffer, strlen((char*)tx_buffer), HAL_MAX_DELAY);
			}
		}
		counter_pwm_front_susp_timer+=1;
 8008a3e:	4b58      	ldr	r3, [pc, #352]	@ (8008ba0 <HAL_TIM_IC_CaptureCallback+0x260>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3301      	adds	r3, #1
 8008a44:	4a56      	ldr	r2, [pc, #344]	@ (8008ba0 <HAL_TIM_IC_CaptureCallback+0x260>)
 8008a46:	6013      	str	r3, [r2, #0]
	}
    if(htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == rear_susp_timer)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	7f1b      	ldrb	r3, [r3, #28]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d148      	bne.n	8008ae2 <HAL_TIM_IC_CaptureCallback+0x1a2>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a55      	ldr	r2, [pc, #340]	@ (8008bac <HAL_TIM_IC_CaptureCallback+0x26c>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d143      	bne.n	8008ae2 <HAL_TIM_IC_CaptureCallback+0x1a2>
    {

    	uint32_t capture_value_r_susp = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8008a5a:	2104      	movs	r1, #4
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f00a fdbd 	bl	80135dc <HAL_TIM_ReadCapturedValue>
 8008a62:	6238      	str	r0, [r7, #32]
    	uint32_t capture_value2_r_susp = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8008a64:	2100      	movs	r1, #0
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f00a fdb8 	bl	80135dc <HAL_TIM_ReadCapturedValue>
 8008a6c:	61f8      	str	r0, [r7, #28]

		if(capture_value_r_susp)
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d031      	beq.n	8008ad8 <HAL_TIM_IC_CaptureCallback+0x198>
		{
			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
			HAL_TIM_IC_Stop(htim,TIM_CHANNEL_1);
 8008a74:	2100      	movs	r1, #0
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f00a f990 	bl	8012d9c <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(htim,TIM_CHANNEL_2);
 8008a7c:	2104      	movs	r1, #4
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f00a f98c 	bl	8012d9c <HAL_TIM_IC_Stop>
			//__HAL_TIM_SET_COUNTER(htim, 0); // reset para próxima medição
			//if (counter_pwm_rear_susp_timer==1){
				uint32_t duty_cycle_r_susp = 100 - (100.0 * capture_value2_r_susp / capture_value_r_susp);
 8008a84:	69f8      	ldr	r0, [r7, #28]
 8008a86:	f7f7 fd5d 	bl	8000544 <__aeabi_ui2d>
 8008a8a:	f04f 0200 	mov.w	r2, #0
 8008a8e:	4b45      	ldr	r3, [pc, #276]	@ (8008ba4 <HAL_TIM_IC_CaptureCallback+0x264>)
 8008a90:	f7f7 fdd2 	bl	8000638 <__aeabi_dmul>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	4614      	mov	r4, r2
 8008a9a:	461d      	mov	r5, r3
 8008a9c:	6a38      	ldr	r0, [r7, #32]
 8008a9e:	f7f7 fd51 	bl	8000544 <__aeabi_ui2d>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	f7f7 feef 	bl	800088c <__aeabi_ddiv>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	f04f 0000 	mov.w	r0, #0
 8008ab6:	493b      	ldr	r1, [pc, #236]	@ (8008ba4 <HAL_TIM_IC_CaptureCallback+0x264>)
 8008ab8:	f7f7 fc06 	bl	80002c8 <__aeabi_dsub>
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	f7f8 f890 	bl	8000be8 <__aeabi_d2uiz>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	61bb      	str	r3, [r7, #24]
				save_data_to_sensor(&rear_susp_sensor,duty_cycle_r_susp);
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	4837      	ldr	r0, [pc, #220]	@ (8008bb0 <HAL_TIM_IC_CaptureCallback+0x270>)
 8008ad4:	f002 fb2e 	bl	800b134 <save_data_to_sensor>
				//snprintf((char*)tx_buffer, sizeof(tx_buffer),"PWM in r susp entered %d\r\n", duty_cycle_r_susp);
				//HAL_UART_Transmit(&huart2, tx_buffer, strlen((char*)tx_buffer), HAL_MAX_DELAY);
			//}
		}
		counter_pwm_rear_susp_timer+=1;
 8008ad8:	4b36      	ldr	r3, [pc, #216]	@ (8008bb4 <HAL_TIM_IC_CaptureCallback+0x274>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3301      	adds	r3, #1
 8008ade:	4a35      	ldr	r2, [pc, #212]	@ (8008bb4 <HAL_TIM_IC_CaptureCallback+0x274>)
 8008ae0:	6013      	str	r3, [r2, #0]
	}
    if(htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == steering_angle_timer)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	7f1b      	ldrb	r3, [r3, #28]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d145      	bne.n	8008b76 <HAL_TIM_IC_CaptureCallback+0x236>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008af2:	d140      	bne.n	8008b76 <HAL_TIM_IC_CaptureCallback+0x236>
    {

    	uint32_t capture_value_steer = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8008af4:	2100      	movs	r1, #0
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f00a fd70 	bl	80135dc <HAL_TIM_ReadCapturedValue>
 8008afc:	6178      	str	r0, [r7, #20]
    	uint32_t capture_value2_steer = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8008afe:	2104      	movs	r1, #4
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f00a fd6b 	bl	80135dc <HAL_TIM_ReadCapturedValue>
 8008b06:	6138      	str	r0, [r7, #16]

		if(capture_value_steer)
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d02e      	beq.n	8008b6c <HAL_TIM_IC_CaptureCallback+0x22c>
		{
			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
			HAL_TIM_IC_Stop(htim,TIM_CHANNEL_1);
 8008b0e:	2100      	movs	r1, #0
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f00a f943 	bl	8012d9c <HAL_TIM_IC_Stop>
			HAL_TIM_IC_Stop(htim,TIM_CHANNEL_2);
 8008b16:	2104      	movs	r1, #4
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f00a f93f 	bl	8012d9c <HAL_TIM_IC_Stop>
			//__HAL_TIM_SET_COUNTER(htim, 0); // reset para próxima medição
			if (counter_pwm_steering_angle_timer==1){
 8008b1e:	4b26      	ldr	r3, [pc, #152]	@ (8008bb8 <HAL_TIM_IC_CaptureCallback+0x278>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d122      	bne.n	8008b6c <HAL_TIM_IC_CaptureCallback+0x22c>
				uint32_t duty_cycle_steer = 100.0 * capture_value2_steer / capture_value_steer;
 8008b26:	6938      	ldr	r0, [r7, #16]
 8008b28:	f7f7 fd0c 	bl	8000544 <__aeabi_ui2d>
 8008b2c:	f04f 0200 	mov.w	r2, #0
 8008b30:	4b1c      	ldr	r3, [pc, #112]	@ (8008ba4 <HAL_TIM_IC_CaptureCallback+0x264>)
 8008b32:	f7f7 fd81 	bl	8000638 <__aeabi_dmul>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4614      	mov	r4, r2
 8008b3c:	461d      	mov	r5, r3
 8008b3e:	6978      	ldr	r0, [r7, #20]
 8008b40:	f7f7 fd00 	bl	8000544 <__aeabi_ui2d>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4620      	mov	r0, r4
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	f7f7 fe9e 	bl	800088c <__aeabi_ddiv>
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	4610      	mov	r0, r2
 8008b56:	4619      	mov	r1, r3
 8008b58:	f7f8 f846 	bl	8000be8 <__aeabi_d2uiz>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	60fb      	str	r3, [r7, #12]
				save_data_to_sensor(&steering_angle_sensor,duty_cycle_steer);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	4619      	mov	r1, r3
 8008b66:	4815      	ldr	r0, [pc, #84]	@ (8008bbc <HAL_TIM_IC_CaptureCallback+0x27c>)
 8008b68:	f002 fae4 	bl	800b134 <save_data_to_sensor>
				//snprintf((char*)tx_buffer, sizeof(tx_buffer),"PWM in steering entered %d\r\n", duty_cycle_steer);
				//HAL_UART_Transmit(&huart2, tx_buffer, strlen((char*)tx_buffer), HAL_MAX_DELAY);
			}
		}
		counter_pwm_steering_angle_timer+=1;
 8008b6c:	4b12      	ldr	r3, [pc, #72]	@ (8008bb8 <HAL_TIM_IC_CaptureCallback+0x278>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	3301      	adds	r3, #1
 8008b72:	4a11      	ldr	r2, [pc, #68]	@ (8008bb8 <HAL_TIM_IC_CaptureCallback+0x278>)
 8008b74:	6013      	str	r3, [r2, #0]
	}
    flagPWM=1;
 8008b76:	4b12      	ldr	r3, [pc, #72]	@ (8008bc0 <HAL_TIM_IC_CaptureCallback+0x280>)
 8008b78:	2201      	movs	r2, #1
 8008b7a:	601a      	str	r2, [r3, #0]
    //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,0);
}
 8008b7c:	bf00      	nop
 8008b7e:	3730      	adds	r7, #48	@ 0x30
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bdb0      	pop	{r4, r5, r7, pc}
 8008b84:	40000800 	.word	0x40000800
 8008b88:	20002d94 	.word	0x20002d94
 8008b8c:	20002d98 	.word	0x20002d98
 8008b90:	4b742400 	.word	0x4b742400
 8008b94:	20002d9c 	.word	0x20002d9c
 8008b98:	20001d54 	.word	0x20001d54
 8008b9c:	40010400 	.word	0x40010400
 8008ba0:	20000424 	.word	0x20000424
 8008ba4:	40590000 	.word	0x40590000
 8008ba8:	20002164 	.word	0x20002164
 8008bac:	40000400 	.word	0x40000400
 8008bb0:	20002574 	.word	0x20002574
 8008bb4:	20000428 	.word	0x20000428
 8008bb8:	2000042c 	.word	0x2000042c
 8008bbc:	20002984 	.word	0x20002984
 8008bc0:	20000420 	.word	0x20000420

08008bc4 <Speed_ISR>:
		flagPWM=0;
	}

}

void Speed_ISR(){
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(speed_pwm_TIM, TIM_CHANNEL_1);
 8008bc8:	2100      	movs	r1, #0
 8008bca:	4804      	ldr	r0, [pc, #16]	@ (8008bdc <Speed_ISR+0x18>)
 8008bcc:	f00a f948 	bl	8012e60 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(speed_pwm_TIM, TIM_CHANNEL_2);
 8008bd0:	2104      	movs	r1, #4
 8008bd2:	4802      	ldr	r0, [pc, #8]	@ (8008bdc <Speed_ISR+0x18>)
 8008bd4:	f00a f806 	bl	8012be4 <HAL_TIM_IC_Start>
}
 8008bd8:	bf00      	nop
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	20000f08 	.word	0x20000f08

08008be0 <Front_suspension_magnet_ISR>:

void Front_suspension_magnet_ISR(){
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
	counter_pwm_front_susp_timer=0;
 8008be4:	4b06      	ldr	r3, [pc, #24]	@ (8008c00 <Front_suspension_magnet_ISR+0x20>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	601a      	str	r2, [r3, #0]
	HAL_TIM_IC_Start_IT(front_susp_TIM,TIM_CHANNEL_1);
 8008bea:	2100      	movs	r1, #0
 8008bec:	4805      	ldr	r0, [pc, #20]	@ (8008c04 <Front_suspension_magnet_ISR+0x24>)
 8008bee:	f00a f937 	bl	8012e60 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(front_susp_TIM,TIM_CHANNEL_2);
 8008bf2:	2104      	movs	r1, #4
 8008bf4:	4803      	ldr	r0, [pc, #12]	@ (8008c04 <Front_suspension_magnet_ISR+0x24>)
 8008bf6:	f009 fff5 	bl	8012be4 <HAL_TIM_IC_Start>
}
 8008bfa:	bf00      	nop
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	20000424 	.word	0x20000424
 8008c04:	20000f50 	.word	0x20000f50

08008c08 <Rear_suspension_ISR>:

void Rear_suspension_ISR(){
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	af00      	add	r7, sp, #0
	counter_pwm_rear_susp_timer=0;
 8008c0c:	4b06      	ldr	r3, [pc, #24]	@ (8008c28 <Rear_suspension_ISR+0x20>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	601a      	str	r2, [r3, #0]
	HAL_TIM_IC_Start_IT(rear_susp_TIM,TIM_CHANNEL_1);
 8008c12:	2100      	movs	r1, #0
 8008c14:	4805      	ldr	r0, [pc, #20]	@ (8008c2c <Rear_suspension_ISR+0x24>)
 8008c16:	f00a f923 	bl	8012e60 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(rear_susp_TIM,TIM_CHANNEL_2);
 8008c1a:	2104      	movs	r1, #4
 8008c1c:	4803      	ldr	r0, [pc, #12]	@ (8008c2c <Rear_suspension_ISR+0x24>)
 8008c1e:	f009 ffe1 	bl	8012be4 <HAL_TIM_IC_Start>
}
 8008c22:	bf00      	nop
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20000428 	.word	0x20000428
 8008c2c:	20000ec0 	.word	0x20000ec0

08008c30 <Steering_angle_ISR>:

void Steering_angle_ISR(){
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0
	counter_pwm_steering_angle_timer=0;
 8008c34:	4b06      	ldr	r3, [pc, #24]	@ (8008c50 <Steering_angle_ISR+0x20>)
 8008c36:	2200      	movs	r2, #0
 8008c38:	601a      	str	r2, [r3, #0]
	HAL_TIM_IC_Start_IT(steering_angle_TIM,TIM_CHANNEL_1);
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	4805      	ldr	r0, [pc, #20]	@ (8008c54 <Steering_angle_ISR+0x24>)
 8008c3e:	f00a f90f 	bl	8012e60 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(steering_angle_TIM,TIM_CHANNEL_2);
 8008c42:	2104      	movs	r1, #4
 8008c44:	4803      	ldr	r0, [pc, #12]	@ (8008c54 <Steering_angle_ISR+0x24>)
 8008c46:	f009 ffcd 	bl	8012be4 <HAL_TIM_IC_Start>
};
 8008c4a:	bf00      	nop
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	2000042c 	.word	0x2000042c
 8008c54:	20000e78 	.word	0x20000e78

08008c58 <update_memBlock_nr>:
#include "eMMC.h"


// --- escreve memBlock no bloco 0 ---
void update_memBlock_nr(void) {
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0
    memset(sector0, 0x00, sizeof(sector0));          // opcional
 8008c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c60:	2100      	movs	r1, #0
 8008c62:	480b      	ldr	r0, [pc, #44]	@ (8008c90 <update_memBlock_nr+0x38>)
 8008c64:	f00e fa00 	bl	8017068 <memset>
    memcpy(sector0, &memBlock, sizeof(memBlock));    // guarda nos 4 primeiros bytes
 8008c68:	4b0a      	ldr	r3, [pc, #40]	@ (8008c94 <update_memBlock_nr+0x3c>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a08      	ldr	r2, [pc, #32]	@ (8008c90 <update_memBlock_nr+0x38>)
 8008c6e:	6013      	str	r3, [r2, #0]

    if (MMC_WriteBlocks(0, 1, sector0) == MMC_OK) {
 8008c70:	4a07      	ldr	r2, [pc, #28]	@ (8008c90 <update_memBlock_nr+0x38>)
 8008c72:	2101      	movs	r1, #1
 8008c74:	2000      	movs	r0, #0
 8008c76:	f000 fd33 	bl	80096e0 <MMC_WriteBlocks>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d005      	beq.n	8008c8c <update_memBlock_nr+0x34>
        //snprintf(uart_msg, sizeof(uart_msg), "Bloco mem atualizado OK (%lu)\r\n", (unsigned long)memBlock);
    } else {
        snprintf(uart_msg, sizeof(uart_msg), "Erro bloco mem não atualizado\r\n");
 8008c80:	4a05      	ldr	r2, [pc, #20]	@ (8008c98 <update_memBlock_nr+0x40>)
 8008c82:	f240 411a 	movw	r1, #1050	@ 0x41a
 8008c86:	4805      	ldr	r0, [pc, #20]	@ (8008c9c <update_memBlock_nr+0x44>)
 8008c88:	f00e f8a4 	bl	8016dd4 <sniprintf>
    }
    //HAL_UART_Transmit(&huart2, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
}
 8008c8c:	bf00      	nop
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	20000430 	.word	0x20000430
 8008c94:	200001fc 	.word	0x200001fc
 8008c98:	0801a670 	.word	0x0801a670
 8008c9c:	20002fa4 	.word	0x20002fa4

08008ca0 <get_memBlock_nr>:

// --- lê memBlock do bloco 0 ---
void get_memBlock_nr(void) {
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
    if (MMC_ReadBlocks(0, 1, sector0read) != MMC_OK) {
 8008ca6:	4a2c      	ldr	r2, [pc, #176]	@ (8008d58 <get_memBlock_nr+0xb8>)
 8008ca8:	2101      	movs	r1, #1
 8008caa:	2000      	movs	r0, #0
 8008cac:	f000 fd7c 	bl	80097a8 <MMC_ReadBlocks>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d011      	beq.n	8008cda <get_memBlock_nr+0x3a>
        snprintf(uart_msg, sizeof(uart_msg), "Erro na leitura do ultimo bloco escrito\r\n");
 8008cb6:	4a29      	ldr	r2, [pc, #164]	@ (8008d5c <get_memBlock_nr+0xbc>)
 8008cb8:	f240 411a 	movw	r1, #1050	@ 0x41a
 8008cbc:	4828      	ldr	r0, [pc, #160]	@ (8008d60 <get_memBlock_nr+0xc0>)
 8008cbe:	f00e f889 	bl	8016dd4 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 8008cc2:	4827      	ldr	r0, [pc, #156]	@ (8008d60 <get_memBlock_nr+0xc0>)
 8008cc4:	f7f7 faf4 	bl	80002b0 <strlen>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd0:	4923      	ldr	r1, [pc, #140]	@ (8008d60 <get_memBlock_nr+0xc0>)
 8008cd2:	4824      	ldr	r0, [pc, #144]	@ (8008d64 <get_memBlock_nr+0xc4>)
 8008cd4:	f00b f8e6 	bl	8013ea4 <HAL_UART_Transmit>
        return;
 8008cd8:	e03b      	b.n	8008d52 <get_memBlock_nr+0xb2>
    }

    // Espera a transferência finalizar
    uint32_t t0 = HAL_GetTick();
 8008cda:	f003 fb31 	bl	800c340 <HAL_GetTick>
 8008cde:	6078      	str	r0, [r7, #4]
    while (HAL_MMC_GetCardState(&hmmc) != HAL_MMC_CARD_TRANSFER) {
 8008ce0:	e01a      	b.n	8008d18 <get_memBlock_nr+0x78>
        if ((HAL_GetTick() - t0) > MMC_TIMEOUT) {     // usa o mesmo MMC_TIMEOUT=10000U
 8008ce2:	f003 fb2d 	bl	800c340 <HAL_GetTick>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d911      	bls.n	8008d18 <get_memBlock_nr+0x78>
            snprintf(uart_msg, sizeof(uart_msg), "Timeout na leitura do ultimo bloco escrito\r\n");
 8008cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8008d68 <get_memBlock_nr+0xc8>)
 8008cf6:	f240 411a 	movw	r1, #1050	@ 0x41a
 8008cfa:	4819      	ldr	r0, [pc, #100]	@ (8008d60 <get_memBlock_nr+0xc0>)
 8008cfc:	f00e f86a 	bl	8016dd4 <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 8008d00:	4817      	ldr	r0, [pc, #92]	@ (8008d60 <get_memBlock_nr+0xc0>)
 8008d02:	f7f7 fad5 	bl	80002b0 <strlen>
 8008d06:	4603      	mov	r3, r0
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d0e:	4914      	ldr	r1, [pc, #80]	@ (8008d60 <get_memBlock_nr+0xc0>)
 8008d10:	4814      	ldr	r0, [pc, #80]	@ (8008d64 <get_memBlock_nr+0xc4>)
 8008d12:	f00b f8c7 	bl	8013ea4 <HAL_UART_Transmit>
            return;
 8008d16:	e01c      	b.n	8008d52 <get_memBlock_nr+0xb2>
    while (HAL_MMC_GetCardState(&hmmc) != HAL_MMC_CARD_TRANSFER) {
 8008d18:	4814      	ldr	r0, [pc, #80]	@ (8008d6c <get_memBlock_nr+0xcc>)
 8008d1a:	f006 fe63 	bl	800f9e4 <HAL_MMC_GetCardState>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b04      	cmp	r3, #4
 8008d22:	d1de      	bne.n	8008ce2 <get_memBlock_nr+0x42>
        }
    }

    // Recupera o valor
    memcpy(&memBlock, sector0read, sizeof(memBlock));
 8008d24:	4b0c      	ldr	r3, [pc, #48]	@ (8008d58 <get_memBlock_nr+0xb8>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a11      	ldr	r2, [pc, #68]	@ (8008d70 <get_memBlock_nr+0xd0>)
 8008d2a:	6013      	str	r3, [r2, #0]
    snprintf(uart_msg, sizeof(uart_msg), "Leitura OK. memBlock=%lu\r\n", (unsigned long)memBlock);
 8008d2c:	4b10      	ldr	r3, [pc, #64]	@ (8008d70 <get_memBlock_nr+0xd0>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a10      	ldr	r2, [pc, #64]	@ (8008d74 <get_memBlock_nr+0xd4>)
 8008d32:	f240 411a 	movw	r1, #1050	@ 0x41a
 8008d36:	480a      	ldr	r0, [pc, #40]	@ (8008d60 <get_memBlock_nr+0xc0>)
 8008d38:	f00e f84c 	bl	8016dd4 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 8008d3c:	4808      	ldr	r0, [pc, #32]	@ (8008d60 <get_memBlock_nr+0xc0>)
 8008d3e:	f7f7 fab7 	bl	80002b0 <strlen>
 8008d42:	4603      	mov	r3, r0
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	f04f 33ff 	mov.w	r3, #4294967295
 8008d4a:	4905      	ldr	r1, [pc, #20]	@ (8008d60 <get_memBlock_nr+0xc0>)
 8008d4c:	4805      	ldr	r0, [pc, #20]	@ (8008d64 <get_memBlock_nr+0xc4>)
 8008d4e:	f00b f8a9 	bl	8013ea4 <HAL_UART_Transmit>
}
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	20000630 	.word	0x20000630
 8008d5c:	0801a694 	.word	0x0801a694
 8008d60:	20002fa4 	.word	0x20002fa4
 8008d64:	20001028 	.word	0x20001028
 8008d68:	0801a6c0 	.word	0x0801a6c0
 8008d6c:	200008c0 	.word	0x200008c0
 8008d70:	200001fc 	.word	0x200001fc
 8008d74:	0801a6f0 	.word	0x0801a6f0

08008d78 <HAL_MMC_TxCpltCallback>:


void HAL_MMC_TxCpltCallback(MMC_HandleTypeDef *hmmc) {
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
    //HAL_UART_Transmit(&huart2, (uint8_t*)"Transferência de escrita completa (DMA).\r\n", 42, HAL_MAX_DELAY);
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_MMC_RxCpltCallback>:

void HAL_MMC_RxCpltCallback(MMC_HandleTypeDef *hmmc) {
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
    //HAL_UART_Transmit(&huart2, (uint8_t*)"Transferência de leitura completa (DMA).\r\n", 42, HAL_MAX_DELAY);
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_MMC_ErrorCallback>:

void HAL_MMC_ErrorCallback(MMC_HandleTypeDef *hmmc) {
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b096      	sub	sp, #88	@ 0x58
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
    char err_msg[80];
    snprintf(err_msg, sizeof(err_msg), "Erro na transferência MMC: 0x%08lX\r\n", hmmc->ErrorCode);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dac:	f107 0008 	add.w	r0, r7, #8
 8008db0:	4a0a      	ldr	r2, [pc, #40]	@ (8008ddc <HAL_MMC_ErrorCallback+0x3c>)
 8008db2:	2150      	movs	r1, #80	@ 0x50
 8008db4:	f00e f80e 	bl	8016dd4 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)err_msg, strlen(err_msg), HAL_MAX_DELAY);
 8008db8:	f107 0308 	add.w	r3, r7, #8
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7f7 fa77 	bl	80002b0 <strlen>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	f107 0108 	add.w	r1, r7, #8
 8008dca:	f04f 33ff 	mov.w	r3, #4294967295
 8008dce:	4804      	ldr	r0, [pc, #16]	@ (8008de0 <HAL_MMC_ErrorCallback+0x40>)
 8008dd0:	f00b f868 	bl	8013ea4 <HAL_UART_Transmit>
}
 8008dd4:	bf00      	nop
 8008dd6:	3758      	adds	r7, #88	@ 0x58
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	0801a70c 	.word	0x0801a70c
 8008de0:	20001028 	.word	0x20001028

08008de4 <SDIO_DMA_Reset>:
        HAL_UART_Transmit(&huart2, (uint8_t*)"[OK] Configuração DMA TX válida.\r\n", 35, HAL_MAX_DELAY);
    }
}


void SDIO_DMA_Reset(void) {
 8008de4:	b5b0      	push	{r4, r5, r7, lr}
 8008de6:	b08a      	sub	sp, #40	@ 0x28
 8008de8:	af00      	add	r7, sp, #0
    // Aborta transferências DMA em curso (só as do SDIO/MMC)
    if (hmmc.hdmarx) {
 8008dea:	4b79      	ldr	r3, [pc, #484]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f000 820d 	beq.w	800920e <SDIO_DMA_Reset+0x42a>
        HAL_DMA_Abort(hmmc.hdmarx);
 8008df4:	4b76      	ldr	r3, [pc, #472]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f005 f8db 	bl	800dfb4 <HAL_DMA_Abort>
        __HAL_DMA_CLEAR_FLAG(hmmc.hdmarx, __HAL_DMA_GET_TC_FLAG_INDEX(hmmc.hdmarx));
 8008dfe:	4b74      	ldr	r3, [pc, #464]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	461a      	mov	r2, r3
 8008e06:	4b73      	ldr	r3, [pc, #460]	@ (8008fd4 <SDIO_DMA_Reset+0x1f0>)
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d96c      	bls.n	8008ee6 <SDIO_DMA_Reset+0x102>
 8008e0c:	4b70      	ldr	r3, [pc, #448]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a71      	ldr	r2, [pc, #452]	@ (8008fd8 <SDIO_DMA_Reset+0x1f4>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d062      	beq.n	8008ede <SDIO_DMA_Reset+0xfa>
 8008e18:	4b6d      	ldr	r3, [pc, #436]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a6f      	ldr	r2, [pc, #444]	@ (8008fdc <SDIO_DMA_Reset+0x1f8>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d05a      	beq.n	8008eda <SDIO_DMA_Reset+0xf6>
 8008e24:	4b6a      	ldr	r3, [pc, #424]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a6d      	ldr	r2, [pc, #436]	@ (8008fe0 <SDIO_DMA_Reset+0x1fc>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d052      	beq.n	8008ed6 <SDIO_DMA_Reset+0xf2>
 8008e30:	4b67      	ldr	r3, [pc, #412]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a6b      	ldr	r2, [pc, #428]	@ (8008fe4 <SDIO_DMA_Reset+0x200>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d04a      	beq.n	8008ed2 <SDIO_DMA_Reset+0xee>
 8008e3c:	4b64      	ldr	r3, [pc, #400]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a69      	ldr	r2, [pc, #420]	@ (8008fe8 <SDIO_DMA_Reset+0x204>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d041      	beq.n	8008ecc <SDIO_DMA_Reset+0xe8>
 8008e48:	4b61      	ldr	r3, [pc, #388]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a67      	ldr	r2, [pc, #412]	@ (8008fec <SDIO_DMA_Reset+0x208>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d038      	beq.n	8008ec6 <SDIO_DMA_Reset+0xe2>
 8008e54:	4b5e      	ldr	r3, [pc, #376]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a65      	ldr	r2, [pc, #404]	@ (8008ff0 <SDIO_DMA_Reset+0x20c>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d02f      	beq.n	8008ec0 <SDIO_DMA_Reset+0xdc>
 8008e60:	4b5b      	ldr	r3, [pc, #364]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a63      	ldr	r2, [pc, #396]	@ (8008ff4 <SDIO_DMA_Reset+0x210>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d026      	beq.n	8008eba <SDIO_DMA_Reset+0xd6>
 8008e6c:	4b58      	ldr	r3, [pc, #352]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a61      	ldr	r2, [pc, #388]	@ (8008ff8 <SDIO_DMA_Reset+0x214>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d01d      	beq.n	8008eb4 <SDIO_DMA_Reset+0xd0>
 8008e78:	4b55      	ldr	r3, [pc, #340]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a5f      	ldr	r2, [pc, #380]	@ (8008ffc <SDIO_DMA_Reset+0x218>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d014      	beq.n	8008eae <SDIO_DMA_Reset+0xca>
 8008e84:	4b52      	ldr	r3, [pc, #328]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a5d      	ldr	r2, [pc, #372]	@ (8009000 <SDIO_DMA_Reset+0x21c>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d00b      	beq.n	8008ea8 <SDIO_DMA_Reset+0xc4>
 8008e90:	4b4f      	ldr	r3, [pc, #316]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a5b      	ldr	r2, [pc, #364]	@ (8009004 <SDIO_DMA_Reset+0x220>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d102      	bne.n	8008ea2 <SDIO_DMA_Reset+0xbe>
 8008e9c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008ea0:	e01e      	b.n	8008ee0 <SDIO_DMA_Reset+0xfc>
 8008ea2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008ea6:	e01b      	b.n	8008ee0 <SDIO_DMA_Reset+0xfc>
 8008ea8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008eac:	e018      	b.n	8008ee0 <SDIO_DMA_Reset+0xfc>
 8008eae:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008eb2:	e015      	b.n	8008ee0 <SDIO_DMA_Reset+0xfc>
 8008eb4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008eb8:	e012      	b.n	8008ee0 <SDIO_DMA_Reset+0xfc>
 8008eba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008ebe:	e00f      	b.n	8008ee0 <SDIO_DMA_Reset+0xfc>
 8008ec0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008ec4:	e00c      	b.n	8008ee0 <SDIO_DMA_Reset+0xfc>
 8008ec6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008eca:	e009      	b.n	8008ee0 <SDIO_DMA_Reset+0xfc>
 8008ecc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008ed0:	e006      	b.n	8008ee0 <SDIO_DMA_Reset+0xfc>
 8008ed2:	2320      	movs	r3, #32
 8008ed4:	e004      	b.n	8008ee0 <SDIO_DMA_Reset+0xfc>
 8008ed6:	2320      	movs	r3, #32
 8008ed8:	e002      	b.n	8008ee0 <SDIO_DMA_Reset+0xfc>
 8008eda:	2320      	movs	r3, #32
 8008edc:	e000      	b.n	8008ee0 <SDIO_DMA_Reset+0xfc>
 8008ede:	2320      	movs	r3, #32
 8008ee0:	4a49      	ldr	r2, [pc, #292]	@ (8009008 <SDIO_DMA_Reset+0x224>)
 8008ee2:	60d3      	str	r3, [r2, #12]
 8008ee4:	e193      	b.n	800920e <SDIO_DMA_Reset+0x42a>
 8008ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	461a      	mov	r2, r3
 8008eee:	4b47      	ldr	r3, [pc, #284]	@ (800900c <SDIO_DMA_Reset+0x228>)
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	f240 808d 	bls.w	8009010 <SDIO_DMA_Reset+0x22c>
 8008ef6:	4b36      	ldr	r3, [pc, #216]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a36      	ldr	r2, [pc, #216]	@ (8008fd8 <SDIO_DMA_Reset+0x1f4>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d062      	beq.n	8008fc8 <SDIO_DMA_Reset+0x1e4>
 8008f02:	4b33      	ldr	r3, [pc, #204]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a34      	ldr	r2, [pc, #208]	@ (8008fdc <SDIO_DMA_Reset+0x1f8>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d05a      	beq.n	8008fc4 <SDIO_DMA_Reset+0x1e0>
 8008f0e:	4b30      	ldr	r3, [pc, #192]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a32      	ldr	r2, [pc, #200]	@ (8008fe0 <SDIO_DMA_Reset+0x1fc>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d052      	beq.n	8008fc0 <SDIO_DMA_Reset+0x1dc>
 8008f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a30      	ldr	r2, [pc, #192]	@ (8008fe4 <SDIO_DMA_Reset+0x200>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d04a      	beq.n	8008fbc <SDIO_DMA_Reset+0x1d8>
 8008f26:	4b2a      	ldr	r3, [pc, #168]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a2e      	ldr	r2, [pc, #184]	@ (8008fe8 <SDIO_DMA_Reset+0x204>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d041      	beq.n	8008fb6 <SDIO_DMA_Reset+0x1d2>
 8008f32:	4b27      	ldr	r3, [pc, #156]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a2c      	ldr	r2, [pc, #176]	@ (8008fec <SDIO_DMA_Reset+0x208>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d038      	beq.n	8008fb0 <SDIO_DMA_Reset+0x1cc>
 8008f3e:	4b24      	ldr	r3, [pc, #144]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a2a      	ldr	r2, [pc, #168]	@ (8008ff0 <SDIO_DMA_Reset+0x20c>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d02f      	beq.n	8008faa <SDIO_DMA_Reset+0x1c6>
 8008f4a:	4b21      	ldr	r3, [pc, #132]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a28      	ldr	r2, [pc, #160]	@ (8008ff4 <SDIO_DMA_Reset+0x210>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d026      	beq.n	8008fa4 <SDIO_DMA_Reset+0x1c0>
 8008f56:	4b1e      	ldr	r3, [pc, #120]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a26      	ldr	r2, [pc, #152]	@ (8008ff8 <SDIO_DMA_Reset+0x214>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d01d      	beq.n	8008f9e <SDIO_DMA_Reset+0x1ba>
 8008f62:	4b1b      	ldr	r3, [pc, #108]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a24      	ldr	r2, [pc, #144]	@ (8008ffc <SDIO_DMA_Reset+0x218>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d014      	beq.n	8008f98 <SDIO_DMA_Reset+0x1b4>
 8008f6e:	4b18      	ldr	r3, [pc, #96]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a22      	ldr	r2, [pc, #136]	@ (8009000 <SDIO_DMA_Reset+0x21c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d00b      	beq.n	8008f92 <SDIO_DMA_Reset+0x1ae>
 8008f7a:	4b15      	ldr	r3, [pc, #84]	@ (8008fd0 <SDIO_DMA_Reset+0x1ec>)
 8008f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a20      	ldr	r2, [pc, #128]	@ (8009004 <SDIO_DMA_Reset+0x220>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d102      	bne.n	8008f8c <SDIO_DMA_Reset+0x1a8>
 8008f86:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008f8a:	e01e      	b.n	8008fca <SDIO_DMA_Reset+0x1e6>
 8008f8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008f90:	e01b      	b.n	8008fca <SDIO_DMA_Reset+0x1e6>
 8008f92:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008f96:	e018      	b.n	8008fca <SDIO_DMA_Reset+0x1e6>
 8008f98:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008f9c:	e015      	b.n	8008fca <SDIO_DMA_Reset+0x1e6>
 8008f9e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008fa2:	e012      	b.n	8008fca <SDIO_DMA_Reset+0x1e6>
 8008fa4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008fa8:	e00f      	b.n	8008fca <SDIO_DMA_Reset+0x1e6>
 8008faa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008fae:	e00c      	b.n	8008fca <SDIO_DMA_Reset+0x1e6>
 8008fb0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008fb4:	e009      	b.n	8008fca <SDIO_DMA_Reset+0x1e6>
 8008fb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008fba:	e006      	b.n	8008fca <SDIO_DMA_Reset+0x1e6>
 8008fbc:	2320      	movs	r3, #32
 8008fbe:	e004      	b.n	8008fca <SDIO_DMA_Reset+0x1e6>
 8008fc0:	2320      	movs	r3, #32
 8008fc2:	e002      	b.n	8008fca <SDIO_DMA_Reset+0x1e6>
 8008fc4:	2320      	movs	r3, #32
 8008fc6:	e000      	b.n	8008fca <SDIO_DMA_Reset+0x1e6>
 8008fc8:	2320      	movs	r3, #32
 8008fca:	4a0f      	ldr	r2, [pc, #60]	@ (8009008 <SDIO_DMA_Reset+0x224>)
 8008fcc:	6093      	str	r3, [r2, #8]
 8008fce:	e11e      	b.n	800920e <SDIO_DMA_Reset+0x42a>
 8008fd0:	200008c0 	.word	0x200008c0
 8008fd4:	40026458 	.word	0x40026458
 8008fd8:	40026010 	.word	0x40026010
 8008fdc:	40026410 	.word	0x40026410
 8008fe0:	40026070 	.word	0x40026070
 8008fe4:	40026470 	.word	0x40026470
 8008fe8:	40026028 	.word	0x40026028
 8008fec:	40026428 	.word	0x40026428
 8008ff0:	40026088 	.word	0x40026088
 8008ff4:	40026488 	.word	0x40026488
 8008ff8:	40026040 	.word	0x40026040
 8008ffc:	40026440 	.word	0x40026440
 8009000:	400260a0 	.word	0x400260a0
 8009004:	400264a0 	.word	0x400264a0
 8009008:	40026400 	.word	0x40026400
 800900c:	400260b8 	.word	0x400260b8
 8009010:	4b6e      	ldr	r3, [pc, #440]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	4b6d      	ldr	r3, [pc, #436]	@ (80091d0 <SDIO_DMA_Reset+0x3ec>)
 800901a:	429a      	cmp	r2, r3
 800901c:	d96c      	bls.n	80090f8 <SDIO_DMA_Reset+0x314>
 800901e:	4b6b      	ldr	r3, [pc, #428]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a6b      	ldr	r2, [pc, #428]	@ (80091d4 <SDIO_DMA_Reset+0x3f0>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d062      	beq.n	80090f0 <SDIO_DMA_Reset+0x30c>
 800902a:	4b68      	ldr	r3, [pc, #416]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 800902c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a69      	ldr	r2, [pc, #420]	@ (80091d8 <SDIO_DMA_Reset+0x3f4>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d05a      	beq.n	80090ec <SDIO_DMA_Reset+0x308>
 8009036:	4b65      	ldr	r3, [pc, #404]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a67      	ldr	r2, [pc, #412]	@ (80091dc <SDIO_DMA_Reset+0x3f8>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d052      	beq.n	80090e8 <SDIO_DMA_Reset+0x304>
 8009042:	4b62      	ldr	r3, [pc, #392]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a65      	ldr	r2, [pc, #404]	@ (80091e0 <SDIO_DMA_Reset+0x3fc>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d04a      	beq.n	80090e4 <SDIO_DMA_Reset+0x300>
 800904e:	4b5f      	ldr	r3, [pc, #380]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a63      	ldr	r2, [pc, #396]	@ (80091e4 <SDIO_DMA_Reset+0x400>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d041      	beq.n	80090de <SDIO_DMA_Reset+0x2fa>
 800905a:	4b5c      	ldr	r3, [pc, #368]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 800905c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a61      	ldr	r2, [pc, #388]	@ (80091e8 <SDIO_DMA_Reset+0x404>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d038      	beq.n	80090d8 <SDIO_DMA_Reset+0x2f4>
 8009066:	4b59      	ldr	r3, [pc, #356]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a5f      	ldr	r2, [pc, #380]	@ (80091ec <SDIO_DMA_Reset+0x408>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d02f      	beq.n	80090d2 <SDIO_DMA_Reset+0x2ee>
 8009072:	4b56      	ldr	r3, [pc, #344]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a5d      	ldr	r2, [pc, #372]	@ (80091f0 <SDIO_DMA_Reset+0x40c>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d026      	beq.n	80090cc <SDIO_DMA_Reset+0x2e8>
 800907e:	4b53      	ldr	r3, [pc, #332]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a5b      	ldr	r2, [pc, #364]	@ (80091f4 <SDIO_DMA_Reset+0x410>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d01d      	beq.n	80090c6 <SDIO_DMA_Reset+0x2e2>
 800908a:	4b50      	ldr	r3, [pc, #320]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 800908c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a59      	ldr	r2, [pc, #356]	@ (80091f8 <SDIO_DMA_Reset+0x414>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d014      	beq.n	80090c0 <SDIO_DMA_Reset+0x2dc>
 8009096:	4b4d      	ldr	r3, [pc, #308]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a57      	ldr	r2, [pc, #348]	@ (80091fc <SDIO_DMA_Reset+0x418>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d00b      	beq.n	80090ba <SDIO_DMA_Reset+0x2d6>
 80090a2:	4b4a      	ldr	r3, [pc, #296]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 80090a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a55      	ldr	r2, [pc, #340]	@ (8009200 <SDIO_DMA_Reset+0x41c>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d102      	bne.n	80090b4 <SDIO_DMA_Reset+0x2d0>
 80090ae:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80090b2:	e01e      	b.n	80090f2 <SDIO_DMA_Reset+0x30e>
 80090b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80090b8:	e01b      	b.n	80090f2 <SDIO_DMA_Reset+0x30e>
 80090ba:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80090be:	e018      	b.n	80090f2 <SDIO_DMA_Reset+0x30e>
 80090c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80090c4:	e015      	b.n	80090f2 <SDIO_DMA_Reset+0x30e>
 80090c6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80090ca:	e012      	b.n	80090f2 <SDIO_DMA_Reset+0x30e>
 80090cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80090d0:	e00f      	b.n	80090f2 <SDIO_DMA_Reset+0x30e>
 80090d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80090d6:	e00c      	b.n	80090f2 <SDIO_DMA_Reset+0x30e>
 80090d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80090dc:	e009      	b.n	80090f2 <SDIO_DMA_Reset+0x30e>
 80090de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80090e2:	e006      	b.n	80090f2 <SDIO_DMA_Reset+0x30e>
 80090e4:	2320      	movs	r3, #32
 80090e6:	e004      	b.n	80090f2 <SDIO_DMA_Reset+0x30e>
 80090e8:	2320      	movs	r3, #32
 80090ea:	e002      	b.n	80090f2 <SDIO_DMA_Reset+0x30e>
 80090ec:	2320      	movs	r3, #32
 80090ee:	e000      	b.n	80090f2 <SDIO_DMA_Reset+0x30e>
 80090f0:	2320      	movs	r3, #32
 80090f2:	4a44      	ldr	r2, [pc, #272]	@ (8009204 <SDIO_DMA_Reset+0x420>)
 80090f4:	60d3      	str	r3, [r2, #12]
 80090f6:	e08a      	b.n	800920e <SDIO_DMA_Reset+0x42a>
 80090f8:	4b34      	ldr	r3, [pc, #208]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 80090fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a35      	ldr	r2, [pc, #212]	@ (80091d4 <SDIO_DMA_Reset+0x3f0>)
 8009100:	4293      	cmp	r3, r2
 8009102:	f000 8081 	beq.w	8009208 <SDIO_DMA_Reset+0x424>
 8009106:	4b31      	ldr	r3, [pc, #196]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a32      	ldr	r2, [pc, #200]	@ (80091d8 <SDIO_DMA_Reset+0x3f4>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d05a      	beq.n	80091c8 <SDIO_DMA_Reset+0x3e4>
 8009112:	4b2e      	ldr	r3, [pc, #184]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a30      	ldr	r2, [pc, #192]	@ (80091dc <SDIO_DMA_Reset+0x3f8>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d052      	beq.n	80091c4 <SDIO_DMA_Reset+0x3e0>
 800911e:	4b2b      	ldr	r3, [pc, #172]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a2e      	ldr	r2, [pc, #184]	@ (80091e0 <SDIO_DMA_Reset+0x3fc>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d04a      	beq.n	80091c0 <SDIO_DMA_Reset+0x3dc>
 800912a:	4b28      	ldr	r3, [pc, #160]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 800912c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a2c      	ldr	r2, [pc, #176]	@ (80091e4 <SDIO_DMA_Reset+0x400>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d041      	beq.n	80091ba <SDIO_DMA_Reset+0x3d6>
 8009136:	4b25      	ldr	r3, [pc, #148]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a2a      	ldr	r2, [pc, #168]	@ (80091e8 <SDIO_DMA_Reset+0x404>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d038      	beq.n	80091b4 <SDIO_DMA_Reset+0x3d0>
 8009142:	4b22      	ldr	r3, [pc, #136]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a28      	ldr	r2, [pc, #160]	@ (80091ec <SDIO_DMA_Reset+0x408>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d02f      	beq.n	80091ae <SDIO_DMA_Reset+0x3ca>
 800914e:	4b1f      	ldr	r3, [pc, #124]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a26      	ldr	r2, [pc, #152]	@ (80091f0 <SDIO_DMA_Reset+0x40c>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d026      	beq.n	80091a8 <SDIO_DMA_Reset+0x3c4>
 800915a:	4b1c      	ldr	r3, [pc, #112]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 800915c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a24      	ldr	r2, [pc, #144]	@ (80091f4 <SDIO_DMA_Reset+0x410>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d01d      	beq.n	80091a2 <SDIO_DMA_Reset+0x3be>
 8009166:	4b19      	ldr	r3, [pc, #100]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a22      	ldr	r2, [pc, #136]	@ (80091f8 <SDIO_DMA_Reset+0x414>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d014      	beq.n	800919c <SDIO_DMA_Reset+0x3b8>
 8009172:	4b16      	ldr	r3, [pc, #88]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a20      	ldr	r2, [pc, #128]	@ (80091fc <SDIO_DMA_Reset+0x418>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d00b      	beq.n	8009196 <SDIO_DMA_Reset+0x3b2>
 800917e:	4b13      	ldr	r3, [pc, #76]	@ (80091cc <SDIO_DMA_Reset+0x3e8>)
 8009180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a1e      	ldr	r2, [pc, #120]	@ (8009200 <SDIO_DMA_Reset+0x41c>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d102      	bne.n	8009190 <SDIO_DMA_Reset+0x3ac>
 800918a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800918e:	e03c      	b.n	800920a <SDIO_DMA_Reset+0x426>
 8009190:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009194:	e039      	b.n	800920a <SDIO_DMA_Reset+0x426>
 8009196:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800919a:	e036      	b.n	800920a <SDIO_DMA_Reset+0x426>
 800919c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80091a0:	e033      	b.n	800920a <SDIO_DMA_Reset+0x426>
 80091a2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80091a6:	e030      	b.n	800920a <SDIO_DMA_Reset+0x426>
 80091a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80091ac:	e02d      	b.n	800920a <SDIO_DMA_Reset+0x426>
 80091ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80091b2:	e02a      	b.n	800920a <SDIO_DMA_Reset+0x426>
 80091b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80091b8:	e027      	b.n	800920a <SDIO_DMA_Reset+0x426>
 80091ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80091be:	e024      	b.n	800920a <SDIO_DMA_Reset+0x426>
 80091c0:	2320      	movs	r3, #32
 80091c2:	e022      	b.n	800920a <SDIO_DMA_Reset+0x426>
 80091c4:	2320      	movs	r3, #32
 80091c6:	e020      	b.n	800920a <SDIO_DMA_Reset+0x426>
 80091c8:	2320      	movs	r3, #32
 80091ca:	e01e      	b.n	800920a <SDIO_DMA_Reset+0x426>
 80091cc:	200008c0 	.word	0x200008c0
 80091d0:	40026058 	.word	0x40026058
 80091d4:	40026010 	.word	0x40026010
 80091d8:	40026410 	.word	0x40026410
 80091dc:	40026070 	.word	0x40026070
 80091e0:	40026470 	.word	0x40026470
 80091e4:	40026028 	.word	0x40026028
 80091e8:	40026428 	.word	0x40026428
 80091ec:	40026088 	.word	0x40026088
 80091f0:	40026488 	.word	0x40026488
 80091f4:	40026040 	.word	0x40026040
 80091f8:	40026440 	.word	0x40026440
 80091fc:	400260a0 	.word	0x400260a0
 8009200:	400264a0 	.word	0x400264a0
 8009204:	40026000 	.word	0x40026000
 8009208:	2320      	movs	r3, #32
 800920a:	4a7a      	ldr	r2, [pc, #488]	@ (80093f4 <SDIO_DMA_Reset+0x610>)
 800920c:	6093      	str	r3, [r2, #8]
    }
    if (hmmc.hdmatx) {
 800920e:	4b7a      	ldr	r3, [pc, #488]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 8009210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 820f 	beq.w	8009636 <SDIO_DMA_Reset+0x852>
        HAL_DMA_Abort(hmmc.hdmatx);
 8009218:	4b77      	ldr	r3, [pc, #476]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 800921a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800921c:	4618      	mov	r0, r3
 800921e:	f004 fec9 	bl	800dfb4 <HAL_DMA_Abort>
        __HAL_DMA_CLEAR_FLAG(hmmc.hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(hmmc.hdmatx));
 8009222:	4b75      	ldr	r3, [pc, #468]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 8009224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	461a      	mov	r2, r3
 800922a:	4b74      	ldr	r3, [pc, #464]	@ (80093fc <SDIO_DMA_Reset+0x618>)
 800922c:	429a      	cmp	r2, r3
 800922e:	d96c      	bls.n	800930a <SDIO_DMA_Reset+0x526>
 8009230:	4b71      	ldr	r3, [pc, #452]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 8009232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a72      	ldr	r2, [pc, #456]	@ (8009400 <SDIO_DMA_Reset+0x61c>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d062      	beq.n	8009302 <SDIO_DMA_Reset+0x51e>
 800923c:	4b6e      	ldr	r3, [pc, #440]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 800923e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a70      	ldr	r2, [pc, #448]	@ (8009404 <SDIO_DMA_Reset+0x620>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d05a      	beq.n	80092fe <SDIO_DMA_Reset+0x51a>
 8009248:	4b6b      	ldr	r3, [pc, #428]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 800924a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a6e      	ldr	r2, [pc, #440]	@ (8009408 <SDIO_DMA_Reset+0x624>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d052      	beq.n	80092fa <SDIO_DMA_Reset+0x516>
 8009254:	4b68      	ldr	r3, [pc, #416]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 8009256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a6c      	ldr	r2, [pc, #432]	@ (800940c <SDIO_DMA_Reset+0x628>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d04a      	beq.n	80092f6 <SDIO_DMA_Reset+0x512>
 8009260:	4b65      	ldr	r3, [pc, #404]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 8009262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a6a      	ldr	r2, [pc, #424]	@ (8009410 <SDIO_DMA_Reset+0x62c>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d041      	beq.n	80092f0 <SDIO_DMA_Reset+0x50c>
 800926c:	4b62      	ldr	r3, [pc, #392]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 800926e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a68      	ldr	r2, [pc, #416]	@ (8009414 <SDIO_DMA_Reset+0x630>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d038      	beq.n	80092ea <SDIO_DMA_Reset+0x506>
 8009278:	4b5f      	ldr	r3, [pc, #380]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 800927a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a66      	ldr	r2, [pc, #408]	@ (8009418 <SDIO_DMA_Reset+0x634>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d02f      	beq.n	80092e4 <SDIO_DMA_Reset+0x500>
 8009284:	4b5c      	ldr	r3, [pc, #368]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 8009286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a64      	ldr	r2, [pc, #400]	@ (800941c <SDIO_DMA_Reset+0x638>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d026      	beq.n	80092de <SDIO_DMA_Reset+0x4fa>
 8009290:	4b59      	ldr	r3, [pc, #356]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 8009292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a62      	ldr	r2, [pc, #392]	@ (8009420 <SDIO_DMA_Reset+0x63c>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d01d      	beq.n	80092d8 <SDIO_DMA_Reset+0x4f4>
 800929c:	4b56      	ldr	r3, [pc, #344]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 800929e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a60      	ldr	r2, [pc, #384]	@ (8009424 <SDIO_DMA_Reset+0x640>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d014      	beq.n	80092d2 <SDIO_DMA_Reset+0x4ee>
 80092a8:	4b53      	ldr	r3, [pc, #332]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 80092aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a5e      	ldr	r2, [pc, #376]	@ (8009428 <SDIO_DMA_Reset+0x644>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d00b      	beq.n	80092cc <SDIO_DMA_Reset+0x4e8>
 80092b4:	4b50      	ldr	r3, [pc, #320]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 80092b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a5c      	ldr	r2, [pc, #368]	@ (800942c <SDIO_DMA_Reset+0x648>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d102      	bne.n	80092c6 <SDIO_DMA_Reset+0x4e2>
 80092c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80092c4:	e01e      	b.n	8009304 <SDIO_DMA_Reset+0x520>
 80092c6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80092ca:	e01b      	b.n	8009304 <SDIO_DMA_Reset+0x520>
 80092cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80092d0:	e018      	b.n	8009304 <SDIO_DMA_Reset+0x520>
 80092d2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80092d6:	e015      	b.n	8009304 <SDIO_DMA_Reset+0x520>
 80092d8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80092dc:	e012      	b.n	8009304 <SDIO_DMA_Reset+0x520>
 80092de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80092e2:	e00f      	b.n	8009304 <SDIO_DMA_Reset+0x520>
 80092e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80092e8:	e00c      	b.n	8009304 <SDIO_DMA_Reset+0x520>
 80092ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80092ee:	e009      	b.n	8009304 <SDIO_DMA_Reset+0x520>
 80092f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80092f4:	e006      	b.n	8009304 <SDIO_DMA_Reset+0x520>
 80092f6:	2320      	movs	r3, #32
 80092f8:	e004      	b.n	8009304 <SDIO_DMA_Reset+0x520>
 80092fa:	2320      	movs	r3, #32
 80092fc:	e002      	b.n	8009304 <SDIO_DMA_Reset+0x520>
 80092fe:	2320      	movs	r3, #32
 8009300:	e000      	b.n	8009304 <SDIO_DMA_Reset+0x520>
 8009302:	2320      	movs	r3, #32
 8009304:	4a4a      	ldr	r2, [pc, #296]	@ (8009430 <SDIO_DMA_Reset+0x64c>)
 8009306:	60d3      	str	r3, [r2, #12]
 8009308:	e195      	b.n	8009636 <SDIO_DMA_Reset+0x852>
 800930a:	4b3b      	ldr	r3, [pc, #236]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 800930c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	461a      	mov	r2, r3
 8009312:	4b48      	ldr	r3, [pc, #288]	@ (8009434 <SDIO_DMA_Reset+0x650>)
 8009314:	429a      	cmp	r2, r3
 8009316:	f240 808f 	bls.w	8009438 <SDIO_DMA_Reset+0x654>
 800931a:	4b37      	ldr	r3, [pc, #220]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 800931c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a37      	ldr	r2, [pc, #220]	@ (8009400 <SDIO_DMA_Reset+0x61c>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d062      	beq.n	80093ec <SDIO_DMA_Reset+0x608>
 8009326:	4b34      	ldr	r3, [pc, #208]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 8009328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a35      	ldr	r2, [pc, #212]	@ (8009404 <SDIO_DMA_Reset+0x620>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d05a      	beq.n	80093e8 <SDIO_DMA_Reset+0x604>
 8009332:	4b31      	ldr	r3, [pc, #196]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 8009334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a33      	ldr	r2, [pc, #204]	@ (8009408 <SDIO_DMA_Reset+0x624>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d052      	beq.n	80093e4 <SDIO_DMA_Reset+0x600>
 800933e:	4b2e      	ldr	r3, [pc, #184]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 8009340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a31      	ldr	r2, [pc, #196]	@ (800940c <SDIO_DMA_Reset+0x628>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d04a      	beq.n	80093e0 <SDIO_DMA_Reset+0x5fc>
 800934a:	4b2b      	ldr	r3, [pc, #172]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 800934c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a2f      	ldr	r2, [pc, #188]	@ (8009410 <SDIO_DMA_Reset+0x62c>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d041      	beq.n	80093da <SDIO_DMA_Reset+0x5f6>
 8009356:	4b28      	ldr	r3, [pc, #160]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 8009358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a2d      	ldr	r2, [pc, #180]	@ (8009414 <SDIO_DMA_Reset+0x630>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d038      	beq.n	80093d4 <SDIO_DMA_Reset+0x5f0>
 8009362:	4b25      	ldr	r3, [pc, #148]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 8009364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a2b      	ldr	r2, [pc, #172]	@ (8009418 <SDIO_DMA_Reset+0x634>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d02f      	beq.n	80093ce <SDIO_DMA_Reset+0x5ea>
 800936e:	4b22      	ldr	r3, [pc, #136]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 8009370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a29      	ldr	r2, [pc, #164]	@ (800941c <SDIO_DMA_Reset+0x638>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d026      	beq.n	80093c8 <SDIO_DMA_Reset+0x5e4>
 800937a:	4b1f      	ldr	r3, [pc, #124]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 800937c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a27      	ldr	r2, [pc, #156]	@ (8009420 <SDIO_DMA_Reset+0x63c>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d01d      	beq.n	80093c2 <SDIO_DMA_Reset+0x5de>
 8009386:	4b1c      	ldr	r3, [pc, #112]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 8009388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a25      	ldr	r2, [pc, #148]	@ (8009424 <SDIO_DMA_Reset+0x640>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d014      	beq.n	80093bc <SDIO_DMA_Reset+0x5d8>
 8009392:	4b19      	ldr	r3, [pc, #100]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 8009394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a23      	ldr	r2, [pc, #140]	@ (8009428 <SDIO_DMA_Reset+0x644>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d00b      	beq.n	80093b6 <SDIO_DMA_Reset+0x5d2>
 800939e:	4b16      	ldr	r3, [pc, #88]	@ (80093f8 <SDIO_DMA_Reset+0x614>)
 80093a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a21      	ldr	r2, [pc, #132]	@ (800942c <SDIO_DMA_Reset+0x648>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d102      	bne.n	80093b0 <SDIO_DMA_Reset+0x5cc>
 80093aa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80093ae:	e01e      	b.n	80093ee <SDIO_DMA_Reset+0x60a>
 80093b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80093b4:	e01b      	b.n	80093ee <SDIO_DMA_Reset+0x60a>
 80093b6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80093ba:	e018      	b.n	80093ee <SDIO_DMA_Reset+0x60a>
 80093bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80093c0:	e015      	b.n	80093ee <SDIO_DMA_Reset+0x60a>
 80093c2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80093c6:	e012      	b.n	80093ee <SDIO_DMA_Reset+0x60a>
 80093c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80093cc:	e00f      	b.n	80093ee <SDIO_DMA_Reset+0x60a>
 80093ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80093d2:	e00c      	b.n	80093ee <SDIO_DMA_Reset+0x60a>
 80093d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80093d8:	e009      	b.n	80093ee <SDIO_DMA_Reset+0x60a>
 80093da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80093de:	e006      	b.n	80093ee <SDIO_DMA_Reset+0x60a>
 80093e0:	2320      	movs	r3, #32
 80093e2:	e004      	b.n	80093ee <SDIO_DMA_Reset+0x60a>
 80093e4:	2320      	movs	r3, #32
 80093e6:	e002      	b.n	80093ee <SDIO_DMA_Reset+0x60a>
 80093e8:	2320      	movs	r3, #32
 80093ea:	e000      	b.n	80093ee <SDIO_DMA_Reset+0x60a>
 80093ec:	2320      	movs	r3, #32
 80093ee:	4a10      	ldr	r2, [pc, #64]	@ (8009430 <SDIO_DMA_Reset+0x64c>)
 80093f0:	6093      	str	r3, [r2, #8]
 80093f2:	e120      	b.n	8009636 <SDIO_DMA_Reset+0x852>
 80093f4:	40026000 	.word	0x40026000
 80093f8:	200008c0 	.word	0x200008c0
 80093fc:	40026458 	.word	0x40026458
 8009400:	40026010 	.word	0x40026010
 8009404:	40026410 	.word	0x40026410
 8009408:	40026070 	.word	0x40026070
 800940c:	40026470 	.word	0x40026470
 8009410:	40026028 	.word	0x40026028
 8009414:	40026428 	.word	0x40026428
 8009418:	40026088 	.word	0x40026088
 800941c:	40026488 	.word	0x40026488
 8009420:	40026040 	.word	0x40026040
 8009424:	40026440 	.word	0x40026440
 8009428:	400260a0 	.word	0x400260a0
 800942c:	400264a0 	.word	0x400264a0
 8009430:	40026400 	.word	0x40026400
 8009434:	400260b8 	.word	0x400260b8
 8009438:	4b6e      	ldr	r3, [pc, #440]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 800943a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	461a      	mov	r2, r3
 8009440:	4b6d      	ldr	r3, [pc, #436]	@ (80095f8 <SDIO_DMA_Reset+0x814>)
 8009442:	429a      	cmp	r2, r3
 8009444:	d96c      	bls.n	8009520 <SDIO_DMA_Reset+0x73c>
 8009446:	4b6b      	ldr	r3, [pc, #428]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 8009448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a6b      	ldr	r2, [pc, #428]	@ (80095fc <SDIO_DMA_Reset+0x818>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d062      	beq.n	8009518 <SDIO_DMA_Reset+0x734>
 8009452:	4b68      	ldr	r3, [pc, #416]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 8009454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a69      	ldr	r2, [pc, #420]	@ (8009600 <SDIO_DMA_Reset+0x81c>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d05a      	beq.n	8009514 <SDIO_DMA_Reset+0x730>
 800945e:	4b65      	ldr	r3, [pc, #404]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 8009460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a67      	ldr	r2, [pc, #412]	@ (8009604 <SDIO_DMA_Reset+0x820>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d052      	beq.n	8009510 <SDIO_DMA_Reset+0x72c>
 800946a:	4b62      	ldr	r3, [pc, #392]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 800946c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a65      	ldr	r2, [pc, #404]	@ (8009608 <SDIO_DMA_Reset+0x824>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d04a      	beq.n	800950c <SDIO_DMA_Reset+0x728>
 8009476:	4b5f      	ldr	r3, [pc, #380]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 8009478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a63      	ldr	r2, [pc, #396]	@ (800960c <SDIO_DMA_Reset+0x828>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d041      	beq.n	8009506 <SDIO_DMA_Reset+0x722>
 8009482:	4b5c      	ldr	r3, [pc, #368]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 8009484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a61      	ldr	r2, [pc, #388]	@ (8009610 <SDIO_DMA_Reset+0x82c>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d038      	beq.n	8009500 <SDIO_DMA_Reset+0x71c>
 800948e:	4b59      	ldr	r3, [pc, #356]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 8009490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a5f      	ldr	r2, [pc, #380]	@ (8009614 <SDIO_DMA_Reset+0x830>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d02f      	beq.n	80094fa <SDIO_DMA_Reset+0x716>
 800949a:	4b56      	ldr	r3, [pc, #344]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 800949c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a5d      	ldr	r2, [pc, #372]	@ (8009618 <SDIO_DMA_Reset+0x834>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d026      	beq.n	80094f4 <SDIO_DMA_Reset+0x710>
 80094a6:	4b53      	ldr	r3, [pc, #332]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 80094a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a5b      	ldr	r2, [pc, #364]	@ (800961c <SDIO_DMA_Reset+0x838>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d01d      	beq.n	80094ee <SDIO_DMA_Reset+0x70a>
 80094b2:	4b50      	ldr	r3, [pc, #320]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 80094b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a59      	ldr	r2, [pc, #356]	@ (8009620 <SDIO_DMA_Reset+0x83c>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d014      	beq.n	80094e8 <SDIO_DMA_Reset+0x704>
 80094be:	4b4d      	ldr	r3, [pc, #308]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 80094c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a57      	ldr	r2, [pc, #348]	@ (8009624 <SDIO_DMA_Reset+0x840>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d00b      	beq.n	80094e2 <SDIO_DMA_Reset+0x6fe>
 80094ca:	4b4a      	ldr	r3, [pc, #296]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 80094cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a55      	ldr	r2, [pc, #340]	@ (8009628 <SDIO_DMA_Reset+0x844>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d102      	bne.n	80094dc <SDIO_DMA_Reset+0x6f8>
 80094d6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80094da:	e01e      	b.n	800951a <SDIO_DMA_Reset+0x736>
 80094dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80094e0:	e01b      	b.n	800951a <SDIO_DMA_Reset+0x736>
 80094e2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80094e6:	e018      	b.n	800951a <SDIO_DMA_Reset+0x736>
 80094e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80094ec:	e015      	b.n	800951a <SDIO_DMA_Reset+0x736>
 80094ee:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80094f2:	e012      	b.n	800951a <SDIO_DMA_Reset+0x736>
 80094f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80094f8:	e00f      	b.n	800951a <SDIO_DMA_Reset+0x736>
 80094fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80094fe:	e00c      	b.n	800951a <SDIO_DMA_Reset+0x736>
 8009500:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009504:	e009      	b.n	800951a <SDIO_DMA_Reset+0x736>
 8009506:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800950a:	e006      	b.n	800951a <SDIO_DMA_Reset+0x736>
 800950c:	2320      	movs	r3, #32
 800950e:	e004      	b.n	800951a <SDIO_DMA_Reset+0x736>
 8009510:	2320      	movs	r3, #32
 8009512:	e002      	b.n	800951a <SDIO_DMA_Reset+0x736>
 8009514:	2320      	movs	r3, #32
 8009516:	e000      	b.n	800951a <SDIO_DMA_Reset+0x736>
 8009518:	2320      	movs	r3, #32
 800951a:	4a44      	ldr	r2, [pc, #272]	@ (800962c <SDIO_DMA_Reset+0x848>)
 800951c:	60d3      	str	r3, [r2, #12]
 800951e:	e08a      	b.n	8009636 <SDIO_DMA_Reset+0x852>
 8009520:	4b34      	ldr	r3, [pc, #208]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 8009522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a35      	ldr	r2, [pc, #212]	@ (80095fc <SDIO_DMA_Reset+0x818>)
 8009528:	4293      	cmp	r3, r2
 800952a:	f000 8081 	beq.w	8009630 <SDIO_DMA_Reset+0x84c>
 800952e:	4b31      	ldr	r3, [pc, #196]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 8009530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a32      	ldr	r2, [pc, #200]	@ (8009600 <SDIO_DMA_Reset+0x81c>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d05a      	beq.n	80095f0 <SDIO_DMA_Reset+0x80c>
 800953a:	4b2e      	ldr	r3, [pc, #184]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 800953c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a30      	ldr	r2, [pc, #192]	@ (8009604 <SDIO_DMA_Reset+0x820>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d052      	beq.n	80095ec <SDIO_DMA_Reset+0x808>
 8009546:	4b2b      	ldr	r3, [pc, #172]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 8009548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a2e      	ldr	r2, [pc, #184]	@ (8009608 <SDIO_DMA_Reset+0x824>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d04a      	beq.n	80095e8 <SDIO_DMA_Reset+0x804>
 8009552:	4b28      	ldr	r3, [pc, #160]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 8009554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a2c      	ldr	r2, [pc, #176]	@ (800960c <SDIO_DMA_Reset+0x828>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d041      	beq.n	80095e2 <SDIO_DMA_Reset+0x7fe>
 800955e:	4b25      	ldr	r3, [pc, #148]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 8009560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a2a      	ldr	r2, [pc, #168]	@ (8009610 <SDIO_DMA_Reset+0x82c>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d038      	beq.n	80095dc <SDIO_DMA_Reset+0x7f8>
 800956a:	4b22      	ldr	r3, [pc, #136]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 800956c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a28      	ldr	r2, [pc, #160]	@ (8009614 <SDIO_DMA_Reset+0x830>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d02f      	beq.n	80095d6 <SDIO_DMA_Reset+0x7f2>
 8009576:	4b1f      	ldr	r3, [pc, #124]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 8009578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a26      	ldr	r2, [pc, #152]	@ (8009618 <SDIO_DMA_Reset+0x834>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d026      	beq.n	80095d0 <SDIO_DMA_Reset+0x7ec>
 8009582:	4b1c      	ldr	r3, [pc, #112]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 8009584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a24      	ldr	r2, [pc, #144]	@ (800961c <SDIO_DMA_Reset+0x838>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d01d      	beq.n	80095ca <SDIO_DMA_Reset+0x7e6>
 800958e:	4b19      	ldr	r3, [pc, #100]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 8009590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a22      	ldr	r2, [pc, #136]	@ (8009620 <SDIO_DMA_Reset+0x83c>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d014      	beq.n	80095c4 <SDIO_DMA_Reset+0x7e0>
 800959a:	4b16      	ldr	r3, [pc, #88]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 800959c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a20      	ldr	r2, [pc, #128]	@ (8009624 <SDIO_DMA_Reset+0x840>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d00b      	beq.n	80095be <SDIO_DMA_Reset+0x7da>
 80095a6:	4b13      	ldr	r3, [pc, #76]	@ (80095f4 <SDIO_DMA_Reset+0x810>)
 80095a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a1e      	ldr	r2, [pc, #120]	@ (8009628 <SDIO_DMA_Reset+0x844>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d102      	bne.n	80095b8 <SDIO_DMA_Reset+0x7d4>
 80095b2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80095b6:	e03c      	b.n	8009632 <SDIO_DMA_Reset+0x84e>
 80095b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80095bc:	e039      	b.n	8009632 <SDIO_DMA_Reset+0x84e>
 80095be:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80095c2:	e036      	b.n	8009632 <SDIO_DMA_Reset+0x84e>
 80095c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80095c8:	e033      	b.n	8009632 <SDIO_DMA_Reset+0x84e>
 80095ca:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80095ce:	e030      	b.n	8009632 <SDIO_DMA_Reset+0x84e>
 80095d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80095d4:	e02d      	b.n	8009632 <SDIO_DMA_Reset+0x84e>
 80095d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80095da:	e02a      	b.n	8009632 <SDIO_DMA_Reset+0x84e>
 80095dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80095e0:	e027      	b.n	8009632 <SDIO_DMA_Reset+0x84e>
 80095e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80095e6:	e024      	b.n	8009632 <SDIO_DMA_Reset+0x84e>
 80095e8:	2320      	movs	r3, #32
 80095ea:	e022      	b.n	8009632 <SDIO_DMA_Reset+0x84e>
 80095ec:	2320      	movs	r3, #32
 80095ee:	e020      	b.n	8009632 <SDIO_DMA_Reset+0x84e>
 80095f0:	2320      	movs	r3, #32
 80095f2:	e01e      	b.n	8009632 <SDIO_DMA_Reset+0x84e>
 80095f4:	200008c0 	.word	0x200008c0
 80095f8:	40026058 	.word	0x40026058
 80095fc:	40026010 	.word	0x40026010
 8009600:	40026410 	.word	0x40026410
 8009604:	40026070 	.word	0x40026070
 8009608:	40026470 	.word	0x40026470
 800960c:	40026028 	.word	0x40026028
 8009610:	40026428 	.word	0x40026428
 8009614:	40026088 	.word	0x40026088
 8009618:	40026488 	.word	0x40026488
 800961c:	40026040 	.word	0x40026040
 8009620:	40026440 	.word	0x40026440
 8009624:	400260a0 	.word	0x400260a0
 8009628:	400264a0 	.word	0x400264a0
 800962c:	40026000 	.word	0x40026000
 8009630:	2320      	movs	r3, #32
 8009632:	4a26      	ldr	r2, [pc, #152]	@ (80096cc <SDIO_DMA_Reset+0x8e8>)
 8009634:	6093      	str	r3, [r2, #8]
    }

    // Reset ao periférico SDIO
    __HAL_RCC_SDIO_FORCE_RESET();
 8009636:	4b26      	ldr	r3, [pc, #152]	@ (80096d0 <SDIO_DMA_Reset+0x8ec>)
 8009638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800963a:	4a25      	ldr	r2, [pc, #148]	@ (80096d0 <SDIO_DMA_Reset+0x8ec>)
 800963c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009640:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_SDIO_RELEASE_RESET();
 8009642:	4b23      	ldr	r3, [pc, #140]	@ (80096d0 <SDIO_DMA_Reset+0x8ec>)
 8009644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009646:	4a22      	ldr	r2, [pc, #136]	@ (80096d0 <SDIO_DMA_Reset+0x8ec>)
 8009648:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800964c:	6253      	str	r3, [r2, #36]	@ 0x24

    // Re-inicializa SDIO/MMC
    HAL_MMC_DeInit(&hmmc);
 800964e:	4821      	ldr	r0, [pc, #132]	@ (80096d4 <SDIO_DMA_Reset+0x8f0>)
 8009650:	f005 fb22 	bl	800ec98 <HAL_MMC_DeInit>
    if (HAL_MMC_Init(&hmmc) != HAL_OK) {
 8009654:	481f      	ldr	r0, [pc, #124]	@ (80096d4 <SDIO_DMA_Reset+0x8f0>)
 8009656:	f005 fa56 	bl	800eb06 <HAL_MMC_Init>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d018      	beq.n	8009692 <SDIO_DMA_Reset+0x8ae>
        char msg[] = "Falha ao reinicializar SDIO/MMC!\r\n";
 8009660:	4b1d      	ldr	r3, [pc, #116]	@ (80096d8 <SDIO_DMA_Reset+0x8f4>)
 8009662:	1d3c      	adds	r4, r7, #4
 8009664:	461d      	mov	r5, r3
 8009666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800966a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800966c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800966e:	682b      	ldr	r3, [r5, #0]
 8009670:	461a      	mov	r2, r3
 8009672:	8022      	strh	r2, [r4, #0]
 8009674:	3402      	adds	r4, #2
 8009676:	0c1b      	lsrs	r3, r3, #16
 8009678:	7023      	strb	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800967a:	1d3b      	adds	r3, r7, #4
 800967c:	4618      	mov	r0, r3
 800967e:	f7f6 fe17 	bl	80002b0 <strlen>
 8009682:	4603      	mov	r3, r0
 8009684:	b29a      	uxth	r2, r3
 8009686:	1d39      	adds	r1, r7, #4
 8009688:	f04f 33ff 	mov.w	r3, #4294967295
 800968c:	4813      	ldr	r0, [pc, #76]	@ (80096dc <SDIO_DMA_Reset+0x8f8>)
 800968e:	f00a fc09 	bl	8013ea4 <HAL_UART_Transmit>
    }

    // Religar SDIO ao DMA (caso tenha sido perdido)
    if (hmmc.hdmarx) __HAL_LINKDMA(&hmmc, hdmarx, *hmmc.hdmarx);
 8009692:	4b10      	ldr	r3, [pc, #64]	@ (80096d4 <SDIO_DMA_Reset+0x8f0>)
 8009694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009696:	2b00      	cmp	r3, #0
 8009698:	d007      	beq.n	80096aa <SDIO_DMA_Reset+0x8c6>
 800969a:	4b0e      	ldr	r3, [pc, #56]	@ (80096d4 <SDIO_DMA_Reset+0x8f0>)
 800969c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800969e:	4a0d      	ldr	r2, [pc, #52]	@ (80096d4 <SDIO_DMA_Reset+0x8f0>)
 80096a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80096a2:	4b0c      	ldr	r3, [pc, #48]	@ (80096d4 <SDIO_DMA_Reset+0x8f0>)
 80096a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096a6:	4a0b      	ldr	r2, [pc, #44]	@ (80096d4 <SDIO_DMA_Reset+0x8f0>)
 80096a8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hmmc.hdmatx) __HAL_LINKDMA(&hmmc, hdmatx, *hmmc.hdmatx);
 80096aa:	4b0a      	ldr	r3, [pc, #40]	@ (80096d4 <SDIO_DMA_Reset+0x8f0>)
 80096ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d007      	beq.n	80096c2 <SDIO_DMA_Reset+0x8de>
 80096b2:	4b08      	ldr	r3, [pc, #32]	@ (80096d4 <SDIO_DMA_Reset+0x8f0>)
 80096b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096b6:	4a07      	ldr	r2, [pc, #28]	@ (80096d4 <SDIO_DMA_Reset+0x8f0>)
 80096b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80096ba:	4b06      	ldr	r3, [pc, #24]	@ (80096d4 <SDIO_DMA_Reset+0x8f0>)
 80096bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096be:	4a05      	ldr	r2, [pc, #20]	@ (80096d4 <SDIO_DMA_Reset+0x8f0>)
 80096c0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80096c2:	bf00      	nop
 80096c4:	3728      	adds	r7, #40	@ 0x28
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bdb0      	pop	{r4, r5, r7, pc}
 80096ca:	bf00      	nop
 80096cc:	40026000 	.word	0x40026000
 80096d0:	40023800 	.word	0x40023800
 80096d4:	200008c0 	.word	0x200008c0
 80096d8:	0801a8c4 	.word	0x0801a8c4
 80096dc:	20001028 	.word	0x20001028

080096e0 <MMC_WriteBlocks>:


/* Escreve `numBlocks` blocos de 512B a partir de pData no endereço blockStart. */
MMC_Status MMC_WriteBlocks(uint32_t blockStart, uint32_t numBlocks, uint8_t *pData) {
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
    if (HAL_MMC_WriteBlocks_DMA(&hmmc, pData, blockStart, numBlocks) != HAL_OK) {
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	4828      	ldr	r0, [pc, #160]	@ (8009794 <MMC_WriteBlocks+0xb4>)
 80096f4:	f005 fbd0 	bl	800ee98 <HAL_MMC_WriteBlocks_DMA>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d01f      	beq.n	800973e <MMC_WriteBlocks+0x5e>
    	SDIO_DMA_Reset();
 80096fe:	f7ff fb71 	bl	8008de4 <SDIO_DMA_Reset>
    	if (HAL_MMC_WriteBlocks_DMA(&hmmc, pData, blockStart, numBlocks) != HAL_OK){
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	6879      	ldr	r1, [r7, #4]
 8009708:	4822      	ldr	r0, [pc, #136]	@ (8009794 <MMC_WriteBlocks+0xb4>)
 800970a:	f005 fbc5 	bl	800ee98 <HAL_MMC_WriteBlocks_DMA>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d014      	beq.n	800973e <MMC_WriteBlocks+0x5e>
        	snprintf(uart_msg, sizeof(uart_msg), "Erro: HAL_MMC_WriteBlocks_DMA falhou (0x%08lX)\r\n", hmmc.ErrorCode);
 8009714:	4b1f      	ldr	r3, [pc, #124]	@ (8009794 <MMC_WriteBlocks+0xb4>)
 8009716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009718:	4a1f      	ldr	r2, [pc, #124]	@ (8009798 <MMC_WriteBlocks+0xb8>)
 800971a:	f240 411a 	movw	r1, #1050	@ 0x41a
 800971e:	481f      	ldr	r0, [pc, #124]	@ (800979c <MMC_WriteBlocks+0xbc>)
 8009720:	f00d fb58 	bl	8016dd4 <sniprintf>
        	HAL_UART_Transmit(&huart2, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 8009724:	481d      	ldr	r0, [pc, #116]	@ (800979c <MMC_WriteBlocks+0xbc>)
 8009726:	f7f6 fdc3 	bl	80002b0 <strlen>
 800972a:	4603      	mov	r3, r0
 800972c:	b29a      	uxth	r2, r3
 800972e:	f04f 33ff 	mov.w	r3, #4294967295
 8009732:	491a      	ldr	r1, [pc, #104]	@ (800979c <MMC_WriteBlocks+0xbc>)
 8009734:	481a      	ldr	r0, [pc, #104]	@ (80097a0 <MMC_WriteBlocks+0xc0>)
 8009736:	f00a fbb5 	bl	8013ea4 <HAL_UART_Transmit>
        	return MMC_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e026      	b.n	800978c <MMC_WriteBlocks+0xac>
    	}
    }
    /* Espera até o fim da transferência */
    uint32_t tick = HAL_GetTick();
 800973e:	f002 fdff 	bl	800c340 <HAL_GetTick>
 8009742:	6178      	str	r0, [r7, #20]
    while (HAL_MMC_GetCardState(&hmmc) != HAL_MMC_CARD_TRANSFER) {
 8009744:	e01b      	b.n	800977e <MMC_WriteBlocks+0x9e>
        if ((HAL_GetTick() - tick) > MMC_TIMEOUT) {
 8009746:	f002 fdfb 	bl	800c340 <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009754:	4293      	cmp	r3, r2
 8009756:	d912      	bls.n	800977e <MMC_WriteBlocks+0x9e>
        	snprintf(uart_msg, sizeof(uart_msg), "Erro: Timeout no HAL_MMC_GetCardState durante escrita\r\n");
 8009758:	4a12      	ldr	r2, [pc, #72]	@ (80097a4 <MMC_WriteBlocks+0xc4>)
 800975a:	f240 411a 	movw	r1, #1050	@ 0x41a
 800975e:	480f      	ldr	r0, [pc, #60]	@ (800979c <MMC_WriteBlocks+0xbc>)
 8009760:	f00d fb38 	bl	8016dd4 <sniprintf>
        	HAL_UART_Transmit(&huart2, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 8009764:	480d      	ldr	r0, [pc, #52]	@ (800979c <MMC_WriteBlocks+0xbc>)
 8009766:	f7f6 fda3 	bl	80002b0 <strlen>
 800976a:	4603      	mov	r3, r0
 800976c:	b29a      	uxth	r2, r3
 800976e:	f04f 33ff 	mov.w	r3, #4294967295
 8009772:	490a      	ldr	r1, [pc, #40]	@ (800979c <MMC_WriteBlocks+0xbc>)
 8009774:	480a      	ldr	r0, [pc, #40]	@ (80097a0 <MMC_WriteBlocks+0xc0>)
 8009776:	f00a fb95 	bl	8013ea4 <HAL_UART_Transmit>
            return MMC_TIMEOUT_;
 800977a:	2302      	movs	r3, #2
 800977c:	e006      	b.n	800978c <MMC_WriteBlocks+0xac>
    while (HAL_MMC_GetCardState(&hmmc) != HAL_MMC_CARD_TRANSFER) {
 800977e:	4805      	ldr	r0, [pc, #20]	@ (8009794 <MMC_WriteBlocks+0xb4>)
 8009780:	f006 f930 	bl	800f9e4 <HAL_MMC_GetCardState>
 8009784:	4603      	mov	r3, r0
 8009786:	2b04      	cmp	r3, #4
 8009788:	d1dd      	bne.n	8009746 <MMC_WriteBlocks+0x66>
        }
    }
    return MMC_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3718      	adds	r7, #24
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	200008c0 	.word	0x200008c0
 8009798:	0801a8e8 	.word	0x0801a8e8
 800979c:	20002fa4 	.word	0x20002fa4
 80097a0:	20001028 	.word	0x20001028
 80097a4:	0801a91c 	.word	0x0801a91c

080097a8 <MMC_ReadBlocks>:

/* Lê `numBlocks` blocos de 512B para pData a partir do endereço blockStart. */
MMC_Status MMC_ReadBlocks(uint32_t blockStart, uint32_t numBlocks, uint8_t *pData) {
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
    if (HAL_MMC_ReadBlocks_DMA(&hmmc, pData, blockStart, numBlocks) != HAL_OK) {
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	6879      	ldr	r1, [r7, #4]
 80097ba:	4837      	ldr	r0, [pc, #220]	@ (8009898 <MMC_ReadBlocks+0xf0>)
 80097bc:	f005 fa8c 	bl	800ecd8 <HAL_MMC_ReadBlocks_DMA>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d01f      	beq.n	8009806 <MMC_ReadBlocks+0x5e>
    	SDIO_DMA_Reset();
 80097c6:	f7ff fb0d 	bl	8008de4 <SDIO_DMA_Reset>
    	if (HAL_MMC_ReadBlocks_DMA(&hmmc, pData, blockStart, numBlocks) != HAL_OK) {
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	6879      	ldr	r1, [r7, #4]
 80097d0:	4831      	ldr	r0, [pc, #196]	@ (8009898 <MMC_ReadBlocks+0xf0>)
 80097d2:	f005 fa81 	bl	800ecd8 <HAL_MMC_ReadBlocks_DMA>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d014      	beq.n	8009806 <MMC_ReadBlocks+0x5e>
			snprintf(uart_msg, sizeof(uart_msg), "Erro: HAL_MMC_ReadBlocks_DMA falhou (0x%08lX)\r\n", hmmc.ErrorCode);
 80097dc:	4b2e      	ldr	r3, [pc, #184]	@ (8009898 <MMC_ReadBlocks+0xf0>)
 80097de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e0:	4a2e      	ldr	r2, [pc, #184]	@ (800989c <MMC_ReadBlocks+0xf4>)
 80097e2:	f240 411a 	movw	r1, #1050	@ 0x41a
 80097e6:	482e      	ldr	r0, [pc, #184]	@ (80098a0 <MMC_ReadBlocks+0xf8>)
 80097e8:	f00d faf4 	bl	8016dd4 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 80097ec:	482c      	ldr	r0, [pc, #176]	@ (80098a0 <MMC_ReadBlocks+0xf8>)
 80097ee:	f7f6 fd5f 	bl	80002b0 <strlen>
 80097f2:	4603      	mov	r3, r0
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	f04f 33ff 	mov.w	r3, #4294967295
 80097fa:	4929      	ldr	r1, [pc, #164]	@ (80098a0 <MMC_ReadBlocks+0xf8>)
 80097fc:	4829      	ldr	r0, [pc, #164]	@ (80098a4 <MMC_ReadBlocks+0xfc>)
 80097fe:	f00a fb51 	bl	8013ea4 <HAL_UART_Transmit>
			return MMC_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e043      	b.n	800988e <MMC_ReadBlocks+0xe6>
    	}
    }
    uint32_t tick = HAL_GetTick();
 8009806:	f002 fd9b 	bl	800c340 <HAL_GetTick>
 800980a:	6178      	str	r0, [r7, #20]
    while (HAL_MMC_GetCardState(&hmmc) != HAL_MMC_CARD_TRANSFER) {
 800980c:	e01b      	b.n	8009846 <MMC_ReadBlocks+0x9e>
        if ((HAL_GetTick() - tick) > MMC_TIMEOUT) {
 800980e:	f002 fd97 	bl	800c340 <HAL_GetTick>
 8009812:	4602      	mov	r2, r0
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	f242 7210 	movw	r2, #10000	@ 0x2710
 800981c:	4293      	cmp	r3, r2
 800981e:	d912      	bls.n	8009846 <MMC_ReadBlocks+0x9e>
        	snprintf(uart_msg, sizeof(uart_msg), "Erro: Timeout no HAL_MMC_GetCardState durante leitura\r\n");
 8009820:	4a21      	ldr	r2, [pc, #132]	@ (80098a8 <MMC_ReadBlocks+0x100>)
 8009822:	f240 411a 	movw	r1, #1050	@ 0x41a
 8009826:	481e      	ldr	r0, [pc, #120]	@ (80098a0 <MMC_ReadBlocks+0xf8>)
 8009828:	f00d fad4 	bl	8016dd4 <sniprintf>
        	HAL_UART_Transmit(&huart2, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 800982c:	481c      	ldr	r0, [pc, #112]	@ (80098a0 <MMC_ReadBlocks+0xf8>)
 800982e:	f7f6 fd3f 	bl	80002b0 <strlen>
 8009832:	4603      	mov	r3, r0
 8009834:	b29a      	uxth	r2, r3
 8009836:	f04f 33ff 	mov.w	r3, #4294967295
 800983a:	4919      	ldr	r1, [pc, #100]	@ (80098a0 <MMC_ReadBlocks+0xf8>)
 800983c:	4819      	ldr	r0, [pc, #100]	@ (80098a4 <MMC_ReadBlocks+0xfc>)
 800983e:	f00a fb31 	bl	8013ea4 <HAL_UART_Transmit>
            return MMC_TIMEOUT_;
 8009842:	2302      	movs	r3, #2
 8009844:	e023      	b.n	800988e <MMC_ReadBlocks+0xe6>
    while (HAL_MMC_GetCardState(&hmmc) != HAL_MMC_CARD_TRANSFER) {
 8009846:	4814      	ldr	r0, [pc, #80]	@ (8009898 <MMC_ReadBlocks+0xf0>)
 8009848:	f006 f8cc 	bl	800f9e4 <HAL_MMC_GetCardState>
 800984c:	4603      	mov	r3, r0
 800984e:	2b04      	cmp	r3, #4
 8009850:	d1dd      	bne.n	800980e <MMC_ReadBlocks+0x66>
        }
    }

    snprintf(uart_msg, sizeof(uart_msg), "Dados lidos (hex): ");
 8009852:	4a16      	ldr	r2, [pc, #88]	@ (80098ac <MMC_ReadBlocks+0x104>)
 8009854:	f240 411a 	movw	r1, #1050	@ 0x41a
 8009858:	4811      	ldr	r0, [pc, #68]	@ (80098a0 <MMC_ReadBlocks+0xf8>)
 800985a:	f00d fabb 	bl	8016dd4 <sniprintf>
    /*for (int i = 0; i < 32; i++) {
        char temp[5];
        snprintf(temp, sizeof(temp), "%02X ", pData[i]);
        strncat(uart_msg, temp, sizeof(uart_msg) - strlen(uart_msg) - 1);
    }*/
    strncat(uart_msg, "\r\n", sizeof(uart_msg) - strlen(uart_msg) - 1);
 800985e:	4810      	ldr	r0, [pc, #64]	@ (80098a0 <MMC_ReadBlocks+0xf8>)
 8009860:	f7f6 fd26 	bl	80002b0 <strlen>
 8009864:	4603      	mov	r3, r0
 8009866:	f5c3 6383 	rsb	r3, r3, #1048	@ 0x418
 800986a:	3301      	adds	r3, #1
 800986c:	461a      	mov	r2, r3
 800986e:	4910      	ldr	r1, [pc, #64]	@ (80098b0 <MMC_ReadBlocks+0x108>)
 8009870:	480b      	ldr	r0, [pc, #44]	@ (80098a0 <MMC_ReadBlocks+0xf8>)
 8009872:	f00d fc01 	bl	8017078 <strncat>
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 8009876:	480a      	ldr	r0, [pc, #40]	@ (80098a0 <MMC_ReadBlocks+0xf8>)
 8009878:	f7f6 fd1a 	bl	80002b0 <strlen>
 800987c:	4603      	mov	r3, r0
 800987e:	b29a      	uxth	r2, r3
 8009880:	f04f 33ff 	mov.w	r3, #4294967295
 8009884:	4906      	ldr	r1, [pc, #24]	@ (80098a0 <MMC_ReadBlocks+0xf8>)
 8009886:	4807      	ldr	r0, [pc, #28]	@ (80098a4 <MMC_ReadBlocks+0xfc>)
 8009888:	f00a fb0c 	bl	8013ea4 <HAL_UART_Transmit>


    return MMC_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	200008c0 	.word	0x200008c0
 800989c:	0801a954 	.word	0x0801a954
 80098a0:	20002fa4 	.word	0x20002fa4
 80098a4:	20001028 	.word	0x20001028
 80098a8:	0801a984 	.word	0x0801a984
 80098ac:	0801a9bc 	.word	0x0801a9bc
 80098b0:	0801a9d0 	.word	0x0801a9d0

080098b4 <save_data_to_mem>:
    }
    snprintf(msg, sizeof(msg), "\r\nFim do bloco 0\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void save_data_to_mem(Sensor *sensor) {
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
    if (sensor->index >= (sensor_length / 2) && sensor->sent_low == 0) {
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80098c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098c6:	d327      	bcc.n	8009918 <save_data_to_mem+0x64>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 3402 	ldrb.w	r3, [r3, #1026]	@ 0x402
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d122      	bne.n	8009918 <save_data_to_mem+0x64>
        sensor->memBlock = memBlock++;
 80098d2:	4b28      	ldr	r3, [pc, #160]	@ (8009974 <save_data_to_mem+0xc0>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	4926      	ldr	r1, [pc, #152]	@ (8009974 <save_data_to_mem+0xc0>)
 80098da:	600a      	str	r2, [r1, #0]
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	f8c2 3408 	str.w	r3, [r2, #1032]	@ 0x408
        update_memBlock_nr();
 80098e2:	f7ff f9b9 	bl	8008c58 <update_memBlock_nr>
		if (MMC_WriteBlocks(sensor->memBlock, (sensor_length/2) / 512, (uint8_t*)sensor->data) == MMC_OK) {
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	2101      	movs	r1, #1
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7ff fef5 	bl	80096e0 <MMC_WriteBlocks>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d008      	beq.n	800990e <save_data_to_mem+0x5a>
        	//snprintf(uart_msg, sizeof(uart_msg), "[LOW]  Sensor %d OK bloco %d\r\n", sensor->sensorType, sensor->memBlock);
        } else {
            snprintf(uart_msg, sizeof(uart_msg), "[LOW] Sensor %d ERRO escrita MMC\r\n", sensor->sensorType);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 8009902:	4a1d      	ldr	r2, [pc, #116]	@ (8009978 <save_data_to_mem+0xc4>)
 8009904:	f240 411a 	movw	r1, #1050	@ 0x41a
 8009908:	481c      	ldr	r0, [pc, #112]	@ (800997c <save_data_to_mem+0xc8>)
 800990a:	f00d fa63 	bl	8016dd4 <sniprintf>
        }
        //HAL_UART_Transmit(&huart2, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
        sensor->sent_low = 1;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
        }
        //HAL_UART_Transmit(&huart2, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
        sensor->send_high = 0;
        //HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_4);
    }
}
 8009916:	e028      	b.n	800996a <save_data_to_mem+0xb6>
    } else if (sensor->send_high == 1){
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 3403 	ldrb.w	r3, [r3, #1027]	@ 0x403
 800991e:	2b01      	cmp	r3, #1
 8009920:	d123      	bne.n	800996a <save_data_to_mem+0xb6>
        sensor->memBlock = memBlock++;
 8009922:	4b14      	ldr	r3, [pc, #80]	@ (8009974 <save_data_to_mem+0xc0>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	1c5a      	adds	r2, r3, #1
 8009928:	4912      	ldr	r1, [pc, #72]	@ (8009974 <save_data_to_mem+0xc0>)
 800992a:	600a      	str	r2, [r1, #0]
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	f8c2 3408 	str.w	r3, [r2, #1032]	@ 0x408
        update_memBlock_nr();
 8009932:	f7ff f991 	bl	8008c58 <update_memBlock_nr>
        if (MMC_WriteBlocks(sensor->memBlock, (sensor_length/2) / 512, (uint8_t*)&sensor->data[sensor_length / 2]) == MMC_OK) {
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 0408 	ldr.w	r0, [r3, #1032]	@ 0x408
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009942:	461a      	mov	r2, r3
 8009944:	2101      	movs	r1, #1
 8009946:	f7ff fecb 	bl	80096e0 <MMC_WriteBlocks>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d008      	beq.n	8009962 <save_data_to_mem+0xae>
            snprintf(uart_msg, sizeof(uart_msg), "[HIGH] Sensor %d ERRO escrita MMC\r\n", sensor->sensorType);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 8009956:	4a0a      	ldr	r2, [pc, #40]	@ (8009980 <save_data_to_mem+0xcc>)
 8009958:	f240 411a 	movw	r1, #1050	@ 0x41a
 800995c:	4807      	ldr	r0, [pc, #28]	@ (800997c <save_data_to_mem+0xc8>)
 800995e:	f00d fa39 	bl	8016dd4 <sniprintf>
        sensor->send_high = 0;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 2403 	strb.w	r2, [r3, #1027]	@ 0x403
}
 800996a:	bf00      	nop
 800996c:	3708      	adds	r7, #8
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	200001fc 	.word	0x200001fc
 8009978:	0801aac4 	.word	0x0801aac4
 800997c:	20002fa4 	.word	0x20002fa4
 8009980:	0801aae8 	.word	0x0801aae8

08009984 <SDIO_ReadAllData>:

//#define block_nr_to_start 56374U
#define block_nr_to_start 1U


void SDIO_ReadAllData(void) {
 8009984:	b580      	push	{r7, lr}
 8009986:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800998a:	af00      	add	r7, sp, #0
    char msg[64];

    /* 1. Actualizar memBlock com o valor guardado no bloco 0 */
    get_memBlock_nr();
 800998c:	f7ff f988 	bl	8008ca0 <get_memBlock_nr>

    /* Se memBlock for zero, não há dados para ler */
    if (memBlock == 0U) {
 8009990:	4b82      	ldr	r3, [pc, #520]	@ (8009b9c <SDIO_ReadAllData+0x218>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d115      	bne.n	80099c4 <SDIO_ReadAllData+0x40>
        snprintf(msg, sizeof(msg), "Nenhum dado gravado. memBlock = 0\r\n");
 8009998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800999c:	4a80      	ldr	r2, [pc, #512]	@ (8009ba0 <SDIO_ReadAllData+0x21c>)
 800999e:	2140      	movs	r1, #64	@ 0x40
 80099a0:	4618      	mov	r0, r3
 80099a2:	f00d fa17 	bl	8016dd4 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80099a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7f6 fc80 	bl	80002b0 <strlen>
 80099b0:	4603      	mov	r3, r0
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 80099b8:	f04f 33ff 	mov.w	r3, #4294967295
 80099bc:	4879      	ldr	r0, [pc, #484]	@ (8009ba4 <SDIO_ReadAllData+0x220>)
 80099be:	f00a fa71 	bl	8013ea4 <HAL_UART_Transmit>
        return;
 80099c2:	e0e6      	b.n	8009b92 <SDIO_ReadAllData+0x20e>

    /* 2. Calcular último bloco válido.
       Na aplicação original, memBlock aponta para o próximo bloco livre;
       portanto, o último bloco de dados é memBlock - 1.
       Ajuste conforme o seu esquema de gravação (ex.: se usar bloco 0 para dados). */
    uint32_t lastBlock = (memBlock > 0U) ? (memBlock - 1U) : 0U;
 80099c4:	4b75      	ldr	r3, [pc, #468]	@ (8009b9c <SDIO_ReadAllData+0x218>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d003      	beq.n	80099d4 <SDIO_ReadAllData+0x50>
 80099cc:	4b73      	ldr	r3, [pc, #460]	@ (8009b9c <SDIO_ReadAllData+0x218>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	3b01      	subs	r3, #1
 80099d2:	e000      	b.n	80099d6 <SDIO_ReadAllData+0x52>
 80099d4:	2300      	movs	r3, #0
 80099d6:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

    /* 3. Informar início da transferência */
    snprintf(msg, sizeof(msg), "Enviando dados dos blocos 1 a %lu\r\n",
 80099da:	f507 7002 	add.w	r0, r7, #520	@ 0x208
 80099de:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80099e2:	4a71      	ldr	r2, [pc, #452]	@ (8009ba8 <SDIO_ReadAllData+0x224>)
 80099e4:	2140      	movs	r1, #64	@ 0x40
 80099e6:	f00d f9f5 	bl	8016dd4 <sniprintf>
             (unsigned long)lastBlock);
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80099ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7f6 fc5e 	bl	80002b0 <strlen>
 80099f4:	4603      	mov	r3, r0
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 80099fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009a00:	4868      	ldr	r0, [pc, #416]	@ (8009ba4 <SDIO_ReadAllData+0x220>)
 8009a02:	f00a fa4f 	bl	8013ea4 <HAL_UART_Transmit>

    /* 4. Buffer para um bloco de 512 bytes */
    uint8_t rxBuf[512];

    /* 5. Percorrer todos os blocos de dados */
    for (uint32_t blk = block_nr_to_start; blk <= lastBlock; blk++) {
 8009a06:	2301      	movs	r3, #1
 8009a08:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 8009a0c:	e0a5      	b.n	8009b5a <SDIO_ReadAllData+0x1d6>
        /* Mensagem de início do bloco */
        snprintf(msg, sizeof(msg), "Inicio do bloco %lu\r\n",
 8009a0e:	f507 7002 	add.w	r0, r7, #520	@ 0x208
 8009a12:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8009a16:	4a65      	ldr	r2, [pc, #404]	@ (8009bac <SDIO_ReadAllData+0x228>)
 8009a18:	2140      	movs	r1, #64	@ 0x40
 8009a1a:	f00d f9db 	bl	8016dd4 <sniprintf>
                 (unsigned long)blk);
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8009a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7f6 fc44 	bl	80002b0 <strlen>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 8009a30:	f04f 33ff 	mov.w	r3, #4294967295
 8009a34:	485b      	ldr	r0, [pc, #364]	@ (8009ba4 <SDIO_ReadAllData+0x220>)
 8009a36:	f00a fa35 	bl	8013ea4 <HAL_UART_Transmit>

        /* Ler bloco: um bloco (512 bytes) por vez */
        if (MMC_ReadBlocks(blk, 1U, rxBuf) != MMC_OK) {
 8009a3a:	f107 0308 	add.w	r3, r7, #8
 8009a3e:	461a      	mov	r2, r3
 8009a40:	2101      	movs	r1, #1
 8009a42:	f8d7 0254 	ldr.w	r0, [r7, #596]	@ 0x254
 8009a46:	f7ff feaf 	bl	80097a8 <MMC_ReadBlocks>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d016      	beq.n	8009a7e <SDIO_ReadAllData+0xfa>
            snprintf(msg, sizeof(msg), "Erro ao ler bloco %lu\r\n",
 8009a50:	f507 7002 	add.w	r0, r7, #520	@ 0x208
 8009a54:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8009a58:	4a55      	ldr	r2, [pc, #340]	@ (8009bb0 <SDIO_ReadAllData+0x22c>)
 8009a5a:	2140      	movs	r1, #64	@ 0x40
 8009a5c:	f00d f9ba 	bl	8016dd4 <sniprintf>
                     (unsigned long)blk);
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8009a60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7f6 fc23 	bl	80002b0 <strlen>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 8009a72:	f04f 33ff 	mov.w	r3, #4294967295
 8009a76:	484b      	ldr	r0, [pc, #300]	@ (8009ba4 <SDIO_ReadAllData+0x220>)
 8009a78:	f00a fa14 	bl	8013ea4 <HAL_UART_Transmit>
            return;
 8009a7c:	e089      	b.n	8009b92 <SDIO_ReadAllData+0x20e>

        /* Esperar o cartão ficar pronto.
           A ST recomenda verificar o estado da transferência após cada
           leitura com HAL_MMC_GetCardState():contentReference[oaicite:0]{index=0}.
         */
        uint32_t t0 = HAL_GetTick();
 8009a7e:	f002 fc5f 	bl	800c340 <HAL_GetTick>
 8009a82:	f8c7 0248 	str.w	r0, [r7, #584]	@ 0x248
        while (HAL_MMC_GetCardState(&hmmc) != HAL_MMC_CARD_TRANSFER) {
 8009a86:	e020      	b.n	8009aca <SDIO_ReadAllData+0x146>
            if ((HAL_GetTick() - t0) > MMC_TIMEOUT) {
 8009a88:	f002 fc5a 	bl	800c340 <HAL_GetTick>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d916      	bls.n	8009aca <SDIO_ReadAllData+0x146>
                snprintf(msg, sizeof(msg), "Timeout ao ler bloco %lu\r\n",
 8009a9c:	f507 7002 	add.w	r0, r7, #520	@ 0x208
 8009aa0:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8009aa4:	4a43      	ldr	r2, [pc, #268]	@ (8009bb4 <SDIO_ReadAllData+0x230>)
 8009aa6:	2140      	movs	r1, #64	@ 0x40
 8009aa8:	f00d f994 	bl	8016dd4 <sniprintf>
                         (unsigned long)blk);
                HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg),
 8009aac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7f6 fbfd 	bl	80002b0 <strlen>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 8009abe:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac2:	4838      	ldr	r0, [pc, #224]	@ (8009ba4 <SDIO_ReadAllData+0x220>)
 8009ac4:	f00a f9ee 	bl	8013ea4 <HAL_UART_Transmit>
                                  HAL_MAX_DELAY);
                return;
 8009ac8:	e063      	b.n	8009b92 <SDIO_ReadAllData+0x20e>
        while (HAL_MMC_GetCardState(&hmmc) != HAL_MMC_CARD_TRANSFER) {
 8009aca:	483b      	ldr	r0, [pc, #236]	@ (8009bb8 <SDIO_ReadAllData+0x234>)
 8009acc:	f005 ff8a 	bl	800f9e4 <HAL_MMC_GetCardState>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b04      	cmp	r3, #4
 8009ad4:	d1d8      	bne.n	8009a88 <SDIO_ReadAllData+0x104>
            }
        }

        /* Transmitir 512 bytes em hexadecimal pela UART */
        for (size_t i = 0U; i < sizeof(rxBuf); i++) {
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8009adc:	e01d      	b.n	8009b1a <SDIO_ReadAllData+0x196>
            char hexByte[4];
            snprintf(hexByte, sizeof(hexByte), "%02X ", rxBuf[i]);
 8009ade:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8009ae2:	f5a3 7214 	sub.w	r2, r3, #592	@ 0x250
 8009ae6:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8009aea:	4413      	add	r3, r2
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	1d38      	adds	r0, r7, #4
 8009af0:	4a32      	ldr	r2, [pc, #200]	@ (8009bbc <SDIO_ReadAllData+0x238>)
 8009af2:	2104      	movs	r1, #4
 8009af4:	f00d f96e 	bl	8016dd4 <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)hexByte,
                              strlen(hexByte), HAL_MAX_DELAY);
 8009af8:	1d3b      	adds	r3, r7, #4
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7f6 fbd8 	bl	80002b0 <strlen>
 8009b00:	4603      	mov	r3, r0
            HAL_UART_Transmit(&huart2, (uint8_t*)hexByte,
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	1d39      	adds	r1, r7, #4
 8009b06:	f04f 33ff 	mov.w	r3, #4294967295
 8009b0a:	4826      	ldr	r0, [pc, #152]	@ (8009ba4 <SDIO_ReadAllData+0x220>)
 8009b0c:	f00a f9ca 	bl	8013ea4 <HAL_UART_Transmit>
        for (size_t i = 0U; i < sizeof(rxBuf); i++) {
 8009b10:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8009b14:	3301      	adds	r3, #1
 8009b16:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8009b1a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8009b1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b22:	d3dc      	bcc.n	8009ade <SDIO_ReadAllData+0x15a>
        }

        /* Mensagem de fim do bloco */
        snprintf(msg, sizeof(msg), "\r\nFim do bloco %lu\r\n",
 8009b24:	f507 7002 	add.w	r0, r7, #520	@ 0x208
 8009b28:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8009b2c:	4a24      	ldr	r2, [pc, #144]	@ (8009bc0 <SDIO_ReadAllData+0x23c>)
 8009b2e:	2140      	movs	r1, #64	@ 0x40
 8009b30:	f00d f950 	bl	8016dd4 <sniprintf>
                 (unsigned long)blk);
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8009b34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7f6 fbb9 	bl	80002b0 <strlen>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 8009b46:	f04f 33ff 	mov.w	r3, #4294967295
 8009b4a:	4816      	ldr	r0, [pc, #88]	@ (8009ba4 <SDIO_ReadAllData+0x220>)
 8009b4c:	f00a f9aa 	bl	8013ea4 <HAL_UART_Transmit>
    for (uint32_t blk = block_nr_to_start; blk <= lastBlock; blk++) {
 8009b50:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8009b54:	3301      	adds	r3, #1
 8009b56:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 8009b5a:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8009b5e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009b62:	429a      	cmp	r2, r3
 8009b64:	f67f af53 	bls.w	8009a0e <SDIO_ReadAllData+0x8a>
    }

    /* 6. Indicar conclusão */
    snprintf(msg, sizeof(msg), "\r\nFim da transferência de dados\r\n");
 8009b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b6c:	4a15      	ldr	r2, [pc, #84]	@ (8009bc4 <SDIO_ReadAllData+0x240>)
 8009b6e:	2140      	movs	r1, #64	@ 0x40
 8009b70:	4618      	mov	r0, r3
 8009b72:	f00d f92f 	bl	8016dd4 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8009b76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7f6 fb98 	bl	80002b0 <strlen>
 8009b80:	4603      	mov	r3, r0
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 8009b88:	f04f 33ff 	mov.w	r3, #4294967295
 8009b8c:	4805      	ldr	r0, [pc, #20]	@ (8009ba4 <SDIO_ReadAllData+0x220>)
 8009b8e:	f00a f989 	bl	8013ea4 <HAL_UART_Transmit>
}
 8009b92:	f507 7716 	add.w	r7, r7, #600	@ 0x258
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	200001fc 	.word	0x200001fc
 8009ba0:	0801abdc 	.word	0x0801abdc
 8009ba4:	20001028 	.word	0x20001028
 8009ba8:	0801ac00 	.word	0x0801ac00
 8009bac:	0801ac24 	.word	0x0801ac24
 8009bb0:	0801ac3c 	.word	0x0801ac3c
 8009bb4:	0801ac54 	.word	0x0801ac54
 8009bb8:	200008c0 	.word	0x200008c0
 8009bbc:	0801aaa8 	.word	0x0801aaa8
 8009bc0:	0801ac70 	.word	0x0801ac70
 8009bc4:	0801ac88 	.word	0x0801ac88

08009bc8 <HAL_UARTEx_RxEventCallback>:
int flagGPS=0;
uint8_t rx_dma_buffer[NMEA_BUF_SIZE];  // Buffer DMA para recepção
int flagLoRaModuleInitialized=0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	807b      	strh	r3, [r7, #2]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,1);
    if (huart->Instance == UART4) {
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a08      	ldr	r2, [pc, #32]	@ (8009bfc <HAL_UARTEx_RxEventCallback+0x34>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d109      	bne.n	8009bf2 <HAL_UARTEx_RxEventCallback+0x2a>
    	flagLoRaGPS= flagLoRaModuleInitialized & 1;
 8009bde:	4b08      	ldr	r3, [pc, #32]	@ (8009c00 <HAL_UARTEx_RxEventCallback+0x38>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	4a07      	ldr	r2, [pc, #28]	@ (8009c04 <HAL_UARTEx_RxEventCallback+0x3c>)
 8009be8:	6013      	str	r3, [r2, #0]
    	gps_RxEventCallback(Size);
 8009bea:	887b      	ldrh	r3, [r7, #2]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fd ffdb 	bl	8007ba8 <gps_RxEventCallback>

    }
    //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,0);
}
 8009bf2:	bf00      	nop
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	40004c00 	.word	0x40004c00
 8009c00:	200039d4 	.word	0x200039d4
 8009c04:	20003a90 	.word	0x20003a90

08009c08 <HAL_SPI_TxRxCpltCallback>:




//interrupt do SPI
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
	if (hspi->Instance == SPI1) {
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a04      	ldr	r2, [pc, #16]	@ (8009c28 <HAL_SPI_TxRxCpltCallback+0x20>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d101      	bne.n	8009c1e <HAL_SPI_TxRxCpltCallback+0x16>
		IMU_TxRxCpltCallback();
 8009c1a:	f7fe fc69 	bl	80084f0 <IMU_TxRxCpltCallback>

	}
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
}
 8009c1e:	bf00      	nop
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	40013000 	.word	0x40013000

08009c2c <HAL_TIM_PeriodElapsedCallback>:
int flagLoRaOil=0;



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM1)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a45      	ldr	r2, [pc, #276]	@ (8009d50 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d169      	bne.n	8009d12 <HAL_TIM_PeriodElapsedCallback+0xe6>
  {
	/*if(counter % 4 == 0){ //50Hz
		//Strain_gauge_ISR();
	}*/
	if(counter % 20 == 0){ //10Hz
 8009c3e:	4b45      	ldr	r3, [pc, #276]	@ (8009d54 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8009c40:	6819      	ldr	r1, [r3, #0]
 8009c42:	4b45      	ldr	r3, [pc, #276]	@ (8009d58 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8009c44:	fb83 2301 	smull	r2, r3, r3, r1
 8009c48:	10da      	asrs	r2, r3, #3
 8009c4a:	17cb      	asrs	r3, r1, #31
 8009c4c:	1ad2      	subs	r2, r2, r3
 8009c4e:	4613      	mov	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	1aca      	subs	r2, r1, r3
 8009c58:	2a00      	cmp	r2, #0
 8009c5a:	d111      	bne.n	8009c80 <HAL_TIM_PeriodElapsedCallback+0x54>
		ICM20948_ISR(1);
 8009c5c:	2001      	movs	r0, #1
 8009c5e:	f7fe fe59 	bl	8008914 <ICM20948_ISR>
		Speed_ISR();
 8009c62:	f7fe ffaf 	bl	8008bc4 <Speed_ISR>
		//flagLoRaGPS= flagLoRaModuleInitialized & 1;
		flagLoRaSpeed= flagLoRaModuleInitialized & 1;
 8009c66:	4b3d      	ldr	r3, [pc, #244]	@ (8009d5c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 0301 	and.w	r3, r3, #1
 8009c6e:	4a3c      	ldr	r2, [pc, #240]	@ (8009d60 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8009c70:	6013      	str	r3, [r2, #0]
		flagLoRaOil= flagLoRaModuleInitialized & 1;
 8009c72:	4b3a      	ldr	r3, [pc, #232]	@ (8009d5c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	4a3a      	ldr	r2, [pc, #232]	@ (8009d64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8009c7c:	6013      	str	r3, [r2, #0]
 8009c7e:	e002      	b.n	8009c86 <HAL_TIM_PeriodElapsedCallback+0x5a>
	}else{
		ICM20948_ISR(0);
 8009c80:	2000      	movs	r0, #0
 8009c82:	f7fe fe47 	bl	8008914 <ICM20948_ISR>
	}
	if(counter % 100 == 0) {  // 2Hz
 8009c86:	4b33      	ldr	r3, [pc, #204]	@ (8009d54 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	4b37      	ldr	r3, [pc, #220]	@ (8009d68 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8009c8c:	fb83 1302 	smull	r1, r3, r3, r2
 8009c90:	1159      	asrs	r1, r3, #5
 8009c92:	17d3      	asrs	r3, r2, #31
 8009c94:	1acb      	subs	r3, r1, r3
 8009c96:	2164      	movs	r1, #100	@ 0x64
 8009c98:	fb01 f303 	mul.w	r3, r1, r3
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10b      	bne.n	8009cba <HAL_TIM_PeriodElapsedCallback+0x8e>
		//IMU_Attitude_ISR();
		flagLoRaIMUAttitude= flagLoRaModuleInitialized & 1;
 8009ca2:	4b2e      	ldr	r3, [pc, #184]	@ (8009d5c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	4a30      	ldr	r2, [pc, #192]	@ (8009d6c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8009cac:	6013      	str	r3, [r2, #0]
		flagLoRaCAN2Hz= flagLoRaModuleInitialized & 1;
 8009cae:	4b2b      	ldr	r3, [pc, #172]	@ (8009d5c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f003 0301 	and.w	r3, r3, #1
 8009cb6:	4a2e      	ldr	r2, [pc, #184]	@ (8009d70 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8009cb8:	6013      	str	r3, [r2, #0]
	}
	if(counter % 200 == 0) {  // 1Hz
 8009cba:	4b26      	ldr	r3, [pc, #152]	@ (8009d54 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8009d68 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8009cc0:	fb83 1302 	smull	r1, r3, r3, r2
 8009cc4:	1199      	asrs	r1, r3, #6
 8009cc6:	17d3      	asrs	r3, r2, #31
 8009cc8:	1acb      	subs	r3, r1, r3
 8009cca:	21c8      	movs	r1, #200	@ 0xc8
 8009ccc:	fb01 f303 	mul.w	r3, r1, r3
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d105      	bne.n	8009ce2 <HAL_TIM_PeriodElapsedCallback+0xb6>
		flagLoRaCAN1Hz= flagLoRaModuleInitialized & 1;
 8009cd6:	4b21      	ldr	r3, [pc, #132]	@ (8009d5c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 0301 	and.w	r3, r3, #1
 8009cde:	4a25      	ldr	r2, [pc, #148]	@ (8009d74 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8009ce0:	6013      	str	r3, [r2, #0]
	}


	Oil_pressure_ISR();
 8009ce2:	f001 fa8d 	bl	800b200 <Oil_pressure_ISR>
	Front_suspension_magnet_ISR();
 8009ce6:	f7fe ff7b 	bl	8008be0 <Front_suspension_magnet_ISR>
	//Front_suspension_vision_ISR();
	Rear_suspension_ISR();
 8009cea:	f7fe ff8d 	bl	8008c08 <Rear_suspension_ISR>
	Steering_angle_ISR();
 8009cee:	f7fe ff9f 	bl	8008c30 <Steering_angle_ISR>

	counter=(counter+1) % 10000;
 8009cf2:	4b18      	ldr	r3, [pc, #96]	@ (8009d54 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	1c5a      	adds	r2, r3, #1
 8009cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8009d78 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8009cfa:	fb83 1302 	smull	r1, r3, r3, r2
 8009cfe:	1319      	asrs	r1, r3, #12
 8009d00:	17d3      	asrs	r3, r2, #31
 8009d02:	1acb      	subs	r3, r1, r3
 8009d04:	f242 7110 	movw	r1, #10000	@ 0x2710
 8009d08:	fb01 f303 	mul.w	r3, r1, r3
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	4a11      	ldr	r2, [pc, #68]	@ (8009d54 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8009d10:	6013      	str	r3, [r2, #0]
  }
  if(htim->Instance == TIM14)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a19      	ldr	r2, [pc, #100]	@ (8009d7c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d10d      	bne.n	8009d38 <HAL_TIM_PeriodElapsedCallback+0x10c>
  {
	  counter_ms = (counter_ms + 1) % 1000;
 8009d1c:	4b18      	ldr	r3, [pc, #96]	@ (8009d80 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	1c5a      	adds	r2, r3, #1
 8009d22:	4b18      	ldr	r3, [pc, #96]	@ (8009d84 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8009d24:	fba3 1302 	umull	r1, r3, r3, r2
 8009d28:	099b      	lsrs	r3, r3, #6
 8009d2a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009d2e:	fb01 f303 	mul.w	r3, r1, r3
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	4a12      	ldr	r2, [pc, #72]	@ (8009d80 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8009d36:	6013      	str	r3, [r2, #0]
  }
  if (htim == canopenNodeSTM32->timerHandle) {
 8009d38:	4b13      	ldr	r3, [pc, #76]	@ (8009d88 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d101      	bne.n	8009d48 <HAL_TIM_PeriodElapsedCallback+0x11c>
      canopen_app_interrupt();
 8009d44:	f7fd fad2 	bl	80072ec <canopen_app_interrupt>
  }
}
 8009d48:	bf00      	nop
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	40010000 	.word	0x40010000
 8009d54:	20003a8c 	.word	0x20003a8c
 8009d58:	66666667 	.word	0x66666667
 8009d5c:	200039d4 	.word	0x200039d4
 8009d60:	20003aa0 	.word	0x20003aa0
 8009d64:	20003aa4 	.word	0x20003aa4
 8009d68:	51eb851f 	.word	0x51eb851f
 8009d6c:	20003a94 	.word	0x20003a94
 8009d70:	20003a9c 	.word	0x20003a9c
 8009d74:	20003a98 	.word	0x20003a98
 8009d78:	68db8bad 	.word	0x68db8bad
 8009d7c:	40002000 	.word	0x40002000
 8009d80:	20001d04 	.word	0x20001d04
 8009d84:	10624dd3 	.word	0x10624dd3
 8009d88:	200003f0 	.word	0x200003f0

08009d8c <canopeninit___>:
//
//////////////////////////////////////////////////////////////////////////////////////////////////////77/
Sensor CAN;
CANopenNodeSTM32 canOpenNodeSTM32;

void canopeninit___(){
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	af00      	add	r7, sp, #0
	canOpenNodeSTM32.CANHandle = &hcan1;
 8009d90:	4b09      	ldr	r3, [pc, #36]	@ (8009db8 <canopeninit___+0x2c>)
 8009d92:	4a0a      	ldr	r2, [pc, #40]	@ (8009dbc <canopeninit___+0x30>)
 8009d94:	609a      	str	r2, [r3, #8]
	canOpenNodeSTM32.HWInitFunction = MX_CAN1_Init;
 8009d96:	4b08      	ldr	r3, [pc, #32]	@ (8009db8 <canopeninit___+0x2c>)
 8009d98:	4a09      	ldr	r2, [pc, #36]	@ (8009dc0 <canopeninit___+0x34>)
 8009d9a:	60da      	str	r2, [r3, #12]
	canOpenNodeSTM32.timerHandle = &htim14;
 8009d9c:	4b06      	ldr	r3, [pc, #24]	@ (8009db8 <canopeninit___+0x2c>)
 8009d9e:	4a09      	ldr	r2, [pc, #36]	@ (8009dc4 <canopeninit___+0x38>)
 8009da0:	605a      	str	r2, [r3, #4]
	canOpenNodeSTM32.desiredNodeID = 1;
 8009da2:	4b05      	ldr	r3, [pc, #20]	@ (8009db8 <canopeninit___+0x2c>)
 8009da4:	2201      	movs	r2, #1
 8009da6:	701a      	strb	r2, [r3, #0]
	canOpenNodeSTM32.baudrate = 125;
 8009da8:	4b03      	ldr	r3, [pc, #12]	@ (8009db8 <canopeninit___+0x2c>)
 8009daa:	227d      	movs	r2, #125	@ 0x7d
 8009dac:	805a      	strh	r2, [r3, #2]
	canopen_app_init(&canOpenNodeSTM32);
 8009dae:	4802      	ldr	r0, [pc, #8]	@ (8009db8 <canopeninit___+0x2c>)
 8009db0:	f7fd f8de 	bl	8006f70 <canopen_app_init>
}
 8009db4:	bf00      	nop
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	20003eb8 	.word	0x20003eb8
 8009dbc:	20000878 	.word	0x20000878
 8009dc0:	0800a245 	.word	0x0800a245
 8009dc4:	20000f98 	.word	0x20000f98

08009dc8 <HAL_ADC_ConvCpltCallback>:
//              Oil Sensor
//
//////////////////////////////////////////////////////////////////////////////////////////////////////77/
Sensor oil_sensor;
// Callback de conversão completa do ADC – chamado quando ADC1 terminar uma conversão
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
    // Verifica se o callback veio do ADC1
    if (hadc->Instance == ADC1) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a08      	ldr	r2, [pc, #32]	@ (8009df8 <HAL_ADC_ConvCpltCallback+0x30>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d10a      	bne.n	8009df0 <HAL_ADC_ConvCpltCallback+0x28>
        // Lê o valor convertido do ADC (0-4095 para 12 bits)
        uint16_t adcValue = HAL_ADC_GetValue(hadc);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f002 fd12 	bl	800c804 <HAL_ADC_GetValue>
 8009de0:	4603      	mov	r3, r0
 8009de2:	81fb      	strh	r3, [r7, #14]

		//snprintf((char *)tx_buffer, sizeof(tx_buffer),"%d\r\n",adcValue);
		//HAL_UART_Transmit(&huart2, tx_buffer, strlen((char *)tx_buffer), HAL_MAX_DELAY);
        save_data_to_sensor(&oil_sensor,adcValue);
 8009de4:	89fb      	ldrh	r3, [r7, #14]
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	4619      	mov	r1, r3
 8009dea:	4804      	ldr	r0, [pc, #16]	@ (8009dfc <HAL_ADC_ConvCpltCallback+0x34>)
 8009dec:	f001 f9a2 	bl	800b134 <save_data_to_sensor>

    	//char msg[64];
    	//sprintf(msg, "ADC = %lu\r\n",adcValue);
    	//HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    }
}
 8009df0:	bf00      	nop
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	40012000 	.word	0x40012000
 8009dfc:	20003ed0 	.word	0x20003ed0

08009e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009e00:	b5b0      	push	{r4, r5, r7, lr}
 8009e02:	b09c      	sub	sp, #112	@ 0x70
 8009e04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009e06:	f002 fa35 	bl	800c274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009e0a:	f000 f95b 	bl	800a0c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009e0e:	f000 fee7 	bl	800abe0 <MX_GPIO_Init>
  MX_DMA_Init();
 8009e12:	f000 fe87 	bl	800ab24 <MX_DMA_Init>
  MX_SPI1_Init();
 8009e16:	f000 fadb 	bl	800a3d0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8009e1a:	f000 fe59 	bl	800aad0 <MX_USART2_UART_Init>
  MX_SDIO_MMC_Init();
 8009e1e:	f000 faa7 	bl	800a370 <MX_SDIO_MMC_Init>
  MX_RTC_Init();
 8009e22:	f000 fa45 	bl	800a2b0 <MX_RTC_Init>
  MX_UART4_Init();
 8009e26:	f000 fe29 	bl	800aa7c <MX_UART4_Init>
  MX_TIM14_Init();
 8009e2a:	f000 fe05 	bl	800aa38 <MX_TIM14_Init>
  MX_CAN1_Init();
 8009e2e:	f000 fa09 	bl	800a244 <MX_CAN1_Init>
  MX_TIM4_Init();
 8009e32:	f000 fcc3 	bl	800a7bc <MX_TIM4_Init>
  MX_TIM3_Init();
 8009e36:	f000 fc23 	bl	800a680 <MX_TIM3_Init>
  MX_TIM8_Init();
 8009e3a:	f000 fd5d 	bl	800a8f8 <MX_TIM8_Init>
  MX_SPI2_Init();
 8009e3e:	f000 fafd 	bl	800a43c <MX_SPI2_Init>
  MX_TIM1_Init();
 8009e42:	f000 fb31 	bl	800a4a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8009e46:	f000 fb7f 	bl	800a548 <MX_TIM2_Init>
  MX_ADC1_Init();
 8009e4a:	f000 f9a9 	bl	800a1a0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  snprintf(uart_msg, sizeof(uart_msg), "All STM32 peripherals configured!\r\n");
 8009e4e:	4a84      	ldr	r2, [pc, #528]	@ (800a060 <main+0x260>)
 8009e50:	f240 411a 	movw	r1, #1050	@ 0x41a
 8009e54:	4883      	ldr	r0, [pc, #524]	@ (800a064 <main+0x264>)
 8009e56:	f00c ffbd 	bl	8016dd4 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 8009e5a:	4882      	ldr	r0, [pc, #520]	@ (800a064 <main+0x264>)
 8009e5c:	f7f6 fa28 	bl	80002b0 <strlen>
 8009e60:	4603      	mov	r3, r0
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	f04f 33ff 	mov.w	r3, #4294967295
 8009e68:	497e      	ldr	r1, [pc, #504]	@ (800a064 <main+0x264>)
 8009e6a:	487f      	ldr	r0, [pc, #508]	@ (800a068 <main+0x268>)
 8009e6c:	f00a f81a 	bl	8013ea4 <HAL_UART_Transmit>


  __HAL_MMC_DISABLE(&hmmc);
 8009e70:	4b7e      	ldr	r3, [pc, #504]	@ (800a06c <main+0x26c>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hmmc.Instance->CLKCR, SDIO_CLKCR_CLKDIV, 2);  // ~6 MHz
 8009e76:	4b7e      	ldr	r3, [pc, #504]	@ (800a070 <main+0x270>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009e80:	4b7b      	ldr	r3, [pc, #492]	@ (800a070 <main+0x270>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f042 0202 	orr.w	r2, r2, #2
 8009e88:	605a      	str	r2, [r3, #4]
  __HAL_MMC_ENABLE(&hmmc);
 8009e8a:	4b78      	ldr	r3, [pc, #480]	@ (800a06c <main+0x26c>)
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	601a      	str	r2, [r3, #0]

  int extract_data=0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (extract_data){
 8009e94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d003      	beq.n	8009ea2 <main+0xa2>
	  SDIO_ReadAllData();
 8009e9a:	f7ff fd73 	bl	8009984 <SDIO_ReadAllData>
	  while(1);
 8009e9e:	bf00      	nop
 8009ea0:	e7fd      	b.n	8009e9e <main+0x9e>
  }

  int reset_mem=0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	667b      	str	r3, [r7, #100]	@ 0x64
  if(reset_mem)
 8009ea6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d001      	beq.n	8009eb0 <main+0xb0>
	  update_memBlock_nr();
 8009eac:	f7fe fed4 	bl	8008c58 <update_memBlock_nr>
  get_memBlock_nr();
 8009eb0:	f7fe fef6 	bl	8008ca0 <get_memBlock_nr>


  // Início LoRa
  char startMsg[] = "\r\nIniciando transmissor LoRa...\r\n";
 8009eb4:	4b6f      	ldr	r3, [pc, #444]	@ (800a074 <main+0x274>)
 8009eb6:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8009eba:	461d      	mov	r5, r3
 8009ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ec4:	682b      	ldr	r3, [r5, #0]
 8009ec6:	8023      	strh	r3, [r4, #0]
  int LoRaStartTries = 0;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  HAL_UART_Transmit(&huart2, (uint8_t*)startMsg, strlen(startMsg), HAL_MAX_DELAY);
 8009ecc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7f6 f9ed 	bl	80002b0 <strlen>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8009ede:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee2:	4861      	ldr	r0, [pc, #388]	@ (800a068 <main+0x268>)
 8009ee4:	f009 ffde 	bl	8013ea4 <HAL_UART_Transmit>
  while (RFM95_Init() != RFM95_OK && LoRaStartTries < 10) {
 8009ee8:	e01c      	b.n	8009f24 <main+0x124>
      // Se falhar, tentar outra vez
      char errMsg[] = "Falha na iniciacao do RFM95! Vou tentar outra vez.\r\n";
 8009eea:	4b63      	ldr	r3, [pc, #396]	@ (800a078 <main+0x278>)
 8009eec:	1d3c      	adds	r4, r7, #4
 8009eee:	461d      	mov	r5, r3
 8009ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009efc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009f00:	6020      	str	r0, [r4, #0]
 8009f02:	3404      	adds	r4, #4
 8009f04:	7021      	strb	r1, [r4, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)errMsg, strlen(errMsg), HAL_MAX_DELAY);
 8009f06:	1d3b      	adds	r3, r7, #4
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7f6 f9d1 	bl	80002b0 <strlen>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	1d39      	adds	r1, r7, #4
 8009f14:	f04f 33ff 	mov.w	r3, #4294967295
 8009f18:	4853      	ldr	r0, [pc, #332]	@ (800a068 <main+0x268>)
 8009f1a:	f009 ffc3 	bl	8013ea4 <HAL_UART_Transmit>
      LoRaStartTries++;
 8009f1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f20:	3301      	adds	r3, #1
 8009f22:	66fb      	str	r3, [r7, #108]	@ 0x6c
  while (RFM95_Init() != RFM95_OK && LoRaStartTries < 10) {
 8009f24:	f000 ff56 	bl	800add4 <RFM95_Init>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d002      	beq.n	8009f34 <main+0x134>
 8009f2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f30:	2b09      	cmp	r3, #9
 8009f32:	ddda      	ble.n	8009eea <main+0xea>
      //HAL_Delay(10);
  }
  if(LoRaStartTries < 10)
 8009f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f36:	2b09      	cmp	r3, #9
 8009f38:	dc03      	bgt.n	8009f42 <main+0x142>
	  flagLoRaModuleInitialized=1;
 8009f3a:	4b50      	ldr	r3, [pc, #320]	@ (800a07c <main+0x27c>)
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	601a      	str	r2, [r3, #0]
 8009f40:	e014      	b.n	8009f6c <main+0x16c>
  else {
	  char errMsg[] = "ERRO modulo LoRa nao iniciado!\r\n";
 8009f42:	4b4f      	ldr	r3, [pc, #316]	@ (800a080 <main+0x280>)
 8009f44:	1d3c      	adds	r4, r7, #4
 8009f46:	461d      	mov	r5, r3
 8009f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)errMsg, strlen(errMsg), HAL_MAX_DELAY);
 8009f54:	1d3b      	adds	r3, r7, #4
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7f6 f9aa 	bl	80002b0 <strlen>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	1d39      	adds	r1, r7, #4
 8009f62:	f04f 33ff 	mov.w	r3, #4294967295
 8009f66:	4840      	ldr	r0, [pc, #256]	@ (800a068 <main+0x268>)
 8009f68:	f009 ff9c 	bl	8013ea4 <HAL_UART_Transmit>
  };

  ICM20948_Setup();
 8009f6c:	f7fe fc78 	bl	8008860 <ICM20948_Setup>
  canopeninit___();
 8009f70:	f7ff ff0c 	bl	8009d8c <canopeninit___>

  accel.sensorType=1;
 8009f74:	4b43      	ldr	r3, [pc, #268]	@ (800a084 <main+0x284>)
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
  gyro.sensorType=2;
 8009f7c:	4b42      	ldr	r3, [pc, #264]	@ (800a088 <main+0x288>)
 8009f7e:	2202      	movs	r2, #2
 8009f80:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
  mag.sensorType=3;
 8009f84:	4b41      	ldr	r3, [pc, #260]	@ (800a08c <main+0x28c>)
 8009f86:	2203      	movs	r2, #3
 8009f88:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
  gps.sensorType=4;
 8009f8c:	4b40      	ldr	r3, [pc, #256]	@ (800a090 <main+0x290>)
 8009f8e:	2204      	movs	r2, #4
 8009f90:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
  CAN.sensorType=5;
 8009f94:	4b3f      	ldr	r3, [pc, #252]	@ (800a094 <main+0x294>)
 8009f96:	2205      	movs	r2, #5
 8009f98:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
  speed_sensor.sensorType=6;
 8009f9c:	4b3e      	ldr	r3, [pc, #248]	@ (800a098 <main+0x298>)
 8009f9e:	2206      	movs	r2, #6
 8009fa0:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
  oil_sensor.sensorType=7;
 8009fa4:	4b3d      	ldr	r3, [pc, #244]	@ (800a09c <main+0x29c>)
 8009fa6:	2207      	movs	r2, #7
 8009fa8:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
  front_susp_sensor.sensorType=8;
 8009fac:	4b3c      	ldr	r3, [pc, #240]	@ (800a0a0 <main+0x2a0>)
 8009fae:	2208      	movs	r2, #8
 8009fb0:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
  rear_susp_sensor.sensorType=9;
 8009fb4:	4b3b      	ldr	r3, [pc, #236]	@ (800a0a4 <main+0x2a4>)
 8009fb6:	2209      	movs	r2, #9
 8009fb8:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
  steering_angle_sensor.sensorType=10;
 8009fbc:	4b3a      	ldr	r3, [pc, #232]	@ (800a0a8 <main+0x2a8>)
 8009fbe:	220a      	movs	r2, #10
 8009fc0:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c


  update_timestamp();
 8009fc4:	f001 f81e 	bl	800b004 <update_timestamp>
  uint32_t timestampprevious=timestamp;
 8009fc8:	4b38      	ldr	r3, [pc, #224]	@ (800a0ac <main+0x2ac>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	663b      	str	r3, [r7, #96]	@ 0x60
  while (timestampprevious == timestamp){
 8009fce:	e001      	b.n	8009fd4 <main+0x1d4>
	  update_timestamp();
 8009fd0:	f001 f818 	bl	800b004 <update_timestamp>
  while (timestampprevious == timestamp){
 8009fd4:	4b35      	ldr	r3, [pc, #212]	@ (800a0ac <main+0x2ac>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d0f8      	beq.n	8009fd0 <main+0x1d0>
  }
  HAL_TIM_Base_Start_IT(&htim14); // Iniciar o timer com interrupções
 8009fde:	4834      	ldr	r0, [pc, #208]	@ (800a0b0 <main+0x2b0>)
 8009fe0:	f008 fd08 	bl	80129f4 <HAL_TIM_Base_Start_IT>


  // Inicia a recepção pela UART
  snprintf(uart_msg, sizeof(uart_msg), "À espera da receção GNSS...\r\n");
 8009fe4:	4a33      	ldr	r2, [pc, #204]	@ (800a0b4 <main+0x2b4>)
 8009fe6:	f240 411a 	movw	r1, #1050	@ 0x41a
 8009fea:	481e      	ldr	r0, [pc, #120]	@ (800a064 <main+0x264>)
 8009fec:	f00c fef2 	bl	8016dd4 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);
 8009ff0:	481c      	ldr	r0, [pc, #112]	@ (800a064 <main+0x264>)
 8009ff2:	f7f6 f95d 	bl	80002b0 <strlen>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8009ffe:	4919      	ldr	r1, [pc, #100]	@ (800a064 <main+0x264>)
 800a000:	4819      	ldr	r0, [pc, #100]	@ (800a068 <main+0x268>)
 800a002:	f009 ff4f 	bl	8013ea4 <HAL_UART_Transmit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rx_dma_buffer, NMEA_BUF_SIZE);
 800a006:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a00a:	492b      	ldr	r1, [pc, #172]	@ (800a0b8 <main+0x2b8>)
 800a00c:	482b      	ldr	r0, [pc, #172]	@ (800a0bc <main+0x2bc>)
 800a00e:	f009 ffd4 	bl	8013fba <HAL_UARTEx_ReceiveToIdle_DMA>

  HAL_TIM_Base_Start_IT(&htim1); // Iniciar o timer com interrupções
 800a012:	482b      	ldr	r0, [pc, #172]	@ (800a0c0 <main+0x2c0>)
 800a014:	f008 fcee 	bl	80129f4 <HAL_TIM_Base_Start_IT>
	  //write_IMU_data();
	  //write_gps_data();
	  //write_brake_pressure_data();


	  save_data_to_mem(&accel);
 800a018:	481a      	ldr	r0, [pc, #104]	@ (800a084 <main+0x284>)
 800a01a:	f7ff fc4b 	bl	80098b4 <save_data_to_mem>
	  save_data_to_mem(&gyro);
 800a01e:	481a      	ldr	r0, [pc, #104]	@ (800a088 <main+0x288>)
 800a020:	f7ff fc48 	bl	80098b4 <save_data_to_mem>
	  save_data_to_mem(&mag);
 800a024:	4819      	ldr	r0, [pc, #100]	@ (800a08c <main+0x28c>)
 800a026:	f7ff fc45 	bl	80098b4 <save_data_to_mem>
	  save_data_to_mem(&gps);
 800a02a:	4819      	ldr	r0, [pc, #100]	@ (800a090 <main+0x290>)
 800a02c:	f7ff fc42 	bl	80098b4 <save_data_to_mem>
	  save_data_to_mem(&CAN);
 800a030:	4818      	ldr	r0, [pc, #96]	@ (800a094 <main+0x294>)
 800a032:	f7ff fc3f 	bl	80098b4 <save_data_to_mem>
	  save_data_to_mem(&speed_sensor);
 800a036:	4818      	ldr	r0, [pc, #96]	@ (800a098 <main+0x298>)
 800a038:	f7ff fc3c 	bl	80098b4 <save_data_to_mem>
	  save_data_to_mem(&oil_sensor);
 800a03c:	4817      	ldr	r0, [pc, #92]	@ (800a09c <main+0x29c>)
 800a03e:	f7ff fc39 	bl	80098b4 <save_data_to_mem>
	  save_data_to_mem(&front_susp_sensor);
 800a042:	4817      	ldr	r0, [pc, #92]	@ (800a0a0 <main+0x2a0>)
 800a044:	f7ff fc36 	bl	80098b4 <save_data_to_mem>
	  save_data_to_mem(&rear_susp_sensor);
 800a048:	4816      	ldr	r0, [pc, #88]	@ (800a0a4 <main+0x2a4>)
 800a04a:	f7ff fc33 	bl	80098b4 <save_data_to_mem>
	  save_data_to_mem(&steering_angle_sensor);
 800a04e:	4816      	ldr	r0, [pc, #88]	@ (800a0a8 <main+0x2a8>)
 800a050:	f7ff fc30 	bl	80098b4 <save_data_to_mem>


	  SendLoRa();
 800a054:	f000 ff92 	bl	800af7c <SendLoRa>
	  canopen_app_process();
 800a058:	f7fd f8dc 	bl	8007214 <canopen_app_process>
	  save_data_to_mem(&accel);
 800a05c:	bf00      	nop
 800a05e:	e7db      	b.n	800a018 <main+0x218>
 800a060:	0801acac 	.word	0x0801acac
 800a064:	20002fa4 	.word	0x20002fa4
 800a068:	20001028 	.word	0x20001028
 800a06c:	422580a0 	.word	0x422580a0
 800a070:	200008c0 	.word	0x200008c0
 800a074:	0801acf4 	.word	0x0801acf4
 800a078:	0801ad18 	.word	0x0801ad18
 800a07c:	200039d4 	.word	0x200039d4
 800a080:	0801ad50 	.word	0x0801ad50
 800a084:	200010d0 	.word	0x200010d0
 800a088:	200014e0 	.word	0x200014e0
 800a08c:	200018f0 	.word	0x200018f0
 800a090:	200033c0 	.word	0x200033c0
 800a094:	20003aa8 	.word	0x20003aa8
 800a098:	20001d54 	.word	0x20001d54
 800a09c:	20003ed0 	.word	0x20003ed0
 800a0a0:	20002164 	.word	0x20002164
 800a0a4:	20002574 	.word	0x20002574
 800a0a8:	20002984 	.word	0x20002984
 800a0ac:	20001d00 	.word	0x20001d00
 800a0b0:	20000f98 	.word	0x20000f98
 800a0b4:	0801acd0 	.word	0x0801acd0
 800a0b8:	200037d4 	.word	0x200037d4
 800a0bc:	20000fe0 	.word	0x20000fe0
 800a0c0:	20000e30 	.word	0x20000e30

0800a0c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b094      	sub	sp, #80	@ 0x50
 800a0c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a0ca:	f107 031c 	add.w	r3, r7, #28
 800a0ce:	2234      	movs	r2, #52	@ 0x34
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f00c ffc8 	bl	8017068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a0d8:	f107 0308 	add.w	r3, r7, #8
 800a0dc:	2200      	movs	r2, #0
 800a0de:	601a      	str	r2, [r3, #0]
 800a0e0:	605a      	str	r2, [r3, #4]
 800a0e2:	609a      	str	r2, [r3, #8]
 800a0e4:	60da      	str	r2, [r3, #12]
 800a0e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	607b      	str	r3, [r7, #4]
 800a0ec:	4b2a      	ldr	r3, [pc, #168]	@ (800a198 <SystemClock_Config+0xd4>)
 800a0ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0f0:	4a29      	ldr	r2, [pc, #164]	@ (800a198 <SystemClock_Config+0xd4>)
 800a0f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0f6:	6413      	str	r3, [r2, #64]	@ 0x40
 800a0f8:	4b27      	ldr	r3, [pc, #156]	@ (800a198 <SystemClock_Config+0xd4>)
 800a0fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a100:	607b      	str	r3, [r7, #4]
 800a102:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800a104:	2300      	movs	r3, #0
 800a106:	603b      	str	r3, [r7, #0]
 800a108:	4b24      	ldr	r3, [pc, #144]	@ (800a19c <SystemClock_Config+0xd8>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800a110:	4a22      	ldr	r2, [pc, #136]	@ (800a19c <SystemClock_Config+0xd8>)
 800a112:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a116:	6013      	str	r3, [r2, #0]
 800a118:	4b20      	ldr	r3, [pc, #128]	@ (800a19c <SystemClock_Config+0xd8>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a120:	603b      	str	r3, [r7, #0]
 800a122:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800a124:	2306      	movs	r3, #6
 800a126:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a128:	2301      	movs	r3, #1
 800a12a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a12c:	2301      	movs	r3, #1
 800a12e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a130:	2310      	movs	r3, #16
 800a132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a134:	2302      	movs	r3, #2
 800a136:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a138:	2300      	movs	r3, #0
 800a13a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800a13c:	2310      	movs	r3, #16
 800a13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 800a140:	23c0      	movs	r3, #192	@ 0xc0
 800a142:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a144:	2302      	movs	r3, #2
 800a146:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a148:	2304      	movs	r3, #4
 800a14a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a14c:	2302      	movs	r3, #2
 800a14e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a150:	f107 031c 	add.w	r3, r7, #28
 800a154:	4618      	mov	r0, r3
 800a156:	f006 fed1 	bl	8010efc <HAL_RCC_OscConfig>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d001      	beq.n	800a164 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800a160:	f000 fdd4 	bl	800ad0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a164:	230f      	movs	r3, #15
 800a166:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800a168:	2300      	movs	r3, #0
 800a16a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a16c:	2300      	movs	r3, #0
 800a16e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a170:	2300      	movs	r3, #0
 800a172:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a174:	2300      	movs	r3, #0
 800a176:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800a178:	f107 0308 	add.w	r3, r7, #8
 800a17c:	2100      	movs	r1, #0
 800a17e:	4618      	mov	r0, r3
 800a180:	f006 f8ce 	bl	8010320 <HAL_RCC_ClockConfig>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d001      	beq.n	800a18e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800a18a:	f000 fdbf 	bl	800ad0c <Error_Handler>
  }
}
 800a18e:	bf00      	nop
 800a190:	3750      	adds	r7, #80	@ 0x50
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	40023800 	.word	0x40023800
 800a19c:	40007000 	.word	0x40007000

0800a1a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a1a6:	463b      	mov	r3, r7
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	601a      	str	r2, [r3, #0]
 800a1ac:	605a      	str	r2, [r3, #4]
 800a1ae:	609a      	str	r2, [r3, #8]
 800a1b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800a1b2:	4b21      	ldr	r3, [pc, #132]	@ (800a238 <MX_ADC1_Init+0x98>)
 800a1b4:	4a21      	ldr	r2, [pc, #132]	@ (800a23c <MX_ADC1_Init+0x9c>)
 800a1b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800a1b8:	4b1f      	ldr	r3, [pc, #124]	@ (800a238 <MX_ADC1_Init+0x98>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a1be:	4b1e      	ldr	r3, [pc, #120]	@ (800a238 <MX_ADC1_Init+0x98>)
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800a1c4:	4b1c      	ldr	r3, [pc, #112]	@ (800a238 <MX_ADC1_Init+0x98>)
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800a1ca:	4b1b      	ldr	r3, [pc, #108]	@ (800a238 <MX_ADC1_Init+0x98>)
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a1d0:	4b19      	ldr	r3, [pc, #100]	@ (800a238 <MX_ADC1_Init+0x98>)
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a1d8:	4b17      	ldr	r3, [pc, #92]	@ (800a238 <MX_ADC1_Init+0x98>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a1de:	4b16      	ldr	r3, [pc, #88]	@ (800a238 <MX_ADC1_Init+0x98>)
 800a1e0:	4a17      	ldr	r2, [pc, #92]	@ (800a240 <MX_ADC1_Init+0xa0>)
 800a1e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a1e4:	4b14      	ldr	r3, [pc, #80]	@ (800a238 <MX_ADC1_Init+0x98>)
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800a1ea:	4b13      	ldr	r3, [pc, #76]	@ (800a238 <MX_ADC1_Init+0x98>)
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800a1f0:	4b11      	ldr	r3, [pc, #68]	@ (800a238 <MX_ADC1_Init+0x98>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a1f8:	4b0f      	ldr	r3, [pc, #60]	@ (800a238 <MX_ADC1_Init+0x98>)
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a1fe:	480e      	ldr	r0, [pc, #56]	@ (800a238 <MX_ADC1_Init+0x98>)
 800a200:	f002 f8ce 	bl	800c3a0 <HAL_ADC_Init>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800a20a:	f000 fd7f 	bl	800ad0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800a20e:	2309      	movs	r3, #9
 800a210:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800a212:	2301      	movs	r3, #1
 800a214:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800a216:	2301      	movs	r3, #1
 800a218:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a21a:	463b      	mov	r3, r7
 800a21c:	4619      	mov	r1, r3
 800a21e:	4806      	ldr	r0, [pc, #24]	@ (800a238 <MX_ADC1_Init+0x98>)
 800a220:	f002 fb12 	bl	800c848 <HAL_ADC_ConfigChannel>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d001      	beq.n	800a22e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800a22a:	f000 fd6f 	bl	800ad0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a22e:	bf00      	nop
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20000830 	.word	0x20000830
 800a23c:	40012000 	.word	0x40012000
 800a240:	0f000001 	.word	0x0f000001

0800a244 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800a248:	4b17      	ldr	r3, [pc, #92]	@ (800a2a8 <MX_CAN1_Init+0x64>)
 800a24a:	4a18      	ldr	r2, [pc, #96]	@ (800a2ac <MX_CAN1_Init+0x68>)
 800a24c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 800a24e:	4b16      	ldr	r3, [pc, #88]	@ (800a2a8 <MX_CAN1_Init+0x64>)
 800a250:	2201      	movs	r2, #1
 800a252:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800a254:	4b14      	ldr	r3, [pc, #80]	@ (800a2a8 <MX_CAN1_Init+0x64>)
 800a256:	2200      	movs	r2, #0
 800a258:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800a25a:	4b13      	ldr	r3, [pc, #76]	@ (800a2a8 <MX_CAN1_Init+0x64>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800a260:	4b11      	ldr	r3, [pc, #68]	@ (800a2a8 <MX_CAN1_Init+0x64>)
 800a262:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800a266:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800a268:	4b0f      	ldr	r3, [pc, #60]	@ (800a2a8 <MX_CAN1_Init+0x64>)
 800a26a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a26e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800a270:	4b0d      	ldr	r3, [pc, #52]	@ (800a2a8 <MX_CAN1_Init+0x64>)
 800a272:	2200      	movs	r2, #0
 800a274:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800a276:	4b0c      	ldr	r3, [pc, #48]	@ (800a2a8 <MX_CAN1_Init+0x64>)
 800a278:	2200      	movs	r2, #0
 800a27a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800a27c:	4b0a      	ldr	r3, [pc, #40]	@ (800a2a8 <MX_CAN1_Init+0x64>)
 800a27e:	2200      	movs	r2, #0
 800a280:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800a282:	4b09      	ldr	r3, [pc, #36]	@ (800a2a8 <MX_CAN1_Init+0x64>)
 800a284:	2200      	movs	r2, #0
 800a286:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800a288:	4b07      	ldr	r3, [pc, #28]	@ (800a2a8 <MX_CAN1_Init+0x64>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800a28e:	4b06      	ldr	r3, [pc, #24]	@ (800a2a8 <MX_CAN1_Init+0x64>)
 800a290:	2200      	movs	r2, #0
 800a292:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800a294:	4804      	ldr	r0, [pc, #16]	@ (800a2a8 <MX_CAN1_Init+0x64>)
 800a296:	f002 fd0f 	bl	800ccb8 <HAL_CAN_Init>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d001      	beq.n	800a2a4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800a2a0:	f000 fd34 	bl	800ad0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800a2a4:	bf00      	nop
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	20000878 	.word	0x20000878
 800a2ac:	40006400 	.word	0x40006400

0800a2b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800a2b6:	1d3b      	adds	r3, r7, #4
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]
 800a2bc:	605a      	str	r2, [r3, #4]
 800a2be:	609a      	str	r2, [r3, #8]
 800a2c0:	60da      	str	r2, [r3, #12]
 800a2c2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800a2c8:	4b26      	ldr	r3, [pc, #152]	@ (800a364 <MX_RTC_Init+0xb4>)
 800a2ca:	4a27      	ldr	r2, [pc, #156]	@ (800a368 <MX_RTC_Init+0xb8>)
 800a2cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a2ce:	4b25      	ldr	r3, [pc, #148]	@ (800a364 <MX_RTC_Init+0xb4>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a2d4:	4b23      	ldr	r3, [pc, #140]	@ (800a364 <MX_RTC_Init+0xb4>)
 800a2d6:	227f      	movs	r2, #127	@ 0x7f
 800a2d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a2da:	4b22      	ldr	r3, [pc, #136]	@ (800a364 <MX_RTC_Init+0xb4>)
 800a2dc:	22ff      	movs	r2, #255	@ 0xff
 800a2de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a2e0:	4b20      	ldr	r3, [pc, #128]	@ (800a364 <MX_RTC_Init+0xb4>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a2e6:	4b1f      	ldr	r3, [pc, #124]	@ (800a364 <MX_RTC_Init+0xb4>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a2ec:	4b1d      	ldr	r3, [pc, #116]	@ (800a364 <MX_RTC_Init+0xb4>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a2f2:	481c      	ldr	r0, [pc, #112]	@ (800a364 <MX_RTC_Init+0xb4>)
 800a2f4:	f007 f8a0 	bl	8011438 <HAL_RTC_Init>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800a2fe:	f000 fd05 	bl	800ad0c <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if (programDateAndHour==0){
 800a302:	4b1a      	ldr	r3, [pc, #104]	@ (800a36c <MX_RTC_Init+0xbc>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d028      	beq.n	800a35c <MX_RTC_Init+0xac>
  }
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x15;
 800a30a:	2315      	movs	r3, #21
 800a30c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x47;
 800a30e:	2347      	movs	r3, #71	@ 0x47
 800a310:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800a312:	2300      	movs	r3, #0
 800a314:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a316:	2300      	movs	r3, #0
 800a318:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a31a:	2300      	movs	r3, #0
 800a31c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800a31e:	1d3b      	adds	r3, r7, #4
 800a320:	2201      	movs	r2, #1
 800a322:	4619      	mov	r1, r3
 800a324:	480f      	ldr	r0, [pc, #60]	@ (800a364 <MX_RTC_Init+0xb4>)
 800a326:	f007 f908 	bl	801153a <HAL_RTC_SetTime>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800a330:	f000 fcec 	bl	800ad0c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800a334:	2304      	movs	r3, #4
 800a336:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 800a338:	2309      	movs	r3, #9
 800a33a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x25;
 800a33c:	2325      	movs	r3, #37	@ 0x25
 800a33e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x25;
 800a340:	2325      	movs	r3, #37	@ 0x25
 800a342:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800a344:	463b      	mov	r3, r7
 800a346:	2201      	movs	r2, #1
 800a348:	4619      	mov	r1, r3
 800a34a:	4806      	ldr	r0, [pc, #24]	@ (800a364 <MX_RTC_Init+0xb4>)
 800a34c:	f007 f9ed 	bl	801172a <HAL_RTC_SetDate>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d003      	beq.n	800a35e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800a356:	f000 fcd9 	bl	800ad0c <Error_Handler>
 800a35a:	e000      	b.n	800a35e <MX_RTC_Init+0xae>
	return;
 800a35c:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a35e:	3718      	adds	r7, #24
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	200008a0 	.word	0x200008a0
 800a368:	40002800 	.word	0x40002800
 800a36c:	200042e0 	.word	0x200042e0

0800a370 <MX_SDIO_MMC_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_MMC_Init(void)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hmmc.Instance = SDIO;
 800a374:	4b14      	ldr	r3, [pc, #80]	@ (800a3c8 <MX_SDIO_MMC_Init+0x58>)
 800a376:	4a15      	ldr	r2, [pc, #84]	@ (800a3cc <MX_SDIO_MMC_Init+0x5c>)
 800a378:	601a      	str	r2, [r3, #0]
  hmmc.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a37a:	4b13      	ldr	r3, [pc, #76]	@ (800a3c8 <MX_SDIO_MMC_Init+0x58>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	605a      	str	r2, [r3, #4]
  hmmc.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a380:	4b11      	ldr	r3, [pc, #68]	@ (800a3c8 <MX_SDIO_MMC_Init+0x58>)
 800a382:	2200      	movs	r2, #0
 800a384:	609a      	str	r2, [r3, #8]
  hmmc.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a386:	4b10      	ldr	r3, [pc, #64]	@ (800a3c8 <MX_SDIO_MMC_Init+0x58>)
 800a388:	2200      	movs	r2, #0
 800a38a:	60da      	str	r2, [r3, #12]
  hmmc.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a38c:	4b0e      	ldr	r3, [pc, #56]	@ (800a3c8 <MX_SDIO_MMC_Init+0x58>)
 800a38e:	2200      	movs	r2, #0
 800a390:	611a      	str	r2, [r3, #16]
  hmmc.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a392:	4b0d      	ldr	r3, [pc, #52]	@ (800a3c8 <MX_SDIO_MMC_Init+0x58>)
 800a394:	2200      	movs	r2, #0
 800a396:	615a      	str	r2, [r3, #20]
  hmmc.Init.ClockDiv = 118;
 800a398:	4b0b      	ldr	r3, [pc, #44]	@ (800a3c8 <MX_SDIO_MMC_Init+0x58>)
 800a39a:	2276      	movs	r2, #118	@ 0x76
 800a39c:	619a      	str	r2, [r3, #24]
  if (HAL_MMC_Init(&hmmc) != HAL_OK)
 800a39e:	480a      	ldr	r0, [pc, #40]	@ (800a3c8 <MX_SDIO_MMC_Init+0x58>)
 800a3a0:	f004 fbb1 	bl	800eb06 <HAL_MMC_Init>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <MX_SDIO_MMC_Init+0x3e>
  {
    Error_Handler();
 800a3aa:	f000 fcaf 	bl	800ad0c <Error_Handler>
  }
  if (HAL_MMC_ConfigWideBusOperation(&hmmc, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a3ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a3b2:	4805      	ldr	r0, [pc, #20]	@ (800a3c8 <MX_SDIO_MMC_Init+0x58>)
 800a3b4:	f005 fa64 	bl	800f880 <HAL_MMC_ConfigWideBusOperation>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <MX_SDIO_MMC_Init+0x52>
  {
    Error_Handler();
 800a3be:	f000 fca5 	bl	800ad0c <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800a3c2:	bf00      	nop
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	200008c0 	.word	0x200008c0
 800a3cc:	40012c00 	.word	0x40012c00

0800a3d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a3d4:	4b17      	ldr	r3, [pc, #92]	@ (800a434 <MX_SPI1_Init+0x64>)
 800a3d6:	4a18      	ldr	r2, [pc, #96]	@ (800a438 <MX_SPI1_Init+0x68>)
 800a3d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a3da:	4b16      	ldr	r3, [pc, #88]	@ (800a434 <MX_SPI1_Init+0x64>)
 800a3dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a3e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a3e2:	4b14      	ldr	r3, [pc, #80]	@ (800a434 <MX_SPI1_Init+0x64>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a3e8:	4b12      	ldr	r3, [pc, #72]	@ (800a434 <MX_SPI1_Init+0x64>)
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800a3ee:	4b11      	ldr	r3, [pc, #68]	@ (800a434 <MX_SPI1_Init+0x64>)
 800a3f0:	2202      	movs	r2, #2
 800a3f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800a3f4:	4b0f      	ldr	r3, [pc, #60]	@ (800a434 <MX_SPI1_Init+0x64>)
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a3fa:	4b0e      	ldr	r3, [pc, #56]	@ (800a434 <MX_SPI1_Init+0x64>)
 800a3fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a400:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800a402:	4b0c      	ldr	r3, [pc, #48]	@ (800a434 <MX_SPI1_Init+0x64>)
 800a404:	2218      	movs	r2, #24
 800a406:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a408:	4b0a      	ldr	r3, [pc, #40]	@ (800a434 <MX_SPI1_Init+0x64>)
 800a40a:	2200      	movs	r2, #0
 800a40c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a40e:	4b09      	ldr	r3, [pc, #36]	@ (800a434 <MX_SPI1_Init+0x64>)
 800a410:	2200      	movs	r2, #0
 800a412:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a414:	4b07      	ldr	r3, [pc, #28]	@ (800a434 <MX_SPI1_Init+0x64>)
 800a416:	2200      	movs	r2, #0
 800a418:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a41a:	4b06      	ldr	r3, [pc, #24]	@ (800a434 <MX_SPI1_Init+0x64>)
 800a41c:	220a      	movs	r2, #10
 800a41e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a420:	4804      	ldr	r0, [pc, #16]	@ (800a434 <MX_SPI1_Init+0x64>)
 800a422:	f007 fb13 	bl	8011a4c <HAL_SPI_Init>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800a42c:	f000 fc6e 	bl	800ad0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a430:	bf00      	nop
 800a432:	bd80      	pop	{r7, pc}
 800a434:	20000c00 	.word	0x20000c00
 800a438:	40013000 	.word	0x40013000

0800a43c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800a440:	4b17      	ldr	r3, [pc, #92]	@ (800a4a0 <MX_SPI2_Init+0x64>)
 800a442:	4a18      	ldr	r2, [pc, #96]	@ (800a4a4 <MX_SPI2_Init+0x68>)
 800a444:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800a446:	4b16      	ldr	r3, [pc, #88]	@ (800a4a0 <MX_SPI2_Init+0x64>)
 800a448:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a44c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800a44e:	4b14      	ldr	r3, [pc, #80]	@ (800a4a0 <MX_SPI2_Init+0x64>)
 800a450:	2200      	movs	r2, #0
 800a452:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800a454:	4b12      	ldr	r3, [pc, #72]	@ (800a4a0 <MX_SPI2_Init+0x64>)
 800a456:	2200      	movs	r2, #0
 800a458:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a45a:	4b11      	ldr	r3, [pc, #68]	@ (800a4a0 <MX_SPI2_Init+0x64>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a460:	4b0f      	ldr	r3, [pc, #60]	@ (800a4a0 <MX_SPI2_Init+0x64>)
 800a462:	2200      	movs	r2, #0
 800a464:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800a466:	4b0e      	ldr	r3, [pc, #56]	@ (800a4a0 <MX_SPI2_Init+0x64>)
 800a468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a46c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a46e:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a0 <MX_SPI2_Init+0x64>)
 800a470:	2200      	movs	r2, #0
 800a472:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a474:	4b0a      	ldr	r3, [pc, #40]	@ (800a4a0 <MX_SPI2_Init+0x64>)
 800a476:	2200      	movs	r2, #0
 800a478:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800a47a:	4b09      	ldr	r3, [pc, #36]	@ (800a4a0 <MX_SPI2_Init+0x64>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a480:	4b07      	ldr	r3, [pc, #28]	@ (800a4a0 <MX_SPI2_Init+0x64>)
 800a482:	2200      	movs	r2, #0
 800a484:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800a486:	4b06      	ldr	r3, [pc, #24]	@ (800a4a0 <MX_SPI2_Init+0x64>)
 800a488:	220a      	movs	r2, #10
 800a48a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800a48c:	4804      	ldr	r0, [pc, #16]	@ (800a4a0 <MX_SPI2_Init+0x64>)
 800a48e:	f007 fadd 	bl	8011a4c <HAL_SPI_Init>
 800a492:	4603      	mov	r3, r0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800a498:	f000 fc38 	bl	800ad0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800a49c:	bf00      	nop
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	20000c58 	.word	0x20000c58
 800a4a4:	40003800 	.word	0x40003800

0800a4a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b086      	sub	sp, #24
 800a4ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a4ae:	f107 0308 	add.w	r3, r7, #8
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	601a      	str	r2, [r3, #0]
 800a4b6:	605a      	str	r2, [r3, #4]
 800a4b8:	609a      	str	r2, [r3, #8]
 800a4ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a4bc:	463b      	mov	r3, r7
 800a4be:	2200      	movs	r2, #0
 800a4c0:	601a      	str	r2, [r3, #0]
 800a4c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a4c4:	4b1e      	ldr	r3, [pc, #120]	@ (800a540 <MX_TIM1_Init+0x98>)
 800a4c6:	4a1f      	ldr	r2, [pc, #124]	@ (800a544 <MX_TIM1_Init+0x9c>)
 800a4c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 800a4ca:	4b1d      	ldr	r3, [pc, #116]	@ (800a540 <MX_TIM1_Init+0x98>)
 800a4cc:	224f      	movs	r2, #79	@ 0x4f
 800a4ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a4d0:	4b1b      	ldr	r3, [pc, #108]	@ (800a540 <MX_TIM1_Init+0x98>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800a4d6:	4b1a      	ldr	r3, [pc, #104]	@ (800a540 <MX_TIM1_Init+0x98>)
 800a4d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800a4dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a4de:	4b18      	ldr	r3, [pc, #96]	@ (800a540 <MX_TIM1_Init+0x98>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a4e4:	4b16      	ldr	r3, [pc, #88]	@ (800a540 <MX_TIM1_Init+0x98>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a4ea:	4b15      	ldr	r3, [pc, #84]	@ (800a540 <MX_TIM1_Init+0x98>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a4f0:	4813      	ldr	r0, [pc, #76]	@ (800a540 <MX_TIM1_Init+0x98>)
 800a4f2:	f008 fa2f 	bl	8012954 <HAL_TIM_Base_Init>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d001      	beq.n	800a500 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800a4fc:	f000 fc06 	bl	800ad0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a500:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a504:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a506:	f107 0308 	add.w	r3, r7, #8
 800a50a:	4619      	mov	r1, r3
 800a50c:	480c      	ldr	r0, [pc, #48]	@ (800a540 <MX_TIM1_Init+0x98>)
 800a50e:	f008 ff5b 	bl	80133c8 <HAL_TIM_ConfigClockSource>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d001      	beq.n	800a51c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800a518:	f000 fbf8 	bl	800ad0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a51c:	2300      	movs	r3, #0
 800a51e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a520:	2300      	movs	r3, #0
 800a522:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a524:	463b      	mov	r3, r7
 800a526:	4619      	mov	r1, r3
 800a528:	4805      	ldr	r0, [pc, #20]	@ (800a540 <MX_TIM1_Init+0x98>)
 800a52a:	f009 fbdb 	bl	8013ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d001      	beq.n	800a538 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800a534:	f000 fbea 	bl	800ad0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800a538:	bf00      	nop
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	20000e30 	.word	0x20000e30
 800a544:	40010000 	.word	0x40010000

0800a548 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b090      	sub	sp, #64	@ 0x40
 800a54c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a54e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a552:	2200      	movs	r2, #0
 800a554:	601a      	str	r2, [r3, #0]
 800a556:	605a      	str	r2, [r3, #4]
 800a558:	609a      	str	r2, [r3, #8]
 800a55a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800a55c:	f107 031c 	add.w	r3, r7, #28
 800a560:	2200      	movs	r2, #0
 800a562:	601a      	str	r2, [r3, #0]
 800a564:	605a      	str	r2, [r3, #4]
 800a566:	609a      	str	r2, [r3, #8]
 800a568:	60da      	str	r2, [r3, #12]
 800a56a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800a56c:	f107 030c 	add.w	r3, r7, #12
 800a570:	2200      	movs	r2, #0
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	605a      	str	r2, [r3, #4]
 800a576:	609a      	str	r2, [r3, #8]
 800a578:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a57a:	1d3b      	adds	r3, r7, #4
 800a57c:	2200      	movs	r2, #0
 800a57e:	601a      	str	r2, [r3, #0]
 800a580:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a582:	4b3e      	ldr	r3, [pc, #248]	@ (800a67c <MX_TIM2_Init+0x134>)
 800a584:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a588:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 800a58a:	4b3c      	ldr	r3, [pc, #240]	@ (800a67c <MX_TIM2_Init+0x134>)
 800a58c:	2209      	movs	r2, #9
 800a58e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a590:	4b3a      	ldr	r3, [pc, #232]	@ (800a67c <MX_TIM2_Init+0x134>)
 800a592:	2200      	movs	r2, #0
 800a594:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800a596:	4b39      	ldr	r3, [pc, #228]	@ (800a67c <MX_TIM2_Init+0x134>)
 800a598:	f04f 32ff 	mov.w	r2, #4294967295
 800a59c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a59e:	4b37      	ldr	r3, [pc, #220]	@ (800a67c <MX_TIM2_Init+0x134>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a5a4:	4b35      	ldr	r3, [pc, #212]	@ (800a67c <MX_TIM2_Init+0x134>)
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a5aa:	4834      	ldr	r0, [pc, #208]	@ (800a67c <MX_TIM2_Init+0x134>)
 800a5ac:	f008 f9d2 	bl	8012954 <HAL_TIM_Base_Init>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d001      	beq.n	800a5ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800a5b6:	f000 fba9 	bl	800ad0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a5ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a5be:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a5c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	482d      	ldr	r0, [pc, #180]	@ (800a67c <MX_TIM2_Init+0x134>)
 800a5c8:	f008 fefe 	bl	80133c8 <HAL_TIM_ConfigClockSource>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800a5d2:	f000 fb9b 	bl	800ad0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800a5d6:	4829      	ldr	r0, [pc, #164]	@ (800a67c <MX_TIM2_Init+0x134>)
 800a5d8:	f008 faab 	bl	8012b32 <HAL_TIM_IC_Init>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800a5e2:	f000 fb93 	bl	800ad0c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800a5e6:	2304      	movs	r3, #4
 800a5e8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800a5ea:	2350      	movs	r3, #80	@ 0x50
 800a5ec:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800a5fa:	f107 031c 	add.w	r3, r7, #28
 800a5fe:	4619      	mov	r1, r3
 800a600:	481e      	ldr	r0, [pc, #120]	@ (800a67c <MX_TIM2_Init+0x134>)
 800a602:	f008 ffa8 	bl	8013556 <HAL_TIM_SlaveConfigSynchro>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d001      	beq.n	800a610 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 800a60c:	f000 fb7e 	bl	800ad0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800a610:	2300      	movs	r3, #0
 800a612:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800a614:	2301      	movs	r3, #1
 800a616:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800a618:	2300      	movs	r3, #0
 800a61a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800a61c:	2300      	movs	r3, #0
 800a61e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800a620:	f107 030c 	add.w	r3, r7, #12
 800a624:	2200      	movs	r2, #0
 800a626:	4619      	mov	r1, r3
 800a628:	4814      	ldr	r0, [pc, #80]	@ (800a67c <MX_TIM2_Init+0x134>)
 800a62a:	f008 fe31 	bl	8013290 <HAL_TIM_IC_ConfigChannel>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800a634:	f000 fb6a 	bl	800ad0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800a638:	2302      	movs	r3, #2
 800a63a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800a63c:	2302      	movs	r3, #2
 800a63e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800a640:	f107 030c 	add.w	r3, r7, #12
 800a644:	2204      	movs	r2, #4
 800a646:	4619      	mov	r1, r3
 800a648:	480c      	ldr	r0, [pc, #48]	@ (800a67c <MX_TIM2_Init+0x134>)
 800a64a:	f008 fe21 	bl	8013290 <HAL_TIM_IC_ConfigChannel>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d001      	beq.n	800a658 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 800a654:	f000 fb5a 	bl	800ad0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a658:	2300      	movs	r3, #0
 800a65a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a65c:	2300      	movs	r3, #0
 800a65e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a660:	1d3b      	adds	r3, r7, #4
 800a662:	4619      	mov	r1, r3
 800a664:	4805      	ldr	r0, [pc, #20]	@ (800a67c <MX_TIM2_Init+0x134>)
 800a666:	f009 fb3d 	bl	8013ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 800a670:	f000 fb4c 	bl	800ad0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a674:	bf00      	nop
 800a676:	3740      	adds	r7, #64	@ 0x40
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	20000e78 	.word	0x20000e78

0800a680 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b090      	sub	sp, #64	@ 0x40
 800a684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a686:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a68a:	2200      	movs	r2, #0
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	605a      	str	r2, [r3, #4]
 800a690:	609a      	str	r2, [r3, #8]
 800a692:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800a694:	f107 031c 	add.w	r3, r7, #28
 800a698:	2200      	movs	r2, #0
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	605a      	str	r2, [r3, #4]
 800a69e:	609a      	str	r2, [r3, #8]
 800a6a0:	60da      	str	r2, [r3, #12]
 800a6a2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800a6a4:	f107 030c 	add.w	r3, r7, #12
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	601a      	str	r2, [r3, #0]
 800a6ac:	605a      	str	r2, [r3, #4]
 800a6ae:	609a      	str	r2, [r3, #8]
 800a6b0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a6b2:	1d3b      	adds	r3, r7, #4
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	601a      	str	r2, [r3, #0]
 800a6b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a6ba:	4b3e      	ldr	r3, [pc, #248]	@ (800a7b4 <MX_TIM3_Init+0x134>)
 800a6bc:	4a3e      	ldr	r2, [pc, #248]	@ (800a7b8 <MX_TIM3_Init+0x138>)
 800a6be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a6c0:	4b3c      	ldr	r3, [pc, #240]	@ (800a7b4 <MX_TIM3_Init+0x134>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a6c6:	4b3b      	ldr	r3, [pc, #236]	@ (800a7b4 <MX_TIM3_Init+0x134>)
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800a6cc:	4b39      	ldr	r3, [pc, #228]	@ (800a7b4 <MX_TIM3_Init+0x134>)
 800a6ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a6d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a6d4:	4b37      	ldr	r3, [pc, #220]	@ (800a7b4 <MX_TIM3_Init+0x134>)
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a6da:	4b36      	ldr	r3, [pc, #216]	@ (800a7b4 <MX_TIM3_Init+0x134>)
 800a6dc:	2200      	movs	r2, #0
 800a6de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a6e0:	4834      	ldr	r0, [pc, #208]	@ (800a7b4 <MX_TIM3_Init+0x134>)
 800a6e2:	f008 f937 	bl	8012954 <HAL_TIM_Base_Init>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d001      	beq.n	800a6f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800a6ec:	f000 fb0e 	bl	800ad0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a6f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a6f4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a6f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	482d      	ldr	r0, [pc, #180]	@ (800a7b4 <MX_TIM3_Init+0x134>)
 800a6fe:	f008 fe63 	bl	80133c8 <HAL_TIM_ConfigClockSource>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d001      	beq.n	800a70c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800a708:	f000 fb00 	bl	800ad0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800a70c:	4829      	ldr	r0, [pc, #164]	@ (800a7b4 <MX_TIM3_Init+0x134>)
 800a70e:	f008 fa10 	bl	8012b32 <HAL_TIM_IC_Init>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d001      	beq.n	800a71c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800a718:	f000 faf8 	bl	800ad0c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800a71c:	2304      	movs	r3, #4
 800a71e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800a720:	2360      	movs	r3, #96	@ 0x60
 800a722:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800a724:	2302      	movs	r3, #2
 800a726:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800a728:	2300      	movs	r3, #0
 800a72a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 800a72c:	2300      	movs	r3, #0
 800a72e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800a730:	f107 031c 	add.w	r3, r7, #28
 800a734:	4619      	mov	r1, r3
 800a736:	481f      	ldr	r0, [pc, #124]	@ (800a7b4 <MX_TIM3_Init+0x134>)
 800a738:	f008 ff0d 	bl	8013556 <HAL_TIM_SlaveConfigSynchro>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800a742:	f000 fae3 	bl	800ad0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800a746:	2300      	movs	r3, #0
 800a748:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800a74a:	2302      	movs	r3, #2
 800a74c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800a74e:	2300      	movs	r3, #0
 800a750:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800a752:	2300      	movs	r3, #0
 800a754:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800a756:	f107 030c 	add.w	r3, r7, #12
 800a75a:	2200      	movs	r2, #0
 800a75c:	4619      	mov	r1, r3
 800a75e:	4815      	ldr	r0, [pc, #84]	@ (800a7b4 <MX_TIM3_Init+0x134>)
 800a760:	f008 fd96 	bl	8013290 <HAL_TIM_IC_ConfigChannel>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d001      	beq.n	800a76e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800a76a:	f000 facf 	bl	800ad0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800a76e:	2302      	movs	r3, #2
 800a770:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800a772:	2301      	movs	r3, #1
 800a774:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800a776:	f107 030c 	add.w	r3, r7, #12
 800a77a:	2204      	movs	r2, #4
 800a77c:	4619      	mov	r1, r3
 800a77e:	480d      	ldr	r0, [pc, #52]	@ (800a7b4 <MX_TIM3_Init+0x134>)
 800a780:	f008 fd86 	bl	8013290 <HAL_TIM_IC_ConfigChannel>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d001      	beq.n	800a78e <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 800a78a:	f000 fabf 	bl	800ad0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a78e:	2300      	movs	r3, #0
 800a790:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a792:	2300      	movs	r3, #0
 800a794:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a796:	1d3b      	adds	r3, r7, #4
 800a798:	4619      	mov	r1, r3
 800a79a:	4806      	ldr	r0, [pc, #24]	@ (800a7b4 <MX_TIM3_Init+0x134>)
 800a79c:	f009 faa2 	bl	8013ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d001      	beq.n	800a7aa <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 800a7a6:	f000 fab1 	bl	800ad0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a7aa:	bf00      	nop
 800a7ac:	3740      	adds	r7, #64	@ 0x40
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	20000ec0 	.word	0x20000ec0
 800a7b8:	40000400 	.word	0x40000400

0800a7bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b090      	sub	sp, #64	@ 0x40
 800a7c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a7c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	601a      	str	r2, [r3, #0]
 800a7ca:	605a      	str	r2, [r3, #4]
 800a7cc:	609a      	str	r2, [r3, #8]
 800a7ce:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800a7d0:	f107 031c 	add.w	r3, r7, #28
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	601a      	str	r2, [r3, #0]
 800a7d8:	605a      	str	r2, [r3, #4]
 800a7da:	609a      	str	r2, [r3, #8]
 800a7dc:	60da      	str	r2, [r3, #12]
 800a7de:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800a7e0:	f107 030c 	add.w	r3, r7, #12
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	601a      	str	r2, [r3, #0]
 800a7e8:	605a      	str	r2, [r3, #4]
 800a7ea:	609a      	str	r2, [r3, #8]
 800a7ec:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a7ee:	1d3b      	adds	r3, r7, #4
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a7f6:	4b3e      	ldr	r3, [pc, #248]	@ (800a8f0 <MX_TIM4_Init+0x134>)
 800a7f8:	4a3e      	ldr	r2, [pc, #248]	@ (800a8f4 <MX_TIM4_Init+0x138>)
 800a7fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800a7fc:	4b3c      	ldr	r3, [pc, #240]	@ (800a8f0 <MX_TIM4_Init+0x134>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a802:	4b3b      	ldr	r3, [pc, #236]	@ (800a8f0 <MX_TIM4_Init+0x134>)
 800a804:	2200      	movs	r2, #0
 800a806:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800a808:	4b39      	ldr	r3, [pc, #228]	@ (800a8f0 <MX_TIM4_Init+0x134>)
 800a80a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a80e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a810:	4b37      	ldr	r3, [pc, #220]	@ (800a8f0 <MX_TIM4_Init+0x134>)
 800a812:	2200      	movs	r2, #0
 800a814:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a816:	4b36      	ldr	r3, [pc, #216]	@ (800a8f0 <MX_TIM4_Init+0x134>)
 800a818:	2200      	movs	r2, #0
 800a81a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800a81c:	4834      	ldr	r0, [pc, #208]	@ (800a8f0 <MX_TIM4_Init+0x134>)
 800a81e:	f008 f899 	bl	8012954 <HAL_TIM_Base_Init>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d001      	beq.n	800a82c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800a828:	f000 fa70 	bl	800ad0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a82c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a830:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800a832:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a836:	4619      	mov	r1, r3
 800a838:	482d      	ldr	r0, [pc, #180]	@ (800a8f0 <MX_TIM4_Init+0x134>)
 800a83a:	f008 fdc5 	bl	80133c8 <HAL_TIM_ConfigClockSource>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800a844:	f000 fa62 	bl	800ad0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800a848:	4829      	ldr	r0, [pc, #164]	@ (800a8f0 <MX_TIM4_Init+0x134>)
 800a84a:	f008 f972 	bl	8012b32 <HAL_TIM_IC_Init>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d001      	beq.n	800a858 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800a854:	f000 fa5a 	bl	800ad0c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800a858:	2304      	movs	r3, #4
 800a85a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800a85c:	2350      	movs	r3, #80	@ 0x50
 800a85e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800a860:	2300      	movs	r3, #0
 800a862:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800a864:	2300      	movs	r3, #0
 800a866:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 800a868:	2300      	movs	r3, #0
 800a86a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800a86c:	f107 031c 	add.w	r3, r7, #28
 800a870:	4619      	mov	r1, r3
 800a872:	481f      	ldr	r0, [pc, #124]	@ (800a8f0 <MX_TIM4_Init+0x134>)
 800a874:	f008 fe6f 	bl	8013556 <HAL_TIM_SlaveConfigSynchro>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d001      	beq.n	800a882 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 800a87e:	f000 fa45 	bl	800ad0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800a882:	2300      	movs	r3, #0
 800a884:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800a886:	2301      	movs	r3, #1
 800a888:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800a88a:	2300      	movs	r3, #0
 800a88c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800a892:	f107 030c 	add.w	r3, r7, #12
 800a896:	2200      	movs	r2, #0
 800a898:	4619      	mov	r1, r3
 800a89a:	4815      	ldr	r0, [pc, #84]	@ (800a8f0 <MX_TIM4_Init+0x134>)
 800a89c:	f008 fcf8 	bl	8013290 <HAL_TIM_IC_ConfigChannel>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800a8a6:	f000 fa31 	bl	800ad0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800a8aa:	2302      	movs	r3, #2
 800a8ac:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800a8b2:	f107 030c 	add.w	r3, r7, #12
 800a8b6:	2204      	movs	r2, #4
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	480d      	ldr	r0, [pc, #52]	@ (800a8f0 <MX_TIM4_Init+0x134>)
 800a8bc:	f008 fce8 	bl	8013290 <HAL_TIM_IC_ConfigChannel>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <MX_TIM4_Init+0x10e>
  {
    Error_Handler();
 800a8c6:	f000 fa21 	bl	800ad0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a8d2:	1d3b      	adds	r3, r7, #4
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	4806      	ldr	r0, [pc, #24]	@ (800a8f0 <MX_TIM4_Init+0x134>)
 800a8d8:	f009 fa04 	bl	8013ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <MX_TIM4_Init+0x12a>
  {
    Error_Handler();
 800a8e2:	f000 fa13 	bl	800ad0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a8e6:	bf00      	nop
 800a8e8:	3740      	adds	r7, #64	@ 0x40
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000f08 	.word	0x20000f08
 800a8f4:	40000800 	.word	0x40000800

0800a8f8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b090      	sub	sp, #64	@ 0x40
 800a8fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a8fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a902:	2200      	movs	r2, #0
 800a904:	601a      	str	r2, [r3, #0]
 800a906:	605a      	str	r2, [r3, #4]
 800a908:	609a      	str	r2, [r3, #8]
 800a90a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800a90c:	f107 031c 	add.w	r3, r7, #28
 800a910:	2200      	movs	r2, #0
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	605a      	str	r2, [r3, #4]
 800a916:	609a      	str	r2, [r3, #8]
 800a918:	60da      	str	r2, [r3, #12]
 800a91a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800a91c:	f107 030c 	add.w	r3, r7, #12
 800a920:	2200      	movs	r2, #0
 800a922:	601a      	str	r2, [r3, #0]
 800a924:	605a      	str	r2, [r3, #4]
 800a926:	609a      	str	r2, [r3, #8]
 800a928:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a92a:	1d3b      	adds	r3, r7, #4
 800a92c:	2200      	movs	r2, #0
 800a92e:	601a      	str	r2, [r3, #0]
 800a930:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a932:	4b3f      	ldr	r3, [pc, #252]	@ (800aa30 <MX_TIM8_Init+0x138>)
 800a934:	4a3f      	ldr	r2, [pc, #252]	@ (800aa34 <MX_TIM8_Init+0x13c>)
 800a936:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800a938:	4b3d      	ldr	r3, [pc, #244]	@ (800aa30 <MX_TIM8_Init+0x138>)
 800a93a:	2200      	movs	r2, #0
 800a93c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a93e:	4b3c      	ldr	r3, [pc, #240]	@ (800aa30 <MX_TIM8_Init+0x138>)
 800a940:	2200      	movs	r2, #0
 800a942:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800a944:	4b3a      	ldr	r3, [pc, #232]	@ (800aa30 <MX_TIM8_Init+0x138>)
 800a946:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a94a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a94c:	4b38      	ldr	r3, [pc, #224]	@ (800aa30 <MX_TIM8_Init+0x138>)
 800a94e:	2200      	movs	r2, #0
 800a950:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a952:	4b37      	ldr	r3, [pc, #220]	@ (800aa30 <MX_TIM8_Init+0x138>)
 800a954:	2200      	movs	r2, #0
 800a956:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a958:	4b35      	ldr	r3, [pc, #212]	@ (800aa30 <MX_TIM8_Init+0x138>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a95e:	4834      	ldr	r0, [pc, #208]	@ (800aa30 <MX_TIM8_Init+0x138>)
 800a960:	f007 fff8 	bl	8012954 <HAL_TIM_Base_Init>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d001      	beq.n	800a96e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800a96a:	f000 f9cf 	bl	800ad0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a96e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a972:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a974:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a978:	4619      	mov	r1, r3
 800a97a:	482d      	ldr	r0, [pc, #180]	@ (800aa30 <MX_TIM8_Init+0x138>)
 800a97c:	f008 fd24 	bl	80133c8 <HAL_TIM_ConfigClockSource>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d001      	beq.n	800a98a <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800a986:	f000 f9c1 	bl	800ad0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800a98a:	4829      	ldr	r0, [pc, #164]	@ (800aa30 <MX_TIM8_Init+0x138>)
 800a98c:	f008 f8d1 	bl	8012b32 <HAL_TIM_IC_Init>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d001      	beq.n	800a99a <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 800a996:	f000 f9b9 	bl	800ad0c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800a99a:	2304      	movs	r3, #4
 800a99c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800a99e:	2350      	movs	r3, #80	@ 0x50
 800a9a0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800a9ae:	f107 031c 	add.w	r3, r7, #28
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	481e      	ldr	r0, [pc, #120]	@ (800aa30 <MX_TIM8_Init+0x138>)
 800a9b6:	f008 fdce 	bl	8013556 <HAL_TIM_SlaveConfigSynchro>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d001      	beq.n	800a9c4 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 800a9c0:	f000 f9a4 	bl	800ad0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800a9d4:	f107 030c 	add.w	r3, r7, #12
 800a9d8:	2200      	movs	r2, #0
 800a9da:	4619      	mov	r1, r3
 800a9dc:	4814      	ldr	r0, [pc, #80]	@ (800aa30 <MX_TIM8_Init+0x138>)
 800a9de:	f008 fc57 	bl	8013290 <HAL_TIM_IC_ConfigChannel>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d001      	beq.n	800a9ec <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 800a9e8:	f000 f990 	bl	800ad0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800a9f4:	f107 030c 	add.w	r3, r7, #12
 800a9f8:	2204      	movs	r2, #4
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	480c      	ldr	r0, [pc, #48]	@ (800aa30 <MX_TIM8_Init+0x138>)
 800a9fe:	f008 fc47 	bl	8013290 <HAL_TIM_IC_ConfigChannel>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d001      	beq.n	800aa0c <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 800aa08:	f000 f980 	bl	800ad0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aa10:	2300      	movs	r3, #0
 800aa12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800aa14:	1d3b      	adds	r3, r7, #4
 800aa16:	4619      	mov	r1, r3
 800aa18:	4805      	ldr	r0, [pc, #20]	@ (800aa30 <MX_TIM8_Init+0x138>)
 800aa1a:	f009 f963 	bl	8013ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d001      	beq.n	800aa28 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 800aa24:	f000 f972 	bl	800ad0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800aa28:	bf00      	nop
 800aa2a:	3740      	adds	r7, #64	@ 0x40
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	20000f50 	.word	0x20000f50
 800aa34:	40010400 	.word	0x40010400

0800aa38 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800aa3c:	4b0d      	ldr	r3, [pc, #52]	@ (800aa74 <MX_TIM14_Init+0x3c>)
 800aa3e:	4a0e      	ldr	r2, [pc, #56]	@ (800aa78 <MX_TIM14_Init+0x40>)
 800aa40:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 159;
 800aa42:	4b0c      	ldr	r3, [pc, #48]	@ (800aa74 <MX_TIM14_Init+0x3c>)
 800aa44:	229f      	movs	r2, #159	@ 0x9f
 800aa46:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aa48:	4b0a      	ldr	r3, [pc, #40]	@ (800aa74 <MX_TIM14_Init+0x3c>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 800aa4e:	4b09      	ldr	r3, [pc, #36]	@ (800aa74 <MX_TIM14_Init+0x3c>)
 800aa50:	2263      	movs	r2, #99	@ 0x63
 800aa52:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aa54:	4b07      	ldr	r3, [pc, #28]	@ (800aa74 <MX_TIM14_Init+0x3c>)
 800aa56:	2200      	movs	r2, #0
 800aa58:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aa5a:	4b06      	ldr	r3, [pc, #24]	@ (800aa74 <MX_TIM14_Init+0x3c>)
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800aa60:	4804      	ldr	r0, [pc, #16]	@ (800aa74 <MX_TIM14_Init+0x3c>)
 800aa62:	f007 ff77 	bl	8012954 <HAL_TIM_Base_Init>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d001      	beq.n	800aa70 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800aa6c:	f000 f94e 	bl	800ad0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800aa70:	bf00      	nop
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	20000f98 	.word	0x20000f98
 800aa78:	40002000 	.word	0x40002000

0800aa7c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800aa80:	4b11      	ldr	r3, [pc, #68]	@ (800aac8 <MX_UART4_Init+0x4c>)
 800aa82:	4a12      	ldr	r2, [pc, #72]	@ (800aacc <MX_UART4_Init+0x50>)
 800aa84:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 800aa86:	4b10      	ldr	r3, [pc, #64]	@ (800aac8 <MX_UART4_Init+0x4c>)
 800aa88:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800aa8c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800aa8e:	4b0e      	ldr	r3, [pc, #56]	@ (800aac8 <MX_UART4_Init+0x4c>)
 800aa90:	2200      	movs	r2, #0
 800aa92:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800aa94:	4b0c      	ldr	r3, [pc, #48]	@ (800aac8 <MX_UART4_Init+0x4c>)
 800aa96:	2200      	movs	r2, #0
 800aa98:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800aa9a:	4b0b      	ldr	r3, [pc, #44]	@ (800aac8 <MX_UART4_Init+0x4c>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800aaa0:	4b09      	ldr	r3, [pc, #36]	@ (800aac8 <MX_UART4_Init+0x4c>)
 800aaa2:	220c      	movs	r2, #12
 800aaa4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aaa6:	4b08      	ldr	r3, [pc, #32]	@ (800aac8 <MX_UART4_Init+0x4c>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800aaac:	4b06      	ldr	r3, [pc, #24]	@ (800aac8 <MX_UART4_Init+0x4c>)
 800aaae:	2200      	movs	r2, #0
 800aab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800aab2:	4805      	ldr	r0, [pc, #20]	@ (800aac8 <MX_UART4_Init+0x4c>)
 800aab4:	f009 f9a6 	bl	8013e04 <HAL_UART_Init>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800aabe:	f000 f925 	bl	800ad0c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800aac2:	bf00      	nop
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	20000fe0 	.word	0x20000fe0
 800aacc:	40004c00 	.word	0x40004c00

0800aad0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800aad4:	4b11      	ldr	r3, [pc, #68]	@ (800ab1c <MX_USART2_UART_Init+0x4c>)
 800aad6:	4a12      	ldr	r2, [pc, #72]	@ (800ab20 <MX_USART2_UART_Init+0x50>)
 800aad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800aada:	4b10      	ldr	r3, [pc, #64]	@ (800ab1c <MX_USART2_UART_Init+0x4c>)
 800aadc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800aae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800aae2:	4b0e      	ldr	r3, [pc, #56]	@ (800ab1c <MX_USART2_UART_Init+0x4c>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800aae8:	4b0c      	ldr	r3, [pc, #48]	@ (800ab1c <MX_USART2_UART_Init+0x4c>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800aaee:	4b0b      	ldr	r3, [pc, #44]	@ (800ab1c <MX_USART2_UART_Init+0x4c>)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800aaf4:	4b09      	ldr	r3, [pc, #36]	@ (800ab1c <MX_USART2_UART_Init+0x4c>)
 800aaf6:	220c      	movs	r2, #12
 800aaf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aafa:	4b08      	ldr	r3, [pc, #32]	@ (800ab1c <MX_USART2_UART_Init+0x4c>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ab00:	4b06      	ldr	r3, [pc, #24]	@ (800ab1c <MX_USART2_UART_Init+0x4c>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800ab06:	4805      	ldr	r0, [pc, #20]	@ (800ab1c <MX_USART2_UART_Init+0x4c>)
 800ab08:	f009 f97c 	bl	8013e04 <HAL_UART_Init>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d001      	beq.n	800ab16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800ab12:	f000 f8fb 	bl	800ad0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800ab16:	bf00      	nop
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	20001028 	.word	0x20001028
 800ab20:	40004400 	.word	0x40004400

0800ab24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	607b      	str	r3, [r7, #4]
 800ab2e:	4b2b      	ldr	r3, [pc, #172]	@ (800abdc <MX_DMA_Init+0xb8>)
 800ab30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab32:	4a2a      	ldr	r2, [pc, #168]	@ (800abdc <MX_DMA_Init+0xb8>)
 800ab34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ab38:	6313      	str	r3, [r2, #48]	@ 0x30
 800ab3a:	4b28      	ldr	r3, [pc, #160]	@ (800abdc <MX_DMA_Init+0xb8>)
 800ab3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab42:	607b      	str	r3, [r7, #4]
 800ab44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800ab46:	2300      	movs	r3, #0
 800ab48:	603b      	str	r3, [r7, #0]
 800ab4a:	4b24      	ldr	r3, [pc, #144]	@ (800abdc <MX_DMA_Init+0xb8>)
 800ab4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab4e:	4a23      	ldr	r2, [pc, #140]	@ (800abdc <MX_DMA_Init+0xb8>)
 800ab50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab54:	6313      	str	r3, [r2, #48]	@ 0x30
 800ab56:	4b21      	ldr	r3, [pc, #132]	@ (800abdc <MX_DMA_Init+0xb8>)
 800ab58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab5e:	603b      	str	r3, [r7, #0]
 800ab60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800ab62:	2200      	movs	r2, #0
 800ab64:	2100      	movs	r1, #0
 800ab66:	200d      	movs	r0, #13
 800ab68:	f003 f877 	bl	800dc5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800ab6c:	200d      	movs	r0, #13
 800ab6e:	f003 f890 	bl	800dc92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800ab72:	2200      	movs	r2, #0
 800ab74:	2100      	movs	r1, #0
 800ab76:	200e      	movs	r0, #14
 800ab78:	f003 f86f 	bl	800dc5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800ab7c:	200e      	movs	r0, #14
 800ab7e:	f003 f888 	bl	800dc92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800ab82:	2200      	movs	r2, #0
 800ab84:	2100      	movs	r1, #0
 800ab86:	200f      	movs	r0, #15
 800ab88:	f003 f867 	bl	800dc5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800ab8c:	200f      	movs	r0, #15
 800ab8e:	f003 f880 	bl	800dc92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800ab92:	2200      	movs	r2, #0
 800ab94:	2100      	movs	r1, #0
 800ab96:	2038      	movs	r0, #56	@ 0x38
 800ab98:	f003 f85f 	bl	800dc5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800ab9c:	2038      	movs	r0, #56	@ 0x38
 800ab9e:	f003 f878 	bl	800dc92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800aba2:	2200      	movs	r2, #0
 800aba4:	2100      	movs	r1, #0
 800aba6:	203b      	movs	r0, #59	@ 0x3b
 800aba8:	f003 f857 	bl	800dc5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800abac:	203b      	movs	r0, #59	@ 0x3b
 800abae:	f003 f870 	bl	800dc92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800abb2:	2200      	movs	r2, #0
 800abb4:	2100      	movs	r1, #0
 800abb6:	2044      	movs	r0, #68	@ 0x44
 800abb8:	f003 f84f 	bl	800dc5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800abbc:	2044      	movs	r0, #68	@ 0x44
 800abbe:	f003 f868 	bl	800dc92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800abc2:	2200      	movs	r2, #0
 800abc4:	2100      	movs	r1, #0
 800abc6:	2045      	movs	r0, #69	@ 0x45
 800abc8:	f003 f847 	bl	800dc5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800abcc:	2045      	movs	r0, #69	@ 0x45
 800abce:	f003 f860 	bl	800dc92 <HAL_NVIC_EnableIRQ>

}
 800abd2:	bf00      	nop
 800abd4:	3708      	adds	r7, #8
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	40023800 	.word	0x40023800

0800abe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b08a      	sub	sp, #40	@ 0x28
 800abe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abe6:	f107 0314 	add.w	r3, r7, #20
 800abea:	2200      	movs	r2, #0
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	605a      	str	r2, [r3, #4]
 800abf0:	609a      	str	r2, [r3, #8]
 800abf2:	60da      	str	r2, [r3, #12]
 800abf4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800abf6:	2300      	movs	r3, #0
 800abf8:	613b      	str	r3, [r7, #16]
 800abfa:	4b40      	ldr	r3, [pc, #256]	@ (800acfc <MX_GPIO_Init+0x11c>)
 800abfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abfe:	4a3f      	ldr	r2, [pc, #252]	@ (800acfc <MX_GPIO_Init+0x11c>)
 800ac00:	f043 0304 	orr.w	r3, r3, #4
 800ac04:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac06:	4b3d      	ldr	r3, [pc, #244]	@ (800acfc <MX_GPIO_Init+0x11c>)
 800ac08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac0a:	f003 0304 	and.w	r3, r3, #4
 800ac0e:	613b      	str	r3, [r7, #16]
 800ac10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac12:	2300      	movs	r3, #0
 800ac14:	60fb      	str	r3, [r7, #12]
 800ac16:	4b39      	ldr	r3, [pc, #228]	@ (800acfc <MX_GPIO_Init+0x11c>)
 800ac18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac1a:	4a38      	ldr	r2, [pc, #224]	@ (800acfc <MX_GPIO_Init+0x11c>)
 800ac1c:	f043 0301 	orr.w	r3, r3, #1
 800ac20:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac22:	4b36      	ldr	r3, [pc, #216]	@ (800acfc <MX_GPIO_Init+0x11c>)
 800ac24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac26:	f003 0301 	and.w	r3, r3, #1
 800ac2a:	60fb      	str	r3, [r7, #12]
 800ac2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60bb      	str	r3, [r7, #8]
 800ac32:	4b32      	ldr	r3, [pc, #200]	@ (800acfc <MX_GPIO_Init+0x11c>)
 800ac34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac36:	4a31      	ldr	r2, [pc, #196]	@ (800acfc <MX_GPIO_Init+0x11c>)
 800ac38:	f043 0302 	orr.w	r3, r3, #2
 800ac3c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac3e:	4b2f      	ldr	r3, [pc, #188]	@ (800acfc <MX_GPIO_Init+0x11c>)
 800ac40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac42:	f003 0302 	and.w	r3, r3, #2
 800ac46:	60bb      	str	r3, [r7, #8]
 800ac48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	607b      	str	r3, [r7, #4]
 800ac4e:	4b2b      	ldr	r3, [pc, #172]	@ (800acfc <MX_GPIO_Init+0x11c>)
 800ac50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac52:	4a2a      	ldr	r2, [pc, #168]	@ (800acfc <MX_GPIO_Init+0x11c>)
 800ac54:	f043 0308 	orr.w	r3, r3, #8
 800ac58:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac5a:	4b28      	ldr	r3, [pc, #160]	@ (800acfc <MX_GPIO_Init+0x11c>)
 800ac5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac5e:	f003 0308 	and.w	r3, r3, #8
 800ac62:	607b      	str	r3, [r7, #4]
 800ac64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800ac66:	2200      	movs	r2, #0
 800ac68:	2110      	movs	r1, #16
 800ac6a:	4825      	ldr	r0, [pc, #148]	@ (800ad00 <MX_GPIO_Init+0x120>)
 800ac6c:	f003 ff32 	bl	800ead4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 800ac70:	2200      	movs	r2, #0
 800ac72:	2120      	movs	r1, #32
 800ac74:	4823      	ldr	r0, [pc, #140]	@ (800ad04 <MX_GPIO_Init+0x124>)
 800ac76:	f003 ff2d 	bl	800ead4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LoRa_Reset_Pin|LoRa_CS_Pin, GPIO_PIN_RESET);
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800ac80:	4821      	ldr	r0, [pc, #132]	@ (800ad08 <MX_GPIO_Init+0x128>)
 800ac82:	f003 ff27 	bl	800ead4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 800ac86:	2310      	movs	r3, #16
 800ac88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac92:	2300      	movs	r3, #0
 800ac94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 800ac96:	f107 0314 	add.w	r3, r7, #20
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	4818      	ldr	r0, [pc, #96]	@ (800ad00 <MX_GPIO_Init+0x120>)
 800ac9e:	f003 fc91 	bl	800e5c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800aca2:	2310      	movs	r3, #16
 800aca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aca6:	2300      	movs	r3, #0
 800aca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acaa:	2300      	movs	r3, #0
 800acac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800acae:	f107 0314 	add.w	r3, r7, #20
 800acb2:	4619      	mov	r1, r3
 800acb4:	4813      	ldr	r0, [pc, #76]	@ (800ad04 <MX_GPIO_Init+0x124>)
 800acb6:	f003 fc85 	bl	800e5c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 800acba:	2320      	movs	r3, #32
 800acbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800acbe:	2301      	movs	r3, #1
 800acc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acc2:	2300      	movs	r3, #0
 800acc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acc6:	2300      	movs	r3, #0
 800acc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800acca:	f107 0314 	add.w	r3, r7, #20
 800acce:	4619      	mov	r1, r3
 800acd0:	480c      	ldr	r0, [pc, #48]	@ (800ad04 <MX_GPIO_Init+0x124>)
 800acd2:	f003 fc77 	bl	800e5c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_Reset_Pin LoRa_CS_Pin */
  GPIO_InitStruct.Pin = LoRa_Reset_Pin|LoRa_CS_Pin;
 800acd6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800acda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800acdc:	2301      	movs	r3, #1
 800acde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ace0:	2300      	movs	r3, #0
 800ace2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ace4:	2300      	movs	r3, #0
 800ace6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ace8:	f107 0314 	add.w	r3, r7, #20
 800acec:	4619      	mov	r1, r3
 800acee:	4806      	ldr	r0, [pc, #24]	@ (800ad08 <MX_GPIO_Init+0x128>)
 800acf0:	f003 fc68 	bl	800e5c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800acf4:	bf00      	nop
 800acf6:	3728      	adds	r7, #40	@ 0x28
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	40023800 	.word	0x40023800
 800ad00:	40020000 	.word	0x40020000
 800ad04:	40020800 	.word	0x40020800
 800ad08:	40020400 	.word	0x40020400

0800ad0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800ad10:	b672      	cpsid	i
}
 800ad12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800ad14:	bf00      	nop
 800ad16:	e7fd      	b.n	800ad14 <Error_Handler+0x8>

0800ad18 <RFM95_Select>:
#include <string.h>  // para memset, etc.



// Funções auxiliares estáticas para SPI
static void RFM95_Select(void) {
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RFM95_CS_GPIO, RFM95_CS_PIN, GPIO_PIN_RESET); // CS baixo
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ad22:	4802      	ldr	r0, [pc, #8]	@ (800ad2c <RFM95_Select+0x14>)
 800ad24:	f003 fed6 	bl	800ead4 <HAL_GPIO_WritePin>
}
 800ad28:	bf00      	nop
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	40020400 	.word	0x40020400

0800ad30 <RFM95_Unselect>:
static void RFM95_Unselect(void) {
 800ad30:	b580      	push	{r7, lr}
 800ad32:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RFM95_CS_GPIO, RFM95_CS_PIN, GPIO_PIN_SET);   // CS alto
 800ad34:	2201      	movs	r2, #1
 800ad36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ad3a:	4802      	ldr	r0, [pc, #8]	@ (800ad44 <RFM95_Unselect+0x14>)
 800ad3c:	f003 feca 	bl	800ead4 <HAL_GPIO_WritePin>
}
 800ad40:	bf00      	nop
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	40020400 	.word	0x40020400

0800ad48 <RFM95_WriteReg>:
static void RFM95_WriteReg(uint8_t addr, uint8_t data) {
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	4603      	mov	r3, r0
 800ad50:	460a      	mov	r2, r1
 800ad52:	71fb      	strb	r3, [r7, #7]
 800ad54:	4613      	mov	r3, r2
 800ad56:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];
    buf[0] = addr | 0x80;   // MSB=1 indica escrita&#8203;:contentReference[oaicite:11]{index=11}
 800ad58:	79fb      	ldrb	r3, [r7, #7]
 800ad5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	733b      	strb	r3, [r7, #12]
    buf[1] = data;
 800ad62:	79bb      	ldrb	r3, [r7, #6]
 800ad64:	737b      	strb	r3, [r7, #13]
    RFM95_Select();
 800ad66:	f7ff ffd7 	bl	800ad18 <RFM95_Select>
    HAL_SPI_Transmit_DMA(&hspi2, buf, 2);
 800ad6a:	f107 030c 	add.w	r3, r7, #12
 800ad6e:	2202      	movs	r2, #2
 800ad70:	4619      	mov	r1, r3
 800ad72:	4804      	ldr	r0, [pc, #16]	@ (800ad84 <RFM95_WriteReg+0x3c>)
 800ad74:	f007 f8c4 	bl	8011f00 <HAL_SPI_Transmit_DMA>
    RFM95_Unselect();
 800ad78:	f7ff ffda 	bl	800ad30 <RFM95_Unselect>
}
 800ad7c:	bf00      	nop
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	20000c58 	.word	0x20000c58

0800ad88 <RFM95_ReadReg>:
static uint8_t RFM95_ReadReg(uint8_t addr) {
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	4603      	mov	r3, r0
 800ad90:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = addr & 0x7F;  // MSB=0 indica leitura
 800ad92:	79fb      	ldrb	r3, [r7, #7]
 800ad94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	73bb      	strb	r3, [r7, #14]
    RFM95_Select();
 800ada0:	f7ff ffba 	bl	800ad18 <RFM95_Select>
    HAL_SPI_Transmit_DMA(&hspi2, &tx, 1);
 800ada4:	f107 030f 	add.w	r3, r7, #15
 800ada8:	2201      	movs	r2, #1
 800adaa:	4619      	mov	r1, r3
 800adac:	4808      	ldr	r0, [pc, #32]	@ (800add0 <RFM95_ReadReg+0x48>)
 800adae:	f007 f8a7 	bl	8011f00 <HAL_SPI_Transmit_DMA>
    HAL_SPI_Receive_DMA(&hspi2, &rx, 1);
 800adb2:	f107 030e 	add.w	r3, r7, #14
 800adb6:	2201      	movs	r2, #1
 800adb8:	4619      	mov	r1, r3
 800adba:	4805      	ldr	r0, [pc, #20]	@ (800add0 <RFM95_ReadReg+0x48>)
 800adbc:	f007 f952 	bl	8012064 <HAL_SPI_Receive_DMA>
    RFM95_Unselect();
 800adc0:	f7ff ffb6 	bl	800ad30 <RFM95_Unselect>
    return rx;
 800adc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	20000c58 	.word	0x20000c58

0800add4 <RFM95_Init>:

// Implementação da inicialização do RFM95
int RFM95_Init(void) {
 800add4:	b5b0      	push	{r4, r5, r7, lr}
 800add6:	b090      	sub	sp, #64	@ 0x40
 800add8:	af00      	add	r7, sp, #0
    // 1. Resetar o módulo LoRa
    HAL_GPIO_WritePin(RFM95_RESET_GPIO, RFM95_RESET_PIN, GPIO_PIN_RESET);
 800adda:	2200      	movs	r2, #0
 800addc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ade0:	4841      	ldr	r0, [pc, #260]	@ (800aee8 <RFM95_Init+0x114>)
 800ade2:	f003 fe77 	bl	800ead4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800ade6:	2005      	movs	r0, #5
 800ade8:	f001 fab6 	bl	800c358 <HAL_Delay>
    HAL_GPIO_WritePin(RFM95_RESET_GPIO, RFM95_RESET_PIN, GPIO_PIN_SET);
 800adec:	2201      	movs	r2, #1
 800adee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800adf2:	483d      	ldr	r0, [pc, #244]	@ (800aee8 <RFM95_Init+0x114>)
 800adf4:	f003 fe6e 	bl	800ead4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800adf8:	2005      	movs	r0, #5
 800adfa:	f001 faad 	bl	800c358 <HAL_Delay>

    // 2. Verificar o registro de versão para assegurar comunicação SPI
    uint8_t version = RFM95_ReadReg(REG_VERSION);
 800adfe:	2042      	movs	r0, #66	@ 0x42
 800ae00:	f7ff ffc2 	bl	800ad88 <RFM95_ReadReg>
 800ae04:	4603      	mov	r3, r0
 800ae06:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (version != 0x12) {
 800ae0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ae0e:	2b12      	cmp	r3, #18
 800ae10:	d017      	beq.n	800ae42 <RFM95_Init+0x6e>
        // Versão esperada do SX1276 é 0x12&#8203;:contentReference[oaicite:12]{index=12}
        char msg[] = "Erro: RFM95 nao encontrado!\r\n";
 800ae12:	4b36      	ldr	r3, [pc, #216]	@ (800aeec <RFM95_Init+0x118>)
 800ae14:	463c      	mov	r4, r7
 800ae16:	461d      	mov	r5, r3
 800ae18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ae1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ae20:	c407      	stmia	r4!, {r0, r1, r2}
 800ae22:	8023      	strh	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800ae24:	463b      	mov	r3, r7
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7f5 fa42 	bl	80002b0 <strlen>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	4639      	mov	r1, r7
 800ae32:	f04f 33ff 	mov.w	r3, #4294967295
 800ae36:	482e      	ldr	r0, [pc, #184]	@ (800aef0 <RFM95_Init+0x11c>)
 800ae38:	f009 f834 	bl	8013ea4 <HAL_UART_Transmit>
        return RFM95_ERR;
 800ae3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae40:	e04e      	b.n	800aee0 <RFM95_Init+0x10c>
    }

    // 3. Colocar em modo Sleep e habilitar LoRa (Long Range Mode).
    RFM95_WriteReg(REG_OP_MODE, MODE_SLEEP);            // primeiro Sleep em FSK
 800ae42:	2100      	movs	r1, #0
 800ae44:	2001      	movs	r0, #1
 800ae46:	f7ff ff7f 	bl	800ad48 <RFM95_WriteReg>
    RFM95_WriteReg(REG_OP_MODE, LONG_RANGE_MODE | MODE_SLEEP); // LoRa Sleep&#8203;:contentReference[oaicite:13]{index=13}
 800ae4a:	2180      	movs	r1, #128	@ 0x80
 800ae4c:	2001      	movs	r0, #1
 800ae4e:	f7ff ff7b 	bl	800ad48 <RFM95_WriteReg>
    HAL_Delay(10);
 800ae52:	200a      	movs	r0, #10
 800ae54:	f001 fa80 	bl	800c358 <HAL_Delay>

    // 4. Configurar frequência de operação (868 MHz)
    // Fórmula: reg_freq = (Frequência / Fstep), com Fstep = 32e6/2^19 ≈ 61 Hz&#8203;:contentReference[oaicite:14]{index=14}.
    // Para 868000000 Hz, reg_freq = 0xD90000&#8203;:contentReference[oaicite:15]{index=15}.
    RFM95_WriteReg(REG_FRF_MSB, 0xD9);
 800ae58:	21d9      	movs	r1, #217	@ 0xd9
 800ae5a:	2006      	movs	r0, #6
 800ae5c:	f7ff ff74 	bl	800ad48 <RFM95_WriteReg>
    RFM95_WriteReg(REG_FRF_MID, 0x00);
 800ae60:	2100      	movs	r1, #0
 800ae62:	2007      	movs	r0, #7
 800ae64:	f7ff ff70 	bl	800ad48 <RFM95_WriteReg>
    RFM95_WriteReg(REG_FRF_LSB, 0x00);
 800ae68:	2100      	movs	r1, #0
 800ae6a:	2008      	movs	r0, #8
 800ae6c:	f7ff ff6c 	bl	800ad48 <RFM95_WriteReg>

    // 5. Configurar potência de transmissão no PA_BOOST
    // PaSelect=1 (PA_BOOST), MaxPower=111 (0x7) e OutputPower=1111 (0xF)&#8203;:contentReference[oaicite:16]{index=16}.
    // 0x8F já ativa PA_BOOST e OutputPower=15 (~17 dBm)&#8203;:contentReference[oaicite:17]{index=17}.
    RFM95_WriteReg(REG_PA_CONFIG, 0x8F);
 800ae70:	218f      	movs	r1, #143	@ 0x8f
 800ae72:	2009      	movs	r0, #9
 800ae74:	f7ff ff68 	bl	800ad48 <RFM95_WriteReg>
    // (Opcional: habilitar +20dBm, se necessário, via REG_PA_DAC. Não habilitado aqui.)

    // 6. Configurar parâmetros LoRa: BW=125kHz, CR=4/5, explicit header, SF=7, CRC on.
    RFM95_WriteReg(REG_MODEM_CONFIG1, 0x72); // 0x72 = 0b01110010: BW125k, CR4/5, header explícito&#8203;:contentReference[oaicite:18]{index=18}
 800ae78:	2172      	movs	r1, #114	@ 0x72
 800ae7a:	201d      	movs	r0, #29
 800ae7c:	f7ff ff64 	bl	800ad48 <RFM95_WriteReg>
    RFM95_WriteReg(REG_MODEM_CONFIG2, 0x74); // 0x74 = 0b01110100: SF7, CRC habilitado&#8203;:contentReference[oaicite:19]{index=19}
 800ae80:	2174      	movs	r1, #116	@ 0x74
 800ae82:	201e      	movs	r0, #30
 800ae84:	f7ff ff60 	bl	800ad48 <RFM95_WriteReg>
    RFM95_WriteReg(REG_MODEM_CONFIG3, 0x04); // 0x04: LowDataRateOptimize off (SF7 não precisa), AGC on&#8203;:contentReference[oaicite:20]{index=20}
 800ae88:	2104      	movs	r1, #4
 800ae8a:	2026      	movs	r0, #38	@ 0x26
 800ae8c:	f7ff ff5c 	bl	800ad48 <RFM95_WriteReg>

    // 7. Configurar base dos endereços FIFO (opcional, usar defaults)
    RFM95_WriteReg(REG_FIFO_TX_BASE_ADDR, 0x80); // Início TX FIFO = 0x80 (default)&#8203;:contentReference[oaicite:21]{index=21}
 800ae90:	2180      	movs	r1, #128	@ 0x80
 800ae92:	200e      	movs	r0, #14
 800ae94:	f7ff ff58 	bl	800ad48 <RFM95_WriteReg>
    RFM95_WriteReg(REG_FIFO_RX_BASE_ADDR, 0x00); // Início RX FIFO = 0x00 (default)
 800ae98:	2100      	movs	r1, #0
 800ae9a:	200f      	movs	r0, #15
 800ae9c:	f7ff ff54 	bl	800ad48 <RFM95_WriteReg>

    // 8. Colocar em modo standby para aguardar envios
    RFM95_WriteReg(REG_OP_MODE, LONG_RANGE_MODE | MODE_STDBY);
 800aea0:	2181      	movs	r1, #129	@ 0x81
 800aea2:	2001      	movs	r0, #1
 800aea4:	f7ff ff50 	bl	800ad48 <RFM95_WriteReg>
    HAL_Delay(5);
 800aea8:	2005      	movs	r0, #5
 800aeaa:	f001 fa55 	bl	800c358 <HAL_Delay>

    // 9. Indicar sucesso na UART2
    char okmsg[] = "RFM95 iniciado com sucesso\r\n";
 800aeae:	4b11      	ldr	r3, [pc, #68]	@ (800aef4 <RFM95_Init+0x120>)
 800aeb0:	f107 0420 	add.w	r4, r7, #32
 800aeb4:	461d      	mov	r5, r3
 800aeb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aeb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aeba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800aebe:	c407      	stmia	r4!, {r0, r1, r2}
 800aec0:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)okmsg, strlen(okmsg), HAL_MAX_DELAY);
 800aec2:	f107 0320 	add.w	r3, r7, #32
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7f5 f9f2 	bl	80002b0 <strlen>
 800aecc:	4603      	mov	r3, r0
 800aece:	b29a      	uxth	r2, r3
 800aed0:	f107 0120 	add.w	r1, r7, #32
 800aed4:	f04f 33ff 	mov.w	r3, #4294967295
 800aed8:	4805      	ldr	r0, [pc, #20]	@ (800aef0 <RFM95_Init+0x11c>)
 800aeda:	f008 ffe3 	bl	8013ea4 <HAL_UART_Transmit>
    return RFM95_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3740      	adds	r7, #64	@ 0x40
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bdb0      	pop	{r4, r5, r7, pc}
 800aee8:	40020400 	.word	0x40020400
 800aeec:	0801ad74 	.word	0x0801ad74
 800aef0:	20001028 	.word	0x20001028
 800aef4:	0801ad94 	.word	0x0801ad94

0800aef8 <RFM95_SendPacket>:

// Envia um pacote LoRa (até 64 bytes) e aguarda conclusão
int RFM95_SendPacket(uint8_t *data, uint8_t length) {
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	460b      	mov	r3, r1
 800af02:	70fb      	strb	r3, [r7, #3]
    // Limitar tamanho ao máximo (64 bytes conforme requisitado)
    if (length > 64) length = 64;
 800af04:	78fb      	ldrb	r3, [r7, #3]
 800af06:	2b40      	cmp	r3, #64	@ 0x40
 800af08:	d901      	bls.n	800af0e <RFM95_SendPacket+0x16>
 800af0a:	2340      	movs	r3, #64	@ 0x40
 800af0c:	70fb      	strb	r3, [r7, #3]

    // 1. Entrar em modo de espera (Standby) para preparar FIFO
    RFM95_WriteReg(REG_OP_MODE, LONG_RANGE_MODE | MODE_STDBY);
 800af0e:	2181      	movs	r1, #129	@ 0x81
 800af10:	2001      	movs	r0, #1
 800af12:	f7ff ff19 	bl	800ad48 <RFM95_WriteReg>
    //HAL_Delay(1);

    // 2. Ponteiro FIFO aponta para base de TX
    RFM95_WriteReg(REG_FIFO_ADDR_PTR, 0x80);
 800af16:	2180      	movs	r1, #128	@ 0x80
 800af18:	200d      	movs	r0, #13
 800af1a:	f7ff ff15 	bl	800ad48 <RFM95_WriteReg>

    // 3. Escrever o tamanho do payload no registrador correspondente
    RFM95_WriteReg(REG_PAYLOAD_LENGTH, length);
 800af1e:	78fb      	ldrb	r3, [r7, #3]
 800af20:	4619      	mov	r1, r3
 800af22:	2022      	movs	r0, #34	@ 0x22
 800af24:	f7ff ff10 	bl	800ad48 <RFM95_WriteReg>

    // 4. Escrever os dados do payload no FIFO
    for (uint8_t i = 0; i < length; i++) {
 800af28:	2300      	movs	r3, #0
 800af2a:	73fb      	strb	r3, [r7, #15]
 800af2c:	e00a      	b.n	800af44 <RFM95_SendPacket+0x4c>
        RFM95_WriteReg(REG_FIFO, data[i]);
 800af2e:	7bfb      	ldrb	r3, [r7, #15]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	4413      	add	r3, r2
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	4619      	mov	r1, r3
 800af38:	2000      	movs	r0, #0
 800af3a:	f7ff ff05 	bl	800ad48 <RFM95_WriteReg>
    for (uint8_t i = 0; i < length; i++) {
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
 800af40:	3301      	adds	r3, #1
 800af42:	73fb      	strb	r3, [r7, #15]
 800af44:	7bfa      	ldrb	r2, [r7, #15]
 800af46:	78fb      	ldrb	r3, [r7, #3]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d3f0      	bcc.n	800af2e <RFM95_SendPacket+0x36>
    }

    // 5. Iniciar transmissão LoRa (modo TX)
    RFM95_WriteReg(REG_OP_MODE, LONG_RANGE_MODE | MODE_TX);
 800af4c:	2183      	movs	r1, #131	@ 0x83
 800af4e:	2001      	movs	r0, #1
 800af50:	f7ff fefa 	bl	800ad48 <RFM95_WriteReg>

    // 6. Aguardar até que a transmissão complete (TxDone setado)&#8203;:contentReference[oaicite:22]{index=22}
    // Verifica o bit TxDone (bit3) em REG_IRQ_FLAGS (0x12).
    uint8_t irqFlags;
    do {
        irqFlags = RFM95_ReadReg(REG_IRQ_FLAGS);
 800af54:	2012      	movs	r0, #18
 800af56:	f7ff ff17 	bl	800ad88 <RFM95_ReadReg>
 800af5a:	4603      	mov	r3, r0
 800af5c:	73bb      	strb	r3, [r7, #14]
    } while ((irqFlags & 0x08) == 0);  // 0x08: máscara do bit TxDone
 800af5e:	7bbb      	ldrb	r3, [r7, #14]
 800af60:	f003 0308 	and.w	r3, r3, #8
 800af64:	2b00      	cmp	r3, #0
 800af66:	d0f5      	beq.n	800af54 <RFM95_SendPacket+0x5c>

    // 7. Limpar a flag TxDone escrevendo 1 nesse bit&#8203;:contentReference[oaicite:23]{index=23}
    RFM95_WriteReg(REG_IRQ_FLAGS, 0x08);
 800af68:	2108      	movs	r1, #8
 800af6a:	2012      	movs	r0, #18
 800af6c:	f7ff feec 	bl	800ad48 <RFM95_WriteReg>

    // 8. Retornar ao modo standby automaticamente ocorre após TX (por design)
    // Envio concluído
    return RFM95_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
	...

0800af7c <SendLoRa>:
char buffer[20];
char dbgMsg[50];
uint16_t counterHello = 0;


void SendLoRa(){
 800af7c:	b580      	push	{r7, lr}
 800af7e:	af00      	add	r7, sp, #0
	if (flagLoRaGPS==1){
 800af80:	4b19      	ldr	r3, [pc, #100]	@ (800afe8 <SendLoRa+0x6c>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b01      	cmp	r3, #1
 800af86:	d10a      	bne.n	800af9e <SendLoRa+0x22>
		RFM95_SendPacket((uint8_t *)loraGpsMsg.sentence, loraGpsMsg.len);
 800af88:	4b18      	ldr	r3, [pc, #96]	@ (800afec <SendLoRa+0x70>)
 800af8a:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	4619      	mov	r1, r3
 800af92:	4816      	ldr	r0, [pc, #88]	@ (800afec <SendLoRa+0x70>)
 800af94:	f7ff ffb0 	bl	800aef8 <RFM95_SendPacket>
		 flagLoRaGPS=0;
 800af98:	4b13      	ldr	r3, [pc, #76]	@ (800afe8 <SendLoRa+0x6c>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	601a      	str	r2, [r3, #0]
	}
	if (flagLoRaIMUAttitude==1){
 800af9e:	4b14      	ldr	r3, [pc, #80]	@ (800aff0 <SendLoRa+0x74>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d102      	bne.n	800afac <SendLoRa+0x30>
		//RFM95_SendPacket((uint8_t *)loraIMUMsg.sentence, loraIMUMsg.len);
		flagLoRaIMUAttitude=0;
 800afa6:	4b12      	ldr	r3, [pc, #72]	@ (800aff0 <SendLoRa+0x74>)
 800afa8:	2200      	movs	r2, #0
 800afaa:	601a      	str	r2, [r3, #0]
	}
	if (flagLoRaCAN1Hz==1){
 800afac:	4b11      	ldr	r3, [pc, #68]	@ (800aff4 <SendLoRa+0x78>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d102      	bne.n	800afba <SendLoRa+0x3e>
		//RFM95_SendPacket((uint8_t *)loraCAN1HzMsg.sentence, loraCAN1HzMsg.len);
		flagLoRaCAN1Hz=0;
 800afb4:	4b0f      	ldr	r3, [pc, #60]	@ (800aff4 <SendLoRa+0x78>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	601a      	str	r2, [r3, #0]
	}
	if (flagLoRaCAN2Hz==1){
 800afba:	4b0f      	ldr	r3, [pc, #60]	@ (800aff8 <SendLoRa+0x7c>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d102      	bne.n	800afc8 <SendLoRa+0x4c>
		//RFM95_SendPacket((uint8_t *)loraCAN2HzMsg.sentence, loraCAN2HzMsg.len);
		flagLoRaCAN2Hz=0;
 800afc2:	4b0d      	ldr	r3, [pc, #52]	@ (800aff8 <SendLoRa+0x7c>)
 800afc4:	2200      	movs	r2, #0
 800afc6:	601a      	str	r2, [r3, #0]
	}
	if (flagLoRaSpeed==1){
 800afc8:	4b0c      	ldr	r3, [pc, #48]	@ (800affc <SendLoRa+0x80>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d102      	bne.n	800afd6 <SendLoRa+0x5a>
		//RFM95_SendPacket((uint8_t *)loraSpeedMsg.sentence, loraSpeedMsg.len);
		flagLoRaSpeed=0;
 800afd0:	4b0a      	ldr	r3, [pc, #40]	@ (800affc <SendLoRa+0x80>)
 800afd2:	2200      	movs	r2, #0
 800afd4:	601a      	str	r2, [r3, #0]
	}
	if (flagLoRaOil==1){
 800afd6:	4b0a      	ldr	r3, [pc, #40]	@ (800b000 <SendLoRa+0x84>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d102      	bne.n	800afe4 <SendLoRa+0x68>
		//RFM95_SendPacket((uint8_t *)loraOilMsg.sentence, loraOilMsg.len);
		flagLoRaOil=0;
 800afde:	4b08      	ldr	r3, [pc, #32]	@ (800b000 <SendLoRa+0x84>)
 800afe0:	2200      	movs	r2, #0
 800afe2:	601a      	str	r2, [r3, #0]
	}
}
 800afe4:	bf00      	nop
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	20003a90 	.word	0x20003a90
 800afec:	20002da0 	.word	0x20002da0
 800aff0:	20003a94 	.word	0x20003a94
 800aff4:	20003a98 	.word	0x20003a98
 800aff8:	20003a9c 	.word	0x20003a9c
 800affc:	20003aa0 	.word	0x20003aa0
 800b000:	20003aa4 	.word	0x20003aa4

0800b004 <update_timestamp>:
#include "sensor.h"

void update_timestamp(void)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b086      	sub	sp, #24
 800b008:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800b00a:	1d3b      	adds	r3, r7, #4
 800b00c:	2200      	movs	r2, #0
 800b00e:	4619      	mov	r1, r3
 800b010:	4818      	ldr	r0, [pc, #96]	@ (800b074 <update_timestamp+0x70>)
 800b012:	f006 fb2c 	bl	801166e <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800b016:	463b      	mov	r3, r7
 800b018:	2200      	movs	r2, #0
 800b01a:	4619      	mov	r1, r3
 800b01c:	4815      	ldr	r0, [pc, #84]	@ (800b074 <update_timestamp+0x70>)
 800b01e:	f006 fc08 	bl	8011832 <HAL_RTC_GetDate>

    timestamp = sTime.Hours * 3600 + sTime.Minutes * 60 + sTime.Seconds;
 800b022:	793b      	ldrb	r3, [r7, #4]
 800b024:	461a      	mov	r2, r3
 800b026:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800b02a:	fb03 f202 	mul.w	r2, r3, r2
 800b02e:	797b      	ldrb	r3, [r7, #5]
 800b030:	4619      	mov	r1, r3
 800b032:	460b      	mov	r3, r1
 800b034:	011b      	lsls	r3, r3, #4
 800b036:	1a5b      	subs	r3, r3, r1
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	4413      	add	r3, r2
 800b03c:	79ba      	ldrb	r2, [r7, #6]
 800b03e:	4413      	add	r3, r2
 800b040:	461a      	mov	r2, r3
 800b042:	4b0d      	ldr	r3, [pc, #52]	@ (800b078 <update_timestamp+0x74>)
 800b044:	601a      	str	r2, [r3, #0]

    /*snprintf(timestamp_str, sizeof(timestamp_str), "20%02d%02d%02d_%02d%02d%02d\r\n",
                 sDate.Year, sDate.Month, sDate.Date,
                 sTime.Hours, sTime.Minutes, sTime.Seconds);*/
    //HAL_UART_Transmit(&huart2, timestamp_str, strlen((char *)timestamp_str), HAL_MAX_DELAY);
    snprintf(timestamp_msg, sizeof(timestamp_msg), "Timestamp = %lu\r\n", timestamp);
 800b046:	4b0c      	ldr	r3, [pc, #48]	@ (800b078 <update_timestamp+0x74>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a0c      	ldr	r2, [pc, #48]	@ (800b07c <update_timestamp+0x78>)
 800b04c:	2132      	movs	r1, #50	@ 0x32
 800b04e:	480c      	ldr	r0, [pc, #48]	@ (800b080 <update_timestamp+0x7c>)
 800b050:	f00b fec0 	bl	8016dd4 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)timestamp_msg, strlen(timestamp_msg), HAL_MAX_DELAY);
 800b054:	480a      	ldr	r0, [pc, #40]	@ (800b080 <update_timestamp+0x7c>)
 800b056:	f7f5 f92b 	bl	80002b0 <strlen>
 800b05a:	4603      	mov	r3, r0
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	f04f 33ff 	mov.w	r3, #4294967295
 800b062:	4907      	ldr	r1, [pc, #28]	@ (800b080 <update_timestamp+0x7c>)
 800b064:	4807      	ldr	r0, [pc, #28]	@ (800b084 <update_timestamp+0x80>)
 800b066:	f008 ff1d 	bl	8013ea4 <HAL_UART_Transmit>
}
 800b06a:	bf00      	nop
 800b06c:	3718      	adds	r7, #24
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	200008a0 	.word	0x200008a0
 800b078:	20001d00 	.word	0x20001d00
 800b07c:	0801adb4 	.word	0x0801adb4
 800b080:	20001d08 	.word	0x20001d08
 800b084:	20001028 	.word	0x20001028

0800b088 <update_sensor_timestamp>:


void update_sensor_timestamp(Sensor *sensor) //atualizar para ficar em ms
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af02      	add	r7, sp, #8
 800b08e:	6078      	str	r0, [r7, #4]
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800b090:	2200      	movs	r2, #0
 800b092:	4921      	ldr	r1, [pc, #132]	@ (800b118 <update_sensor_timestamp+0x90>)
 800b094:	4821      	ldr	r0, [pc, #132]	@ (800b11c <update_sensor_timestamp+0x94>)
 800b096:	f006 faea 	bl	801166e <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800b09a:	2200      	movs	r2, #0
 800b09c:	4920      	ldr	r1, [pc, #128]	@ (800b120 <update_sensor_timestamp+0x98>)
 800b09e:	481f      	ldr	r0, [pc, #124]	@ (800b11c <update_sensor_timestamp+0x94>)
 800b0a0:	f006 fbc7 	bl	8011832 <HAL_RTC_GetDate>

    sensor->timestamp = (sTime.Hours * 3600 + sTime.Minutes * 60 + sTime.Seconds)*1000+counter_ms;
 800b0a4:	4b1c      	ldr	r3, [pc, #112]	@ (800b118 <update_sensor_timestamp+0x90>)
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800b0ae:	fb03 f202 	mul.w	r2, r3, r2
 800b0b2:	4b19      	ldr	r3, [pc, #100]	@ (800b118 <update_sensor_timestamp+0x90>)
 800b0b4:	785b      	ldrb	r3, [r3, #1]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	011b      	lsls	r3, r3, #4
 800b0bc:	1a5b      	subs	r3, r3, r1
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	4413      	add	r3, r2
 800b0c2:	4a15      	ldr	r2, [pc, #84]	@ (800b118 <update_sensor_timestamp+0x90>)
 800b0c4:	7892      	ldrb	r2, [r2, #2]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b0cc:	fb02 f303 	mul.w	r3, r2, r3
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	4b14      	ldr	r3, [pc, #80]	@ (800b124 <update_sensor_timestamp+0x9c>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	441a      	add	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    snprintf(timestamp_msg, sizeof(timestamp_msg), "Timestamp=%lu, sensor=%d\r\n", sensor->timestamp, sensor->sensorType);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	4a0e      	ldr	r2, [pc, #56]	@ (800b128 <update_sensor_timestamp+0xa0>)
 800b0f0:	2132      	movs	r1, #50	@ 0x32
 800b0f2:	480e      	ldr	r0, [pc, #56]	@ (800b12c <update_sensor_timestamp+0xa4>)
 800b0f4:	f00b fe6e 	bl	8016dd4 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)timestamp_msg, strlen(timestamp_msg), HAL_MAX_DELAY);
 800b0f8:	480c      	ldr	r0, [pc, #48]	@ (800b12c <update_sensor_timestamp+0xa4>)
 800b0fa:	f7f5 f8d9 	bl	80002b0 <strlen>
 800b0fe:	4603      	mov	r3, r0
 800b100:	b29a      	uxth	r2, r3
 800b102:	f04f 33ff 	mov.w	r3, #4294967295
 800b106:	4909      	ldr	r1, [pc, #36]	@ (800b12c <update_sensor_timestamp+0xa4>)
 800b108:	4809      	ldr	r0, [pc, #36]	@ (800b130 <update_sensor_timestamp+0xa8>)
 800b10a:	f008 fecb 	bl	8013ea4 <HAL_UART_Transmit>
}
 800b10e:	bf00      	nop
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	20001d3c 	.word	0x20001d3c
 800b11c:	200008a0 	.word	0x200008a0
 800b120:	20001d50 	.word	0x20001d50
 800b124:	20001d04 	.word	0x20001d04
 800b128:	0801adc8 	.word	0x0801adc8
 800b12c:	20001d08 	.word	0x20001d08
 800b130:	20001028 	.word	0x20001028

0800b134 <save_data_to_sensor>:

void save_data_to_sensor(Sensor *sensor, uint8_t data){
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	460b      	mov	r3, r1
 800b13e:	70fb      	strb	r3, [r7, #3]
	if (sensor->index == 0){
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800b146:	2b00      	cmp	r3, #0
 800b148:	d116      	bne.n	800b178 <save_data_to_sensor+0x44>
		sensor->data[0]=sensor->sensorType;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f893 240c 	ldrb.w	r2, [r3, #1036]	@ 0x40c
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	701a      	strb	r2, [r3, #0]
		update_sensor_timestamp(sensor);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f7ff ff97 	bl	800b088 <update_sensor_timestamp>
		memcpy(&sensor->data[1], &(sensor->timestamp), sizeof(sensor->timestamp));  // guarda timestamp em binário
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	3301      	adds	r3, #1
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	f202 4204 	addw	r2, r2, #1028	@ 0x404
 800b164:	6812      	ldr	r2, [r2, #0]
 800b166:	601a      	str	r2, [r3, #0]
		sensor->index = 5;  // avança o índice após 1 byte de tipo + 4 bytes de timestamp
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2205      	movs	r2, #5
 800b16c:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
		sensor->sent_low=0;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
	}
	if ( ((sensor->index % 512) == 0) && (sensor->index != 0)){
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800b17e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b182:	b29b      	uxth	r3, r3
 800b184:	2b00      	cmp	r3, #0
 800b186:	d11a      	bne.n	800b1be <save_data_to_sensor+0x8a>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d015      	beq.n	800b1be <save_data_to_sensor+0x8a>
		sensor->data[sensor_length/2]=sensor->sensorType;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 240c 	ldrb.w	r2, [r3, #1036]	@ 0x40c
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
		update_sensor_timestamp(sensor);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f7ff ff72 	bl	800b088 <update_sensor_timestamp>
		memcpy(&sensor->data[(sensor_length/2)+1], &(sensor->timestamp), sizeof(sensor->timestamp));  // guarda timestamp em binário
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f203 2301 	addw	r3, r3, #513	@ 0x201
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	f202 4204 	addw	r2, r2, #1028	@ 0x404
 800b1b0:	6812      	ldr	r2, [r2, #0]
 800b1b2:	601a      	str	r2, [r3, #0]
		sensor->index = (sensor_length/2) + 5;  // avança o índice após 1 byte de tipo + 4 bytes de timestamp
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f240 2205 	movw	r2, #517	@ 0x205
 800b1ba:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
	}
	sensor->data[sensor->index]=data;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	78fa      	ldrb	r2, [r7, #3]
 800b1ca:	545a      	strb	r2, [r3, r1]
	if (sensor->index == (sensor_length-1)) //if sensor_length is chan ged from 1024 this will need to be changed or will not work
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800b1d2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d103      	bne.n	800b1e2 <save_data_to_sensor+0xae>
		sensor->send_high=1;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	f883 2403 	strb.w	r2, [r3, #1027]	@ 0x403
	sensor->index = (sensor->index + 1) % sensor_length;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
}
 800b1f8:	bf00      	nop
 800b1fa:	3708      	adds	r7, #8
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <Oil_pressure_ISR>:
//----------------------------------------
//ISR functions
//----------------------------------------
void Strain_gauge_ISR(){};
void IMU_Attitude_ISR(){};
void Oil_pressure_ISR(){
 800b200:	b580      	push	{r7, lr}
 800b202:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 800b204:	4802      	ldr	r0, [pc, #8]	@ (800b210 <Oil_pressure_ISR+0x10>)
 800b206:	f001 f90f 	bl	800c428 <HAL_ADC_Start_IT>
};
 800b20a:	bf00      	nop
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	20000830 	.word	0x20000830

0800b214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b21a:	2300      	movs	r3, #0
 800b21c:	607b      	str	r3, [r7, #4]
 800b21e:	4b10      	ldr	r3, [pc, #64]	@ (800b260 <HAL_MspInit+0x4c>)
 800b220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b222:	4a0f      	ldr	r2, [pc, #60]	@ (800b260 <HAL_MspInit+0x4c>)
 800b224:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b228:	6453      	str	r3, [r2, #68]	@ 0x44
 800b22a:	4b0d      	ldr	r3, [pc, #52]	@ (800b260 <HAL_MspInit+0x4c>)
 800b22c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b22e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b232:	607b      	str	r3, [r7, #4]
 800b234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b236:	2300      	movs	r3, #0
 800b238:	603b      	str	r3, [r7, #0]
 800b23a:	4b09      	ldr	r3, [pc, #36]	@ (800b260 <HAL_MspInit+0x4c>)
 800b23c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b23e:	4a08      	ldr	r2, [pc, #32]	@ (800b260 <HAL_MspInit+0x4c>)
 800b240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b244:	6413      	str	r3, [r2, #64]	@ 0x40
 800b246:	4b06      	ldr	r3, [pc, #24]	@ (800b260 <HAL_MspInit+0x4c>)
 800b248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b24a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b24e:	603b      	str	r3, [r7, #0]
 800b250:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b252:	bf00      	nop
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	40023800 	.word	0x40023800

0800b264 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b08a      	sub	sp, #40	@ 0x28
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b26c:	f107 0314 	add.w	r3, r7, #20
 800b270:	2200      	movs	r2, #0
 800b272:	601a      	str	r2, [r3, #0]
 800b274:	605a      	str	r2, [r3, #4]
 800b276:	609a      	str	r2, [r3, #8]
 800b278:	60da      	str	r2, [r3, #12]
 800b27a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a1b      	ldr	r2, [pc, #108]	@ (800b2f0 <HAL_ADC_MspInit+0x8c>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d12f      	bne.n	800b2e6 <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b286:	2300      	movs	r3, #0
 800b288:	613b      	str	r3, [r7, #16]
 800b28a:	4b1a      	ldr	r3, [pc, #104]	@ (800b2f4 <HAL_ADC_MspInit+0x90>)
 800b28c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b28e:	4a19      	ldr	r2, [pc, #100]	@ (800b2f4 <HAL_ADC_MspInit+0x90>)
 800b290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b294:	6453      	str	r3, [r2, #68]	@ 0x44
 800b296:	4b17      	ldr	r3, [pc, #92]	@ (800b2f4 <HAL_ADC_MspInit+0x90>)
 800b298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b29a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b29e:	613b      	str	r3, [r7, #16]
 800b2a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	60fb      	str	r3, [r7, #12]
 800b2a6:	4b13      	ldr	r3, [pc, #76]	@ (800b2f4 <HAL_ADC_MspInit+0x90>)
 800b2a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2aa:	4a12      	ldr	r2, [pc, #72]	@ (800b2f4 <HAL_ADC_MspInit+0x90>)
 800b2ac:	f043 0302 	orr.w	r3, r3, #2
 800b2b0:	6313      	str	r3, [r2, #48]	@ 0x30
 800b2b2:	4b10      	ldr	r3, [pc, #64]	@ (800b2f4 <HAL_ADC_MspInit+0x90>)
 800b2b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2b6:	f003 0302 	and.w	r3, r3, #2
 800b2ba:	60fb      	str	r3, [r7, #12]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = OIL_OUT_Pin;
 800b2be:	2302      	movs	r3, #2
 800b2c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OIL_OUT_GPIO_Port, &GPIO_InitStruct);
 800b2ca:	f107 0314 	add.w	r3, r7, #20
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	4809      	ldr	r0, [pc, #36]	@ (800b2f8 <HAL_ADC_MspInit+0x94>)
 800b2d2:	f003 f977 	bl	800e5c4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	2100      	movs	r1, #0
 800b2da:	2012      	movs	r0, #18
 800b2dc:	f002 fcbd 	bl	800dc5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800b2e0:	2012      	movs	r0, #18
 800b2e2:	f002 fcd6 	bl	800dc92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800b2e6:	bf00      	nop
 800b2e8:	3728      	adds	r7, #40	@ 0x28
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	40012000 	.word	0x40012000
 800b2f4:	40023800 	.word	0x40023800
 800b2f8:	40020400 	.word	0x40020400

0800b2fc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08a      	sub	sp, #40	@ 0x28
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b304:	f107 0314 	add.w	r3, r7, #20
 800b308:	2200      	movs	r2, #0
 800b30a:	601a      	str	r2, [r3, #0]
 800b30c:	605a      	str	r2, [r3, #4]
 800b30e:	609a      	str	r2, [r3, #8]
 800b310:	60da      	str	r2, [r3, #12]
 800b312:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a21      	ldr	r2, [pc, #132]	@ (800b3a0 <HAL_CAN_MspInit+0xa4>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d13c      	bne.n	800b398 <HAL_CAN_MspInit+0x9c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800b31e:	2300      	movs	r3, #0
 800b320:	613b      	str	r3, [r7, #16]
 800b322:	4b20      	ldr	r3, [pc, #128]	@ (800b3a4 <HAL_CAN_MspInit+0xa8>)
 800b324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b326:	4a1f      	ldr	r2, [pc, #124]	@ (800b3a4 <HAL_CAN_MspInit+0xa8>)
 800b328:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b32c:	6413      	str	r3, [r2, #64]	@ 0x40
 800b32e:	4b1d      	ldr	r3, [pc, #116]	@ (800b3a4 <HAL_CAN_MspInit+0xa8>)
 800b330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b336:	613b      	str	r3, [r7, #16]
 800b338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b33a:	2300      	movs	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]
 800b33e:	4b19      	ldr	r3, [pc, #100]	@ (800b3a4 <HAL_CAN_MspInit+0xa8>)
 800b340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b342:	4a18      	ldr	r2, [pc, #96]	@ (800b3a4 <HAL_CAN_MspInit+0xa8>)
 800b344:	f043 0302 	orr.w	r3, r3, #2
 800b348:	6313      	str	r3, [r2, #48]	@ 0x30
 800b34a:	4b16      	ldr	r3, [pc, #88]	@ (800b3a4 <HAL_CAN_MspInit+0xa8>)
 800b34c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b34e:	f003 0302 	and.w	r3, r3, #2
 800b352:	60fb      	str	r3, [r7, #12]
 800b354:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800b356:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b35a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b35c:	2302      	movs	r3, #2
 800b35e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b360:	2300      	movs	r3, #0
 800b362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b364:	2303      	movs	r3, #3
 800b366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800b368:	2309      	movs	r3, #9
 800b36a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b36c:	f107 0314 	add.w	r3, r7, #20
 800b370:	4619      	mov	r1, r3
 800b372:	480d      	ldr	r0, [pc, #52]	@ (800b3a8 <HAL_CAN_MspInit+0xac>)
 800b374:	f003 f926 	bl	800e5c4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800b378:	2200      	movs	r2, #0
 800b37a:	2100      	movs	r1, #0
 800b37c:	2014      	movs	r0, #20
 800b37e:	f002 fc6c 	bl	800dc5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800b382:	2014      	movs	r0, #20
 800b384:	f002 fc85 	bl	800dc92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800b388:	2200      	movs	r2, #0
 800b38a:	2100      	movs	r1, #0
 800b38c:	2015      	movs	r0, #21
 800b38e:	f002 fc64 	bl	800dc5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800b392:	2015      	movs	r0, #21
 800b394:	f002 fc7d 	bl	800dc92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800b398:	bf00      	nop
 800b39a:	3728      	adds	r7, #40	@ 0x28
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	40006400 	.word	0x40006400
 800b3a4:	40023800 	.word	0x40023800
 800b3a8:	40020400 	.word	0x40020400

0800b3ac <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b09a      	sub	sp, #104	@ 0x68
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b3b4:	f107 030c 	add.w	r3, r7, #12
 800b3b8:	225c      	movs	r2, #92	@ 0x5c
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f00b fe53 	bl	8017068 <memset>
  if(hrtc->Instance==RTC)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a0c      	ldr	r2, [pc, #48]	@ (800b3f8 <HAL_RTC_MspInit+0x4c>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d111      	bne.n	800b3f0 <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b3cc:	2320      	movs	r3, #32
 800b3ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b3d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b3d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b3d6:	f107 030c 	add.w	r3, r7, #12
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f005 f8ba 	bl	8010554 <HAL_RCCEx_PeriphCLKConfig>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d001      	beq.n	800b3ea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800b3e6:	f7ff fc91 	bl	800ad0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b3ea:	4b04      	ldr	r3, [pc, #16]	@ (800b3fc <HAL_RTC_MspInit+0x50>)
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800b3f0:	bf00      	nop
 800b3f2:	3768      	adds	r7, #104	@ 0x68
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	40002800 	.word	0x40002800
 800b3fc:	42470e3c 	.word	0x42470e3c

0800b400 <HAL_MMC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hmmc: MMC handle pointer
  * @retval None
  */
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b0a2      	sub	sp, #136	@ 0x88
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b408:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b40c:	2200      	movs	r2, #0
 800b40e:	601a      	str	r2, [r3, #0]
 800b410:	605a      	str	r2, [r3, #4]
 800b412:	609a      	str	r2, [r3, #8]
 800b414:	60da      	str	r2, [r3, #12]
 800b416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b418:	f107 0318 	add.w	r3, r7, #24
 800b41c:	225c      	movs	r2, #92	@ 0x5c
 800b41e:	2100      	movs	r1, #0
 800b420:	4618      	mov	r0, r3
 800b422:	f00b fe21 	bl	8017068 <memset>
  if(hmmc->Instance==SDIO)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a84      	ldr	r2, [pc, #528]	@ (800b63c <HAL_MMC_MspInit+0x23c>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	f040 8100 	bne.w	800b632 <HAL_MMC_MspInit+0x232>

    /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800b432:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b436:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800b438:	2300      	movs	r3, #0
 800b43a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800b43c:	2300      	movs	r3, #0
 800b43e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b440:	f107 0318 	add.w	r3, r7, #24
 800b444:	4618      	mov	r0, r3
 800b446:	f005 f885 	bl	8010554 <HAL_RCCEx_PeriphCLKConfig>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d001      	beq.n	800b454 <HAL_MMC_MspInit+0x54>
    {
      Error_Handler();
 800b450:	f7ff fc5c 	bl	800ad0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800b454:	2300      	movs	r3, #0
 800b456:	617b      	str	r3, [r7, #20]
 800b458:	4b79      	ldr	r3, [pc, #484]	@ (800b640 <HAL_MMC_MspInit+0x240>)
 800b45a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b45c:	4a78      	ldr	r2, [pc, #480]	@ (800b640 <HAL_MMC_MspInit+0x240>)
 800b45e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b462:	6453      	str	r3, [r2, #68]	@ 0x44
 800b464:	4b76      	ldr	r3, [pc, #472]	@ (800b640 <HAL_MMC_MspInit+0x240>)
 800b466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b468:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b46c:	617b      	str	r3, [r7, #20]
 800b46e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b470:	2300      	movs	r3, #0
 800b472:	613b      	str	r3, [r7, #16]
 800b474:	4b72      	ldr	r3, [pc, #456]	@ (800b640 <HAL_MMC_MspInit+0x240>)
 800b476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b478:	4a71      	ldr	r2, [pc, #452]	@ (800b640 <HAL_MMC_MspInit+0x240>)
 800b47a:	f043 0302 	orr.w	r3, r3, #2
 800b47e:	6313      	str	r3, [r2, #48]	@ 0x30
 800b480:	4b6f      	ldr	r3, [pc, #444]	@ (800b640 <HAL_MMC_MspInit+0x240>)
 800b482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b484:	f003 0302 	and.w	r3, r3, #2
 800b488:	613b      	str	r3, [r7, #16]
 800b48a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b48c:	2300      	movs	r3, #0
 800b48e:	60fb      	str	r3, [r7, #12]
 800b490:	4b6b      	ldr	r3, [pc, #428]	@ (800b640 <HAL_MMC_MspInit+0x240>)
 800b492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b494:	4a6a      	ldr	r2, [pc, #424]	@ (800b640 <HAL_MMC_MspInit+0x240>)
 800b496:	f043 0304 	orr.w	r3, r3, #4
 800b49a:	6313      	str	r3, [r2, #48]	@ 0x30
 800b49c:	4b68      	ldr	r3, [pc, #416]	@ (800b640 <HAL_MMC_MspInit+0x240>)
 800b49e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4a0:	f003 0304 	and.w	r3, r3, #4
 800b4a4:	60fb      	str	r3, [r7, #12]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60bb      	str	r3, [r7, #8]
 800b4ac:	4b64      	ldr	r3, [pc, #400]	@ (800b640 <HAL_MMC_MspInit+0x240>)
 800b4ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4b0:	4a63      	ldr	r2, [pc, #396]	@ (800b640 <HAL_MMC_MspInit+0x240>)
 800b4b2:	f043 0308 	orr.w	r3, r3, #8
 800b4b6:	6313      	str	r3, [r2, #48]	@ 0x30
 800b4b8:	4b61      	ldr	r3, [pc, #388]	@ (800b640 <HAL_MMC_MspInit+0x240>)
 800b4ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4bc:	f003 0308 	and.w	r3, r3, #8
 800b4c0:	60bb      	str	r3, [r7, #8]
 800b4c2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = EMMC_D1_Pin;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4c8:	2302      	movs	r3, #2
 800b4ca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b4d6:	230c      	movs	r3, #12
 800b4d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(EMMC_D1_GPIO_Port, &GPIO_InitStruct);
 800b4dc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	4858      	ldr	r0, [pc, #352]	@ (800b644 <HAL_MMC_MspInit+0x244>)
 800b4e4:	f003 f86e 	bl	800e5c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EMMC_D0_Pin|EMMC_D2_Pin|EMMC_D3_Pin|EMMC_CK_Pin;
 800b4e8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800b4ec:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4ee:	2302      	movs	r3, #2
 800b4f0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b4fc:	230c      	movs	r3, #12
 800b4fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b502:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b506:	4619      	mov	r1, r3
 800b508:	484f      	ldr	r0, [pc, #316]	@ (800b648 <HAL_MMC_MspInit+0x248>)
 800b50a:	f003 f85b 	bl	800e5c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EMMC_CMD_Pin;
 800b50e:	2304      	movs	r3, #4
 800b510:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b512:	2302      	movs	r3, #2
 800b514:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b516:	2300      	movs	r3, #0
 800b518:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b51a:	2303      	movs	r3, #3
 800b51c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b520:	230c      	movs	r3, #12
 800b522:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(EMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800b526:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800b52a:	4619      	mov	r1, r3
 800b52c:	4847      	ldr	r0, [pc, #284]	@ (800b64c <HAL_MMC_MspInit+0x24c>)
 800b52e:	f003 f849 	bl	800e5c4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 800b532:	4b47      	ldr	r3, [pc, #284]	@ (800b650 <HAL_MMC_MspInit+0x250>)
 800b534:	4a47      	ldr	r2, [pc, #284]	@ (800b654 <HAL_MMC_MspInit+0x254>)
 800b536:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800b538:	4b45      	ldr	r3, [pc, #276]	@ (800b650 <HAL_MMC_MspInit+0x250>)
 800b53a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b53e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b540:	4b43      	ldr	r3, [pc, #268]	@ (800b650 <HAL_MMC_MspInit+0x250>)
 800b542:	2200      	movs	r2, #0
 800b544:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b546:	4b42      	ldr	r3, [pc, #264]	@ (800b650 <HAL_MMC_MspInit+0x250>)
 800b548:	2200      	movs	r2, #0
 800b54a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b54c:	4b40      	ldr	r3, [pc, #256]	@ (800b650 <HAL_MMC_MspInit+0x250>)
 800b54e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b552:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b554:	4b3e      	ldr	r3, [pc, #248]	@ (800b650 <HAL_MMC_MspInit+0x250>)
 800b556:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b55a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b55c:	4b3c      	ldr	r3, [pc, #240]	@ (800b650 <HAL_MMC_MspInit+0x250>)
 800b55e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800b562:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800b564:	4b3a      	ldr	r3, [pc, #232]	@ (800b650 <HAL_MMC_MspInit+0x250>)
 800b566:	2220      	movs	r2, #32
 800b568:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800b56a:	4b39      	ldr	r3, [pc, #228]	@ (800b650 <HAL_MMC_MspInit+0x250>)
 800b56c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b570:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b572:	4b37      	ldr	r3, [pc, #220]	@ (800b650 <HAL_MMC_MspInit+0x250>)
 800b574:	2204      	movs	r2, #4
 800b576:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800b578:	4b35      	ldr	r3, [pc, #212]	@ (800b650 <HAL_MMC_MspInit+0x250>)
 800b57a:	2203      	movs	r2, #3
 800b57c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800b57e:	4b34      	ldr	r3, [pc, #208]	@ (800b650 <HAL_MMC_MspInit+0x250>)
 800b580:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800b584:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800b586:	4b32      	ldr	r3, [pc, #200]	@ (800b650 <HAL_MMC_MspInit+0x250>)
 800b588:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800b58c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800b58e:	4830      	ldr	r0, [pc, #192]	@ (800b650 <HAL_MMC_MspInit+0x250>)
 800b590:	f002 fbac 	bl	800dcec <HAL_DMA_Init>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d001      	beq.n	800b59e <HAL_MMC_MspInit+0x19e>
    {
      Error_Handler();
 800b59a:	f7ff fbb7 	bl	800ad0c <Error_Handler>
    }

    __HAL_LINKDMA(hmmc,hdmarx,hdma_sdio_rx);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4a2b      	ldr	r2, [pc, #172]	@ (800b650 <HAL_MMC_MspInit+0x250>)
 800b5a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b5a4:	4a2a      	ldr	r2, [pc, #168]	@ (800b650 <HAL_MMC_MspInit+0x250>)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 800b5aa:	4b2b      	ldr	r3, [pc, #172]	@ (800b658 <HAL_MMC_MspInit+0x258>)
 800b5ac:	4a2b      	ldr	r2, [pc, #172]	@ (800b65c <HAL_MMC_MspInit+0x25c>)
 800b5ae:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800b5b0:	4b29      	ldr	r3, [pc, #164]	@ (800b658 <HAL_MMC_MspInit+0x258>)
 800b5b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b5b6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b5b8:	4b27      	ldr	r3, [pc, #156]	@ (800b658 <HAL_MMC_MspInit+0x258>)
 800b5ba:	2240      	movs	r2, #64	@ 0x40
 800b5bc:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b5be:	4b26      	ldr	r3, [pc, #152]	@ (800b658 <HAL_MMC_MspInit+0x258>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b5c4:	4b24      	ldr	r3, [pc, #144]	@ (800b658 <HAL_MMC_MspInit+0x258>)
 800b5c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b5ca:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b5cc:	4b22      	ldr	r3, [pc, #136]	@ (800b658 <HAL_MMC_MspInit+0x258>)
 800b5ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b5d2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b5d4:	4b20      	ldr	r3, [pc, #128]	@ (800b658 <HAL_MMC_MspInit+0x258>)
 800b5d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800b5da:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800b5dc:	4b1e      	ldr	r3, [pc, #120]	@ (800b658 <HAL_MMC_MspInit+0x258>)
 800b5de:	2220      	movs	r2, #32
 800b5e0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800b5e2:	4b1d      	ldr	r3, [pc, #116]	@ (800b658 <HAL_MMC_MspInit+0x258>)
 800b5e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b5e8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b5ea:	4b1b      	ldr	r3, [pc, #108]	@ (800b658 <HAL_MMC_MspInit+0x258>)
 800b5ec:	2204      	movs	r2, #4
 800b5ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800b5f0:	4b19      	ldr	r3, [pc, #100]	@ (800b658 <HAL_MMC_MspInit+0x258>)
 800b5f2:	2203      	movs	r2, #3
 800b5f4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800b5f6:	4b18      	ldr	r3, [pc, #96]	@ (800b658 <HAL_MMC_MspInit+0x258>)
 800b5f8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800b5fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800b5fe:	4b16      	ldr	r3, [pc, #88]	@ (800b658 <HAL_MMC_MspInit+0x258>)
 800b600:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800b604:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800b606:	4814      	ldr	r0, [pc, #80]	@ (800b658 <HAL_MMC_MspInit+0x258>)
 800b608:	f002 fb70 	bl	800dcec <HAL_DMA_Init>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d001      	beq.n	800b616 <HAL_MMC_MspInit+0x216>
    {
      Error_Handler();
 800b612:	f7ff fb7b 	bl	800ad0c <Error_Handler>
    }

    __HAL_LINKDMA(hmmc,hdmatx,hdma_sdio_tx);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	4a0f      	ldr	r2, [pc, #60]	@ (800b658 <HAL_MMC_MspInit+0x258>)
 800b61a:	641a      	str	r2, [r3, #64]	@ 0x40
 800b61c:	4a0e      	ldr	r2, [pc, #56]	@ (800b658 <HAL_MMC_MspInit+0x258>)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800b622:	2200      	movs	r2, #0
 800b624:	2100      	movs	r1, #0
 800b626:	2031      	movs	r0, #49	@ 0x31
 800b628:	f002 fb17 	bl	800dc5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800b62c:	2031      	movs	r0, #49	@ 0x31
 800b62e:	f002 fb30 	bl	800dc92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 800b632:	bf00      	nop
 800b634:	3788      	adds	r7, #136	@ 0x88
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	40012c00 	.word	0x40012c00
 800b640:	40023800 	.word	0x40023800
 800b644:	40020400 	.word	0x40020400
 800b648:	40020800 	.word	0x40020800
 800b64c:	40020c00 	.word	0x40020c00
 800b650:	20000b40 	.word	0x20000b40
 800b654:	400264a0 	.word	0x400264a0
 800b658:	20000ba0 	.word	0x20000ba0
 800b65c:	40026458 	.word	0x40026458

0800b660 <HAL_MMC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hmmc: MMC handle pointer
  * @retval None
  */
void HAL_MMC_MspDeInit(MMC_HandleTypeDef* hmmc)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  if(hmmc->Instance==SDIO)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a13      	ldr	r2, [pc, #76]	@ (800b6bc <HAL_MMC_MspDeInit+0x5c>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d11f      	bne.n	800b6b2 <HAL_MMC_MspDeInit+0x52>
  {
    /* USER CODE BEGIN SDIO_MspDeInit 0 */

    /* USER CODE END SDIO_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDIO_CLK_DISABLE();
 800b672:	4b13      	ldr	r3, [pc, #76]	@ (800b6c0 <HAL_MMC_MspDeInit+0x60>)
 800b674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b676:	4a12      	ldr	r2, [pc, #72]	@ (800b6c0 <HAL_MMC_MspDeInit+0x60>)
 800b678:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b67c:	6453      	str	r3, [r2, #68]	@ 0x44
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    HAL_GPIO_DeInit(EMMC_D1_GPIO_Port, EMMC_D1_Pin);
 800b67e:	2101      	movs	r1, #1
 800b680:	4810      	ldr	r0, [pc, #64]	@ (800b6c4 <HAL_MMC_MspDeInit+0x64>)
 800b682:	f003 f933 	bl	800e8ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, EMMC_D0_Pin|EMMC_D2_Pin|EMMC_D3_Pin|EMMC_CK_Pin);
 800b686:	f44f 51e8 	mov.w	r1, #7424	@ 0x1d00
 800b68a:	480f      	ldr	r0, [pc, #60]	@ (800b6c8 <HAL_MMC_MspDeInit+0x68>)
 800b68c:	f003 f92e 	bl	800e8ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(EMMC_CMD_GPIO_Port, EMMC_CMD_Pin);
 800b690:	2104      	movs	r1, #4
 800b692:	480e      	ldr	r0, [pc, #56]	@ (800b6cc <HAL_MMC_MspDeInit+0x6c>)
 800b694:	f003 f92a 	bl	800e8ec <HAL_GPIO_DeInit>

    /* SDIO DMA DeInit */
    HAL_DMA_DeInit(hmmc->hdmarx);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b69c:	4618      	mov	r0, r3
 800b69e:	f002 fbd3 	bl	800de48 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hmmc->hdmatx);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f002 fbce 	bl	800de48 <HAL_DMA_DeInit>

    /* SDIO interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDIO_IRQn);
 800b6ac:	2031      	movs	r0, #49	@ 0x31
 800b6ae:	f002 fafe 	bl	800dcae <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN SDIO_MspDeInit 1 */

    /* USER CODE END SDIO_MspDeInit 1 */
  }

}
 800b6b2:	bf00      	nop
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	40012c00 	.word	0x40012c00
 800b6c0:	40023800 	.word	0x40023800
 800b6c4:	40020400 	.word	0x40020400
 800b6c8:	40020800 	.word	0x40020800
 800b6cc:	40020c00 	.word	0x40020c00

0800b6d0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b08c      	sub	sp, #48	@ 0x30
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6d8:	f107 031c 	add.w	r3, r7, #28
 800b6dc:	2200      	movs	r2, #0
 800b6de:	601a      	str	r2, [r3, #0]
 800b6e0:	605a      	str	r2, [r3, #4]
 800b6e2:	609a      	str	r2, [r3, #8]
 800b6e4:	60da      	str	r2, [r3, #12]
 800b6e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a8f      	ldr	r2, [pc, #572]	@ (800b92c <HAL_SPI_MspInit+0x25c>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	f040 808b 	bne.w	800b80a <HAL_SPI_MspInit+0x13a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	61bb      	str	r3, [r7, #24]
 800b6f8:	4b8d      	ldr	r3, [pc, #564]	@ (800b930 <HAL_SPI_MspInit+0x260>)
 800b6fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6fc:	4a8c      	ldr	r2, [pc, #560]	@ (800b930 <HAL_SPI_MspInit+0x260>)
 800b6fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b702:	6453      	str	r3, [r2, #68]	@ 0x44
 800b704:	4b8a      	ldr	r3, [pc, #552]	@ (800b930 <HAL_SPI_MspInit+0x260>)
 800b706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b708:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b70c:	61bb      	str	r3, [r7, #24]
 800b70e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b710:	2300      	movs	r3, #0
 800b712:	617b      	str	r3, [r7, #20]
 800b714:	4b86      	ldr	r3, [pc, #536]	@ (800b930 <HAL_SPI_MspInit+0x260>)
 800b716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b718:	4a85      	ldr	r2, [pc, #532]	@ (800b930 <HAL_SPI_MspInit+0x260>)
 800b71a:	f043 0301 	orr.w	r3, r3, #1
 800b71e:	6313      	str	r3, [r2, #48]	@ 0x30
 800b720:	4b83      	ldr	r3, [pc, #524]	@ (800b930 <HAL_SPI_MspInit+0x260>)
 800b722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b724:	f003 0301 	and.w	r3, r3, #1
 800b728:	617b      	str	r3, [r7, #20]
 800b72a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 800b72c:	23e0      	movs	r3, #224	@ 0xe0
 800b72e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b730:	2302      	movs	r3, #2
 800b732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b734:	2300      	movs	r3, #0
 800b736:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b738:	2303      	movs	r3, #3
 800b73a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b73c:	2305      	movs	r3, #5
 800b73e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b740:	f107 031c 	add.w	r3, r7, #28
 800b744:	4619      	mov	r1, r3
 800b746:	487b      	ldr	r0, [pc, #492]	@ (800b934 <HAL_SPI_MspInit+0x264>)
 800b748:	f002 ff3c 	bl	800e5c4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800b74c:	4b7a      	ldr	r3, [pc, #488]	@ (800b938 <HAL_SPI_MspInit+0x268>)
 800b74e:	4a7b      	ldr	r2, [pc, #492]	@ (800b93c <HAL_SPI_MspInit+0x26c>)
 800b750:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800b752:	4b79      	ldr	r3, [pc, #484]	@ (800b938 <HAL_SPI_MspInit+0x268>)
 800b754:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800b758:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b75a:	4b77      	ldr	r3, [pc, #476]	@ (800b938 <HAL_SPI_MspInit+0x268>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b760:	4b75      	ldr	r3, [pc, #468]	@ (800b938 <HAL_SPI_MspInit+0x268>)
 800b762:	2200      	movs	r2, #0
 800b764:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b766:	4b74      	ldr	r3, [pc, #464]	@ (800b938 <HAL_SPI_MspInit+0x268>)
 800b768:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b76c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b76e:	4b72      	ldr	r3, [pc, #456]	@ (800b938 <HAL_SPI_MspInit+0x268>)
 800b770:	2200      	movs	r2, #0
 800b772:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b774:	4b70      	ldr	r3, [pc, #448]	@ (800b938 <HAL_SPI_MspInit+0x268>)
 800b776:	2200      	movs	r2, #0
 800b778:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800b77a:	4b6f      	ldr	r3, [pc, #444]	@ (800b938 <HAL_SPI_MspInit+0x268>)
 800b77c:	2200      	movs	r2, #0
 800b77e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800b780:	4b6d      	ldr	r3, [pc, #436]	@ (800b938 <HAL_SPI_MspInit+0x268>)
 800b782:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b786:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b788:	4b6b      	ldr	r3, [pc, #428]	@ (800b938 <HAL_SPI_MspInit+0x268>)
 800b78a:	2200      	movs	r2, #0
 800b78c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800b78e:	486a      	ldr	r0, [pc, #424]	@ (800b938 <HAL_SPI_MspInit+0x268>)
 800b790:	f002 faac 	bl	800dcec <HAL_DMA_Init>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 800b79a:	f7ff fab7 	bl	800ad0c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	4a65      	ldr	r2, [pc, #404]	@ (800b938 <HAL_SPI_MspInit+0x268>)
 800b7a2:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b7a4:	4a64      	ldr	r2, [pc, #400]	@ (800b938 <HAL_SPI_MspInit+0x268>)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 800b7aa:	4b65      	ldr	r3, [pc, #404]	@ (800b940 <HAL_SPI_MspInit+0x270>)
 800b7ac:	4a65      	ldr	r2, [pc, #404]	@ (800b944 <HAL_SPI_MspInit+0x274>)
 800b7ae:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800b7b0:	4b63      	ldr	r3, [pc, #396]	@ (800b940 <HAL_SPI_MspInit+0x270>)
 800b7b2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800b7b6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b7b8:	4b61      	ldr	r3, [pc, #388]	@ (800b940 <HAL_SPI_MspInit+0x270>)
 800b7ba:	2240      	movs	r2, #64	@ 0x40
 800b7bc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b7be:	4b60      	ldr	r3, [pc, #384]	@ (800b940 <HAL_SPI_MspInit+0x270>)
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b7c4:	4b5e      	ldr	r3, [pc, #376]	@ (800b940 <HAL_SPI_MspInit+0x270>)
 800b7c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b7ca:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b7cc:	4b5c      	ldr	r3, [pc, #368]	@ (800b940 <HAL_SPI_MspInit+0x270>)
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7d2:	4b5b      	ldr	r3, [pc, #364]	@ (800b940 <HAL_SPI_MspInit+0x270>)
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800b7d8:	4b59      	ldr	r3, [pc, #356]	@ (800b940 <HAL_SPI_MspInit+0x270>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800b7de:	4b58      	ldr	r3, [pc, #352]	@ (800b940 <HAL_SPI_MspInit+0x270>)
 800b7e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b7e4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b7e6:	4b56      	ldr	r3, [pc, #344]	@ (800b940 <HAL_SPI_MspInit+0x270>)
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800b7ec:	4854      	ldr	r0, [pc, #336]	@ (800b940 <HAL_SPI_MspInit+0x270>)
 800b7ee:	f002 fa7d 	bl	800dcec <HAL_DMA_Init>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d001      	beq.n	800b7fc <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 800b7f8:	f7ff fa88 	bl	800ad0c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4a50      	ldr	r2, [pc, #320]	@ (800b940 <HAL_SPI_MspInit+0x270>)
 800b800:	649a      	str	r2, [r3, #72]	@ 0x48
 800b802:	4a4f      	ldr	r2, [pc, #316]	@ (800b940 <HAL_SPI_MspInit+0x270>)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 800b808:	e08c      	b.n	800b924 <HAL_SPI_MspInit+0x254>
  else if(hspi->Instance==SPI2)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4a4e      	ldr	r2, [pc, #312]	@ (800b948 <HAL_SPI_MspInit+0x278>)
 800b810:	4293      	cmp	r3, r2
 800b812:	f040 8087 	bne.w	800b924 <HAL_SPI_MspInit+0x254>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b816:	2300      	movs	r3, #0
 800b818:	613b      	str	r3, [r7, #16]
 800b81a:	4b45      	ldr	r3, [pc, #276]	@ (800b930 <HAL_SPI_MspInit+0x260>)
 800b81c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b81e:	4a44      	ldr	r2, [pc, #272]	@ (800b930 <HAL_SPI_MspInit+0x260>)
 800b820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b824:	6413      	str	r3, [r2, #64]	@ 0x40
 800b826:	4b42      	ldr	r3, [pc, #264]	@ (800b930 <HAL_SPI_MspInit+0x260>)
 800b828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b82a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b82e:	613b      	str	r3, [r7, #16]
 800b830:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b832:	2300      	movs	r3, #0
 800b834:	60fb      	str	r3, [r7, #12]
 800b836:	4b3e      	ldr	r3, [pc, #248]	@ (800b930 <HAL_SPI_MspInit+0x260>)
 800b838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b83a:	4a3d      	ldr	r2, [pc, #244]	@ (800b930 <HAL_SPI_MspInit+0x260>)
 800b83c:	f043 0302 	orr.w	r3, r3, #2
 800b840:	6313      	str	r3, [r2, #48]	@ 0x30
 800b842:	4b3b      	ldr	r3, [pc, #236]	@ (800b930 <HAL_SPI_MspInit+0x260>)
 800b844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b846:	f003 0302 	and.w	r3, r3, #2
 800b84a:	60fb      	str	r3, [r7, #12]
 800b84c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LoRA_SCK_Pin|LoRa_MISO_Pin|LoRa_MOSI_Pin;
 800b84e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800b852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b854:	2302      	movs	r3, #2
 800b856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b858:	2300      	movs	r3, #0
 800b85a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b85c:	2303      	movs	r3, #3
 800b85e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b860:	2305      	movs	r3, #5
 800b862:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b864:	f107 031c 	add.w	r3, r7, #28
 800b868:	4619      	mov	r1, r3
 800b86a:	4838      	ldr	r0, [pc, #224]	@ (800b94c <HAL_SPI_MspInit+0x27c>)
 800b86c:	f002 feaa 	bl	800e5c4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800b870:	4b37      	ldr	r3, [pc, #220]	@ (800b950 <HAL_SPI_MspInit+0x280>)
 800b872:	4a38      	ldr	r2, [pc, #224]	@ (800b954 <HAL_SPI_MspInit+0x284>)
 800b874:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800b876:	4b36      	ldr	r3, [pc, #216]	@ (800b950 <HAL_SPI_MspInit+0x280>)
 800b878:	2200      	movs	r2, #0
 800b87a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b87c:	4b34      	ldr	r3, [pc, #208]	@ (800b950 <HAL_SPI_MspInit+0x280>)
 800b87e:	2200      	movs	r2, #0
 800b880:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b882:	4b33      	ldr	r3, [pc, #204]	@ (800b950 <HAL_SPI_MspInit+0x280>)
 800b884:	2200      	movs	r2, #0
 800b886:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b888:	4b31      	ldr	r3, [pc, #196]	@ (800b950 <HAL_SPI_MspInit+0x280>)
 800b88a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b88e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b890:	4b2f      	ldr	r3, [pc, #188]	@ (800b950 <HAL_SPI_MspInit+0x280>)
 800b892:	2200      	movs	r2, #0
 800b894:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b896:	4b2e      	ldr	r3, [pc, #184]	@ (800b950 <HAL_SPI_MspInit+0x280>)
 800b898:	2200      	movs	r2, #0
 800b89a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800b89c:	4b2c      	ldr	r3, [pc, #176]	@ (800b950 <HAL_SPI_MspInit+0x280>)
 800b89e:	2200      	movs	r2, #0
 800b8a0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b8a2:	4b2b      	ldr	r3, [pc, #172]	@ (800b950 <HAL_SPI_MspInit+0x280>)
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b8a8:	4b29      	ldr	r3, [pc, #164]	@ (800b950 <HAL_SPI_MspInit+0x280>)
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800b8ae:	4828      	ldr	r0, [pc, #160]	@ (800b950 <HAL_SPI_MspInit+0x280>)
 800b8b0:	f002 fa1c 	bl	800dcec <HAL_DMA_Init>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <HAL_SPI_MspInit+0x1ee>
      Error_Handler();
 800b8ba:	f7ff fa27 	bl	800ad0c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	4a23      	ldr	r2, [pc, #140]	@ (800b950 <HAL_SPI_MspInit+0x280>)
 800b8c2:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b8c4:	4a22      	ldr	r2, [pc, #136]	@ (800b950 <HAL_SPI_MspInit+0x280>)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800b8ca:	4b23      	ldr	r3, [pc, #140]	@ (800b958 <HAL_SPI_MspInit+0x288>)
 800b8cc:	4a23      	ldr	r2, [pc, #140]	@ (800b95c <HAL_SPI_MspInit+0x28c>)
 800b8ce:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800b8d0:	4b21      	ldr	r3, [pc, #132]	@ (800b958 <HAL_SPI_MspInit+0x288>)
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b8d6:	4b20      	ldr	r3, [pc, #128]	@ (800b958 <HAL_SPI_MspInit+0x288>)
 800b8d8:	2240      	movs	r2, #64	@ 0x40
 800b8da:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b8dc:	4b1e      	ldr	r3, [pc, #120]	@ (800b958 <HAL_SPI_MspInit+0x288>)
 800b8de:	2200      	movs	r2, #0
 800b8e0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b8e2:	4b1d      	ldr	r3, [pc, #116]	@ (800b958 <HAL_SPI_MspInit+0x288>)
 800b8e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b8e8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b8ea:	4b1b      	ldr	r3, [pc, #108]	@ (800b958 <HAL_SPI_MspInit+0x288>)
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b8f0:	4b19      	ldr	r3, [pc, #100]	@ (800b958 <HAL_SPI_MspInit+0x288>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800b8f6:	4b18      	ldr	r3, [pc, #96]	@ (800b958 <HAL_SPI_MspInit+0x288>)
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b8fc:	4b16      	ldr	r3, [pc, #88]	@ (800b958 <HAL_SPI_MspInit+0x288>)
 800b8fe:	2200      	movs	r2, #0
 800b900:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b902:	4b15      	ldr	r3, [pc, #84]	@ (800b958 <HAL_SPI_MspInit+0x288>)
 800b904:	2200      	movs	r2, #0
 800b906:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800b908:	4813      	ldr	r0, [pc, #76]	@ (800b958 <HAL_SPI_MspInit+0x288>)
 800b90a:	f002 f9ef 	bl	800dcec <HAL_DMA_Init>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d001      	beq.n	800b918 <HAL_SPI_MspInit+0x248>
      Error_Handler();
 800b914:	f7ff f9fa 	bl	800ad0c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4a0f      	ldr	r2, [pc, #60]	@ (800b958 <HAL_SPI_MspInit+0x288>)
 800b91c:	649a      	str	r2, [r3, #72]	@ 0x48
 800b91e:	4a0e      	ldr	r2, [pc, #56]	@ (800b958 <HAL_SPI_MspInit+0x288>)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800b924:	bf00      	nop
 800b926:	3730      	adds	r7, #48	@ 0x30
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	40013000 	.word	0x40013000
 800b930:	40023800 	.word	0x40023800
 800b934:	40020000 	.word	0x40020000
 800b938:	20000cb0 	.word	0x20000cb0
 800b93c:	40026410 	.word	0x40026410
 800b940:	20000d10 	.word	0x20000d10
 800b944:	40026488 	.word	0x40026488
 800b948:	40003800 	.word	0x40003800
 800b94c:	40020400 	.word	0x40020400
 800b950:	20000d70 	.word	0x20000d70
 800b954:	40026058 	.word	0x40026058
 800b958:	20000dd0 	.word	0x20000dd0
 800b95c:	40026070 	.word	0x40026070

0800b960 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a1a      	ldr	r2, [pc, #104]	@ (800b9d8 <HAL_SPI_MspDeInit+0x78>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d114      	bne.n	800b99c <HAL_SPI_MspDeInit+0x3c>
  {
    /* USER CODE BEGIN SPI1_MspDeInit 0 */

    /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800b972:	4b1a      	ldr	r3, [pc, #104]	@ (800b9dc <HAL_SPI_MspDeInit+0x7c>)
 800b974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b976:	4a19      	ldr	r2, [pc, #100]	@ (800b9dc <HAL_SPI_MspDeInit+0x7c>)
 800b978:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b97c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin);
 800b97e:	21e0      	movs	r1, #224	@ 0xe0
 800b980:	4817      	ldr	r0, [pc, #92]	@ (800b9e0 <HAL_SPI_MspDeInit+0x80>)
 800b982:	f002 ffb3 	bl	800e8ec <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b98a:	4618      	mov	r0, r3
 800b98c:	f002 fa5c 	bl	800de48 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b994:	4618      	mov	r0, r3
 800b996:	f002 fa57 	bl	800de48 <HAL_DMA_DeInit>
    /* USER CODE BEGIN SPI2_MspDeInit 1 */

    /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 800b99a:	e019      	b.n	800b9d0 <HAL_SPI_MspDeInit+0x70>
  else if(hspi->Instance==SPI2)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a10      	ldr	r2, [pc, #64]	@ (800b9e4 <HAL_SPI_MspDeInit+0x84>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d114      	bne.n	800b9d0 <HAL_SPI_MspDeInit+0x70>
    __HAL_RCC_SPI2_CLK_DISABLE();
 800b9a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b9dc <HAL_SPI_MspDeInit+0x7c>)
 800b9a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9aa:	4a0c      	ldr	r2, [pc, #48]	@ (800b9dc <HAL_SPI_MspDeInit+0x7c>)
 800b9ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b9b0:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, LoRA_SCK_Pin|LoRa_MISO_Pin|LoRa_MOSI_Pin);
 800b9b2:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800b9b6:	480c      	ldr	r0, [pc, #48]	@ (800b9e8 <HAL_SPI_MspDeInit+0x88>)
 800b9b8:	f002 ff98 	bl	800e8ec <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f002 fa41 	bl	800de48 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f002 fa3c 	bl	800de48 <HAL_DMA_DeInit>
}
 800b9d0:	bf00      	nop
 800b9d2:	3708      	adds	r7, #8
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	40013000 	.word	0x40013000
 800b9dc:	40023800 	.word	0x40023800
 800b9e0:	40020000 	.word	0x40020000
 800b9e4:	40003800 	.word	0x40003800
 800b9e8:	40020400 	.word	0x40020400

0800b9ec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b092      	sub	sp, #72	@ 0x48
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	601a      	str	r2, [r3, #0]
 800b9fc:	605a      	str	r2, [r3, #4]
 800b9fe:	609a      	str	r2, [r3, #8]
 800ba00:	60da      	str	r2, [r3, #12]
 800ba02:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4aa8      	ldr	r2, [pc, #672]	@ (800bcac <HAL_TIM_Base_MspInit+0x2c0>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d12e      	bne.n	800ba6c <HAL_TIM_Base_MspInit+0x80>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ba0e:	2300      	movs	r3, #0
 800ba10:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba12:	4ba7      	ldr	r3, [pc, #668]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800ba14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba16:	4aa6      	ldr	r2, [pc, #664]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800ba18:	f043 0301 	orr.w	r3, r3, #1
 800ba1c:	6453      	str	r3, [r2, #68]	@ 0x44
 800ba1e:	4ba4      	ldr	r3, [pc, #656]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800ba20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	2018      	movs	r0, #24
 800ba30:	f002 f913 	bl	800dc5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800ba34:	2018      	movs	r0, #24
 800ba36:	f002 f92c 	bl	800dc92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	2019      	movs	r0, #25
 800ba40:	f002 f90b 	bl	800dc5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800ba44:	2019      	movs	r0, #25
 800ba46:	f002 f924 	bl	800dc92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	201a      	movs	r0, #26
 800ba50:	f002 f903 	bl	800dc5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800ba54:	201a      	movs	r0, #26
 800ba56:	f002 f91c 	bl	800dc92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	201b      	movs	r0, #27
 800ba60:	f002 f8fb 	bl	800dc5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800ba64:	201b      	movs	r0, #27
 800ba66:	f002 f914 	bl	800dc92 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 800ba6a:	e11b      	b.n	800bca4 <HAL_TIM_Base_MspInit+0x2b8>
  else if(htim_base->Instance==TIM2)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba74:	d135      	bne.n	800bae2 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ba76:	2300      	movs	r3, #0
 800ba78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba7a:	4b8d      	ldr	r3, [pc, #564]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800ba7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba7e:	4a8c      	ldr	r2, [pc, #560]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800ba80:	f043 0301 	orr.w	r3, r3, #1
 800ba84:	6413      	str	r3, [r2, #64]	@ 0x40
 800ba86:	4b8a      	ldr	r3, [pc, #552]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800ba88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba92:	2300      	movs	r3, #0
 800ba94:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba96:	4b86      	ldr	r3, [pc, #536]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800ba98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba9a:	4a85      	ldr	r2, [pc, #532]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800ba9c:	f043 0301 	orr.w	r3, r3, #1
 800baa0:	6313      	str	r3, [r2, #48]	@ 0x30
 800baa2:	4b83      	ldr	r3, [pc, #524]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800baa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baa6:	f003 0301 	and.w	r3, r3, #1
 800baaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800baac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = MAGNETIC_PWM3_Pin;
 800baae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bab2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bab4:	2302      	movs	r3, #2
 800bab6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bab8:	2300      	movs	r3, #0
 800baba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800babc:	2300      	movs	r3, #0
 800babe:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800bac0:	2301      	movs	r3, #1
 800bac2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(MAGNETIC_PWM3_GPIO_Port, &GPIO_InitStruct);
 800bac4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800bac8:	4619      	mov	r1, r3
 800baca:	487a      	ldr	r0, [pc, #488]	@ (800bcb4 <HAL_TIM_Base_MspInit+0x2c8>)
 800bacc:	f002 fd7a 	bl	800e5c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800bad0:	2200      	movs	r2, #0
 800bad2:	2100      	movs	r1, #0
 800bad4:	201c      	movs	r0, #28
 800bad6:	f002 f8c0 	bl	800dc5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800bada:	201c      	movs	r0, #28
 800badc:	f002 f8d9 	bl	800dc92 <HAL_NVIC_EnableIRQ>
}
 800bae0:	e0e0      	b.n	800bca4 <HAL_TIM_Base_MspInit+0x2b8>
  else if(htim_base->Instance==TIM3)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a74      	ldr	r2, [pc, #464]	@ (800bcb8 <HAL_TIM_Base_MspInit+0x2cc>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d134      	bne.n	800bb56 <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800baec:	2300      	movs	r3, #0
 800baee:	627b      	str	r3, [r7, #36]	@ 0x24
 800baf0:	4b6f      	ldr	r3, [pc, #444]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800baf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baf4:	4a6e      	ldr	r2, [pc, #440]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800baf6:	f043 0302 	orr.w	r3, r3, #2
 800bafa:	6413      	str	r3, [r2, #64]	@ 0x40
 800bafc:	4b6c      	ldr	r3, [pc, #432]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bafe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb00:	f003 0302 	and.w	r3, r3, #2
 800bb04:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bb08:	2300      	movs	r3, #0
 800bb0a:	623b      	str	r3, [r7, #32]
 800bb0c:	4b68      	ldr	r3, [pc, #416]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bb0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb10:	4a67      	ldr	r2, [pc, #412]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bb12:	f043 0304 	orr.w	r3, r3, #4
 800bb16:	6313      	str	r3, [r2, #48]	@ 0x30
 800bb18:	4b65      	ldr	r3, [pc, #404]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bb1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb1c:	f003 0304 	and.w	r3, r3, #4
 800bb20:	623b      	str	r3, [r7, #32]
 800bb22:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = MAGNETIC_PWM2_Pin;
 800bb24:	2380      	movs	r3, #128	@ 0x80
 800bb26:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb28:	2302      	movs	r3, #2
 800bb2a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb30:	2300      	movs	r3, #0
 800bb32:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800bb34:	2302      	movs	r3, #2
 800bb36:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(MAGNETIC_PWM2_GPIO_Port, &GPIO_InitStruct);
 800bb38:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	485f      	ldr	r0, [pc, #380]	@ (800bcbc <HAL_TIM_Base_MspInit+0x2d0>)
 800bb40:	f002 fd40 	bl	800e5c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800bb44:	2200      	movs	r2, #0
 800bb46:	2100      	movs	r1, #0
 800bb48:	201d      	movs	r0, #29
 800bb4a:	f002 f886 	bl	800dc5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800bb4e:	201d      	movs	r0, #29
 800bb50:	f002 f89f 	bl	800dc92 <HAL_NVIC_EnableIRQ>
}
 800bb54:	e0a6      	b.n	800bca4 <HAL_TIM_Base_MspInit+0x2b8>
  else if(htim_base->Instance==TIM4)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a59      	ldr	r2, [pc, #356]	@ (800bcc0 <HAL_TIM_Base_MspInit+0x2d4>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d134      	bne.n	800bbca <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800bb60:	2300      	movs	r3, #0
 800bb62:	61fb      	str	r3, [r7, #28]
 800bb64:	4b52      	ldr	r3, [pc, #328]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bb66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb68:	4a51      	ldr	r2, [pc, #324]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bb6a:	f043 0304 	orr.w	r3, r3, #4
 800bb6e:	6413      	str	r3, [r2, #64]	@ 0x40
 800bb70:	4b4f      	ldr	r3, [pc, #316]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bb72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb74:	f003 0304 	and.w	r3, r3, #4
 800bb78:	61fb      	str	r3, [r7, #28]
 800bb7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	61bb      	str	r3, [r7, #24]
 800bb80:	4b4b      	ldr	r3, [pc, #300]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bb82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb84:	4a4a      	ldr	r2, [pc, #296]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bb86:	f043 0302 	orr.w	r3, r3, #2
 800bb8a:	6313      	str	r3, [r2, #48]	@ 0x30
 800bb8c:	4b48      	ldr	r3, [pc, #288]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bb8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb90:	f003 0302 	and.w	r3, r3, #2
 800bb94:	61bb      	str	r3, [r7, #24]
 800bb96:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = SPEED_PWM_Pin;
 800bb98:	2340      	movs	r3, #64	@ 0x40
 800bb9a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb9c:	2302      	movs	r3, #2
 800bb9e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bba0:	2300      	movs	r3, #0
 800bba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bba4:	2300      	movs	r3, #0
 800bba6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800bba8:	2302      	movs	r3, #2
 800bbaa:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(SPEED_PWM_GPIO_Port, &GPIO_InitStruct);
 800bbac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	4844      	ldr	r0, [pc, #272]	@ (800bcc4 <HAL_TIM_Base_MspInit+0x2d8>)
 800bbb4:	f002 fd06 	bl	800e5c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800bbb8:	2200      	movs	r2, #0
 800bbba:	2100      	movs	r1, #0
 800bbbc:	201e      	movs	r0, #30
 800bbbe:	f002 f84c 	bl	800dc5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800bbc2:	201e      	movs	r0, #30
 800bbc4:	f002 f865 	bl	800dc92 <HAL_NVIC_EnableIRQ>
}
 800bbc8:	e06c      	b.n	800bca4 <HAL_TIM_Base_MspInit+0x2b8>
  else if(htim_base->Instance==TIM8)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4a3e      	ldr	r2, [pc, #248]	@ (800bcc8 <HAL_TIM_Base_MspInit+0x2dc>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d14c      	bne.n	800bc6e <HAL_TIM_Base_MspInit+0x282>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	617b      	str	r3, [r7, #20]
 800bbd8:	4b35      	ldr	r3, [pc, #212]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bbda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbdc:	4a34      	ldr	r2, [pc, #208]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bbde:	f043 0302 	orr.w	r3, r3, #2
 800bbe2:	6453      	str	r3, [r2, #68]	@ 0x44
 800bbe4:	4b32      	ldr	r3, [pc, #200]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bbe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbe8:	f003 0302 	and.w	r3, r3, #2
 800bbec:	617b      	str	r3, [r7, #20]
 800bbee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	613b      	str	r3, [r7, #16]
 800bbf4:	4b2e      	ldr	r3, [pc, #184]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bbf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbf8:	4a2d      	ldr	r2, [pc, #180]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bbfa:	f043 0304 	orr.w	r3, r3, #4
 800bbfe:	6313      	str	r3, [r2, #48]	@ 0x30
 800bc00:	4b2b      	ldr	r3, [pc, #172]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bc02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc04:	f003 0304 	and.w	r3, r3, #4
 800bc08:	613b      	str	r3, [r7, #16]
 800bc0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MAGNETIC_PWM1_Pin;
 800bc0c:	2340      	movs	r3, #64	@ 0x40
 800bc0e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc10:	2302      	movs	r3, #2
 800bc12:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc14:	2300      	movs	r3, #0
 800bc16:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(MAGNETIC_PWM1_GPIO_Port, &GPIO_InitStruct);
 800bc20:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800bc24:	4619      	mov	r1, r3
 800bc26:	4825      	ldr	r0, [pc, #148]	@ (800bcbc <HAL_TIM_Base_MspInit+0x2d0>)
 800bc28:	f002 fccc 	bl	800e5c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	2100      	movs	r1, #0
 800bc30:	202b      	movs	r0, #43	@ 0x2b
 800bc32:	f002 f812 	bl	800dc5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800bc36:	202b      	movs	r0, #43	@ 0x2b
 800bc38:	f002 f82b 	bl	800dc92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	2100      	movs	r1, #0
 800bc40:	202c      	movs	r0, #44	@ 0x2c
 800bc42:	f002 f80a 	bl	800dc5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800bc46:	202c      	movs	r0, #44	@ 0x2c
 800bc48:	f002 f823 	bl	800dc92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	2100      	movs	r1, #0
 800bc50:	202d      	movs	r0, #45	@ 0x2d
 800bc52:	f002 f802 	bl	800dc5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800bc56:	202d      	movs	r0, #45	@ 0x2d
 800bc58:	f002 f81b 	bl	800dc92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2100      	movs	r1, #0
 800bc60:	202e      	movs	r0, #46	@ 0x2e
 800bc62:	f001 fffa 	bl	800dc5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800bc66:	202e      	movs	r0, #46	@ 0x2e
 800bc68:	f002 f813 	bl	800dc92 <HAL_NVIC_EnableIRQ>
}
 800bc6c:	e01a      	b.n	800bca4 <HAL_TIM_Base_MspInit+0x2b8>
  else if(htim_base->Instance==TIM14)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a16      	ldr	r2, [pc, #88]	@ (800bccc <HAL_TIM_Base_MspInit+0x2e0>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d115      	bne.n	800bca4 <HAL_TIM_Base_MspInit+0x2b8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800bc78:	2300      	movs	r3, #0
 800bc7a:	60fb      	str	r3, [r7, #12]
 800bc7c:	4b0c      	ldr	r3, [pc, #48]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bc7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc80:	4a0b      	ldr	r2, [pc, #44]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bc82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc86:	6413      	str	r3, [r2, #64]	@ 0x40
 800bc88:	4b09      	ldr	r3, [pc, #36]	@ (800bcb0 <HAL_TIM_Base_MspInit+0x2c4>)
 800bc8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc90:	60fb      	str	r3, [r7, #12]
 800bc92:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800bc94:	2200      	movs	r2, #0
 800bc96:	2100      	movs	r1, #0
 800bc98:	202d      	movs	r0, #45	@ 0x2d
 800bc9a:	f001 ffde 	bl	800dc5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800bc9e:	202d      	movs	r0, #45	@ 0x2d
 800bca0:	f001 fff7 	bl	800dc92 <HAL_NVIC_EnableIRQ>
}
 800bca4:	bf00      	nop
 800bca6:	3748      	adds	r7, #72	@ 0x48
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	40010000 	.word	0x40010000
 800bcb0:	40023800 	.word	0x40023800
 800bcb4:	40020000 	.word	0x40020000
 800bcb8:	40000400 	.word	0x40000400
 800bcbc:	40020800 	.word	0x40020800
 800bcc0:	40000800 	.word	0x40000800
 800bcc4:	40020400 	.word	0x40020400
 800bcc8:	40010400 	.word	0x40010400
 800bccc:	40002000 	.word	0x40002000

0800bcd0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b08c      	sub	sp, #48	@ 0x30
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bcd8:	f107 031c 	add.w	r3, r7, #28
 800bcdc:	2200      	movs	r2, #0
 800bcde:	601a      	str	r2, [r3, #0]
 800bce0:	605a      	str	r2, [r3, #4]
 800bce2:	609a      	str	r2, [r3, #8]
 800bce4:	60da      	str	r2, [r3, #12]
 800bce6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a4d      	ldr	r2, [pc, #308]	@ (800be24 <HAL_UART_MspInit+0x154>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d163      	bne.n	800bdba <HAL_UART_MspInit+0xea>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	61bb      	str	r3, [r7, #24]
 800bcf6:	4b4c      	ldr	r3, [pc, #304]	@ (800be28 <HAL_UART_MspInit+0x158>)
 800bcf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcfa:	4a4b      	ldr	r2, [pc, #300]	@ (800be28 <HAL_UART_MspInit+0x158>)
 800bcfc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bd00:	6413      	str	r3, [r2, #64]	@ 0x40
 800bd02:	4b49      	ldr	r3, [pc, #292]	@ (800be28 <HAL_UART_MspInit+0x158>)
 800bd04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bd0a:	61bb      	str	r3, [r7, #24]
 800bd0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd0e:	2300      	movs	r3, #0
 800bd10:	617b      	str	r3, [r7, #20]
 800bd12:	4b45      	ldr	r3, [pc, #276]	@ (800be28 <HAL_UART_MspInit+0x158>)
 800bd14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd16:	4a44      	ldr	r2, [pc, #272]	@ (800be28 <HAL_UART_MspInit+0x158>)
 800bd18:	f043 0301 	orr.w	r3, r3, #1
 800bd1c:	6313      	str	r3, [r2, #48]	@ 0x30
 800bd1e:	4b42      	ldr	r3, [pc, #264]	@ (800be28 <HAL_UART_MspInit+0x158>)
 800bd20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd22:	f003 0301 	and.w	r3, r3, #1
 800bd26:	617b      	str	r3, [r7, #20]
 800bd28:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800bd2a:	2303      	movs	r3, #3
 800bd2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd2e:	2302      	movs	r3, #2
 800bd30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd32:	2300      	movs	r3, #0
 800bd34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd36:	2303      	movs	r3, #3
 800bd38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800bd3a:	2308      	movs	r3, #8
 800bd3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd3e:	f107 031c 	add.w	r3, r7, #28
 800bd42:	4619      	mov	r1, r3
 800bd44:	4839      	ldr	r0, [pc, #228]	@ (800be2c <HAL_UART_MspInit+0x15c>)
 800bd46:	f002 fc3d 	bl	800e5c4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800bd4a:	4b39      	ldr	r3, [pc, #228]	@ (800be30 <HAL_UART_MspInit+0x160>)
 800bd4c:	4a39      	ldr	r2, [pc, #228]	@ (800be34 <HAL_UART_MspInit+0x164>)
 800bd4e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800bd50:	4b37      	ldr	r3, [pc, #220]	@ (800be30 <HAL_UART_MspInit+0x160>)
 800bd52:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800bd56:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bd58:	4b35      	ldr	r3, [pc, #212]	@ (800be30 <HAL_UART_MspInit+0x160>)
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bd5e:	4b34      	ldr	r3, [pc, #208]	@ (800be30 <HAL_UART_MspInit+0x160>)
 800bd60:	2200      	movs	r2, #0
 800bd62:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800bd64:	4b32      	ldr	r3, [pc, #200]	@ (800be30 <HAL_UART_MspInit+0x160>)
 800bd66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bd6a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bd6c:	4b30      	ldr	r3, [pc, #192]	@ (800be30 <HAL_UART_MspInit+0x160>)
 800bd6e:	2200      	movs	r2, #0
 800bd70:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bd72:	4b2f      	ldr	r3, [pc, #188]	@ (800be30 <HAL_UART_MspInit+0x160>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800bd78:	4b2d      	ldr	r3, [pc, #180]	@ (800be30 <HAL_UART_MspInit+0x160>)
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800bd7e:	4b2c      	ldr	r3, [pc, #176]	@ (800be30 <HAL_UART_MspInit+0x160>)
 800bd80:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800bd84:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800bd86:	4b2a      	ldr	r3, [pc, #168]	@ (800be30 <HAL_UART_MspInit+0x160>)
 800bd88:	2200      	movs	r2, #0
 800bd8a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800bd8c:	4828      	ldr	r0, [pc, #160]	@ (800be30 <HAL_UART_MspInit+0x160>)
 800bd8e:	f001 ffad 	bl	800dcec <HAL_DMA_Init>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d001      	beq.n	800bd9c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800bd98:	f7fe ffb8 	bl	800ad0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4a24      	ldr	r2, [pc, #144]	@ (800be30 <HAL_UART_MspInit+0x160>)
 800bda0:	63da      	str	r2, [r3, #60]	@ 0x3c
 800bda2:	4a23      	ldr	r2, [pc, #140]	@ (800be30 <HAL_UART_MspInit+0x160>)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800bda8:	2200      	movs	r2, #0
 800bdaa:	2100      	movs	r1, #0
 800bdac:	2034      	movs	r0, #52	@ 0x34
 800bdae:	f001 ff54 	bl	800dc5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800bdb2:	2034      	movs	r0, #52	@ 0x34
 800bdb4:	f001 ff6d 	bl	800dc92 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800bdb8:	e030      	b.n	800be1c <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a1e      	ldr	r2, [pc, #120]	@ (800be38 <HAL_UART_MspInit+0x168>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d12b      	bne.n	800be1c <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	613b      	str	r3, [r7, #16]
 800bdc8:	4b17      	ldr	r3, [pc, #92]	@ (800be28 <HAL_UART_MspInit+0x158>)
 800bdca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdcc:	4a16      	ldr	r2, [pc, #88]	@ (800be28 <HAL_UART_MspInit+0x158>)
 800bdce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bdd2:	6413      	str	r3, [r2, #64]	@ 0x40
 800bdd4:	4b14      	ldr	r3, [pc, #80]	@ (800be28 <HAL_UART_MspInit+0x158>)
 800bdd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bddc:	613b      	str	r3, [r7, #16]
 800bdde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bde0:	2300      	movs	r3, #0
 800bde2:	60fb      	str	r3, [r7, #12]
 800bde4:	4b10      	ldr	r3, [pc, #64]	@ (800be28 <HAL_UART_MspInit+0x158>)
 800bde6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bde8:	4a0f      	ldr	r2, [pc, #60]	@ (800be28 <HAL_UART_MspInit+0x158>)
 800bdea:	f043 0301 	orr.w	r3, r3, #1
 800bdee:	6313      	str	r3, [r2, #48]	@ 0x30
 800bdf0:	4b0d      	ldr	r3, [pc, #52]	@ (800be28 <HAL_UART_MspInit+0x158>)
 800bdf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdf4:	f003 0301 	and.w	r3, r3, #1
 800bdf8:	60fb      	str	r3, [r7, #12]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800bdfc:	230c      	movs	r3, #12
 800bdfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be00:	2302      	movs	r3, #2
 800be02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be04:	2300      	movs	r3, #0
 800be06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be08:	2303      	movs	r3, #3
 800be0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800be0c:	2307      	movs	r3, #7
 800be0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be10:	f107 031c 	add.w	r3, r7, #28
 800be14:	4619      	mov	r1, r3
 800be16:	4805      	ldr	r0, [pc, #20]	@ (800be2c <HAL_UART_MspInit+0x15c>)
 800be18:	f002 fbd4 	bl	800e5c4 <HAL_GPIO_Init>
}
 800be1c:	bf00      	nop
 800be1e:	3730      	adds	r7, #48	@ 0x30
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	40004c00 	.word	0x40004c00
 800be28:	40023800 	.word	0x40023800
 800be2c:	40020000 	.word	0x40020000
 800be30:	20001070 	.word	0x20001070
 800be34:	40026040 	.word	0x40026040
 800be38:	40004400 	.word	0x40004400

0800be3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800be3c:	b480      	push	{r7}
 800be3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800be40:	bf00      	nop
 800be42:	e7fd      	b.n	800be40 <NMI_Handler+0x4>

0800be44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800be44:	b480      	push	{r7}
 800be46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800be48:	bf00      	nop
 800be4a:	e7fd      	b.n	800be48 <HardFault_Handler+0x4>

0800be4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800be4c:	b480      	push	{r7}
 800be4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800be50:	bf00      	nop
 800be52:	e7fd      	b.n	800be50 <MemManage_Handler+0x4>

0800be54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800be54:	b480      	push	{r7}
 800be56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800be58:	bf00      	nop
 800be5a:	e7fd      	b.n	800be58 <BusFault_Handler+0x4>

0800be5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800be5c:	b480      	push	{r7}
 800be5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800be60:	bf00      	nop
 800be62:	e7fd      	b.n	800be60 <UsageFault_Handler+0x4>

0800be64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800be64:	b480      	push	{r7}
 800be66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800be68:	bf00      	nop
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr

0800be72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800be72:	b480      	push	{r7}
 800be74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800be76:	bf00      	nop
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800be80:	b480      	push	{r7}
 800be82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800be84:	bf00      	nop
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr

0800be8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800be92:	f000 fa41 	bl	800c318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800be96:	bf00      	nop
 800be98:	bd80      	pop	{r7, pc}
	...

0800be9c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800bea0:	4802      	ldr	r0, [pc, #8]	@ (800beac <DMA1_Stream2_IRQHandler+0x10>)
 800bea2:	f002 f919 	bl	800e0d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800bea6:	bf00      	nop
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	20001070 	.word	0x20001070

0800beb0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800beb4:	4802      	ldr	r0, [pc, #8]	@ (800bec0 <DMA1_Stream3_IRQHandler+0x10>)
 800beb6:	f002 f90f 	bl	800e0d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800beba:	bf00      	nop
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	20000d70 	.word	0x20000d70

0800bec4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800bec8:	4802      	ldr	r0, [pc, #8]	@ (800bed4 <DMA1_Stream4_IRQHandler+0x10>)
 800beca:	f002 f905 	bl	800e0d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800bece:	bf00      	nop
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	20000dd0 	.word	0x20000dd0

0800bed8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800bedc:	4802      	ldr	r0, [pc, #8]	@ (800bee8 <ADC_IRQHandler+0x10>)
 800bede:	f000 fb81 	bl	800c5e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800bee2:	bf00      	nop
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	20000830 	.word	0x20000830

0800beec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800bef0:	4802      	ldr	r0, [pc, #8]	@ (800befc <CAN1_RX0_IRQHandler+0x10>)
 800bef2:	f001 fb95 	bl	800d620 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800bef6:	bf00      	nop
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	20000878 	.word	0x20000878

0800bf00 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800bf04:	4802      	ldr	r0, [pc, #8]	@ (800bf10 <CAN1_RX1_IRQHandler+0x10>)
 800bf06:	f001 fb8b 	bl	800d620 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800bf0a:	bf00      	nop
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	20000878 	.word	0x20000878

0800bf14 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800bf18:	4802      	ldr	r0, [pc, #8]	@ (800bf24 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800bf1a:	f007 f8c9 	bl	80130b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800bf1e:	bf00      	nop
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	20000e30 	.word	0x20000e30

0800bf28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800bf2c:	4802      	ldr	r0, [pc, #8]	@ (800bf38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800bf2e:	f007 f8bf 	bl	80130b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800bf32:	bf00      	nop
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	20000e30 	.word	0x20000e30

0800bf3c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800bf40:	4802      	ldr	r0, [pc, #8]	@ (800bf4c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800bf42:	f007 f8b5 	bl	80130b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800bf46:	bf00      	nop
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	20000e30 	.word	0x20000e30

0800bf50 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800bf54:	4802      	ldr	r0, [pc, #8]	@ (800bf60 <TIM1_CC_IRQHandler+0x10>)
 800bf56:	f007 f8ab 	bl	80130b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800bf5a:	bf00      	nop
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	20000e30 	.word	0x20000e30

0800bf64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800bf68:	4802      	ldr	r0, [pc, #8]	@ (800bf74 <TIM2_IRQHandler+0x10>)
 800bf6a:	f007 f8a1 	bl	80130b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800bf6e:	bf00      	nop
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	20000e78 	.word	0x20000e78

0800bf78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800bf7c:	4802      	ldr	r0, [pc, #8]	@ (800bf88 <TIM3_IRQHandler+0x10>)
 800bf7e:	f007 f897 	bl	80130b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800bf82:	bf00      	nop
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	20000ec0 	.word	0x20000ec0

0800bf8c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800bf90:	4802      	ldr	r0, [pc, #8]	@ (800bf9c <TIM4_IRQHandler+0x10>)
 800bf92:	f007 f88d 	bl	80130b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800bf96:	bf00      	nop
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	20000f08 	.word	0x20000f08

0800bfa0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800bfa4:	4802      	ldr	r0, [pc, #8]	@ (800bfb0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800bfa6:	f007 f883 	bl	80130b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800bfaa:	bf00      	nop
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	20000f50 	.word	0x20000f50

0800bfb4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800bfb8:	4802      	ldr	r0, [pc, #8]	@ (800bfc4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800bfba:	f007 f879 	bl	80130b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800bfbe:	bf00      	nop
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	20000f50 	.word	0x20000f50

0800bfc8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800bfcc:	4803      	ldr	r0, [pc, #12]	@ (800bfdc <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 800bfce:	f007 f86f 	bl	80130b0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800bfd2:	4803      	ldr	r0, [pc, #12]	@ (800bfe0 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800bfd4:	f007 f86c 	bl	80130b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800bfd8:	bf00      	nop
 800bfda:	bd80      	pop	{r7, pc}
 800bfdc:	20000f50 	.word	0x20000f50
 800bfe0:	20000f98 	.word	0x20000f98

0800bfe4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800bfe8:	4802      	ldr	r0, [pc, #8]	@ (800bff4 <TIM8_CC_IRQHandler+0x10>)
 800bfea:	f007 f861 	bl	80130b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800bfee:	bf00      	nop
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop
 800bff4:	20000f50 	.word	0x20000f50

0800bff8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_MMC_IRQHandler(&hmmc);
 800bffc:	4802      	ldr	r0, [pc, #8]	@ (800c008 <SDIO_IRQHandler+0x10>)
 800bffe:	f003 f82f 	bl	800f060 <HAL_MMC_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800c002:	bf00      	nop
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	200008c0 	.word	0x200008c0

0800c00c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800c010:	4802      	ldr	r0, [pc, #8]	@ (800c01c <UART4_IRQHandler+0x10>)
 800c012:	f008 f82b 	bl	801406c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800c016:	bf00      	nop
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	20000fe0 	.word	0x20000fe0

0800c020 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800c024:	4802      	ldr	r0, [pc, #8]	@ (800c030 <DMA2_Stream0_IRQHandler+0x10>)
 800c026:	f002 f857 	bl	800e0d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800c02a:	bf00      	nop
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	20000cb0 	.word	0x20000cb0

0800c034 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800c038:	4802      	ldr	r0, [pc, #8]	@ (800c044 <DMA2_Stream3_IRQHandler+0x10>)
 800c03a:	f002 f84d 	bl	800e0d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800c03e:	bf00      	nop
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	20000ba0 	.word	0x20000ba0

0800c048 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800c04c:	4802      	ldr	r0, [pc, #8]	@ (800c058 <DMA2_Stream5_IRQHandler+0x10>)
 800c04e:	f002 f843 	bl	800e0d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800c052:	bf00      	nop
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	20000d10 	.word	0x20000d10

0800c05c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800c060:	4802      	ldr	r0, [pc, #8]	@ (800c06c <DMA2_Stream6_IRQHandler+0x10>)
 800c062:	f002 f839 	bl	800e0d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800c066:	bf00      	nop
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	20000b40 	.word	0x20000b40

0800c070 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c070:	b480      	push	{r7}
 800c072:	af00      	add	r7, sp, #0
  return 1;
 800c074:	2301      	movs	r3, #1
}
 800c076:	4618      	mov	r0, r3
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <_kill>:

int _kill(int pid, int sig)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800c08a:	f00b f863 	bl	8017154 <__errno>
 800c08e:	4603      	mov	r3, r0
 800c090:	2216      	movs	r2, #22
 800c092:	601a      	str	r2, [r3, #0]
  return -1;
 800c094:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <_exit>:

void _exit (int status)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800c0a8:	f04f 31ff 	mov.w	r1, #4294967295
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f7ff ffe7 	bl	800c080 <_kill>
  while (1) {}    /* Make sure we hang here */
 800c0b2:	bf00      	nop
 800c0b4:	e7fd      	b.n	800c0b2 <_exit+0x12>

0800c0b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b086      	sub	sp, #24
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	60f8      	str	r0, [r7, #12]
 800c0be:	60b9      	str	r1, [r7, #8]
 800c0c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	617b      	str	r3, [r7, #20]
 800c0c6:	e00a      	b.n	800c0de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800c0c8:	f3af 8000 	nop.w
 800c0cc:	4601      	mov	r1, r0
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	1c5a      	adds	r2, r3, #1
 800c0d2:	60ba      	str	r2, [r7, #8]
 800c0d4:	b2ca      	uxtb	r2, r1
 800c0d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	617b      	str	r3, [r7, #20]
 800c0de:	697a      	ldr	r2, [r7, #20]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	dbf0      	blt.n	800c0c8 <_read+0x12>
  }

  return len;
 800c0e6:	687b      	ldr	r3, [r7, #4]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3718      	adds	r7, #24
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	617b      	str	r3, [r7, #20]
 800c100:	e009      	b.n	800c116 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	1c5a      	adds	r2, r3, #1
 800c106:	60ba      	str	r2, [r7, #8]
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	4618      	mov	r0, r3
 800c10c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	3301      	adds	r3, #1
 800c114:	617b      	str	r3, [r7, #20]
 800c116:	697a      	ldr	r2, [r7, #20]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	dbf1      	blt.n	800c102 <_write+0x12>
  }
  return len;
 800c11e:	687b      	ldr	r3, [r7, #4]
}
 800c120:	4618      	mov	r0, r3
 800c122:	3718      	adds	r7, #24
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <_close>:

int _close(int file)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800c130:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c134:	4618      	mov	r0, r3
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c150:	605a      	str	r2, [r3, #4]
  return 0;
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <_isatty>:

int _isatty(int file)
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800c168:	2301      	movs	r3, #1
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	370c      	adds	r7, #12
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr

0800c176 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c176:	b480      	push	{r7}
 800c178:	b085      	sub	sp, #20
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	60f8      	str	r0, [r7, #12]
 800c17e:	60b9      	str	r1, [r7, #8]
 800c180:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800c182:	2300      	movs	r3, #0
}
 800c184:	4618      	mov	r0, r3
 800c186:	3714      	adds	r7, #20
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c198:	4a14      	ldr	r2, [pc, #80]	@ (800c1ec <_sbrk+0x5c>)
 800c19a:	4b15      	ldr	r3, [pc, #84]	@ (800c1f0 <_sbrk+0x60>)
 800c19c:	1ad3      	subs	r3, r2, r3
 800c19e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c1a4:	4b13      	ldr	r3, [pc, #76]	@ (800c1f4 <_sbrk+0x64>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d102      	bne.n	800c1b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c1ac:	4b11      	ldr	r3, [pc, #68]	@ (800c1f4 <_sbrk+0x64>)
 800c1ae:	4a12      	ldr	r2, [pc, #72]	@ (800c1f8 <_sbrk+0x68>)
 800c1b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c1b2:	4b10      	ldr	r3, [pc, #64]	@ (800c1f4 <_sbrk+0x64>)
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	693a      	ldr	r2, [r7, #16]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d207      	bcs.n	800c1d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c1c0:	f00a ffc8 	bl	8017154 <__errno>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	220c      	movs	r2, #12
 800c1c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c1ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ce:	e009      	b.n	800c1e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c1d0:	4b08      	ldr	r3, [pc, #32]	@ (800c1f4 <_sbrk+0x64>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c1d6:	4b07      	ldr	r3, [pc, #28]	@ (800c1f4 <_sbrk+0x64>)
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	4413      	add	r3, r2
 800c1de:	4a05      	ldr	r2, [pc, #20]	@ (800c1f4 <_sbrk+0x64>)
 800c1e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3718      	adds	r7, #24
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	20020000 	.word	0x20020000
 800c1f0:	00000400 	.word	0x00000400
 800c1f4:	200042e4 	.word	0x200042e4
 800c1f8:	20004438 	.word	0x20004438

0800c1fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c200:	4b06      	ldr	r3, [pc, #24]	@ (800c21c <SystemInit+0x20>)
 800c202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c206:	4a05      	ldr	r2, [pc, #20]	@ (800c21c <SystemInit+0x20>)
 800c208:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c20c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800c210:	bf00      	nop
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	e000ed00 	.word	0xe000ed00

0800c220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800c220:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800c258 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800c224:	f7ff ffea 	bl	800c1fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800c228:	480c      	ldr	r0, [pc, #48]	@ (800c25c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800c22a:	490d      	ldr	r1, [pc, #52]	@ (800c260 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800c22c:	4a0d      	ldr	r2, [pc, #52]	@ (800c264 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800c22e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c230:	e002      	b.n	800c238 <LoopCopyDataInit>

0800c232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c236:	3304      	adds	r3, #4

0800c238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c23a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c23c:	d3f9      	bcc.n	800c232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c23e:	4a0a      	ldr	r2, [pc, #40]	@ (800c268 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800c240:	4c0a      	ldr	r4, [pc, #40]	@ (800c26c <LoopFillZerobss+0x22>)
  movs r3, #0
 800c242:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c244:	e001      	b.n	800c24a <LoopFillZerobss>

0800c246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c248:	3204      	adds	r2, #4

0800c24a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c24a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c24c:	d3fb      	bcc.n	800c246 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800c24e:	f00a ff87 	bl	8017160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c252:	f7fd fdd5 	bl	8009e00 <main>
  bx  lr    
 800c256:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800c258:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800c25c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c260:	200003d4 	.word	0x200003d4
  ldr r2, =_sidata
 800c264:	0801b524 	.word	0x0801b524
  ldr r2, =_sbss
 800c268:	200003d4 	.word	0x200003d4
  ldr r4, =_ebss
 800c26c:	20004438 	.word	0x20004438

0800c270 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c270:	e7fe      	b.n	800c270 <CAN1_SCE_IRQHandler>
	...

0800c274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c278:	4b0e      	ldr	r3, [pc, #56]	@ (800c2b4 <HAL_Init+0x40>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a0d      	ldr	r2, [pc, #52]	@ (800c2b4 <HAL_Init+0x40>)
 800c27e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c284:	4b0b      	ldr	r3, [pc, #44]	@ (800c2b4 <HAL_Init+0x40>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a0a      	ldr	r2, [pc, #40]	@ (800c2b4 <HAL_Init+0x40>)
 800c28a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c28e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c290:	4b08      	ldr	r3, [pc, #32]	@ (800c2b4 <HAL_Init+0x40>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a07      	ldr	r2, [pc, #28]	@ (800c2b4 <HAL_Init+0x40>)
 800c296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c29a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c29c:	2003      	movs	r0, #3
 800c29e:	f001 fcd1 	bl	800dc44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c2a2:	200f      	movs	r0, #15
 800c2a4:	f000 f808 	bl	800c2b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c2a8:	f7fe ffb4 	bl	800b214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c2ac:	2300      	movs	r3, #0
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	40023c00 	.word	0x40023c00

0800c2b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c2c0:	4b12      	ldr	r3, [pc, #72]	@ (800c30c <HAL_InitTick+0x54>)
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	4b12      	ldr	r3, [pc, #72]	@ (800c310 <HAL_InitTick+0x58>)
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c2ce:	fbb3 f3f1 	udiv	r3, r3, r1
 800c2d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f001 fcfb 	bl	800dcd2 <HAL_SYSTICK_Config>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d001      	beq.n	800c2e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e00e      	b.n	800c304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2b0f      	cmp	r3, #15
 800c2ea:	d80a      	bhi.n	800c302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	6879      	ldr	r1, [r7, #4]
 800c2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f4:	f001 fcb1 	bl	800dc5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c2f8:	4a06      	ldr	r2, [pc, #24]	@ (800c314 <HAL_InitTick+0x5c>)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c2fe:	2300      	movs	r3, #0
 800c300:	e000      	b.n	800c304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c302:	2301      	movs	r3, #1
}
 800c304:	4618      	mov	r0, r3
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	20000200 	.word	0x20000200
 800c310:	20000208 	.word	0x20000208
 800c314:	20000204 	.word	0x20000204

0800c318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c318:	b480      	push	{r7}
 800c31a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c31c:	4b06      	ldr	r3, [pc, #24]	@ (800c338 <HAL_IncTick+0x20>)
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	461a      	mov	r2, r3
 800c322:	4b06      	ldr	r3, [pc, #24]	@ (800c33c <HAL_IncTick+0x24>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4413      	add	r3, r2
 800c328:	4a04      	ldr	r2, [pc, #16]	@ (800c33c <HAL_IncTick+0x24>)
 800c32a:	6013      	str	r3, [r2, #0]
}
 800c32c:	bf00      	nop
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	20000208 	.word	0x20000208
 800c33c:	200042e8 	.word	0x200042e8

0800c340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c340:	b480      	push	{r7}
 800c342:	af00      	add	r7, sp, #0
  return uwTick;
 800c344:	4b03      	ldr	r3, [pc, #12]	@ (800c354 <HAL_GetTick+0x14>)
 800c346:	681b      	ldr	r3, [r3, #0]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop
 800c354:	200042e8 	.word	0x200042e8

0800c358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c360:	f7ff ffee 	bl	800c340 <HAL_GetTick>
 800c364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c370:	d005      	beq.n	800c37e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c372:	4b0a      	ldr	r3, [pc, #40]	@ (800c39c <HAL_Delay+0x44>)
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	461a      	mov	r2, r3
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	4413      	add	r3, r2
 800c37c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c37e:	bf00      	nop
 800c380:	f7ff ffde 	bl	800c340 <HAL_GetTick>
 800c384:	4602      	mov	r2, r0
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d8f7      	bhi.n	800c380 <HAL_Delay+0x28>
  {
  }
}
 800c390:	bf00      	nop
 800c392:	bf00      	nop
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	20000208 	.word	0x20000208

0800c3a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d101      	bne.n	800c3b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	e033      	b.n	800c41e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d109      	bne.n	800c3d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f7fe ff50 	bl	800b264 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3d6:	f003 0310 	and.w	r3, r3, #16
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d118      	bne.n	800c410 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800c3e6:	f023 0302 	bic.w	r3, r3, #2
 800c3ea:	f043 0202 	orr.w	r2, r3, #2
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 fb5a 	bl	800caac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c402:	f023 0303 	bic.w	r3, r3, #3
 800c406:	f043 0201 	orr.w	r2, r3, #1
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	641a      	str	r2, [r3, #64]	@ 0x40
 800c40e:	e001      	b.n	800c414 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800c410:	2301      	movs	r3, #1
 800c412:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800c41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3710      	adds	r7, #16
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
	...

0800c428 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800c428:	b480      	push	{r7}
 800c42a:	b085      	sub	sp, #20
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800c430:	2300      	movs	r3, #0
 800c432:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d101      	bne.n	800c442 <HAL_ADC_Start_IT+0x1a>
 800c43e:	2302      	movs	r3, #2
 800c440:	e0bd      	b.n	800c5be <HAL_ADC_Start_IT+0x196>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2201      	movs	r2, #1
 800c446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	f003 0301 	and.w	r3, r3, #1
 800c454:	2b01      	cmp	r3, #1
 800c456:	d018      	beq.n	800c48a <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	689a      	ldr	r2, [r3, #8]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f042 0201 	orr.w	r2, r2, #1
 800c466:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c468:	4b58      	ldr	r3, [pc, #352]	@ (800c5cc <HAL_ADC_Start_IT+0x1a4>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a58      	ldr	r2, [pc, #352]	@ (800c5d0 <HAL_ADC_Start_IT+0x1a8>)
 800c46e:	fba2 2303 	umull	r2, r3, r2, r3
 800c472:	0c9a      	lsrs	r2, r3, #18
 800c474:	4613      	mov	r3, r2
 800c476:	005b      	lsls	r3, r3, #1
 800c478:	4413      	add	r3, r2
 800c47a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800c47c:	e002      	b.n	800c484 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	3b01      	subs	r3, #1
 800c482:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1f9      	bne.n	800c47e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	f003 0301 	and.w	r3, r3, #1
 800c494:	2b01      	cmp	r3, #1
 800c496:	f040 8085 	bne.w	800c5a4 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c49e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800c4a2:	f023 0301 	bic.w	r3, r3, #1
 800c4a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d007      	beq.n	800c4cc <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800c4c4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c4d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4d8:	d106      	bne.n	800c4e8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4de:	f023 0206 	bic.w	r2, r3, #6
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	645a      	str	r2, [r3, #68]	@ 0x44
 800c4e6:	e002      	b.n	800c4ee <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c4f6:	4b37      	ldr	r3, [pc, #220]	@ (800c5d4 <HAL_ADC_Start_IT+0x1ac>)
 800c4f8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800c502:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	6812      	ldr	r2, [r2, #0]
 800c50e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c512:	f043 0320 	orr.w	r3, r3, #32
 800c516:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	f003 031f 	and.w	r3, r3, #31
 800c520:	2b00      	cmp	r3, #0
 800c522:	d12a      	bne.n	800c57a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a2b      	ldr	r2, [pc, #172]	@ (800c5d8 <HAL_ADC_Start_IT+0x1b0>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d015      	beq.n	800c55a <HAL_ADC_Start_IT+0x132>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a2a      	ldr	r2, [pc, #168]	@ (800c5dc <HAL_ADC_Start_IT+0x1b4>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d105      	bne.n	800c544 <HAL_ADC_Start_IT+0x11c>
 800c538:	4b26      	ldr	r3, [pc, #152]	@ (800c5d4 <HAL_ADC_Start_IT+0x1ac>)
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	f003 031f 	and.w	r3, r3, #31
 800c540:	2b00      	cmp	r3, #0
 800c542:	d00a      	beq.n	800c55a <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a25      	ldr	r2, [pc, #148]	@ (800c5e0 <HAL_ADC_Start_IT+0x1b8>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d136      	bne.n	800c5bc <HAL_ADC_Start_IT+0x194>
 800c54e:	4b21      	ldr	r3, [pc, #132]	@ (800c5d4 <HAL_ADC_Start_IT+0x1ac>)
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	f003 0310 	and.w	r3, r3, #16
 800c556:	2b00      	cmp	r3, #0
 800c558:	d130      	bne.n	800c5bc <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c564:	2b00      	cmp	r3, #0
 800c566:	d129      	bne.n	800c5bc <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	689a      	ldr	r2, [r3, #8]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800c576:	609a      	str	r2, [r3, #8]
 800c578:	e020      	b.n	800c5bc <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4a16      	ldr	r2, [pc, #88]	@ (800c5d8 <HAL_ADC_Start_IT+0x1b0>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d11b      	bne.n	800c5bc <HAL_ADC_Start_IT+0x194>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d114      	bne.n	800c5bc <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	689a      	ldr	r2, [r3, #8]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800c5a0:	609a      	str	r2, [r3, #8]
 800c5a2:	e00b      	b.n	800c5bc <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5a8:	f043 0210 	orr.w	r2, r3, #16
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5b4:	f043 0201 	orr.w	r2, r3, #1
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3714      	adds	r7, #20
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop
 800c5cc:	20000200 	.word	0x20000200
 800c5d0:	431bde83 	.word	0x431bde83
 800c5d4:	40012300 	.word	0x40012300
 800c5d8:	40012000 	.word	0x40012000
 800c5dc:	40012100 	.word	0x40012100
 800c5e0:	40012200 	.word	0x40012200

0800c5e4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b086      	sub	sp, #24
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	617b      	str	r3, [r7, #20]
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f003 0302 	and.w	r3, r3, #2
 800c60a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	f003 0320 	and.w	r3, r3, #32
 800c612:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d049      	beq.n	800c6ae <HAL_ADC_IRQHandler+0xca>
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d046      	beq.n	800c6ae <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c624:	f003 0310 	and.w	r3, r3, #16
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d105      	bne.n	800c638 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c630:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c642:	2b00      	cmp	r3, #0
 800c644:	d12b      	bne.n	800c69e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d127      	bne.n	800c69e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c654:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d006      	beq.n	800c66a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	689b      	ldr	r3, [r3, #8]
 800c662:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800c666:	2b00      	cmp	r3, #0
 800c668:	d119      	bne.n	800c69e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	685a      	ldr	r2, [r3, #4]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f022 0220 	bic.w	r2, r2, #32
 800c678:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c67e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c68a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d105      	bne.n	800c69e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c696:	f043 0201 	orr.w	r2, r3, #1
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f7fd fb92 	bl	8009dc8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f06f 0212 	mvn.w	r2, #18
 800c6ac:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f003 0304 	and.w	r3, r3, #4
 800c6b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6bc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d057      	beq.n	800c774 <HAL_ADC_IRQHandler+0x190>
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d054      	beq.n	800c774 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6ce:	f003 0310 	and.w	r3, r3, #16
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d105      	bne.n	800c6e2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6da:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d139      	bne.n	800c764 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6f6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d006      	beq.n	800c70c <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d12b      	bne.n	800c764 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800c716:	2b00      	cmp	r3, #0
 800c718:	d124      	bne.n	800c764 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800c724:	2b00      	cmp	r3, #0
 800c726:	d11d      	bne.n	800c764 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d119      	bne.n	800c764 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	685a      	ldr	r2, [r3, #4]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c73e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c744:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c754:	2b00      	cmp	r3, #0
 800c756:	d105      	bne.n	800c764 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c75c:	f043 0201 	orr.w	r2, r3, #1
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 fa9d 	bl	800cca4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f06f 020c 	mvn.w	r2, #12
 800c772:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f003 0301 	and.w	r3, r3, #1
 800c77a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c782:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d017      	beq.n	800c7ba <HAL_ADC_IRQHandler+0x1d6>
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d014      	beq.n	800c7ba <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f003 0301 	and.w	r3, r3, #1
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d10d      	bne.n	800c7ba <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f837 	bl	800c81e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f06f 0201 	mvn.w	r2, #1
 800c7b8:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f003 0320 	and.w	r3, r3, #32
 800c7c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c7c8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d015      	beq.n	800c7fc <HAL_ADC_IRQHandler+0x218>
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d012      	beq.n	800c7fc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7da:	f043 0202 	orr.w	r2, r3, #2
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f06f 0220 	mvn.w	r2, #32
 800c7ea:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 f820 	bl	800c832 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f06f 0220 	mvn.w	r2, #32
 800c7fa:	601a      	str	r2, [r3, #0]
  }
}
 800c7fc:	bf00      	nop
 800c7fe:	3718      	adds	r7, #24
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800c812:	4618      	mov	r0, r3
 800c814:	370c      	adds	r7, #12
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr

0800c81e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800c81e:	b480      	push	{r7}
 800c820:	b083      	sub	sp, #12
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800c826:	bf00      	nop
 800c828:	370c      	adds	r7, #12
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr

0800c832 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800c832:	b480      	push	{r7}
 800c834:	b083      	sub	sp, #12
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800c83a:	bf00      	nop
 800c83c:	370c      	adds	r7, #12
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr
	...

0800c848 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800c852:	2300      	movs	r3, #0
 800c854:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d101      	bne.n	800c864 <HAL_ADC_ConfigChannel+0x1c>
 800c860:	2302      	movs	r3, #2
 800c862:	e113      	b.n	800ca8c <HAL_ADC_ConfigChannel+0x244>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2b09      	cmp	r3, #9
 800c872:	d925      	bls.n	800c8c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	68d9      	ldr	r1, [r3, #12]
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	b29b      	uxth	r3, r3
 800c880:	461a      	mov	r2, r3
 800c882:	4613      	mov	r3, r2
 800c884:	005b      	lsls	r3, r3, #1
 800c886:	4413      	add	r3, r2
 800c888:	3b1e      	subs	r3, #30
 800c88a:	2207      	movs	r2, #7
 800c88c:	fa02 f303 	lsl.w	r3, r2, r3
 800c890:	43da      	mvns	r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	400a      	ands	r2, r1
 800c898:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	68d9      	ldr	r1, [r3, #12]
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	689a      	ldr	r2, [r3, #8]
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	005b      	lsls	r3, r3, #1
 800c8b0:	4403      	add	r3, r0
 800c8b2:	3b1e      	subs	r3, #30
 800c8b4:	409a      	lsls	r2, r3
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	430a      	orrs	r2, r1
 800c8bc:	60da      	str	r2, [r3, #12]
 800c8be:	e022      	b.n	800c906 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	6919      	ldr	r1, [r3, #16]
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	4613      	mov	r3, r2
 800c8d0:	005b      	lsls	r3, r3, #1
 800c8d2:	4413      	add	r3, r2
 800c8d4:	2207      	movs	r2, #7
 800c8d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c8da:	43da      	mvns	r2, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	400a      	ands	r2, r1
 800c8e2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	6919      	ldr	r1, [r3, #16]
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	689a      	ldr	r2, [r3, #8]
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	005b      	lsls	r3, r3, #1
 800c8fa:	4403      	add	r3, r0
 800c8fc:	409a      	lsls	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	430a      	orrs	r2, r1
 800c904:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	2b06      	cmp	r3, #6
 800c90c:	d824      	bhi.n	800c958 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	685a      	ldr	r2, [r3, #4]
 800c918:	4613      	mov	r3, r2
 800c91a:	009b      	lsls	r3, r3, #2
 800c91c:	4413      	add	r3, r2
 800c91e:	3b05      	subs	r3, #5
 800c920:	221f      	movs	r2, #31
 800c922:	fa02 f303 	lsl.w	r3, r2, r3
 800c926:	43da      	mvns	r2, r3
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	400a      	ands	r2, r1
 800c92e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	4618      	mov	r0, r3
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	685a      	ldr	r2, [r3, #4]
 800c942:	4613      	mov	r3, r2
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	4413      	add	r3, r2
 800c948:	3b05      	subs	r3, #5
 800c94a:	fa00 f203 	lsl.w	r2, r0, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	430a      	orrs	r2, r1
 800c954:	635a      	str	r2, [r3, #52]	@ 0x34
 800c956:	e04c      	b.n	800c9f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	2b0c      	cmp	r3, #12
 800c95e:	d824      	bhi.n	800c9aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	685a      	ldr	r2, [r3, #4]
 800c96a:	4613      	mov	r3, r2
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	4413      	add	r3, r2
 800c970:	3b23      	subs	r3, #35	@ 0x23
 800c972:	221f      	movs	r2, #31
 800c974:	fa02 f303 	lsl.w	r3, r2, r3
 800c978:	43da      	mvns	r2, r3
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	400a      	ands	r2, r1
 800c980:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	4618      	mov	r0, r3
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	685a      	ldr	r2, [r3, #4]
 800c994:	4613      	mov	r3, r2
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	4413      	add	r3, r2
 800c99a:	3b23      	subs	r3, #35	@ 0x23
 800c99c:	fa00 f203 	lsl.w	r2, r0, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	430a      	orrs	r2, r1
 800c9a6:	631a      	str	r2, [r3, #48]	@ 0x30
 800c9a8:	e023      	b.n	800c9f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	685a      	ldr	r2, [r3, #4]
 800c9b4:	4613      	mov	r3, r2
 800c9b6:	009b      	lsls	r3, r3, #2
 800c9b8:	4413      	add	r3, r2
 800c9ba:	3b41      	subs	r3, #65	@ 0x41
 800c9bc:	221f      	movs	r2, #31
 800c9be:	fa02 f303 	lsl.w	r3, r2, r3
 800c9c2:	43da      	mvns	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	400a      	ands	r2, r1
 800c9ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	4618      	mov	r0, r3
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	685a      	ldr	r2, [r3, #4]
 800c9de:	4613      	mov	r3, r2
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	4413      	add	r3, r2
 800c9e4:	3b41      	subs	r3, #65	@ 0x41
 800c9e6:	fa00 f203 	lsl.w	r2, r0, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	430a      	orrs	r2, r1
 800c9f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c9f2:	4b29      	ldr	r3, [pc, #164]	@ (800ca98 <HAL_ADC_ConfigChannel+0x250>)
 800c9f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a28      	ldr	r2, [pc, #160]	@ (800ca9c <HAL_ADC_ConfigChannel+0x254>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d10f      	bne.n	800ca20 <HAL_ADC_ConfigChannel+0x1d8>
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2b12      	cmp	r3, #18
 800ca06:	d10b      	bne.n	800ca20 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a1d      	ldr	r2, [pc, #116]	@ (800ca9c <HAL_ADC_ConfigChannel+0x254>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d12b      	bne.n	800ca82 <HAL_ADC_ConfigChannel+0x23a>
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a1c      	ldr	r2, [pc, #112]	@ (800caa0 <HAL_ADC_ConfigChannel+0x258>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d003      	beq.n	800ca3c <HAL_ADC_ConfigChannel+0x1f4>
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b11      	cmp	r3, #17
 800ca3a:	d122      	bne.n	800ca82 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a11      	ldr	r2, [pc, #68]	@ (800caa0 <HAL_ADC_ConfigChannel+0x258>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d111      	bne.n	800ca82 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800ca5e:	4b11      	ldr	r3, [pc, #68]	@ (800caa4 <HAL_ADC_ConfigChannel+0x25c>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a11      	ldr	r2, [pc, #68]	@ (800caa8 <HAL_ADC_ConfigChannel+0x260>)
 800ca64:	fba2 2303 	umull	r2, r3, r2, r3
 800ca68:	0c9a      	lsrs	r2, r3, #18
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	4413      	add	r3, r2
 800ca70:	005b      	lsls	r3, r3, #1
 800ca72:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800ca74:	e002      	b.n	800ca7c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d1f9      	bne.n	800ca76 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800ca8a:	2300      	movs	r3, #0
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3714      	adds	r7, #20
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr
 800ca98:	40012300 	.word	0x40012300
 800ca9c:	40012000 	.word	0x40012000
 800caa0:	10000012 	.word	0x10000012
 800caa4:	20000200 	.word	0x20000200
 800caa8:	431bde83 	.word	0x431bde83

0800caac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800caac:	b480      	push	{r7}
 800caae:	b085      	sub	sp, #20
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800cab4:	4b79      	ldr	r3, [pc, #484]	@ (800cc9c <ADC_Init+0x1f0>)
 800cab6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	685a      	ldr	r2, [r3, #4]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	431a      	orrs	r2, r3
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	685a      	ldr	r2, [r3, #4]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cae0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	6859      	ldr	r1, [r3, #4]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	691b      	ldr	r3, [r3, #16]
 800caec:	021a      	lsls	r2, r3, #8
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	430a      	orrs	r2, r1
 800caf4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	685a      	ldr	r2, [r3, #4]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800cb04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	6859      	ldr	r1, [r3, #4]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	689a      	ldr	r2, [r3, #8]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	430a      	orrs	r2, r1
 800cb16:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	689a      	ldr	r2, [r3, #8]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cb26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	6899      	ldr	r1, [r3, #8]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	68da      	ldr	r2, [r3, #12]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	430a      	orrs	r2, r1
 800cb38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb3e:	4a58      	ldr	r2, [pc, #352]	@ (800cca0 <ADC_Init+0x1f4>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d022      	beq.n	800cb8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	689a      	ldr	r2, [r3, #8]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800cb52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	6899      	ldr	r1, [r3, #8]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	430a      	orrs	r2, r1
 800cb64:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	689a      	ldr	r2, [r3, #8]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800cb74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	6899      	ldr	r1, [r3, #8]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	430a      	orrs	r2, r1
 800cb86:	609a      	str	r2, [r3, #8]
 800cb88:	e00f      	b.n	800cbaa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	689a      	ldr	r2, [r3, #8]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800cb98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	689a      	ldr	r2, [r3, #8]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800cba8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	689a      	ldr	r2, [r3, #8]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f022 0202 	bic.w	r2, r2, #2
 800cbb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	6899      	ldr	r1, [r3, #8]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	7e1b      	ldrb	r3, [r3, #24]
 800cbc4:	005a      	lsls	r2, r3, #1
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	430a      	orrs	r2, r1
 800cbcc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d01b      	beq.n	800cc10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	685a      	ldr	r2, [r3, #4]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cbe6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	685a      	ldr	r2, [r3, #4]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800cbf6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	6859      	ldr	r1, [r3, #4]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc02:	3b01      	subs	r3, #1
 800cc04:	035a      	lsls	r2, r3, #13
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	430a      	orrs	r2, r1
 800cc0c:	605a      	str	r2, [r3, #4]
 800cc0e:	e007      	b.n	800cc20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	685a      	ldr	r2, [r3, #4]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cc1e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800cc2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	69db      	ldr	r3, [r3, #28]
 800cc3a:	3b01      	subs	r3, #1
 800cc3c:	051a      	lsls	r2, r3, #20
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	430a      	orrs	r2, r1
 800cc44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	689a      	ldr	r2, [r3, #8]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800cc54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	6899      	ldr	r1, [r3, #8]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cc62:	025a      	lsls	r2, r3, #9
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	430a      	orrs	r2, r1
 800cc6a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	689a      	ldr	r2, [r3, #8]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cc7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	6899      	ldr	r1, [r3, #8]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	695b      	ldr	r3, [r3, #20]
 800cc86:	029a      	lsls	r2, r3, #10
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	430a      	orrs	r2, r1
 800cc8e:	609a      	str	r2, [r3, #8]
}
 800cc90:	bf00      	nop
 800cc92:	3714      	adds	r7, #20
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	40012300 	.word	0x40012300
 800cca0:	0f000001 	.word	0x0f000001

0800cca4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800ccac:	bf00      	nop
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d101      	bne.n	800ccca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e0ed      	b.n	800cea6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d102      	bne.n	800ccdc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f7fe fb10 	bl	800b2fc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f042 0201 	orr.w	r2, r2, #1
 800ccea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ccec:	f7ff fb28 	bl	800c340 <HAL_GetTick>
 800ccf0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ccf2:	e012      	b.n	800cd1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ccf4:	f7ff fb24 	bl	800c340 <HAL_GetTick>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	1ad3      	subs	r3, r2, r3
 800ccfe:	2b0a      	cmp	r3, #10
 800cd00:	d90b      	bls.n	800cd1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd06:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2205      	movs	r2, #5
 800cd12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800cd16:	2301      	movs	r3, #1
 800cd18:	e0c5      	b.n	800cea6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	f003 0301 	and.w	r3, r3, #1
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d0e5      	beq.n	800ccf4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f022 0202 	bic.w	r2, r2, #2
 800cd36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cd38:	f7ff fb02 	bl	800c340 <HAL_GetTick>
 800cd3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800cd3e:	e012      	b.n	800cd66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800cd40:	f7ff fafe 	bl	800c340 <HAL_GetTick>
 800cd44:	4602      	mov	r2, r0
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	1ad3      	subs	r3, r2, r3
 800cd4a:	2b0a      	cmp	r3, #10
 800cd4c:	d90b      	bls.n	800cd66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd52:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2205      	movs	r2, #5
 800cd5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800cd62:	2301      	movs	r3, #1
 800cd64:	e09f      	b.n	800cea6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	f003 0302 	and.w	r3, r3, #2
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d1e5      	bne.n	800cd40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	7e1b      	ldrb	r3, [r3, #24]
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d108      	bne.n	800cd8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cd8a:	601a      	str	r2, [r3, #0]
 800cd8c:	e007      	b.n	800cd9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cd9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	7e5b      	ldrb	r3, [r3, #25]
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d108      	bne.n	800cdb8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cdb4:	601a      	str	r2, [r3, #0]
 800cdb6:	e007      	b.n	800cdc8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cdc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	7e9b      	ldrb	r3, [r3, #26]
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d108      	bne.n	800cde2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f042 0220 	orr.w	r2, r2, #32
 800cdde:	601a      	str	r2, [r3, #0]
 800cde0:	e007      	b.n	800cdf2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f022 0220 	bic.w	r2, r2, #32
 800cdf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	7edb      	ldrb	r3, [r3, #27]
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d108      	bne.n	800ce0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	681a      	ldr	r2, [r3, #0]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f022 0210 	bic.w	r2, r2, #16
 800ce08:	601a      	str	r2, [r3, #0]
 800ce0a:	e007      	b.n	800ce1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f042 0210 	orr.w	r2, r2, #16
 800ce1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	7f1b      	ldrb	r3, [r3, #28]
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d108      	bne.n	800ce36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f042 0208 	orr.w	r2, r2, #8
 800ce32:	601a      	str	r2, [r3, #0]
 800ce34:	e007      	b.n	800ce46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f022 0208 	bic.w	r2, r2, #8
 800ce44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	7f5b      	ldrb	r3, [r3, #29]
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d108      	bne.n	800ce60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f042 0204 	orr.w	r2, r2, #4
 800ce5c:	601a      	str	r2, [r3, #0]
 800ce5e:	e007      	b.n	800ce70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f022 0204 	bic.w	r2, r2, #4
 800ce6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	689a      	ldr	r2, [r3, #8]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	431a      	orrs	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	691b      	ldr	r3, [r3, #16]
 800ce7e:	431a      	orrs	r2, r3
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	695b      	ldr	r3, [r3, #20]
 800ce84:	ea42 0103 	orr.w	r1, r2, r3
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	1e5a      	subs	r2, r3, #1
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	430a      	orrs	r2, r1
 800ce94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
	...

0800ceb0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b087      	sub	sp, #28
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cec0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 800cec2:	7dfb      	ldrb	r3, [r7, #23]
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d003      	beq.n	800ced0 <HAL_CAN_ConfigFilter+0x20>
 800cec8:	7dfb      	ldrb	r3, [r7, #23]
 800ceca:	2b02      	cmp	r3, #2
 800cecc:	f040 80be 	bne.w	800d04c <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800ced0:	4b65      	ldr	r3, [pc, #404]	@ (800d068 <HAL_CAN_ConfigFilter+0x1b8>)
 800ced2:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ceda:	f043 0201 	orr.w	r2, r3, #1
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800ceea:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cefe:	021b      	lsls	r3, r3, #8
 800cf00:	431a      	orrs	r2, r3
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	695b      	ldr	r3, [r3, #20]
 800cf0c:	f003 031f 	and.w	r3, r3, #31
 800cf10:	2201      	movs	r2, #1
 800cf12:	fa02 f303 	lsl.w	r3, r2, r3
 800cf16:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	43db      	mvns	r3, r3
 800cf22:	401a      	ands	r2, r3
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	69db      	ldr	r3, [r3, #28]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d123      	bne.n	800cf7a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	43db      	mvns	r3, r3
 800cf3c:	401a      	ands	r2, r3
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800cf50:	683a      	ldr	r2, [r7, #0]
 800cf52:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800cf54:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	3248      	adds	r2, #72	@ 0x48
 800cf5a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	689b      	ldr	r3, [r3, #8]
 800cf62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800cf6e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800cf70:	6939      	ldr	r1, [r7, #16]
 800cf72:	3348      	adds	r3, #72	@ 0x48
 800cf74:	00db      	lsls	r3, r3, #3
 800cf76:	440b      	add	r3, r1
 800cf78:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	69db      	ldr	r3, [r3, #28]
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d122      	bne.n	800cfc8 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	431a      	orrs	r2, r3
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800cf9e:	683a      	ldr	r2, [r7, #0]
 800cfa0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800cfa2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	3248      	adds	r2, #72	@ 0x48
 800cfa8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	689b      	ldr	r3, [r3, #8]
 800cfb0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800cfbc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800cfbe:	6939      	ldr	r1, [r7, #16]
 800cfc0:	3348      	adds	r3, #72	@ 0x48
 800cfc2:	00db      	lsls	r3, r3, #3
 800cfc4:	440b      	add	r3, r1
 800cfc6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	699b      	ldr	r3, [r3, #24]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d109      	bne.n	800cfe4 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	43db      	mvns	r3, r3
 800cfda:	401a      	ands	r2, r3
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800cfe2:	e007      	b.n	800cff4 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	431a      	orrs	r2, r3
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	691b      	ldr	r3, [r3, #16]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d109      	bne.n	800d010 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	43db      	mvns	r3, r3
 800d006:	401a      	ands	r2, r3
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800d00e:	e007      	b.n	800d020 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	431a      	orrs	r2, r3
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	6a1b      	ldr	r3, [r3, #32]
 800d024:	2b01      	cmp	r3, #1
 800d026:	d107      	bne.n	800d038 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	431a      	orrs	r2, r3
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800d03e:	f023 0201 	bic.w	r2, r3, #1
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800d048:	2300      	movs	r3, #0
 800d04a:	e006      	b.n	800d05a <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d050:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800d058:	2301      	movs	r3, #1
  }
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	371c      	adds	r7, #28
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr
 800d066:	bf00      	nop
 800d068:	40006400 	.word	0x40006400

0800d06c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d12e      	bne.n	800d0de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2202      	movs	r2, #2
 800d084:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f022 0201 	bic.w	r2, r2, #1
 800d096:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d098:	f7ff f952 	bl	800c340 <HAL_GetTick>
 800d09c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800d09e:	e012      	b.n	800d0c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800d0a0:	f7ff f94e 	bl	800c340 <HAL_GetTick>
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	1ad3      	subs	r3, r2, r3
 800d0aa:	2b0a      	cmp	r3, #10
 800d0ac:	d90b      	bls.n	800d0c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2205      	movs	r2, #5
 800d0be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	e012      	b.n	800d0ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	f003 0301 	and.w	r3, r3, #1
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d1e5      	bne.n	800d0a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	e006      	b.n	800d0ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0e2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800d0ea:	2301      	movs	r3, #1
  }
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d102:	b2db      	uxtb	r3, r3
 800d104:	2b02      	cmp	r3, #2
 800d106:	d133      	bne.n	800d170 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f042 0201 	orr.w	r2, r2, #1
 800d116:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d118:	f7ff f912 	bl	800c340 <HAL_GetTick>
 800d11c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800d11e:	e012      	b.n	800d146 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800d120:	f7ff f90e 	bl	800c340 <HAL_GetTick>
 800d124:	4602      	mov	r2, r0
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	1ad3      	subs	r3, r2, r3
 800d12a:	2b0a      	cmp	r3, #10
 800d12c:	d90b      	bls.n	800d146 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d132:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2205      	movs	r2, #5
 800d13e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d142:	2301      	movs	r3, #1
 800d144:	e01b      	b.n	800d17e <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	f003 0301 	and.w	r3, r3, #1
 800d150:	2b00      	cmp	r3, #0
 800d152:	d0e5      	beq.n	800d120 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f022 0202 	bic.w	r2, r2, #2
 800d162:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800d16c:	2300      	movs	r3, #0
 800d16e:	e006      	b.n	800d17e <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d174:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800d17c:	2301      	movs	r3, #1
  }
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3710      	adds	r7, #16
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800d186:	b480      	push	{r7}
 800d188:	b089      	sub	sp, #36	@ 0x24
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	60f8      	str	r0, [r7, #12]
 800d18e:	60b9      	str	r1, [r7, #8]
 800d190:	607a      	str	r2, [r7, #4]
 800d192:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d19a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800d1a4:	7ffb      	ldrb	r3, [r7, #31]
 800d1a6:	2b01      	cmp	r3, #1
 800d1a8:	d003      	beq.n	800d1b2 <HAL_CAN_AddTxMessage+0x2c>
 800d1aa:	7ffb      	ldrb	r3, [r7, #31]
 800d1ac:	2b02      	cmp	r3, #2
 800d1ae:	f040 80ad 	bne.w	800d30c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10a      	bne.n	800d1d2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800d1bc:	69bb      	ldr	r3, [r7, #24]
 800d1be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d105      	bne.n	800d1d2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f000 8095 	beq.w	800d2fc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800d1d2:	69bb      	ldr	r3, [r7, #24]
 800d1d4:	0e1b      	lsrs	r3, r3, #24
 800d1d6:	f003 0303 	and.w	r3, r3, #3
 800d1da:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800d1dc:	2201      	movs	r2, #1
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	409a      	lsls	r2, r3
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d10d      	bne.n	800d20a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800d1f8:	68f9      	ldr	r1, [r7, #12]
 800d1fa:	6809      	ldr	r1, [r1, #0]
 800d1fc:	431a      	orrs	r2, r3
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	3318      	adds	r3, #24
 800d202:	011b      	lsls	r3, r3, #4
 800d204:	440b      	add	r3, r1
 800d206:	601a      	str	r2, [r3, #0]
 800d208:	e00f      	b.n	800d22a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d214:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d21a:	68f9      	ldr	r1, [r7, #12]
 800d21c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800d21e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	3318      	adds	r3, #24
 800d224:	011b      	lsls	r3, r3, #4
 800d226:	440b      	add	r3, r1
 800d228:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	6819      	ldr	r1, [r3, #0]
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	691a      	ldr	r2, [r3, #16]
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	3318      	adds	r3, #24
 800d236:	011b      	lsls	r3, r3, #4
 800d238:	440b      	add	r3, r1
 800d23a:	3304      	adds	r3, #4
 800d23c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	7d1b      	ldrb	r3, [r3, #20]
 800d242:	2b01      	cmp	r3, #1
 800d244:	d111      	bne.n	800d26a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	3318      	adds	r3, #24
 800d24e:	011b      	lsls	r3, r3, #4
 800d250:	4413      	add	r3, r2
 800d252:	3304      	adds	r3, #4
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	68fa      	ldr	r2, [r7, #12]
 800d258:	6811      	ldr	r1, [r2, #0]
 800d25a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	3318      	adds	r3, #24
 800d262:	011b      	lsls	r3, r3, #4
 800d264:	440b      	add	r3, r1
 800d266:	3304      	adds	r3, #4
 800d268:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	3307      	adds	r3, #7
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	061a      	lsls	r2, r3, #24
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	3306      	adds	r3, #6
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	041b      	lsls	r3, r3, #16
 800d27a:	431a      	orrs	r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	3305      	adds	r3, #5
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	021b      	lsls	r3, r3, #8
 800d284:	4313      	orrs	r3, r2
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	3204      	adds	r2, #4
 800d28a:	7812      	ldrb	r2, [r2, #0]
 800d28c:	4610      	mov	r0, r2
 800d28e:	68fa      	ldr	r2, [r7, #12]
 800d290:	6811      	ldr	r1, [r2, #0]
 800d292:	ea43 0200 	orr.w	r2, r3, r0
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	011b      	lsls	r3, r3, #4
 800d29a:	440b      	add	r3, r1
 800d29c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800d2a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	3303      	adds	r3, #3
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	061a      	lsls	r2, r3, #24
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	3302      	adds	r3, #2
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	041b      	lsls	r3, r3, #16
 800d2b2:	431a      	orrs	r2, r3
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	021b      	lsls	r3, r3, #8
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	7812      	ldrb	r2, [r2, #0]
 800d2c2:	4610      	mov	r0, r2
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	6811      	ldr	r1, [r2, #0]
 800d2c8:	ea43 0200 	orr.w	r2, r3, r0
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	011b      	lsls	r3, r3, #4
 800d2d0:	440b      	add	r3, r1
 800d2d2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800d2d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	3318      	adds	r3, #24
 800d2e0:	011b      	lsls	r3, r3, #4
 800d2e2:	4413      	add	r3, r2
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	68fa      	ldr	r2, [r7, #12]
 800d2e8:	6811      	ldr	r1, [r2, #0]
 800d2ea:	f043 0201 	orr.w	r2, r3, #1
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	3318      	adds	r3, #24
 800d2f2:	011b      	lsls	r3, r3, #4
 800d2f4:	440b      	add	r3, r1
 800d2f6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	e00e      	b.n	800d31a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d300:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800d308:	2301      	movs	r3, #1
 800d30a:	e006      	b.n	800d31a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d310:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800d318:	2301      	movs	r3, #1
  }
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3724      	adds	r7, #36	@ 0x24
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr

0800d326 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800d326:	b480      	push	{r7}
 800d328:	b085      	sub	sp, #20
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800d32e:	2300      	movs	r3, #0
 800d330:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d338:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800d33a:	7afb      	ldrb	r3, [r7, #11]
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	d002      	beq.n	800d346 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800d340:	7afb      	ldrb	r3, [r7, #11]
 800d342:	2b02      	cmp	r3, #2
 800d344:	d11d      	bne.n	800d382 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d350:	2b00      	cmp	r3, #0
 800d352:	d002      	beq.n	800d35a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	3301      	adds	r3, #1
 800d358:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d364:	2b00      	cmp	r3, #0
 800d366:	d002      	beq.n	800d36e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	3301      	adds	r3, #1
 800d36c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	689b      	ldr	r3, [r3, #8]
 800d374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d002      	beq.n	800d382 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	3301      	adds	r3, #1
 800d380:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800d382:	68fb      	ldr	r3, [r7, #12]
}
 800d384:	4618      	mov	r0, r3
 800d386:	3714      	adds	r7, #20
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr

0800d390 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800d390:	b480      	push	{r7}
 800d392:	b087      	sub	sp, #28
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	607a      	str	r2, [r7, #4]
 800d39c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d3a4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800d3a6:	7dfb      	ldrb	r3, [r7, #23]
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d003      	beq.n	800d3b4 <HAL_CAN_GetRxMessage+0x24>
 800d3ac:	7dfb      	ldrb	r3, [r7, #23]
 800d3ae:	2b02      	cmp	r3, #2
 800d3b0:	f040 8103 	bne.w	800d5ba <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d10e      	bne.n	800d3d8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	f003 0303 	and.w	r3, r3, #3
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d116      	bne.n	800d3f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e0f7      	b.n	800d5c8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	691b      	ldr	r3, [r3, #16]
 800d3de:	f003 0303 	and.w	r3, r3, #3
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d107      	bne.n	800d3f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	e0e8      	b.n	800d5c8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	331b      	adds	r3, #27
 800d3fe:	011b      	lsls	r3, r3, #4
 800d400:	4413      	add	r3, r2
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f003 0204 	and.w	r2, r3, #4
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10c      	bne.n	800d42e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	331b      	adds	r3, #27
 800d41c:	011b      	lsls	r3, r3, #4
 800d41e:	4413      	add	r3, r2
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	0d5b      	lsrs	r3, r3, #21
 800d424:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	601a      	str	r2, [r3, #0]
 800d42c:	e00b      	b.n	800d446 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	331b      	adds	r3, #27
 800d436:	011b      	lsls	r3, r3, #4
 800d438:	4413      	add	r3, r2
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	08db      	lsrs	r3, r3, #3
 800d43e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	331b      	adds	r3, #27
 800d44e:	011b      	lsls	r3, r3, #4
 800d450:	4413      	add	r3, r2
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f003 0202 	and.w	r2, r3, #2
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	331b      	adds	r3, #27
 800d464:	011b      	lsls	r3, r3, #4
 800d466:	4413      	add	r3, r2
 800d468:	3304      	adds	r3, #4
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f003 0308 	and.w	r3, r3, #8
 800d470:	2b00      	cmp	r3, #0
 800d472:	d003      	beq.n	800d47c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2208      	movs	r2, #8
 800d478:	611a      	str	r2, [r3, #16]
 800d47a:	e00b      	b.n	800d494 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681a      	ldr	r2, [r3, #0]
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	331b      	adds	r3, #27
 800d484:	011b      	lsls	r3, r3, #4
 800d486:	4413      	add	r3, r2
 800d488:	3304      	adds	r3, #4
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f003 020f 	and.w	r2, r3, #15
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	331b      	adds	r3, #27
 800d49c:	011b      	lsls	r3, r3, #4
 800d49e:	4413      	add	r3, r2
 800d4a0:	3304      	adds	r3, #4
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	0a1b      	lsrs	r3, r3, #8
 800d4a6:	b2da      	uxtb	r2, r3
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	331b      	adds	r3, #27
 800d4b4:	011b      	lsls	r3, r3, #4
 800d4b6:	4413      	add	r3, r2
 800d4b8:	3304      	adds	r3, #4
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	0c1b      	lsrs	r3, r3, #16
 800d4be:	b29a      	uxth	r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681a      	ldr	r2, [r3, #0]
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	011b      	lsls	r3, r3, #4
 800d4cc:	4413      	add	r3, r2
 800d4ce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	b2da      	uxtb	r2, r3
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	011b      	lsls	r3, r3, #4
 800d4e2:	4413      	add	r3, r2
 800d4e4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	0a1a      	lsrs	r2, r3, #8
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	b2d2      	uxtb	r2, r2
 800d4f2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681a      	ldr	r2, [r3, #0]
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	011b      	lsls	r3, r3, #4
 800d4fc:	4413      	add	r3, r2
 800d4fe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	0c1a      	lsrs	r2, r3, #16
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	3302      	adds	r3, #2
 800d50a:	b2d2      	uxtb	r2, r2
 800d50c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	011b      	lsls	r3, r3, #4
 800d516:	4413      	add	r3, r2
 800d518:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	0e1a      	lsrs	r2, r3, #24
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	3303      	adds	r3, #3
 800d524:	b2d2      	uxtb	r2, r2
 800d526:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	011b      	lsls	r3, r3, #4
 800d530:	4413      	add	r3, r2
 800d532:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	3304      	adds	r3, #4
 800d53c:	b2d2      	uxtb	r2, r2
 800d53e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	011b      	lsls	r3, r3, #4
 800d548:	4413      	add	r3, r2
 800d54a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	0a1a      	lsrs	r2, r3, #8
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	3305      	adds	r3, #5
 800d556:	b2d2      	uxtb	r2, r2
 800d558:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	011b      	lsls	r3, r3, #4
 800d562:	4413      	add	r3, r2
 800d564:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	0c1a      	lsrs	r2, r3, #16
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	3306      	adds	r3, #6
 800d570:	b2d2      	uxtb	r2, r2
 800d572:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681a      	ldr	r2, [r3, #0]
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	011b      	lsls	r3, r3, #4
 800d57c:	4413      	add	r3, r2
 800d57e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	0e1a      	lsrs	r2, r3, #24
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	3307      	adds	r3, #7
 800d58a:	b2d2      	uxtb	r2, r2
 800d58c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d108      	bne.n	800d5a6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	68da      	ldr	r2, [r3, #12]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f042 0220 	orr.w	r2, r2, #32
 800d5a2:	60da      	str	r2, [r3, #12]
 800d5a4:	e007      	b.n	800d5b6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	691a      	ldr	r2, [r3, #16]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f042 0220 	orr.w	r2, r2, #32
 800d5b4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	e006      	b.n	800d5c8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800d5c6:	2301      	movs	r3, #1
  }
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	371c      	adds	r7, #28
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr

0800d5d4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b085      	sub	sp, #20
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d5e4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800d5e6:	7bfb      	ldrb	r3, [r7, #15]
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d002      	beq.n	800d5f2 <HAL_CAN_ActivateNotification+0x1e>
 800d5ec:	7bfb      	ldrb	r3, [r7, #15]
 800d5ee:	2b02      	cmp	r3, #2
 800d5f0:	d109      	bne.n	800d606 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	6959      	ldr	r1, [r3, #20]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	683a      	ldr	r2, [r7, #0]
 800d5fe:	430a      	orrs	r2, r1
 800d600:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800d602:	2300      	movs	r3, #0
 800d604:	e006      	b.n	800d614 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d60a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800d612:	2301      	movs	r3, #1
  }
}
 800d614:	4618      	mov	r0, r3
 800d616:	3714      	adds	r7, #20
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr

0800d620 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b08a      	sub	sp, #40	@ 0x28
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800d628:	2300      	movs	r3, #0
 800d62a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	695b      	ldr	r3, [r3, #20]
 800d632:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	689b      	ldr	r3, [r3, #8]
 800d642:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	68db      	ldr	r3, [r3, #12]
 800d64a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	691b      	ldr	r3, [r3, #16]
 800d652:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	699b      	ldr	r3, [r3, #24]
 800d65a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800d65c:	6a3b      	ldr	r3, [r7, #32]
 800d65e:	f003 0301 	and.w	r3, r3, #1
 800d662:	2b00      	cmp	r3, #0
 800d664:	d07c      	beq.n	800d760 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800d666:	69bb      	ldr	r3, [r7, #24]
 800d668:	f003 0301 	and.w	r3, r3, #1
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d023      	beq.n	800d6b8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	2201      	movs	r2, #1
 800d676:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800d678:	69bb      	ldr	r3, [r7, #24]
 800d67a:	f003 0302 	and.w	r3, r3, #2
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d003      	beq.n	800d68a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f7fa fa60 	bl	8007b48 <HAL_CAN_TxMailbox0CompleteCallback>
 800d688:	e016      	b.n	800d6b8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800d68a:	69bb      	ldr	r3, [r7, #24]
 800d68c:	f003 0304 	and.w	r3, r3, #4
 800d690:	2b00      	cmp	r3, #0
 800d692:	d004      	beq.n	800d69e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800d694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d696:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d69a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d69c:	e00c      	b.n	800d6b8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800d69e:	69bb      	ldr	r3, [r7, #24]
 800d6a0:	f003 0308 	and.w	r3, r3, #8
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d004      	beq.n	800d6b2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800d6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d6ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800d6b0:	e002      	b.n	800d6b8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 f96b 	bl	800d98e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800d6b8:	69bb      	ldr	r3, [r7, #24]
 800d6ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d024      	beq.n	800d70c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d6ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800d6cc:	69bb      	ldr	r3, [r7, #24]
 800d6ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d003      	beq.n	800d6de <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f7fa fa46 	bl	8007b68 <HAL_CAN_TxMailbox1CompleteCallback>
 800d6dc:	e016      	b.n	800d70c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d004      	beq.n	800d6f2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800d6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d6ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800d6f0:	e00c      	b.n	800d70c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800d6f2:	69bb      	ldr	r3, [r7, #24]
 800d6f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d004      	beq.n	800d706 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800d6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d702:	627b      	str	r3, [r7, #36]	@ 0x24
 800d704:	e002      	b.n	800d70c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 f94b 	bl	800d9a2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800d70c:	69bb      	ldr	r3, [r7, #24]
 800d70e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d712:	2b00      	cmp	r3, #0
 800d714:	d024      	beq.n	800d760 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800d71e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800d720:	69bb      	ldr	r3, [r7, #24]
 800d722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d726:	2b00      	cmp	r3, #0
 800d728:	d003      	beq.n	800d732 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f7fa fa2c 	bl	8007b88 <HAL_CAN_TxMailbox2CompleteCallback>
 800d730:	e016      	b.n	800d760 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800d732:	69bb      	ldr	r3, [r7, #24]
 800d734:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d004      	beq.n	800d746 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800d73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d73e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d742:	627b      	str	r3, [r7, #36]	@ 0x24
 800d744:	e00c      	b.n	800d760 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d004      	beq.n	800d75a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800d750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d756:	627b      	str	r3, [r7, #36]	@ 0x24
 800d758:	e002      	b.n	800d760 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 f92b 	bl	800d9b6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800d760:	6a3b      	ldr	r3, [r7, #32]
 800d762:	f003 0308 	and.w	r3, r3, #8
 800d766:	2b00      	cmp	r3, #0
 800d768:	d00c      	beq.n	800d784 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	f003 0310 	and.w	r3, r3, #16
 800d770:	2b00      	cmp	r3, #0
 800d772:	d007      	beq.n	800d784 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800d774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d776:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d77a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	2210      	movs	r2, #16
 800d782:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800d784:	6a3b      	ldr	r3, [r7, #32]
 800d786:	f003 0304 	and.w	r3, r3, #4
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d00b      	beq.n	800d7a6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	f003 0308 	and.w	r3, r3, #8
 800d794:	2b00      	cmp	r3, #0
 800d796:	d006      	beq.n	800d7a6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	2208      	movs	r2, #8
 800d79e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 f912 	bl	800d9ca <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800d7a6:	6a3b      	ldr	r3, [r7, #32]
 800d7a8:	f003 0302 	and.w	r3, r3, #2
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d009      	beq.n	800d7c4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	68db      	ldr	r3, [r3, #12]
 800d7b6:	f003 0303 	and.w	r3, r3, #3
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d002      	beq.n	800d7c4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f7fa f900 	bl	80079c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800d7c4:	6a3b      	ldr	r3, [r7, #32]
 800d7c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d00c      	beq.n	800d7e8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	f003 0310 	and.w	r3, r3, #16
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d007      	beq.n	800d7e8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800d7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d7de:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2210      	movs	r2, #16
 800d7e6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800d7e8:	6a3b      	ldr	r3, [r7, #32]
 800d7ea:	f003 0320 	and.w	r3, r3, #32
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00b      	beq.n	800d80a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	f003 0308 	and.w	r3, r3, #8
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d006      	beq.n	800d80a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	2208      	movs	r2, #8
 800d802:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f000 f8ea 	bl	800d9de <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800d80a:	6a3b      	ldr	r3, [r7, #32]
 800d80c:	f003 0310 	and.w	r3, r3, #16
 800d810:	2b00      	cmp	r3, #0
 800d812:	d009      	beq.n	800d828 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	691b      	ldr	r3, [r3, #16]
 800d81a:	f003 0303 	and.w	r3, r3, #3
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d002      	beq.n	800d828 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7fa f8f6 	bl	8007a14 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800d828:	6a3b      	ldr	r3, [r7, #32]
 800d82a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00b      	beq.n	800d84a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	f003 0310 	and.w	r3, r3, #16
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d006      	beq.n	800d84a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2210      	movs	r2, #16
 800d842:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 f8d4 	bl	800d9f2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800d84a:	6a3b      	ldr	r3, [r7, #32]
 800d84c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d850:	2b00      	cmp	r3, #0
 800d852:	d00b      	beq.n	800d86c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800d854:	69fb      	ldr	r3, [r7, #28]
 800d856:	f003 0308 	and.w	r3, r3, #8
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d006      	beq.n	800d86c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2208      	movs	r2, #8
 800d864:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 f8cd 	bl	800da06 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800d86c:	6a3b      	ldr	r3, [r7, #32]
 800d86e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d872:	2b00      	cmp	r3, #0
 800d874:	d07b      	beq.n	800d96e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	f003 0304 	and.w	r3, r3, #4
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d072      	beq.n	800d966 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800d880:	6a3b      	ldr	r3, [r7, #32]
 800d882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d886:	2b00      	cmp	r3, #0
 800d888:	d008      	beq.n	800d89c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800d890:	2b00      	cmp	r3, #0
 800d892:	d003      	beq.n	800d89c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800d894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d896:	f043 0301 	orr.w	r3, r3, #1
 800d89a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800d89c:	6a3b      	ldr	r3, [r7, #32]
 800d89e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d008      	beq.n	800d8b8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d003      	beq.n	800d8b8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b2:	f043 0302 	orr.w	r3, r3, #2
 800d8b6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800d8b8:	6a3b      	ldr	r3, [r7, #32]
 800d8ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d008      	beq.n	800d8d4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d003      	beq.n	800d8d4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ce:	f043 0304 	orr.w	r3, r3, #4
 800d8d2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800d8d4:	6a3b      	ldr	r3, [r7, #32]
 800d8d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d043      	beq.n	800d966 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d03e      	beq.n	800d966 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d8ee:	2b60      	cmp	r3, #96	@ 0x60
 800d8f0:	d02b      	beq.n	800d94a <HAL_CAN_IRQHandler+0x32a>
 800d8f2:	2b60      	cmp	r3, #96	@ 0x60
 800d8f4:	d82e      	bhi.n	800d954 <HAL_CAN_IRQHandler+0x334>
 800d8f6:	2b50      	cmp	r3, #80	@ 0x50
 800d8f8:	d022      	beq.n	800d940 <HAL_CAN_IRQHandler+0x320>
 800d8fa:	2b50      	cmp	r3, #80	@ 0x50
 800d8fc:	d82a      	bhi.n	800d954 <HAL_CAN_IRQHandler+0x334>
 800d8fe:	2b40      	cmp	r3, #64	@ 0x40
 800d900:	d019      	beq.n	800d936 <HAL_CAN_IRQHandler+0x316>
 800d902:	2b40      	cmp	r3, #64	@ 0x40
 800d904:	d826      	bhi.n	800d954 <HAL_CAN_IRQHandler+0x334>
 800d906:	2b30      	cmp	r3, #48	@ 0x30
 800d908:	d010      	beq.n	800d92c <HAL_CAN_IRQHandler+0x30c>
 800d90a:	2b30      	cmp	r3, #48	@ 0x30
 800d90c:	d822      	bhi.n	800d954 <HAL_CAN_IRQHandler+0x334>
 800d90e:	2b10      	cmp	r3, #16
 800d910:	d002      	beq.n	800d918 <HAL_CAN_IRQHandler+0x2f8>
 800d912:	2b20      	cmp	r3, #32
 800d914:	d005      	beq.n	800d922 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800d916:	e01d      	b.n	800d954 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800d918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d91a:	f043 0308 	orr.w	r3, r3, #8
 800d91e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d920:	e019      	b.n	800d956 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800d922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d924:	f043 0310 	orr.w	r3, r3, #16
 800d928:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d92a:	e014      	b.n	800d956 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800d92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d92e:	f043 0320 	orr.w	r3, r3, #32
 800d932:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d934:	e00f      	b.n	800d956 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800d936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d93c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d93e:	e00a      	b.n	800d956 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800d940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d946:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d948:	e005      	b.n	800d956 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800d94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d94c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d950:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d952:	e000      	b.n	800d956 <HAL_CAN_IRQHandler+0x336>
            break;
 800d954:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	699a      	ldr	r2, [r3, #24]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800d964:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2204      	movs	r2, #4
 800d96c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800d96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d970:	2b00      	cmp	r3, #0
 800d972:	d008      	beq.n	800d986 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d97a:	431a      	orrs	r2, r3
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 f84a 	bl	800da1a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800d986:	bf00      	nop
 800d988:	3728      	adds	r7, #40	@ 0x28
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d98e:	b480      	push	{r7}
 800d990:	b083      	sub	sp, #12
 800d992:	af00      	add	r7, sp, #0
 800d994:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800d996:	bf00      	nop
 800d998:	370c      	adds	r7, #12
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d9a2:	b480      	push	{r7}
 800d9a4:	b083      	sub	sp, #12
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800d9aa:	bf00      	nop
 800d9ac:	370c      	adds	r7, #12
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr

0800d9b6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800d9b6:	b480      	push	{r7}
 800d9b8:	b083      	sub	sp, #12
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800d9be:	bf00      	nop
 800d9c0:	370c      	adds	r7, #12
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr

0800d9ca <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800d9ca:	b480      	push	{r7}
 800d9cc:	b083      	sub	sp, #12
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800d9d2:	bf00      	nop
 800d9d4:	370c      	adds	r7, #12
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr

0800d9de <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800d9de:	b480      	push	{r7}
 800d9e0:	b083      	sub	sp, #12
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800d9e6:	bf00      	nop
 800d9e8:	370c      	adds	r7, #12
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr

0800d9f2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800d9f2:	b480      	push	{r7}
 800d9f4:	b083      	sub	sp, #12
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800d9fa:	bf00      	nop
 800d9fc:	370c      	adds	r7, #12
 800d9fe:	46bd      	mov	sp, r7
 800da00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da04:	4770      	bx	lr

0800da06 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800da06:	b480      	push	{r7}
 800da08:	b083      	sub	sp, #12
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800da0e:	bf00      	nop
 800da10:	370c      	adds	r7, #12
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr

0800da1a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800da1a:	b480      	push	{r7}
 800da1c:	b083      	sub	sp, #12
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800da22:	bf00      	nop
 800da24:	370c      	adds	r7, #12
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr
	...

0800da30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800da30:	b480      	push	{r7}
 800da32:	b085      	sub	sp, #20
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f003 0307 	and.w	r3, r3, #7
 800da3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800da40:	4b0c      	ldr	r3, [pc, #48]	@ (800da74 <__NVIC_SetPriorityGrouping+0x44>)
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800da46:	68ba      	ldr	r2, [r7, #8]
 800da48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800da4c:	4013      	ands	r3, r2
 800da4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800da58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800da5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800da62:	4a04      	ldr	r2, [pc, #16]	@ (800da74 <__NVIC_SetPriorityGrouping+0x44>)
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	60d3      	str	r3, [r2, #12]
}
 800da68:	bf00      	nop
 800da6a:	3714      	adds	r7, #20
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr
 800da74:	e000ed00 	.word	0xe000ed00

0800da78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800da78:	b480      	push	{r7}
 800da7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800da7c:	4b04      	ldr	r3, [pc, #16]	@ (800da90 <__NVIC_GetPriorityGrouping+0x18>)
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	0a1b      	lsrs	r3, r3, #8
 800da82:	f003 0307 	and.w	r3, r3, #7
}
 800da86:	4618      	mov	r0, r3
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr
 800da90:	e000ed00 	.word	0xe000ed00

0800da94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800da94:	b480      	push	{r7}
 800da96:	b083      	sub	sp, #12
 800da98:	af00      	add	r7, sp, #0
 800da9a:	4603      	mov	r3, r0
 800da9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800da9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	db0b      	blt.n	800dabe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800daa6:	79fb      	ldrb	r3, [r7, #7]
 800daa8:	f003 021f 	and.w	r2, r3, #31
 800daac:	4907      	ldr	r1, [pc, #28]	@ (800dacc <__NVIC_EnableIRQ+0x38>)
 800daae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dab2:	095b      	lsrs	r3, r3, #5
 800dab4:	2001      	movs	r0, #1
 800dab6:	fa00 f202 	lsl.w	r2, r0, r2
 800daba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800dabe:	bf00      	nop
 800dac0:	370c      	adds	r7, #12
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr
 800daca:	bf00      	nop
 800dacc:	e000e100 	.word	0xe000e100

0800dad0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	4603      	mov	r3, r0
 800dad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	db12      	blt.n	800db08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dae2:	79fb      	ldrb	r3, [r7, #7]
 800dae4:	f003 021f 	and.w	r2, r3, #31
 800dae8:	490a      	ldr	r1, [pc, #40]	@ (800db14 <__NVIC_DisableIRQ+0x44>)
 800daea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800daee:	095b      	lsrs	r3, r3, #5
 800daf0:	2001      	movs	r0, #1
 800daf2:	fa00 f202 	lsl.w	r2, r0, r2
 800daf6:	3320      	adds	r3, #32
 800daf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800dafc:	f3bf 8f4f 	dsb	sy
}
 800db00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800db02:	f3bf 8f6f 	isb	sy
}
 800db06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800db08:	bf00      	nop
 800db0a:	370c      	adds	r7, #12
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr
 800db14:	e000e100 	.word	0xe000e100

0800db18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	4603      	mov	r3, r0
 800db20:	6039      	str	r1, [r7, #0]
 800db22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800db24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	db0a      	blt.n	800db42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	b2da      	uxtb	r2, r3
 800db30:	490c      	ldr	r1, [pc, #48]	@ (800db64 <__NVIC_SetPriority+0x4c>)
 800db32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db36:	0112      	lsls	r2, r2, #4
 800db38:	b2d2      	uxtb	r2, r2
 800db3a:	440b      	add	r3, r1
 800db3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800db40:	e00a      	b.n	800db58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	b2da      	uxtb	r2, r3
 800db46:	4908      	ldr	r1, [pc, #32]	@ (800db68 <__NVIC_SetPriority+0x50>)
 800db48:	79fb      	ldrb	r3, [r7, #7]
 800db4a:	f003 030f 	and.w	r3, r3, #15
 800db4e:	3b04      	subs	r3, #4
 800db50:	0112      	lsls	r2, r2, #4
 800db52:	b2d2      	uxtb	r2, r2
 800db54:	440b      	add	r3, r1
 800db56:	761a      	strb	r2, [r3, #24]
}
 800db58:	bf00      	nop
 800db5a:	370c      	adds	r7, #12
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr
 800db64:	e000e100 	.word	0xe000e100
 800db68:	e000ed00 	.word	0xe000ed00

0800db6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b089      	sub	sp, #36	@ 0x24
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f003 0307 	and.w	r3, r3, #7
 800db7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800db80:	69fb      	ldr	r3, [r7, #28]
 800db82:	f1c3 0307 	rsb	r3, r3, #7
 800db86:	2b04      	cmp	r3, #4
 800db88:	bf28      	it	cs
 800db8a:	2304      	movcs	r3, #4
 800db8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800db8e:	69fb      	ldr	r3, [r7, #28]
 800db90:	3304      	adds	r3, #4
 800db92:	2b06      	cmp	r3, #6
 800db94:	d902      	bls.n	800db9c <NVIC_EncodePriority+0x30>
 800db96:	69fb      	ldr	r3, [r7, #28]
 800db98:	3b03      	subs	r3, #3
 800db9a:	e000      	b.n	800db9e <NVIC_EncodePriority+0x32>
 800db9c:	2300      	movs	r3, #0
 800db9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dba0:	f04f 32ff 	mov.w	r2, #4294967295
 800dba4:	69bb      	ldr	r3, [r7, #24]
 800dba6:	fa02 f303 	lsl.w	r3, r2, r3
 800dbaa:	43da      	mvns	r2, r3
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	401a      	ands	r2, r3
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800dbb4:	f04f 31ff 	mov.w	r1, #4294967295
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	fa01 f303 	lsl.w	r3, r1, r3
 800dbbe:	43d9      	mvns	r1, r3
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dbc4:	4313      	orrs	r3, r2
         );
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3724      	adds	r7, #36	@ 0x24
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr
	...

0800dbd4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800dbd8:	f3bf 8f4f 	dsb	sy
}
 800dbdc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800dbde:	4b06      	ldr	r3, [pc, #24]	@ (800dbf8 <__NVIC_SystemReset+0x24>)
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800dbe6:	4904      	ldr	r1, [pc, #16]	@ (800dbf8 <__NVIC_SystemReset+0x24>)
 800dbe8:	4b04      	ldr	r3, [pc, #16]	@ (800dbfc <__NVIC_SystemReset+0x28>)
 800dbea:	4313      	orrs	r3, r2
 800dbec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800dbee:	f3bf 8f4f 	dsb	sy
}
 800dbf2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800dbf4:	bf00      	nop
 800dbf6:	e7fd      	b.n	800dbf4 <__NVIC_SystemReset+0x20>
 800dbf8:	e000ed00 	.word	0xe000ed00
 800dbfc:	05fa0004 	.word	0x05fa0004

0800dc00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	3b01      	subs	r3, #1
 800dc0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dc10:	d301      	bcc.n	800dc16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800dc12:	2301      	movs	r3, #1
 800dc14:	e00f      	b.n	800dc36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800dc16:	4a0a      	ldr	r2, [pc, #40]	@ (800dc40 <SysTick_Config+0x40>)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	3b01      	subs	r3, #1
 800dc1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800dc1e:	210f      	movs	r1, #15
 800dc20:	f04f 30ff 	mov.w	r0, #4294967295
 800dc24:	f7ff ff78 	bl	800db18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800dc28:	4b05      	ldr	r3, [pc, #20]	@ (800dc40 <SysTick_Config+0x40>)
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800dc2e:	4b04      	ldr	r3, [pc, #16]	@ (800dc40 <SysTick_Config+0x40>)
 800dc30:	2207      	movs	r2, #7
 800dc32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800dc34:	2300      	movs	r3, #0
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3708      	adds	r7, #8
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	e000e010 	.word	0xe000e010

0800dc44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b082      	sub	sp, #8
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f7ff feef 	bl	800da30 <__NVIC_SetPriorityGrouping>
}
 800dc52:	bf00      	nop
 800dc54:	3708      	adds	r7, #8
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b086      	sub	sp, #24
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	4603      	mov	r3, r0
 800dc62:	60b9      	str	r1, [r7, #8]
 800dc64:	607a      	str	r2, [r7, #4]
 800dc66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800dc6c:	f7ff ff04 	bl	800da78 <__NVIC_GetPriorityGrouping>
 800dc70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800dc72:	687a      	ldr	r2, [r7, #4]
 800dc74:	68b9      	ldr	r1, [r7, #8]
 800dc76:	6978      	ldr	r0, [r7, #20]
 800dc78:	f7ff ff78 	bl	800db6c <NVIC_EncodePriority>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc82:	4611      	mov	r1, r2
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7ff ff47 	bl	800db18 <__NVIC_SetPriority>
}
 800dc8a:	bf00      	nop
 800dc8c:	3718      	adds	r7, #24
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}

0800dc92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b082      	sub	sp, #8
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	4603      	mov	r3, r0
 800dc9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800dc9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7ff fef7 	bl	800da94 <__NVIC_EnableIRQ>
}
 800dca6:	bf00      	nop
 800dca8:	3708      	adds	r7, #8
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}

0800dcae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800dcae:	b580      	push	{r7, lr}
 800dcb0:	b082      	sub	sp, #8
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800dcb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7ff ff07 	bl	800dad0 <__NVIC_DisableIRQ>
}
 800dcc2:	bf00      	nop
 800dcc4:	3708      	adds	r7, #8
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}

0800dcca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800dcca:	b580      	push	{r7, lr}
 800dccc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800dcce:	f7ff ff81 	bl	800dbd4 <__NVIC_SystemReset>

0800dcd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b082      	sub	sp, #8
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f7ff ff90 	bl	800dc00 <SysTick_Config>
 800dce0:	4603      	mov	r3, r0
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
	...

0800dcec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b086      	sub	sp, #24
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800dcf8:	f7fe fb22 	bl	800c340 <HAL_GetTick>
 800dcfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d101      	bne.n	800dd08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800dd04:	2301      	movs	r3, #1
 800dd06:	e099      	b.n	800de3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2202      	movs	r2, #2
 800dd0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2200      	movs	r2, #0
 800dd14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f022 0201 	bic.w	r2, r2, #1
 800dd26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800dd28:	e00f      	b.n	800dd4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800dd2a:	f7fe fb09 	bl	800c340 <HAL_GetTick>
 800dd2e:	4602      	mov	r2, r0
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	1ad3      	subs	r3, r2, r3
 800dd34:	2b05      	cmp	r3, #5
 800dd36:	d908      	bls.n	800dd4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2220      	movs	r2, #32
 800dd3c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2203      	movs	r2, #3
 800dd42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800dd46:	2303      	movs	r3, #3
 800dd48:	e078      	b.n	800de3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f003 0301 	and.w	r3, r3, #1
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d1e8      	bne.n	800dd2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800dd60:	697a      	ldr	r2, [r7, #20]
 800dd62:	4b38      	ldr	r3, [pc, #224]	@ (800de44 <HAL_DMA_Init+0x158>)
 800dd64:	4013      	ands	r3, r2
 800dd66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	685a      	ldr	r2, [r3, #4]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800dd76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	691b      	ldr	r3, [r3, #16]
 800dd7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800dd82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	699b      	ldr	r3, [r3, #24]
 800dd88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800dd8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6a1b      	ldr	r3, [r3, #32]
 800dd94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800dd96:	697a      	ldr	r2, [r7, #20]
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dda0:	2b04      	cmp	r3, #4
 800dda2:	d107      	bne.n	800ddb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddac:	4313      	orrs	r3, r2
 800ddae:	697a      	ldr	r2, [r7, #20]
 800ddb0:	4313      	orrs	r3, r2
 800ddb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	697a      	ldr	r2, [r7, #20]
 800ddba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	695b      	ldr	r3, [r3, #20]
 800ddc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	f023 0307 	bic.w	r3, r3, #7
 800ddca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddd0:	697a      	ldr	r2, [r7, #20]
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddda:	2b04      	cmp	r3, #4
 800dddc:	d117      	bne.n	800de0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dde2:	697a      	ldr	r2, [r7, #20]
 800dde4:	4313      	orrs	r3, r2
 800dde6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d00e      	beq.n	800de0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f000 fb6b 	bl	800e4cc <DMA_CheckFifoParam>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d008      	beq.n	800de0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2240      	movs	r2, #64	@ 0x40
 800de00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2201      	movs	r2, #1
 800de06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800de0a:	2301      	movs	r3, #1
 800de0c:	e016      	b.n	800de3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	697a      	ldr	r2, [r7, #20]
 800de14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f000 fb22 	bl	800e460 <DMA_CalcBaseAndBitshift>
 800de1c:	4603      	mov	r3, r0
 800de1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de24:	223f      	movs	r2, #63	@ 0x3f
 800de26:	409a      	lsls	r2, r3
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2201      	movs	r2, #1
 800de36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3718      	adds	r7, #24
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}
 800de44:	f010803f 	.word	0xf010803f

0800de48 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d101      	bne.n	800de5a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800de56:	2301      	movs	r3, #1
 800de58:	e050      	b.n	800defc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800de60:	b2db      	uxtb	r3, r3
 800de62:	2b02      	cmp	r3, #2
 800de64:	d101      	bne.n	800de6a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800de66:	2302      	movs	r3, #2
 800de68:	e048      	b.n	800defc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f022 0201 	bic.w	r2, r2, #1
 800de78:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	2200      	movs	r2, #0
 800de80:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	2200      	movs	r2, #0
 800de88:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	2200      	movs	r2, #0
 800de90:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2200      	movs	r2, #0
 800de98:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2200      	movs	r2, #0
 800dea0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2221      	movs	r2, #33	@ 0x21
 800dea8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 fad8 	bl	800e460 <DMA_CalcBaseAndBitshift>
 800deb0:	4603      	mov	r3, r0
 800deb2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2200      	movs	r2, #0
 800deb8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2200      	movs	r2, #0
 800debe:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2200      	movs	r2, #0
 800dec4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2200      	movs	r2, #0
 800deca:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2200      	movs	r2, #0
 800ded0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2200      	movs	r2, #0
 800ded6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dedc:	223f      	movs	r2, #63	@ 0x3f
 800dede:	409a      	lsls	r2, r3
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2200      	movs	r2, #0
 800dee8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2200      	movs	r2, #0
 800deee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800defa:	2300      	movs	r3, #0
}
 800defc:	4618      	mov	r0, r3
 800defe:	3710      	adds	r7, #16
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b086      	sub	sp, #24
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
 800df10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800df12:	2300      	movs	r3, #0
 800df14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800df22:	2b01      	cmp	r3, #1
 800df24:	d101      	bne.n	800df2a <HAL_DMA_Start_IT+0x26>
 800df26:	2302      	movs	r3, #2
 800df28:	e040      	b.n	800dfac <HAL_DMA_Start_IT+0xa8>
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2201      	movs	r2, #1
 800df2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	d12f      	bne.n	800df9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2202      	movs	r2, #2
 800df42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2200      	movs	r2, #0
 800df4a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	68b9      	ldr	r1, [r7, #8]
 800df52:	68f8      	ldr	r0, [r7, #12]
 800df54:	f000 fa56 	bl	800e404 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df5c:	223f      	movs	r2, #63	@ 0x3f
 800df5e:	409a      	lsls	r2, r3
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f042 0216 	orr.w	r2, r2, #22
 800df72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d007      	beq.n	800df8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f042 0208 	orr.w	r2, r2, #8
 800df8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f042 0201 	orr.w	r2, r2, #1
 800df9a:	601a      	str	r2, [r3, #0]
 800df9c:	e005      	b.n	800dfaa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800dfa6:	2302      	movs	r3, #2
 800dfa8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800dfaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3718      	adds	r7, #24
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800dfc2:	f7fe f9bd 	bl	800c340 <HAL_GetTick>
 800dfc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	2b02      	cmp	r3, #2
 800dfd2:	d008      	beq.n	800dfe6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2280      	movs	r2, #128	@ 0x80
 800dfd8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2200      	movs	r2, #0
 800dfde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e052      	b.n	800e08c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	681a      	ldr	r2, [r3, #0]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f022 0216 	bic.w	r2, r2, #22
 800dff4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	695a      	ldr	r2, [r3, #20]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e004:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d103      	bne.n	800e016 <HAL_DMA_Abort+0x62>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e012:	2b00      	cmp	r3, #0
 800e014:	d007      	beq.n	800e026 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	681a      	ldr	r2, [r3, #0]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f022 0208 	bic.w	r2, r2, #8
 800e024:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f022 0201 	bic.w	r2, r2, #1
 800e034:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e036:	e013      	b.n	800e060 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e038:	f7fe f982 	bl	800c340 <HAL_GetTick>
 800e03c:	4602      	mov	r2, r0
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	1ad3      	subs	r3, r2, r3
 800e042:	2b05      	cmp	r3, #5
 800e044:	d90c      	bls.n	800e060 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2220      	movs	r2, #32
 800e04a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2203      	movs	r2, #3
 800e050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2200      	movs	r2, #0
 800e058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800e05c:	2303      	movs	r3, #3
 800e05e:	e015      	b.n	800e08c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f003 0301 	and.w	r3, r3, #1
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d1e4      	bne.n	800e038 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e072:	223f      	movs	r2, #63	@ 0x3f
 800e074:	409a      	lsls	r2, r3
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2201      	movs	r2, #1
 800e07e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800e08a:	2300      	movs	r3, #0
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3710      	adds	r7, #16
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e094:	b480      	push	{r7}
 800e096:	b083      	sub	sp, #12
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	2b02      	cmp	r3, #2
 800e0a6:	d004      	beq.n	800e0b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2280      	movs	r2, #128	@ 0x80
 800e0ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	e00c      	b.n	800e0cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2205      	movs	r2, #5
 800e0b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f022 0201 	bic.w	r2, r2, #1
 800e0c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800e0ca:	2300      	movs	r3, #0
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	370c      	adds	r7, #12
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr

0800e0d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b086      	sub	sp, #24
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800e0e4:	4b8e      	ldr	r3, [pc, #568]	@ (800e320 <HAL_DMA_IRQHandler+0x248>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4a8e      	ldr	r2, [pc, #568]	@ (800e324 <HAL_DMA_IRQHandler+0x24c>)
 800e0ea:	fba2 2303 	umull	r2, r3, r2, r3
 800e0ee:	0a9b      	lsrs	r3, r3, #10
 800e0f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e102:	2208      	movs	r2, #8
 800e104:	409a      	lsls	r2, r3
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	4013      	ands	r3, r2
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d01a      	beq.n	800e144 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f003 0304 	and.w	r3, r3, #4
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d013      	beq.n	800e144 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	681a      	ldr	r2, [r3, #0]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f022 0204 	bic.w	r2, r2, #4
 800e12a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e130:	2208      	movs	r2, #8
 800e132:	409a      	lsls	r2, r3
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e13c:	f043 0201 	orr.w	r2, r3, #1
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e148:	2201      	movs	r2, #1
 800e14a:	409a      	lsls	r2, r3
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	4013      	ands	r3, r2
 800e150:	2b00      	cmp	r3, #0
 800e152:	d012      	beq.n	800e17a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	695b      	ldr	r3, [r3, #20]
 800e15a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00b      	beq.n	800e17a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e166:	2201      	movs	r2, #1
 800e168:	409a      	lsls	r2, r3
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e172:	f043 0202 	orr.w	r2, r3, #2
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e17e:	2204      	movs	r2, #4
 800e180:	409a      	lsls	r2, r3
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	4013      	ands	r3, r2
 800e186:	2b00      	cmp	r3, #0
 800e188:	d012      	beq.n	800e1b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f003 0302 	and.w	r3, r3, #2
 800e194:	2b00      	cmp	r3, #0
 800e196:	d00b      	beq.n	800e1b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e19c:	2204      	movs	r2, #4
 800e19e:	409a      	lsls	r2, r3
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1a8:	f043 0204 	orr.w	r2, r3, #4
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e1b4:	2210      	movs	r2, #16
 800e1b6:	409a      	lsls	r2, r3
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	4013      	ands	r3, r2
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d043      	beq.n	800e248 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f003 0308 	and.w	r3, r3, #8
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d03c      	beq.n	800e248 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e1d2:	2210      	movs	r2, #16
 800e1d4:	409a      	lsls	r2, r3
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d018      	beq.n	800e21a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d108      	bne.n	800e208 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d024      	beq.n	800e248 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	4798      	blx	r3
 800e206:	e01f      	b.n	800e248 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d01b      	beq.n	800e248 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	4798      	blx	r3
 800e218:	e016      	b.n	800e248 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e224:	2b00      	cmp	r3, #0
 800e226:	d107      	bne.n	800e238 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f022 0208 	bic.w	r2, r2, #8
 800e236:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d003      	beq.n	800e248 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e24c:	2220      	movs	r2, #32
 800e24e:	409a      	lsls	r2, r3
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	4013      	ands	r3, r2
 800e254:	2b00      	cmp	r3, #0
 800e256:	f000 808f 	beq.w	800e378 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f003 0310 	and.w	r3, r3, #16
 800e264:	2b00      	cmp	r3, #0
 800e266:	f000 8087 	beq.w	800e378 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e26e:	2220      	movs	r2, #32
 800e270:	409a      	lsls	r2, r3
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	2b05      	cmp	r3, #5
 800e280:	d136      	bne.n	800e2f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f022 0216 	bic.w	r2, r2, #22
 800e290:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	695a      	ldr	r2, [r3, #20]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e2a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d103      	bne.n	800e2b2 <HAL_DMA_IRQHandler+0x1da>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d007      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f022 0208 	bic.w	r2, r2, #8
 800e2c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e2c6:	223f      	movs	r2, #63	@ 0x3f
 800e2c8:	409a      	lsls	r2, r3
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d07e      	beq.n	800e3e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	4798      	blx	r3
        }
        return;
 800e2ee:	e079      	b.n	800e3e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d01d      	beq.n	800e33a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d10d      	bne.n	800e328 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e310:	2b00      	cmp	r3, #0
 800e312:	d031      	beq.n	800e378 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	4798      	blx	r3
 800e31c:	e02c      	b.n	800e378 <HAL_DMA_IRQHandler+0x2a0>
 800e31e:	bf00      	nop
 800e320:	20000200 	.word	0x20000200
 800e324:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d023      	beq.n	800e378 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	4798      	blx	r3
 800e338:	e01e      	b.n	800e378 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e344:	2b00      	cmp	r3, #0
 800e346:	d10f      	bne.n	800e368 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	681a      	ldr	r2, [r3, #0]
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f022 0210 	bic.w	r2, r2, #16
 800e356:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2201      	movs	r2, #1
 800e35c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2200      	movs	r2, #0
 800e364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d003      	beq.n	800e378 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d032      	beq.n	800e3e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e384:	f003 0301 	and.w	r3, r3, #1
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d022      	beq.n	800e3d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2205      	movs	r2, #5
 800e390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	681a      	ldr	r2, [r3, #0]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f022 0201 	bic.w	r2, r2, #1
 800e3a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	60bb      	str	r3, [r7, #8]
 800e3aa:	697a      	ldr	r2, [r7, #20]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d307      	bcc.n	800e3c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f003 0301 	and.w	r3, r3, #1
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d1f2      	bne.n	800e3a4 <HAL_DMA_IRQHandler+0x2cc>
 800e3be:	e000      	b.n	800e3c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800e3c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d005      	beq.n	800e3e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	4798      	blx	r3
 800e3e2:	e000      	b.n	800e3e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 800e3e4:	bf00      	nop
    }
  }
}
 800e3e6:	3718      	adds	r7, #24
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b083      	sub	sp, #12
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	370c      	adds	r7, #12
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr

0800e404 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e404:	b480      	push	{r7}
 800e406:	b085      	sub	sp, #20
 800e408:	af00      	add	r7, sp, #0
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	607a      	str	r2, [r7, #4]
 800e410:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800e420:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	683a      	ldr	r2, [r7, #0]
 800e428:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	689b      	ldr	r3, [r3, #8]
 800e42e:	2b40      	cmp	r3, #64	@ 0x40
 800e430:	d108      	bne.n	800e444 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	687a      	ldr	r2, [r7, #4]
 800e438:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	68ba      	ldr	r2, [r7, #8]
 800e440:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800e442:	e007      	b.n	800e454 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	68ba      	ldr	r2, [r7, #8]
 800e44a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	60da      	str	r2, [r3, #12]
}
 800e454:	bf00      	nop
 800e456:	3714      	adds	r7, #20
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e460:	b480      	push	{r7}
 800e462:	b085      	sub	sp, #20
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	3b10      	subs	r3, #16
 800e470:	4a14      	ldr	r2, [pc, #80]	@ (800e4c4 <DMA_CalcBaseAndBitshift+0x64>)
 800e472:	fba2 2303 	umull	r2, r3, r2, r3
 800e476:	091b      	lsrs	r3, r3, #4
 800e478:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800e47a:	4a13      	ldr	r2, [pc, #76]	@ (800e4c8 <DMA_CalcBaseAndBitshift+0x68>)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	4413      	add	r3, r2
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	461a      	mov	r2, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2b03      	cmp	r3, #3
 800e48c:	d909      	bls.n	800e4a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800e496:	f023 0303 	bic.w	r3, r3, #3
 800e49a:	1d1a      	adds	r2, r3, #4
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	659a      	str	r2, [r3, #88]	@ 0x58
 800e4a0:	e007      	b.n	800e4b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800e4aa:	f023 0303 	bic.w	r3, r3, #3
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3714      	adds	r7, #20
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop
 800e4c4:	aaaaaaab 	.word	0xaaaaaaab
 800e4c8:	0801b0e4 	.word	0x0801b0e4

0800e4cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b085      	sub	sp, #20
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	699b      	ldr	r3, [r3, #24]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d11f      	bne.n	800e526 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	2b03      	cmp	r3, #3
 800e4ea:	d856      	bhi.n	800e59a <DMA_CheckFifoParam+0xce>
 800e4ec:	a201      	add	r2, pc, #4	@ (adr r2, 800e4f4 <DMA_CheckFifoParam+0x28>)
 800e4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4f2:	bf00      	nop
 800e4f4:	0800e505 	.word	0x0800e505
 800e4f8:	0800e517 	.word	0x0800e517
 800e4fc:	0800e505 	.word	0x0800e505
 800e500:	0800e59b 	.word	0x0800e59b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e508:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d046      	beq.n	800e59e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800e510:	2301      	movs	r3, #1
 800e512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e514:	e043      	b.n	800e59e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e51a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e51e:	d140      	bne.n	800e5a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800e520:	2301      	movs	r3, #1
 800e522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e524:	e03d      	b.n	800e5a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	699b      	ldr	r3, [r3, #24]
 800e52a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e52e:	d121      	bne.n	800e574 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	2b03      	cmp	r3, #3
 800e534:	d837      	bhi.n	800e5a6 <DMA_CheckFifoParam+0xda>
 800e536:	a201      	add	r2, pc, #4	@ (adr r2, 800e53c <DMA_CheckFifoParam+0x70>)
 800e538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e53c:	0800e54d 	.word	0x0800e54d
 800e540:	0800e553 	.word	0x0800e553
 800e544:	0800e54d 	.word	0x0800e54d
 800e548:	0800e565 	.word	0x0800e565
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800e54c:	2301      	movs	r3, #1
 800e54e:	73fb      	strb	r3, [r7, #15]
      break;
 800e550:	e030      	b.n	800e5b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e556:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d025      	beq.n	800e5aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800e55e:	2301      	movs	r3, #1
 800e560:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e562:	e022      	b.n	800e5aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e568:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e56c:	d11f      	bne.n	800e5ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800e56e:	2301      	movs	r3, #1
 800e570:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800e572:	e01c      	b.n	800e5ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	2b02      	cmp	r3, #2
 800e578:	d903      	bls.n	800e582 <DMA_CheckFifoParam+0xb6>
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	2b03      	cmp	r3, #3
 800e57e:	d003      	beq.n	800e588 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800e580:	e018      	b.n	800e5b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800e582:	2301      	movs	r3, #1
 800e584:	73fb      	strb	r3, [r7, #15]
      break;
 800e586:	e015      	b.n	800e5b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e58c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00e      	beq.n	800e5b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800e594:	2301      	movs	r3, #1
 800e596:	73fb      	strb	r3, [r7, #15]
      break;
 800e598:	e00b      	b.n	800e5b2 <DMA_CheckFifoParam+0xe6>
      break;
 800e59a:	bf00      	nop
 800e59c:	e00a      	b.n	800e5b4 <DMA_CheckFifoParam+0xe8>
      break;
 800e59e:	bf00      	nop
 800e5a0:	e008      	b.n	800e5b4 <DMA_CheckFifoParam+0xe8>
      break;
 800e5a2:	bf00      	nop
 800e5a4:	e006      	b.n	800e5b4 <DMA_CheckFifoParam+0xe8>
      break;
 800e5a6:	bf00      	nop
 800e5a8:	e004      	b.n	800e5b4 <DMA_CheckFifoParam+0xe8>
      break;
 800e5aa:	bf00      	nop
 800e5ac:	e002      	b.n	800e5b4 <DMA_CheckFifoParam+0xe8>
      break;   
 800e5ae:	bf00      	nop
 800e5b0:	e000      	b.n	800e5b4 <DMA_CheckFifoParam+0xe8>
      break;
 800e5b2:	bf00      	nop
    }
  } 
  
  return status; 
 800e5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3714      	adds	r7, #20
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c0:	4770      	bx	lr
 800e5c2:	bf00      	nop

0800e5c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b089      	sub	sp, #36	@ 0x24
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e5da:	2300      	movs	r3, #0
 800e5dc:	61fb      	str	r3, [r7, #28]
 800e5de:	e165      	b.n	800e8ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	69fb      	ldr	r3, [r7, #28]
 800e5e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e5e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	697a      	ldr	r2, [r7, #20]
 800e5f0:	4013      	ands	r3, r2
 800e5f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e5f4:	693a      	ldr	r2, [r7, #16]
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	f040 8154 	bne.w	800e8a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	f003 0303 	and.w	r3, r3, #3
 800e606:	2b01      	cmp	r3, #1
 800e608:	d005      	beq.n	800e616 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e612:	2b02      	cmp	r3, #2
 800e614:	d130      	bne.n	800e678 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	689b      	ldr	r3, [r3, #8]
 800e61a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	005b      	lsls	r3, r3, #1
 800e620:	2203      	movs	r2, #3
 800e622:	fa02 f303 	lsl.w	r3, r2, r3
 800e626:	43db      	mvns	r3, r3
 800e628:	69ba      	ldr	r2, [r7, #24]
 800e62a:	4013      	ands	r3, r2
 800e62c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	68da      	ldr	r2, [r3, #12]
 800e632:	69fb      	ldr	r3, [r7, #28]
 800e634:	005b      	lsls	r3, r3, #1
 800e636:	fa02 f303 	lsl.w	r3, r2, r3
 800e63a:	69ba      	ldr	r2, [r7, #24]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	69ba      	ldr	r2, [r7, #24]
 800e644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e64c:	2201      	movs	r2, #1
 800e64e:	69fb      	ldr	r3, [r7, #28]
 800e650:	fa02 f303 	lsl.w	r3, r2, r3
 800e654:	43db      	mvns	r3, r3
 800e656:	69ba      	ldr	r2, [r7, #24]
 800e658:	4013      	ands	r3, r2
 800e65a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	685b      	ldr	r3, [r3, #4]
 800e660:	091b      	lsrs	r3, r3, #4
 800e662:	f003 0201 	and.w	r2, r3, #1
 800e666:	69fb      	ldr	r3, [r7, #28]
 800e668:	fa02 f303 	lsl.w	r3, r2, r3
 800e66c:	69ba      	ldr	r2, [r7, #24]
 800e66e:	4313      	orrs	r3, r2
 800e670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	69ba      	ldr	r2, [r7, #24]
 800e676:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	f003 0303 	and.w	r3, r3, #3
 800e680:	2b03      	cmp	r3, #3
 800e682:	d017      	beq.n	800e6b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e68a:	69fb      	ldr	r3, [r7, #28]
 800e68c:	005b      	lsls	r3, r3, #1
 800e68e:	2203      	movs	r2, #3
 800e690:	fa02 f303 	lsl.w	r3, r2, r3
 800e694:	43db      	mvns	r3, r3
 800e696:	69ba      	ldr	r2, [r7, #24]
 800e698:	4013      	ands	r3, r2
 800e69a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	689a      	ldr	r2, [r3, #8]
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	005b      	lsls	r3, r3, #1
 800e6a4:	fa02 f303 	lsl.w	r3, r2, r3
 800e6a8:	69ba      	ldr	r2, [r7, #24]
 800e6aa:	4313      	orrs	r3, r2
 800e6ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	69ba      	ldr	r2, [r7, #24]
 800e6b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	685b      	ldr	r3, [r3, #4]
 800e6b8:	f003 0303 	and.w	r3, r3, #3
 800e6bc:	2b02      	cmp	r3, #2
 800e6be:	d123      	bne.n	800e708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e6c0:	69fb      	ldr	r3, [r7, #28]
 800e6c2:	08da      	lsrs	r2, r3, #3
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	3208      	adds	r2, #8
 800e6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e6ce:	69fb      	ldr	r3, [r7, #28]
 800e6d0:	f003 0307 	and.w	r3, r3, #7
 800e6d4:	009b      	lsls	r3, r3, #2
 800e6d6:	220f      	movs	r2, #15
 800e6d8:	fa02 f303 	lsl.w	r3, r2, r3
 800e6dc:	43db      	mvns	r3, r3
 800e6de:	69ba      	ldr	r2, [r7, #24]
 800e6e0:	4013      	ands	r3, r2
 800e6e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	691a      	ldr	r2, [r3, #16]
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	f003 0307 	and.w	r3, r3, #7
 800e6ee:	009b      	lsls	r3, r3, #2
 800e6f0:	fa02 f303 	lsl.w	r3, r2, r3
 800e6f4:	69ba      	ldr	r2, [r7, #24]
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e6fa:	69fb      	ldr	r3, [r7, #28]
 800e6fc:	08da      	lsrs	r2, r3, #3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	3208      	adds	r2, #8
 800e702:	69b9      	ldr	r1, [r7, #24]
 800e704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e70e:	69fb      	ldr	r3, [r7, #28]
 800e710:	005b      	lsls	r3, r3, #1
 800e712:	2203      	movs	r2, #3
 800e714:	fa02 f303 	lsl.w	r3, r2, r3
 800e718:	43db      	mvns	r3, r3
 800e71a:	69ba      	ldr	r2, [r7, #24]
 800e71c:	4013      	ands	r3, r2
 800e71e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	685b      	ldr	r3, [r3, #4]
 800e724:	f003 0203 	and.w	r2, r3, #3
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	005b      	lsls	r3, r3, #1
 800e72c:	fa02 f303 	lsl.w	r3, r2, r3
 800e730:	69ba      	ldr	r2, [r7, #24]
 800e732:	4313      	orrs	r3, r2
 800e734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	69ba      	ldr	r2, [r7, #24]
 800e73a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e744:	2b00      	cmp	r3, #0
 800e746:	f000 80ae 	beq.w	800e8a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e74a:	2300      	movs	r3, #0
 800e74c:	60fb      	str	r3, [r7, #12]
 800e74e:	4b5d      	ldr	r3, [pc, #372]	@ (800e8c4 <HAL_GPIO_Init+0x300>)
 800e750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e752:	4a5c      	ldr	r2, [pc, #368]	@ (800e8c4 <HAL_GPIO_Init+0x300>)
 800e754:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e758:	6453      	str	r3, [r2, #68]	@ 0x44
 800e75a:	4b5a      	ldr	r3, [pc, #360]	@ (800e8c4 <HAL_GPIO_Init+0x300>)
 800e75c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e75e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e762:	60fb      	str	r3, [r7, #12]
 800e764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e766:	4a58      	ldr	r2, [pc, #352]	@ (800e8c8 <HAL_GPIO_Init+0x304>)
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	089b      	lsrs	r3, r3, #2
 800e76c:	3302      	adds	r3, #2
 800e76e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e774:	69fb      	ldr	r3, [r7, #28]
 800e776:	f003 0303 	and.w	r3, r3, #3
 800e77a:	009b      	lsls	r3, r3, #2
 800e77c:	220f      	movs	r2, #15
 800e77e:	fa02 f303 	lsl.w	r3, r2, r3
 800e782:	43db      	mvns	r3, r3
 800e784:	69ba      	ldr	r2, [r7, #24]
 800e786:	4013      	ands	r3, r2
 800e788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	4a4f      	ldr	r2, [pc, #316]	@ (800e8cc <HAL_GPIO_Init+0x308>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d025      	beq.n	800e7de <HAL_GPIO_Init+0x21a>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	4a4e      	ldr	r2, [pc, #312]	@ (800e8d0 <HAL_GPIO_Init+0x30c>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d01f      	beq.n	800e7da <HAL_GPIO_Init+0x216>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	4a4d      	ldr	r2, [pc, #308]	@ (800e8d4 <HAL_GPIO_Init+0x310>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d019      	beq.n	800e7d6 <HAL_GPIO_Init+0x212>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	4a4c      	ldr	r2, [pc, #304]	@ (800e8d8 <HAL_GPIO_Init+0x314>)
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d013      	beq.n	800e7d2 <HAL_GPIO_Init+0x20e>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	4a4b      	ldr	r2, [pc, #300]	@ (800e8dc <HAL_GPIO_Init+0x318>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d00d      	beq.n	800e7ce <HAL_GPIO_Init+0x20a>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	4a4a      	ldr	r2, [pc, #296]	@ (800e8e0 <HAL_GPIO_Init+0x31c>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d007      	beq.n	800e7ca <HAL_GPIO_Init+0x206>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	4a49      	ldr	r2, [pc, #292]	@ (800e8e4 <HAL_GPIO_Init+0x320>)
 800e7be:	4293      	cmp	r3, r2
 800e7c0:	d101      	bne.n	800e7c6 <HAL_GPIO_Init+0x202>
 800e7c2:	2306      	movs	r3, #6
 800e7c4:	e00c      	b.n	800e7e0 <HAL_GPIO_Init+0x21c>
 800e7c6:	2307      	movs	r3, #7
 800e7c8:	e00a      	b.n	800e7e0 <HAL_GPIO_Init+0x21c>
 800e7ca:	2305      	movs	r3, #5
 800e7cc:	e008      	b.n	800e7e0 <HAL_GPIO_Init+0x21c>
 800e7ce:	2304      	movs	r3, #4
 800e7d0:	e006      	b.n	800e7e0 <HAL_GPIO_Init+0x21c>
 800e7d2:	2303      	movs	r3, #3
 800e7d4:	e004      	b.n	800e7e0 <HAL_GPIO_Init+0x21c>
 800e7d6:	2302      	movs	r3, #2
 800e7d8:	e002      	b.n	800e7e0 <HAL_GPIO_Init+0x21c>
 800e7da:	2301      	movs	r3, #1
 800e7dc:	e000      	b.n	800e7e0 <HAL_GPIO_Init+0x21c>
 800e7de:	2300      	movs	r3, #0
 800e7e0:	69fa      	ldr	r2, [r7, #28]
 800e7e2:	f002 0203 	and.w	r2, r2, #3
 800e7e6:	0092      	lsls	r2, r2, #2
 800e7e8:	4093      	lsls	r3, r2
 800e7ea:	69ba      	ldr	r2, [r7, #24]
 800e7ec:	4313      	orrs	r3, r2
 800e7ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e7f0:	4935      	ldr	r1, [pc, #212]	@ (800e8c8 <HAL_GPIO_Init+0x304>)
 800e7f2:	69fb      	ldr	r3, [r7, #28]
 800e7f4:	089b      	lsrs	r3, r3, #2
 800e7f6:	3302      	adds	r3, #2
 800e7f8:	69ba      	ldr	r2, [r7, #24]
 800e7fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e7fe:	4b3a      	ldr	r3, [pc, #232]	@ (800e8e8 <HAL_GPIO_Init+0x324>)
 800e800:	689b      	ldr	r3, [r3, #8]
 800e802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	43db      	mvns	r3, r3
 800e808:	69ba      	ldr	r2, [r7, #24]
 800e80a:	4013      	ands	r3, r2
 800e80c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e816:	2b00      	cmp	r3, #0
 800e818:	d003      	beq.n	800e822 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800e81a:	69ba      	ldr	r2, [r7, #24]
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	4313      	orrs	r3, r2
 800e820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e822:	4a31      	ldr	r2, [pc, #196]	@ (800e8e8 <HAL_GPIO_Init+0x324>)
 800e824:	69bb      	ldr	r3, [r7, #24]
 800e826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e828:	4b2f      	ldr	r3, [pc, #188]	@ (800e8e8 <HAL_GPIO_Init+0x324>)
 800e82a:	68db      	ldr	r3, [r3, #12]
 800e82c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	43db      	mvns	r3, r3
 800e832:	69ba      	ldr	r2, [r7, #24]
 800e834:	4013      	ands	r3, r2
 800e836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e840:	2b00      	cmp	r3, #0
 800e842:	d003      	beq.n	800e84c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800e844:	69ba      	ldr	r2, [r7, #24]
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	4313      	orrs	r3, r2
 800e84a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800e84c:	4a26      	ldr	r2, [pc, #152]	@ (800e8e8 <HAL_GPIO_Init+0x324>)
 800e84e:	69bb      	ldr	r3, [r7, #24]
 800e850:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800e852:	4b25      	ldr	r3, [pc, #148]	@ (800e8e8 <HAL_GPIO_Init+0x324>)
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	43db      	mvns	r3, r3
 800e85c:	69ba      	ldr	r2, [r7, #24]
 800e85e:	4013      	ands	r3, r2
 800e860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d003      	beq.n	800e876 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800e86e:	69ba      	ldr	r2, [r7, #24]
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	4313      	orrs	r3, r2
 800e874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800e876:	4a1c      	ldr	r2, [pc, #112]	@ (800e8e8 <HAL_GPIO_Init+0x324>)
 800e878:	69bb      	ldr	r3, [r7, #24]
 800e87a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e87c:	4b1a      	ldr	r3, [pc, #104]	@ (800e8e8 <HAL_GPIO_Init+0x324>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	43db      	mvns	r3, r3
 800e886:	69ba      	ldr	r2, [r7, #24]
 800e888:	4013      	ands	r3, r2
 800e88a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e894:	2b00      	cmp	r3, #0
 800e896:	d003      	beq.n	800e8a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800e898:	69ba      	ldr	r2, [r7, #24]
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	4313      	orrs	r3, r2
 800e89e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800e8a0:	4a11      	ldr	r2, [pc, #68]	@ (800e8e8 <HAL_GPIO_Init+0x324>)
 800e8a2:	69bb      	ldr	r3, [r7, #24]
 800e8a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e8a6:	69fb      	ldr	r3, [r7, #28]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	61fb      	str	r3, [r7, #28]
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	2b0f      	cmp	r3, #15
 800e8b0:	f67f ae96 	bls.w	800e5e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800e8b4:	bf00      	nop
 800e8b6:	bf00      	nop
 800e8b8:	3724      	adds	r7, #36	@ 0x24
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr
 800e8c2:	bf00      	nop
 800e8c4:	40023800 	.word	0x40023800
 800e8c8:	40013800 	.word	0x40013800
 800e8cc:	40020000 	.word	0x40020000
 800e8d0:	40020400 	.word	0x40020400
 800e8d4:	40020800 	.word	0x40020800
 800e8d8:	40020c00 	.word	0x40020c00
 800e8dc:	40021000 	.word	0x40021000
 800e8e0:	40021400 	.word	0x40021400
 800e8e4:	40021800 	.word	0x40021800
 800e8e8:	40013c00 	.word	0x40013c00

0800e8ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b087      	sub	sp, #28
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800e8fe:	2300      	movs	r3, #0
 800e900:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e902:	2300      	movs	r3, #0
 800e904:	617b      	str	r3, [r7, #20]
 800e906:	e0c7      	b.n	800ea98 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e908:	2201      	movs	r2, #1
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	fa02 f303 	lsl.w	r3, r2, r3
 800e910:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800e912:	683a      	ldr	r2, [r7, #0]
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	4013      	ands	r3, r2
 800e918:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	429a      	cmp	r2, r3
 800e920:	f040 80b7 	bne.w	800ea92 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800e924:	4a62      	ldr	r2, [pc, #392]	@ (800eab0 <HAL_GPIO_DeInit+0x1c4>)
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	089b      	lsrs	r3, r3, #2
 800e92a:	3302      	adds	r3, #2
 800e92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e930:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	f003 0303 	and.w	r3, r3, #3
 800e938:	009b      	lsls	r3, r3, #2
 800e93a:	220f      	movs	r2, #15
 800e93c:	fa02 f303 	lsl.w	r3, r2, r3
 800e940:	68ba      	ldr	r2, [r7, #8]
 800e942:	4013      	ands	r3, r2
 800e944:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4a5a      	ldr	r2, [pc, #360]	@ (800eab4 <HAL_GPIO_DeInit+0x1c8>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d025      	beq.n	800e99a <HAL_GPIO_DeInit+0xae>
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	4a59      	ldr	r2, [pc, #356]	@ (800eab8 <HAL_GPIO_DeInit+0x1cc>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d01f      	beq.n	800e996 <HAL_GPIO_DeInit+0xaa>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	4a58      	ldr	r2, [pc, #352]	@ (800eabc <HAL_GPIO_DeInit+0x1d0>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d019      	beq.n	800e992 <HAL_GPIO_DeInit+0xa6>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4a57      	ldr	r2, [pc, #348]	@ (800eac0 <HAL_GPIO_DeInit+0x1d4>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d013      	beq.n	800e98e <HAL_GPIO_DeInit+0xa2>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4a56      	ldr	r2, [pc, #344]	@ (800eac4 <HAL_GPIO_DeInit+0x1d8>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d00d      	beq.n	800e98a <HAL_GPIO_DeInit+0x9e>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4a55      	ldr	r2, [pc, #340]	@ (800eac8 <HAL_GPIO_DeInit+0x1dc>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d007      	beq.n	800e986 <HAL_GPIO_DeInit+0x9a>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	4a54      	ldr	r2, [pc, #336]	@ (800eacc <HAL_GPIO_DeInit+0x1e0>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d101      	bne.n	800e982 <HAL_GPIO_DeInit+0x96>
 800e97e:	2306      	movs	r3, #6
 800e980:	e00c      	b.n	800e99c <HAL_GPIO_DeInit+0xb0>
 800e982:	2307      	movs	r3, #7
 800e984:	e00a      	b.n	800e99c <HAL_GPIO_DeInit+0xb0>
 800e986:	2305      	movs	r3, #5
 800e988:	e008      	b.n	800e99c <HAL_GPIO_DeInit+0xb0>
 800e98a:	2304      	movs	r3, #4
 800e98c:	e006      	b.n	800e99c <HAL_GPIO_DeInit+0xb0>
 800e98e:	2303      	movs	r3, #3
 800e990:	e004      	b.n	800e99c <HAL_GPIO_DeInit+0xb0>
 800e992:	2302      	movs	r3, #2
 800e994:	e002      	b.n	800e99c <HAL_GPIO_DeInit+0xb0>
 800e996:	2301      	movs	r3, #1
 800e998:	e000      	b.n	800e99c <HAL_GPIO_DeInit+0xb0>
 800e99a:	2300      	movs	r3, #0
 800e99c:	697a      	ldr	r2, [r7, #20]
 800e99e:	f002 0203 	and.w	r2, r2, #3
 800e9a2:	0092      	lsls	r2, r2, #2
 800e9a4:	4093      	lsls	r3, r2
 800e9a6:	68ba      	ldr	r2, [r7, #8]
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d132      	bne.n	800ea12 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800e9ac:	4b48      	ldr	r3, [pc, #288]	@ (800ead0 <HAL_GPIO_DeInit+0x1e4>)
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	43db      	mvns	r3, r3
 800e9b4:	4946      	ldr	r1, [pc, #280]	@ (800ead0 <HAL_GPIO_DeInit+0x1e4>)
 800e9b6:	4013      	ands	r3, r2
 800e9b8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800e9ba:	4b45      	ldr	r3, [pc, #276]	@ (800ead0 <HAL_GPIO_DeInit+0x1e4>)
 800e9bc:	685a      	ldr	r2, [r3, #4]
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	43db      	mvns	r3, r3
 800e9c2:	4943      	ldr	r1, [pc, #268]	@ (800ead0 <HAL_GPIO_DeInit+0x1e4>)
 800e9c4:	4013      	ands	r3, r2
 800e9c6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800e9c8:	4b41      	ldr	r3, [pc, #260]	@ (800ead0 <HAL_GPIO_DeInit+0x1e4>)
 800e9ca:	68da      	ldr	r2, [r3, #12]
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	43db      	mvns	r3, r3
 800e9d0:	493f      	ldr	r1, [pc, #252]	@ (800ead0 <HAL_GPIO_DeInit+0x1e4>)
 800e9d2:	4013      	ands	r3, r2
 800e9d4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800e9d6:	4b3e      	ldr	r3, [pc, #248]	@ (800ead0 <HAL_GPIO_DeInit+0x1e4>)
 800e9d8:	689a      	ldr	r2, [r3, #8]
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	43db      	mvns	r3, r3
 800e9de:	493c      	ldr	r1, [pc, #240]	@ (800ead0 <HAL_GPIO_DeInit+0x1e4>)
 800e9e0:	4013      	ands	r3, r2
 800e9e2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	f003 0303 	and.w	r3, r3, #3
 800e9ea:	009b      	lsls	r3, r3, #2
 800e9ec:	220f      	movs	r2, #15
 800e9ee:	fa02 f303 	lsl.w	r3, r2, r3
 800e9f2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800e9f4:	4a2e      	ldr	r2, [pc, #184]	@ (800eab0 <HAL_GPIO_DeInit+0x1c4>)
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	089b      	lsrs	r3, r3, #2
 800e9fa:	3302      	adds	r3, #2
 800e9fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	43da      	mvns	r2, r3
 800ea04:	482a      	ldr	r0, [pc, #168]	@ (800eab0 <HAL_GPIO_DeInit+0x1c4>)
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	089b      	lsrs	r3, r3, #2
 800ea0a:	400a      	ands	r2, r1
 800ea0c:	3302      	adds	r3, #2
 800ea0e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681a      	ldr	r2, [r3, #0]
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	005b      	lsls	r3, r3, #1
 800ea1a:	2103      	movs	r1, #3
 800ea1c:	fa01 f303 	lsl.w	r3, r1, r3
 800ea20:	43db      	mvns	r3, r3
 800ea22:	401a      	ands	r2, r3
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	08da      	lsrs	r2, r3, #3
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	3208      	adds	r2, #8
 800ea30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	f003 0307 	and.w	r3, r3, #7
 800ea3a:	009b      	lsls	r3, r3, #2
 800ea3c:	220f      	movs	r2, #15
 800ea3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ea42:	43db      	mvns	r3, r3
 800ea44:	697a      	ldr	r2, [r7, #20]
 800ea46:	08d2      	lsrs	r2, r2, #3
 800ea48:	4019      	ands	r1, r3
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	3208      	adds	r2, #8
 800ea4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	68da      	ldr	r2, [r3, #12]
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	005b      	lsls	r3, r3, #1
 800ea5a:	2103      	movs	r1, #3
 800ea5c:	fa01 f303 	lsl.w	r3, r1, r3
 800ea60:	43db      	mvns	r3, r3
 800ea62:	401a      	ands	r2, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	685a      	ldr	r2, [r3, #4]
 800ea6c:	2101      	movs	r1, #1
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	fa01 f303 	lsl.w	r3, r1, r3
 800ea74:	43db      	mvns	r3, r3
 800ea76:	401a      	ands	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	689a      	ldr	r2, [r3, #8]
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	005b      	lsls	r3, r3, #1
 800ea84:	2103      	movs	r1, #3
 800ea86:	fa01 f303 	lsl.w	r3, r1, r3
 800ea8a:	43db      	mvns	r3, r3
 800ea8c:	401a      	ands	r2, r3
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	3301      	adds	r3, #1
 800ea96:	617b      	str	r3, [r7, #20]
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	2b0f      	cmp	r3, #15
 800ea9c:	f67f af34 	bls.w	800e908 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800eaa0:	bf00      	nop
 800eaa2:	bf00      	nop
 800eaa4:	371c      	adds	r7, #28
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop
 800eab0:	40013800 	.word	0x40013800
 800eab4:	40020000 	.word	0x40020000
 800eab8:	40020400 	.word	0x40020400
 800eabc:	40020800 	.word	0x40020800
 800eac0:	40020c00 	.word	0x40020c00
 800eac4:	40021000 	.word	0x40021000
 800eac8:	40021400 	.word	0x40021400
 800eacc:	40021800 	.word	0x40021800
 800ead0:	40013c00 	.word	0x40013c00

0800ead4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b083      	sub	sp, #12
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	460b      	mov	r3, r1
 800eade:	807b      	strh	r3, [r7, #2]
 800eae0:	4613      	mov	r3, r2
 800eae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800eae4:	787b      	ldrb	r3, [r7, #1]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d003      	beq.n	800eaf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800eaea:	887a      	ldrh	r2, [r7, #2]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800eaf0:	e003      	b.n	800eafa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800eaf2:	887b      	ldrh	r3, [r7, #2]
 800eaf4:	041a      	lsls	r2, r3, #16
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	619a      	str	r2, [r3, #24]
}
 800eafa:	bf00      	nop
 800eafc:	370c      	adds	r7, #12
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr

0800eb06 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b082      	sub	sp, #8
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d101      	bne.n	800eb18 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 800eb14:	2301      	movs	r3, #1
 800eb16:	e031      	b.n	800eb7c <HAL_MMC_Init+0x76>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hmmc->Init.ClockDiv));

  if(hmmc->State == HAL_MMC_STATE_RESET)
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d105      	bne.n	800eb30 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2200      	movs	r2, #0
 800eb28:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f7fc fc68 	bl	800b400 <HAL_MMC_MspInit>
#endif
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2203      	movs	r2, #3
 800eb34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if(HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f000 f823 	bl	800eb84 <HAL_MMC_InitCard>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d101      	bne.n	800eb48 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 800eb44:	2301      	movs	r3, #1
 800eb46:	e019      	b.n	800eb7c <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2200      	movs	r2, #0
 800eb52:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2201      	movs	r2, #1
 800eb58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDIO_BUS_WIDE_1B)
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	691b      	ldr	r3, [r3, #16]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d00a      	beq.n	800eb7a <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	691b      	ldr	r3, [r3, #16]
 800eb68:	4619      	mov	r1, r3
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f000 fe88 	bl	800f880 <HAL_MMC_ConfigWideBusOperation>
 800eb70:	4603      	mov	r3, r0
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d001      	beq.n	800eb7a <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 800eb76:	2301      	movs	r3, #1
 800eb78:	e000      	b.n	800eb7c <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 800eb7a:	2300      	movs	r3, #0
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3708      	adds	r7, #8
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}

0800eb84 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 800eb84:	b5b0      	push	{r4, r5, r7, lr}
 800eb86:	b08e      	sub	sp, #56	@ 0x38
 800eb88:	af04      	add	r7, sp, #16
 800eb8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  HAL_StatusTypeDef status;
  
  /* Default SDIO peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800eb90:	2300      	movs	r3, #0
 800eb92:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800eb94:	2300      	movs	r3, #0
 800eb96:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800eba0:	2376      	movs	r3, #118	@ 0x76
 800eba2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hmmc->Instance, Init);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681d      	ldr	r5, [r3, #0]
 800eba8:	466c      	mov	r4, sp
 800ebaa:	f107 0314 	add.w	r3, r7, #20
 800ebae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ebb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ebb6:	f107 0308 	add.w	r3, r7, #8
 800ebba:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	f006 fb5b 	bl	8015278 <SDIO_Init>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status == HAL_ERROR)
 800ebc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	d101      	bne.n	800ebd4 <HAL_MMC_InitCard+0x50>
  {
    return HAL_ERROR;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	e058      	b.n	800ec86 <HAL_MMC_InitCard+0x102>
  }

  /* Disable SDIO Clock */
  __HAL_MMC_DISABLE(hmmc); 
 800ebd4:	4b2e      	ldr	r3, [pc, #184]	@ (800ec90 <HAL_MMC_InitCard+0x10c>)
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  status = SDIO_PowerState_ON(hmmc->Instance);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f006 fb93 	bl	801530a <SDIO_PowerState_ON>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status == HAL_ERROR)
 800ebea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d101      	bne.n	800ebf6 <HAL_MMC_InitCard+0x72>
  {
    return HAL_ERROR;
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	e047      	b.n	800ec86 <HAL_MMC_InitCard+0x102>
  }

  /* Enable MMC Clock */
  __HAL_MMC_ENABLE(hmmc);
 800ebf6:	4b26      	ldr	r3, [pc, #152]	@ (800ec90 <HAL_MMC_InitCard+0x10c>)
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the MMC initialization  sequence */
  HAL_Delay(2);
 800ebfc:	2002      	movs	r0, #2
 800ebfe:	f7fd fbab 	bl	800c358 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f001 f926 	bl	800fe54 <MMC_PowerON>
 800ec08:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 800ec0a:	6a3b      	ldr	r3, [r7, #32]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d00b      	beq.n	800ec28 <HAL_MMC_InitCard+0xa4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2201      	movs	r2, #1
 800ec14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hmmc->ErrorCode |= errorstate;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec1c:	6a3b      	ldr	r3, [r7, #32]
 800ec1e:	431a      	orrs	r2, r3
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ec24:	2301      	movs	r3, #1
 800ec26:	e02e      	b.n	800ec86 <HAL_MMC_InitCard+0x102>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f001 f80f 	bl	800fc4c <MMC_InitCard>
 800ec2e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 800ec30:	6a3b      	ldr	r3, [r7, #32]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d00b      	beq.n	800ec4e <HAL_MMC_InitCard+0xca>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2201      	movs	r2, #1
 800ec3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hmmc->ErrorCode |= errorstate;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec42:	6a3b      	ldr	r3, [r7, #32]
 800ec44:	431a      	orrs	r2, r3
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	e01b      	b.n	800ec86 <HAL_MMC_InitCard+0x102>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ec56:	4618      	mov	r0, r3
 800ec58:	f006 fbf7 	bl	801544a <SDMMC_CmdBlockLength>
 800ec5c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 800ec5e:	6a3b      	ldr	r3, [r7, #32]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d00f      	beq.n	800ec84 <HAL_MMC_InitCard+0x100>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	4a0a      	ldr	r2, [pc, #40]	@ (800ec94 <HAL_MMC_InitCard+0x110>)
 800ec6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec70:	6a3b      	ldr	r3, [r7, #32]
 800ec72:	431a      	orrs	r2, r3
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ec80:	2301      	movs	r3, #1
 800ec82:	e000      	b.n	800ec86 <HAL_MMC_InitCard+0x102>
  }

  return HAL_OK;
 800ec84:	2300      	movs	r3, #0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3728      	adds	r7, #40	@ 0x28
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	422580a0 	.word	0x422580a0
 800ec94:	004005ff 	.word	0x004005ff

0800ec98 <HAL_MMC_DeInit>:
  * @brief  De-Initializes the MMC card.
  * @param  hmmc: Pointer to MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_DeInit(MMC_HandleTypeDef *hmmc)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d101      	bne.n	800ecaa <HAL_MMC_DeInit+0x12>
  {
    return HAL_ERROR;
 800eca6:	2301      	movs	r3, #1
 800eca8:	e011      	b.n	800ecce <HAL_MMC_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDIO_ALL_INSTANCE(hmmc->Instance));

  hmmc->State = HAL_MMC_STATE_BUSY;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2203      	movs	r2, #3
 800ecae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Set MMC power state to off */
  MMC_PowerOFF(hmmc);
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f001 f91e 	bl	800fef4 <MMC_PowerOFF>

  /* DeInit the low level hardware */
  hmmc->MspDeInitCallback(hmmc);
#else
  /* De-Initialize the MSP layer */
  HAL_MMC_MspDeInit(hmmc);
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7fc fcd1 	bl	800b660 <HAL_MMC_MspDeInit>
#endif

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hmmc->State = HAL_MMC_STATE_RESET;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3708      	adds	r7, #8
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
	...

0800ecd8 <HAL_MMC_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ReadBlocks_DMA(MMC_HandleTypeDef *hmmc, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b08c      	sub	sp, #48	@ 0x30
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	60f8      	str	r0, [r7, #12]
 800ece0:	60b9      	str	r1, [r7, #8]
 800ece2:	607a      	str	r2, [r7, #4]
 800ece4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d107      	bne.n	800ed00 <HAL_MMC_ReadBlocks_DMA+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecf4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	e0be      	b.n	800ee7e <HAL_MMC_ReadBlocks_DMA+0x1a6>
  }

  if(hmmc->State == HAL_MMC_STATE_READY)
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ed06:	b2db      	uxtb	r3, r3
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	f040 80b7 	bne.w	800ee7c <HAL_MMC_ReadBlocks_DMA+0x1a4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2200      	movs	r2, #0
 800ed12:	639a      	str	r2, [r3, #56]	@ 0x38

    if((BlockAdd + NumberOfBlocks) > (hmmc->MmcCard.LogBlockNbr))
 800ed14:	687a      	ldr	r2, [r7, #4]
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	441a      	add	r2, r3
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d907      	bls.n	800ed32 <HAL_MMC_ReadBlocks_DMA+0x5a>
    {
      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed26:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	e0a5      	b.n	800ee7e <HAL_MMC_ReadBlocks_DMA+0x1a6>
    }

    hmmc->State = HAL_MMC_STATE_BUSY;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	2203      	movs	r2, #3
 800ed36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0U;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_MMC_ENABLE_IT(hmmc, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_MMC_ENABLE_IT(hmmc, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800ed50:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hmmc->hdmarx->XferCpltCallback = MMC_DMAReceiveCplt;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed56:	4a4c      	ldr	r2, [pc, #304]	@ (800ee88 <HAL_MMC_ReadBlocks_DMA+0x1b0>)
 800ed58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hmmc->hdmarx->XferErrorCallback = MMC_DMAError;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed5e:	4a4b      	ldr	r2, [pc, #300]	@ (800ee8c <HAL_MMC_ReadBlocks_DMA+0x1b4>)
 800ed60:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hmmc->hdmarx->XferAbortCallback = NULL;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed66:	2200      	movs	r2, #0
 800ed68:	651a      	str	r2, [r3, #80]	@ 0x50

    if ((hmmc->MmcCard.CardType) != MMC_HIGH_CAPACITY_CARD)
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d002      	beq.n	800ed78 <HAL_MMC_ReadBlocks_DMA+0xa0>
    {
      add *= 512U;
 800ed72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed74:	025b      	lsls	r3, r3, #9
 800ed76:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Force DMA Direction */
    hmmc->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hmmc->hdmarx->Instance->CR, DMA_SxCR_DIR, hmmc->hdmarx->Init.Direction);
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed90:	689a      	ldr	r2, [r3, #8]
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	430a      	orrs	r2, r1
 800ed9a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hmmc->hdmarx, (uint32_t)&hmmc->Instance->FIFO, (uint32_t)pData, (uint32_t)(MMC_BLOCKSIZE * NumberOfBlocks)/4) != HAL_OK)
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	3380      	adds	r3, #128	@ 0x80
 800eda6:	4619      	mov	r1, r3
 800eda8:	68ba      	ldr	r2, [r7, #8]
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	025b      	lsls	r3, r3, #9
 800edae:	089b      	lsrs	r3, r3, #2
 800edb0:	f7ff f8a8 	bl	800df04 <HAL_DMA_Start_IT>
 800edb4:	4603      	mov	r3, r0
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d015      	beq.n	800ede6 <HAL_MMC_ReadBlocks_DMA+0x10e>
    {
      __HAL_MMC_DISABLE_IT(hmmc, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800edc8:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	4a30      	ldr	r2, [pc, #192]	@ (800ee90 <HAL_MMC_ReadBlocks_DMA+0x1b8>)
 800edd0:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode = HAL_MMC_ERROR_DMA;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800edd8:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2201      	movs	r2, #1
 800edde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800ede2:	2301      	movs	r3, #1
 800ede4:	e04b      	b.n	800ee7e <HAL_MMC_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable MMC DMA transfer */
      __HAL_MMC_DMA_ENABLE(hmmc);
 800ede6:	4b2b      	ldr	r3, [pc, #172]	@ (800ee94 <HAL_MMC_ReadBlocks_DMA+0x1bc>)
 800ede8:	2201      	movs	r2, #1
 800edea:	601a      	str	r2, [r3, #0]

      /* Configure the MMC DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800edec:	f04f 33ff 	mov.w	r3, #4294967295
 800edf0:	613b      	str	r3, [r7, #16]
      config.DataLength    = MMC_BLOCKSIZE * NumberOfBlocks;
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	025b      	lsls	r3, r3, #9
 800edf6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800edf8:	2390      	movs	r3, #144	@ 0x90
 800edfa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800edfc:	2302      	movs	r3, #2
 800edfe:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ee00:	2300      	movs	r3, #0
 800ee02:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ee04:	2301      	movs	r3, #1
 800ee06:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hmmc->Instance, &config);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f107 0210 	add.w	r2, r7, #16
 800ee10:	4611      	mov	r1, r2
 800ee12:	4618      	mov	r0, r3
 800ee14:	f006 faed 	bl	80153f2 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	d90a      	bls.n	800ee34 <HAL_MMC_ReadBlocks_DMA+0x15c>
      {
        hmmc->Context = (MMC_CONTEXT_READ_MULTIPLE_BLOCK | MMC_CONTEXT_DMA);
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2282      	movs	r2, #130	@ 0x82
 800ee22:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hmmc->Instance, add);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f006 fb51 	bl	80154d2 <SDMMC_CmdReadMultiBlock>
 800ee30:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ee32:	e009      	b.n	800ee48 <HAL_MMC_ReadBlocks_DMA+0x170>
      }
      else
      {
        hmmc->Context = (MMC_CONTEXT_READ_SINGLE_BLOCK | MMC_CONTEXT_DMA);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	2281      	movs	r2, #129	@ 0x81
 800ee38:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hmmc->Instance, add);
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ee40:	4618      	mov	r0, r3
 800ee42:	f006 fb24 	bl	801548e <SDMMC_CmdReadSingleBlock>
 800ee46:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_MMC_ERROR_NONE)
 800ee48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d014      	beq.n	800ee78 <HAL_MMC_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS); 
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	4a0f      	ldr	r2, [pc, #60]	@ (800ee90 <HAL_MMC_ReadBlocks_DMA+0x1b8>)
 800ee54:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_MMC_DISABLE_IT(hmmc, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800ee64:	63da      	str	r2, [r3, #60]	@ 0x3c
        hmmc->ErrorCode = errorstate;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->State = HAL_MMC_STATE_READY;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2201      	movs	r2, #1
 800ee70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 800ee74:	2301      	movs	r3, #1
 800ee76:	e002      	b.n	800ee7e <HAL_MMC_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	e000      	b.n	800ee7e <HAL_MMC_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 800ee7c:	2302      	movs	r3, #2
  }
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3730      	adds	r7, #48	@ 0x30
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	0800fa4f 	.word	0x0800fa4f
 800ee8c:	0800fab9 	.word	0x0800fab9
 800ee90:	004005ff 	.word	0x004005ff
 800ee94:	4225858c 	.word	0x4225858c

0800ee98 <HAL_MMC_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_WriteBlocks_DMA(MMC_HandleTypeDef *hmmc, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b08c      	sub	sp, #48	@ 0x30
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	60b9      	str	r1, [r7, #8]
 800eea2:	607a      	str	r2, [r7, #4]
 800eea4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d107      	bne.n	800eec0 <HAL_MMC_WriteBlocks_DMA+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eeb4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800eebc:	2301      	movs	r3, #1
 800eebe:	e0c3      	b.n	800f048 <HAL_MMC_WriteBlocks_DMA+0x1b0>
  }

  if(hmmc->State == HAL_MMC_STATE_READY)
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	f040 80bc 	bne.w	800f046 <HAL_MMC_WriteBlocks_DMA+0x1ae>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	2200      	movs	r2, #0
 800eed2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((BlockAdd + NumberOfBlocks) > (hmmc->MmcCard.LogBlockNbr))
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	441a      	add	r2, r3
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eede:	429a      	cmp	r2, r3
 800eee0:	d907      	bls.n	800eef2 <HAL_MMC_WriteBlocks_DMA+0x5a>
    {
      hmmc->ErrorCode |= HAL_MMC_ERROR_ADDR_OUT_OF_RANGE;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eee6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800eeee:	2301      	movs	r3, #1
 800eef0:	e0aa      	b.n	800f048 <HAL_MMC_WriteBlocks_DMA+0x1b0>
    }

    hmmc->State = HAL_MMC_STATE_BUSY;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2203      	movs	r2, #3
 800eef6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0U;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	2200      	movs	r2, #0
 800ef00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable MMC Error interrupts */
#if defined(SDIO_STA_STBITERR)
	__HAL_MMC_ENABLE_IT(hmmc, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
	__HAL_MMC_ENABLE_IT(hmmc, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f042 021a 	orr.w	r2, r2, #26
 800ef10:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */	

    /* Set the DMA transfer complete callback */
    hmmc->hdmatx->XferCpltCallback = MMC_DMATransmitCplt;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef16:	4a4e      	ldr	r2, [pc, #312]	@ (800f050 <HAL_MMC_WriteBlocks_DMA+0x1b8>)
 800ef18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hmmc->hdmatx->XferErrorCallback = MMC_DMAError;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef1e:	4a4d      	ldr	r2, [pc, #308]	@ (800f054 <HAL_MMC_WriteBlocks_DMA+0x1bc>)
 800ef20:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hmmc->hdmatx->XferAbortCallback = NULL;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef26:	2200      	movs	r2, #0
 800ef28:	651a      	str	r2, [r3, #80]	@ 0x50

    if ((hmmc->MmcCard.CardType) != MMC_HIGH_CAPACITY_CARD)
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	d002      	beq.n	800ef38 <HAL_MMC_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800ef32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef34:	025b      	lsls	r3, r3, #9
 800ef36:	62bb      	str	r3, [r7, #40]	@ 0x28
    }


    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	2b01      	cmp	r3, #1
 800ef3c:	d90a      	bls.n	800ef54 <HAL_MMC_WriteBlocks_DMA+0xbc>
    {
      hmmc->Context = (MMC_CONTEXT_WRITE_MULTIPLE_BLOCK | MMC_CONTEXT_DMA);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	22a0      	movs	r2, #160	@ 0xa0
 800ef42:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hmmc->Instance, add);
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f006 fb05 	bl	801555a <SDMMC_CmdWriteMultiBlock>
 800ef50:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ef52:	e009      	b.n	800ef68 <HAL_MMC_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hmmc->Context = (MMC_CONTEXT_WRITE_SINGLE_BLOCK | MMC_CONTEXT_DMA);
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	2290      	movs	r2, #144	@ 0x90
 800ef58:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hmmc->Instance, add);
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef60:	4618      	mov	r0, r3
 800ef62:	f006 fad8 	bl	8015516 <SDMMC_CmdWriteSingleBlock>
 800ef66:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_MMC_ERROR_NONE)
 800ef68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d017      	beq.n	800ef9e <HAL_MMC_WriteBlocks_DMA+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4a39      	ldr	r2, [pc, #228]	@ (800f058 <HAL_MMC_WriteBlocks_DMA+0x1c0>)
 800ef74:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_MMC_DISABLE_IT(hmmc, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_DATAEND));
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f422 728d 	bic.w	r2, r2, #282	@ 0x11a
 800ef84:	63da      	str	r2, [r3, #60]	@ 0x3c
      hmmc->ErrorCode |= errorstate;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef8c:	431a      	orrs	r2, r3
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	2201      	movs	r2, #1
 800ef96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	e054      	b.n	800f048 <HAL_MMC_WriteBlocks_DMA+0x1b0>
    }

    /* Enable SDIO DMA transfer */
    __HAL_MMC_DMA_ENABLE(hmmc);
 800ef9e:	4b2f      	ldr	r3, [pc, #188]	@ (800f05c <HAL_MMC_WriteBlocks_DMA+0x1c4>)
 800efa0:	2201      	movs	r2, #1
 800efa2:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hmmc->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efa8:	2240      	movs	r2, #64	@ 0x40
 800efaa:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hmmc->hdmatx->Instance->CR, DMA_SxCR_DIR, hmmc->hdmatx->Init.Direction);
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efbc:	689a      	ldr	r2, [r3, #8]
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	430a      	orrs	r2, r1
 800efc6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hmmc->hdmatx, (uint32_t)pData, (uint32_t)&hmmc->Instance->FIFO, (uint32_t)(MMC_BLOCKSIZE * NumberOfBlocks)/4) != HAL_OK)
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800efcc:	68b9      	ldr	r1, [r7, #8]
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	3380      	adds	r3, #128	@ 0x80
 800efd4:	461a      	mov	r2, r3
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	025b      	lsls	r3, r3, #9
 800efda:	089b      	lsrs	r3, r3, #2
 800efdc:	f7fe ff92 	bl	800df04 <HAL_DMA_Start_IT>
 800efe0:	4603      	mov	r3, r0
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d017      	beq.n	800f016 <HAL_MMC_WriteBlocks_DMA+0x17e>
    {
      __HAL_MMC_DISABLE_IT(hmmc, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_DATAEND));
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f422 728d 	bic.w	r2, r2, #282	@ 0x11a
 800eff4:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4a17      	ldr	r2, [pc, #92]	@ (800f058 <HAL_MMC_WriteBlocks_DMA+0x1c0>)
 800effc:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DMA;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f002:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2201      	movs	r2, #1
 800f00e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800f012:	2301      	movs	r3, #1
 800f014:	e018      	b.n	800f048 <HAL_MMC_WriteBlocks_DMA+0x1b0>
    }
    else
    {    
      /* Configure the MMC DPSM (Data Path State Machine) */ 
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f016:	f04f 33ff 	mov.w	r3, #4294967295
 800f01a:	613b      	str	r3, [r7, #16]
      config.DataLength    = MMC_BLOCKSIZE * NumberOfBlocks;
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	025b      	lsls	r3, r3, #9
 800f020:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800f022:	2390      	movs	r3, #144	@ 0x90
 800f024:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800f026:	2300      	movs	r3, #0
 800f028:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800f02a:	2300      	movs	r3, #0
 800f02c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800f02e:	2301      	movs	r3, #1
 800f030:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hmmc->Instance, &config);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f107 0210 	add.w	r2, r7, #16
 800f03a:	4611      	mov	r1, r2
 800f03c:	4618      	mov	r0, r3
 800f03e:	f006 f9d8 	bl	80153f2 <SDIO_ConfigData>

      return HAL_OK;
 800f042:	2300      	movs	r3, #0
 800f044:	e000      	b.n	800f048 <HAL_MMC_WriteBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800f046:	2302      	movs	r3, #2
  }
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3730      	adds	r7, #48	@ 0x30
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	0800fa25 	.word	0x0800fa25
 800f054:	0800fab9 	.word	0x0800fab9
 800f058:	004005ff 	.word	0x004005ff
 800f05c:	4225858c 	.word	0x4225858c

0800f060 <HAL_MMC_IRQHandler>:
  * @brief  This function handles MMC card interrupt request.
  * @param  hmmc: Pointer to MMC handle
  * @retval None
  */
void HAL_MMC_IRQHandler(MMC_HandleTypeDef *hmmc)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b084      	sub	sp, #16
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hmmc->Context;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f06c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & MMC_CONTEXT_IT) != 0U))
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f074:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d008      	beq.n	800f08e <HAL_MMC_IRQHandler+0x2e>
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f003 0308 	and.w	r3, r3, #8
 800f082:	2b00      	cmp	r3, #0
 800f084:	d003      	beq.n	800f08e <HAL_MMC_IRQHandler+0x2e>
  {
    MMC_Read_IT(hmmc);
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f001 f818 	bl	80100bc <MMC_Read_IT>
 800f08c:	e157      	b.n	800f33e <HAL_MMC_IRQHandler+0x2de>
  }

  else if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_DATAEND) != RESET)
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f098:	2b00      	cmp	r3, #0
 800f09a:	f000 808c 	beq.w	800f1b6 <HAL_MMC_IRQHandler+0x156>
  {
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_FLAG_DATAEND);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f0a6:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_MMC_DISABLE_IT(hmmc, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_MMC_DISABLE_IT(hmmc, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT |\
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f0ae:	687a      	ldr	r2, [r7, #4]
 800f0b0:	6812      	ldr	r2, [r2, #0]
 800f0b2:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800f0b6:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800f0ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
                               SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                               SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */
    
    hmmc->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f022 0201 	bic.w	r2, r2, #1
 800f0ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    if((context & MMC_CONTEXT_DMA) != 0U)
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d032      	beq.n	800f13c <HAL_MMC_IRQHandler+0xdc>
    {
      if((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	f003 0320 	and.w	r3, r3, #32
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d011      	beq.n	800f104 <HAL_MMC_IRQHandler+0xa4>
      {
        errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f006 fa5b 	bl	80155a0 <SDMMC_CmdStopTransfer>
 800f0ea:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_MMC_ERROR_NONE)
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d008      	beq.n	800f104 <HAL_MMC_IRQHandler+0xa4>
        {
          hmmc->ErrorCode |= errorstate;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	431a      	orrs	r2, r3
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
          hmmc->ErrorCallback(hmmc);
#else
          HAL_MMC_ErrorCallback(hmmc);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f7f9 fe4e 	bl	8008da0 <HAL_MMC_ErrorCallback>
#endif
        }
      }
      if(((context & MMC_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f003 0301 	and.w	r3, r3, #1
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	f040 8117 	bne.w	800f33e <HAL_MMC_IRQHandler+0x2de>
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f003 0302 	and.w	r3, r3, #2
 800f116:	2b00      	cmp	r3, #0
 800f118:	f040 8111 	bne.w	800f33e <HAL_MMC_IRQHandler+0x2de>
      {
        /* Disable the DMA transfer for transmit request by setting the DMAEN bit
        in the MMC DCTRL register */
        hmmc->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f022 0208 	bic.w	r2, r2, #8
 800f12a:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        hmmc->State = HAL_MMC_STATE_READY;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2201      	movs	r2, #1
 800f130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
        hmmc->TxCpltCallback(hmmc);
#else
        HAL_MMC_TxCpltCallback(hmmc);
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f7f9 fe1f 	bl	8008d78 <HAL_MMC_TxCpltCallback>

  else
  {
    /* Nothing to do */
  }
}
 800f13a:	e100      	b.n	800f33e <HAL_MMC_IRQHandler+0x2de>
    else if((context & MMC_CONTEXT_IT) != 0U)
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f003 0308 	and.w	r3, r3, #8
 800f142:	2b00      	cmp	r3, #0
 800f144:	f000 80fb 	beq.w	800f33e <HAL_MMC_IRQHandler+0x2de>
      if(((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f003 0302 	and.w	r3, r3, #2
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d104      	bne.n	800f15c <HAL_MMC_IRQHandler+0xfc>
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	f003 0320 	and.w	r3, r3, #32
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d011      	beq.n	800f180 <HAL_MMC_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	4618      	mov	r0, r3
 800f162:	f006 fa1d 	bl	80155a0 <SDMMC_CmdStopTransfer>
 800f166:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_MMC_ERROR_NONE)
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d008      	beq.n	800f180 <HAL_MMC_IRQHandler+0x120>
          hmmc->ErrorCode |= errorstate;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	431a      	orrs	r2, r3
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_MMC_ErrorCallback(hmmc);
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f7f9 fe10 	bl	8008da0 <HAL_MMC_ErrorCallback>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_DATA_FLAGS);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f240 523a 	movw	r2, #1338	@ 0x53a
 800f188:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2201      	movs	r2, #1
 800f18e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      if(((context & MMC_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f003 0301 	and.w	r3, r3, #1
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d104      	bne.n	800f1a6 <HAL_MMC_IRQHandler+0x146>
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f003 0302 	and.w	r3, r3, #2
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d003      	beq.n	800f1ae <HAL_MMC_IRQHandler+0x14e>
        HAL_MMC_RxCpltCallback(hmmc);
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f7f9 fdf0 	bl	8008d8c <HAL_MMC_RxCpltCallback>
 800f1ac:	e0c7      	b.n	800f33e <HAL_MMC_IRQHandler+0x2de>
        HAL_MMC_TxCpltCallback(hmmc);
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f7f9 fde2 	bl	8008d78 <HAL_MMC_TxCpltCallback>
}
 800f1b4:	e0c3      	b.n	800f33e <HAL_MMC_IRQHandler+0x2de>
  else if((__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & MMC_CONTEXT_IT) != 0U))
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d008      	beq.n	800f1d6 <HAL_MMC_IRQHandler+0x176>
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	f003 0308 	and.w	r3, r3, #8
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d003      	beq.n	800f1d6 <HAL_MMC_IRQHandler+0x176>
    MMC_Write_IT(hmmc);
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 ffc5 	bl	801015e <MMC_Write_IT>
 800f1d4:	e0b3      	b.n	800f33e <HAL_MMC_IRQHandler+0x2de>
  else if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1dc:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	f000 80ac 	beq.w	800f33e <HAL_MMC_IRQHandler+0x2de>
    if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_DCRCFAIL) != RESET)
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1ec:	f003 0302 	and.w	r3, r3, #2
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d005      	beq.n	800f200 <HAL_MMC_IRQHandler+0x1a0>
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1f8:	f043 0202 	orr.w	r2, r3, #2
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_DTIMEOUT) != RESET)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f206:	f003 0308 	and.w	r3, r3, #8
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d005      	beq.n	800f21a <HAL_MMC_IRQHandler+0x1ba>
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f212:	f043 0208 	orr.w	r2, r3, #8
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR) != RESET)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f220:	f003 0320 	and.w	r3, r3, #32
 800f224:	2b00      	cmp	r3, #0
 800f226:	d005      	beq.n	800f234 <HAL_MMC_IRQHandler+0x1d4>
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f22c:	f043 0220 	orr.w	r2, r3, #32
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_TXUNDERR) != RESET)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f23a:	f003 0310 	and.w	r3, r3, #16
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d005      	beq.n	800f24e <HAL_MMC_IRQHandler+0x1ee>
      hmmc->ErrorCode |= HAL_MMC_ERROR_TX_UNDERRUN;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f246:	f043 0210 	orr.w	r2, r3, #16
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_DATA_FLAGS);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	f240 523a 	movw	r2, #1338	@ 0x53a
 800f256:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_MMC_DISABLE_IT(hmmc, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800f266:	63da      	str	r2, [r3, #60]	@ 0x3c
    hmmc->ErrorCode |= SDMMC_CmdStopTransfer(hmmc->Instance);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	4618      	mov	r0, r3
 800f26e:	f006 f997 	bl	80155a0 <SDMMC_CmdStopTransfer>
 800f272:	4602      	mov	r2, r0
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f278:	431a      	orrs	r2, r3
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & MMC_CONTEXT_IT) != 0U)
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	f003 0308 	and.w	r3, r3, #8
 800f284:	2b00      	cmp	r3, #0
 800f286:	d007      	beq.n	800f298 <HAL_MMC_IRQHandler+0x238>
      hmmc->State = HAL_MMC_STATE_READY;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2201      	movs	r2, #1
 800f28c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      HAL_MMC_ErrorCallback(hmmc);
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f7f9 fd85 	bl	8008da0 <HAL_MMC_ErrorCallback>
}
 800f296:	e052      	b.n	800f33e <HAL_MMC_IRQHandler+0x2de>
    else if((context & MMC_CONTEXT_DMA) != 0U)
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d04d      	beq.n	800f33e <HAL_MMC_IRQHandler+0x2de>
      if(((context & MMC_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	f003 0310 	and.w	r3, r3, #16
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d104      	bne.n	800f2b6 <HAL_MMC_IRQHandler+0x256>
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	f003 0320 	and.w	r3, r3, #32
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d015      	beq.n	800f2e2 <HAL_MMC_IRQHandler+0x282>
        if(hmmc->hdmatx != NULL)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d03c      	beq.n	800f338 <HAL_MMC_IRQHandler+0x2d8>
          hmmc->hdmatx->XferAbortCallback = MMC_DMATxAbort;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2c2:	4a21      	ldr	r2, [pc, #132]	@ (800f348 <HAL_MMC_IRQHandler+0x2e8>)
 800f2c4:	651a      	str	r2, [r3, #80]	@ 0x50
          if(HAL_DMA_Abort_IT(hmmc->hdmatx) != HAL_OK)
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7fe fee2 	bl	800e094 <HAL_DMA_Abort_IT>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d030      	beq.n	800f338 <HAL_MMC_IRQHandler+0x2d8>
            MMC_DMATxAbort(hmmc->hdmatx);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f000 fc3c 	bl	800fb58 <MMC_DMATxAbort>
        if(hmmc->hdmatx != NULL)
 800f2e0:	e02a      	b.n	800f338 <HAL_MMC_IRQHandler+0x2d8>
      else if(((context & MMC_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	f003 0301 	and.w	r3, r3, #1
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d104      	bne.n	800f2f6 <HAL_MMC_IRQHandler+0x296>
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f003 0302 	and.w	r3, r3, #2
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d015      	beq.n	800f322 <HAL_MMC_IRQHandler+0x2c2>
        if(hmmc->hdmarx != NULL)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d01e      	beq.n	800f33c <HAL_MMC_IRQHandler+0x2dc>
          hmmc->hdmarx->XferAbortCallback = MMC_DMARxAbort;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f302:	4a12      	ldr	r2, [pc, #72]	@ (800f34c <HAL_MMC_IRQHandler+0x2ec>)
 800f304:	651a      	str	r2, [r3, #80]	@ 0x50
          if(HAL_DMA_Abort_IT(hmmc->hdmarx) != HAL_OK)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7fe fec2 	bl	800e094 <HAL_DMA_Abort_IT>
 800f310:	4603      	mov	r3, r0
 800f312:	2b00      	cmp	r3, #0
 800f314:	d012      	beq.n	800f33c <HAL_MMC_IRQHandler+0x2dc>
            MMC_DMARxAbort(hmmc->hdmarx);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f31a:	4618      	mov	r0, r3
 800f31c:	f000 fc59 	bl	800fbd2 <MMC_DMARxAbort>
        if(hmmc->hdmarx != NULL)
 800f320:	e00c      	b.n	800f33c <HAL_MMC_IRQHandler+0x2dc>
        hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2200      	movs	r2, #0
 800f326:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->State = HAL_MMC_STATE_READY;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2201      	movs	r2, #1
 800f32c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_MMC_AbortCallback(hmmc);
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f000 f80d 	bl	800f350 <HAL_MMC_AbortCallback>
}
 800f336:	e002      	b.n	800f33e <HAL_MMC_IRQHandler+0x2de>
        if(hmmc->hdmatx != NULL)
 800f338:	bf00      	nop
 800f33a:	e000      	b.n	800f33e <HAL_MMC_IRQHandler+0x2de>
        if(hmmc->hdmarx != NULL)
 800f33c:	bf00      	nop
}
 800f33e:	bf00      	nop
 800f340:	3710      	adds	r7, #16
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
 800f346:	bf00      	nop
 800f348:	0800fb59 	.word	0x0800fb59
 800f34c:	0800fbd3 	.word	0x0800fbd3

0800f350 <HAL_MMC_AbortCallback>:
  * @brief MMC Abort callbacks
  * @param hmmc: Pointer MMC handle
  * @retval None
  */
__weak void HAL_MMC_AbortCallback(MMC_HandleTypeDef *hmmc)
{
 800f350:	b480      	push	{r7}
 800f352:	b083      	sub	sp, #12
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMC_AbortCallback can be implemented in the user file
   */
}
 800f358:	bf00      	nop
 800f35a:	370c      	adds	r7, #12
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr

0800f364 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b084      	sub	sp, #16
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 800f36e:	2300      	movs	r3, #0
 800f370:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f376:	0f9b      	lsrs	r3, r3, #30
 800f378:	b2da      	uxtb	r2, r3
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f382:	0e9b      	lsrs	r3, r3, #26
 800f384:	b2db      	uxtb	r3, r3
 800f386:	f003 030f 	and.w	r3, r3, #15
 800f38a:	b2da      	uxtb	r2, r3
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f394:	0e1b      	lsrs	r3, r3, #24
 800f396:	b2db      	uxtb	r3, r3
 800f398:	f003 0303 	and.w	r3, r3, #3
 800f39c:	b2da      	uxtb	r2, r3
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f3a6:	0c1b      	lsrs	r3, r3, #16
 800f3a8:	b2da      	uxtb	r2, r3
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f3b2:	0a1b      	lsrs	r3, r3, #8
 800f3b4:	b2da      	uxtb	r2, r3
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f3be:	b2da      	uxtb	r2, r3
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f3c8:	0d1b      	lsrs	r3, r3, #20
 800f3ca:	b29a      	uxth	r2, r3
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f3d4:	0c1b      	lsrs	r3, r3, #16
 800f3d6:	b2db      	uxtb	r3, r3
 800f3d8:	f003 030f 	and.w	r3, r3, #15
 800f3dc:	b2da      	uxtb	r2, r3
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f3e6:	0bdb      	lsrs	r3, r3, #15
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	f003 0301 	and.w	r3, r3, #1
 800f3ee:	b2da      	uxtb	r2, r3
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f3f8:	0b9b      	lsrs	r3, r3, #14
 800f3fa:	b2db      	uxtb	r3, r3
 800f3fc:	f003 0301 	and.w	r3, r3, #1
 800f400:	b2da      	uxtb	r2, r3
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f40a:	0b5b      	lsrs	r3, r3, #13
 800f40c:	b2db      	uxtb	r3, r3
 800f40e:	f003 0301 	and.w	r3, r3, #1
 800f412:	b2da      	uxtb	r2, r3
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f41c:	0b1b      	lsrs	r3, r3, #12
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	f003 0301 	and.w	r3, r3, #1
 800f424:	b2da      	uxtb	r2, r3
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	2200      	movs	r2, #0
 800f42e:	735a      	strb	r2, [r3, #13]

  pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f434:	009a      	lsls	r2, r3, #2
 800f436:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800f43a:	4013      	ands	r3, r2
 800f43c:	687a      	ldr	r2, [r7, #4]
 800f43e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800f440:	0f92      	lsrs	r2, r2, #30
 800f442:	431a      	orrs	r2, r3
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	611a      	str	r2, [r3, #16]

  pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f44c:	0edb      	lsrs	r3, r3, #27
 800f44e:	b2db      	uxtb	r3, r3
 800f450:	f003 0307 	and.w	r3, r3, #7
 800f454:	b2da      	uxtb	r2, r3
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	751a      	strb	r2, [r3, #20]

  pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f45e:	0e1b      	lsrs	r3, r3, #24
 800f460:	b2db      	uxtb	r3, r3
 800f462:	f003 0307 	and.w	r3, r3, #7
 800f466:	b2da      	uxtb	r2, r3
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	755a      	strb	r2, [r3, #21]

  pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f470:	0d5b      	lsrs	r3, r3, #21
 800f472:	b2db      	uxtb	r3, r3
 800f474:	f003 0307 	and.w	r3, r3, #7
 800f478:	b2da      	uxtb	r2, r3
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	759a      	strb	r2, [r3, #22]

  pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f482:	0c9b      	lsrs	r3, r3, #18
 800f484:	b2db      	uxtb	r3, r3
 800f486:	f003 0307 	and.w	r3, r3, #7
 800f48a:	b2da      	uxtb	r2, r3
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	75da      	strb	r2, [r3, #23]

  pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f494:	0bdb      	lsrs	r3, r3, #15
 800f496:	b2db      	uxtb	r3, r3
 800f498:	f003 0307 	and.w	r3, r3, #7
 800f49c:	b2da      	uxtb	r2, r3
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	761a      	strb	r2, [r3, #24]

  if(MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 800f4a2:	f107 010c 	add.w	r1, r7, #12
 800f4a6:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 800f4aa:	22d4      	movs	r2, #212	@ 0xd4
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f000 fd57 	bl	800ff60 <MMC_ReadExtCSD>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d001      	beq.n	800f4bc <HAL_MMC_GetCardCSD+0x158>
  {
    return HAL_ERROR;
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	e0f0      	b.n	800f69e <HAL_MMC_GetCardCSD+0x33a>
  }

  if(hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d12a      	bne.n	800f51a <HAL_MMC_GetCardCSD+0x1b6>
  {
    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	691b      	ldr	r3, [r3, #16]
 800f4c8:	1c5a      	adds	r2, r3, #1
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	7e1b      	ldrb	r3, [r3, #24]
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	f003 0307 	and.w	r3, r3, #7
 800f4d8:	3302      	adds	r3, #2
 800f4da:	2201      	movs	r2, #1
 800f4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f4e4:	fb03 f202 	mul.w	r2, r3, r2
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	7a1b      	ldrb	r3, [r3, #8]
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	f003 030f 	and.w	r3, r3, #15
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	409a      	lsls	r2, r3
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800f506:	0a52      	lsrs	r2, r2, #9
 800f508:	fb03 f202 	mul.w	r2, r3, r2
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->MmcCard.LogBlockSize = 512U;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f516:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f518:	e023      	b.n	800f562 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if(hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d10f      	bne.n	800f542 <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 800f522:	68fa      	ldr	r2, [r7, #12]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->MmcCard.BlockSize = 512U;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f536:	655a      	str	r2, [r3, #84]	@ 0x54
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f540:	e00f      	b.n	800f562 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	4a58      	ldr	r2, [pc, #352]	@ (800f6a8 <HAL_MMC_GetCardCSD+0x344>)
 800f548:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f54e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2201      	movs	r2, #1
 800f55a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800f55e:	2301      	movs	r3, #1
 800f560:	e09d      	b.n	800f69e <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f566:	0b9b      	lsrs	r3, r3, #14
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	f003 0301 	and.w	r3, r3, #1
 800f56e:	b2da      	uxtb	r2, r3
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f578:	09db      	lsrs	r3, r3, #7
 800f57a:	b2db      	uxtb	r3, r3
 800f57c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f580:	b2da      	uxtb	r2, r3
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f58a:	b2db      	uxtb	r3, r3
 800f58c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f590:	b2da      	uxtb	r2, r3
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f59a:	0fdb      	lsrs	r3, r3, #31
 800f59c:	b2da      	uxtb	r2, r3
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5a6:	0f5b      	lsrs	r3, r3, #29
 800f5a8:	b2db      	uxtb	r3, r3
 800f5aa:	f003 0303 	and.w	r3, r3, #3
 800f5ae:	b2da      	uxtb	r2, r3
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5b8:	0e9b      	lsrs	r3, r3, #26
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	f003 0307 	and.w	r3, r3, #7
 800f5c0:	b2da      	uxtb	r2, r3
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5ca:	0d9b      	lsrs	r3, r3, #22
 800f5cc:	b2db      	uxtb	r3, r3
 800f5ce:	f003 030f 	and.w	r3, r3, #15
 800f5d2:	b2da      	uxtb	r2, r3
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5dc:	0d5b      	lsrs	r3, r3, #21
 800f5de:	b2db      	uxtb	r3, r3
 800f5e0:	f003 0301 	and.w	r3, r3, #1
 800f5e4:	b2da      	uxtb	r2, r3
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5f8:	0c1b      	lsrs	r3, r3, #16
 800f5fa:	b2db      	uxtb	r3, r3
 800f5fc:	f003 0301 	and.w	r3, r3, #1
 800f600:	b2da      	uxtb	r2, r3
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f60c:	0bdb      	lsrs	r3, r3, #15
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	f003 0301 	and.w	r3, r3, #1
 800f614:	b2da      	uxtb	r2, r3
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f620:	0b9b      	lsrs	r3, r3, #14
 800f622:	b2db      	uxtb	r3, r3
 800f624:	f003 0301 	and.w	r3, r3, #1
 800f628:	b2da      	uxtb	r2, r3
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f634:	0b5b      	lsrs	r3, r3, #13
 800f636:	b2db      	uxtb	r3, r3
 800f638:	f003 0301 	and.w	r3, r3, #1
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f648:	0b1b      	lsrs	r3, r3, #12
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	f003 0301 	and.w	r3, r3, #1
 800f650:	b2da      	uxtb	r2, r3
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f65c:	0a9b      	lsrs	r3, r3, #10
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	f003 0303 	and.w	r3, r3, #3
 800f664:	b2da      	uxtb	r2, r3
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f670:	0a1b      	lsrs	r3, r3, #8
 800f672:	b2db      	uxtb	r3, r3
 800f674:	f003 0303 	and.w	r3, r3, #3
 800f678:	b2da      	uxtb	r2, r3
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f684:	085b      	lsrs	r3, r3, #1
 800f686:	b2db      	uxtb	r3, r3
 800f688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f68c:	b2da      	uxtb	r2, r3
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	2201      	movs	r2, #1
 800f698:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800f69c:	2300      	movs	r3, #0
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3710      	adds	r7, #16
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	004005ff 	.word	0x004005ff

0800f6ac <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b08e      	sub	sp, #56	@ 0x38
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	60f8      	str	r0, [r7, #12]
 800f6b4:	60b9      	str	r1, [r7, #8]
 800f6b6:	607a      	str	r2, [r7, #4]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f6b8:	f7fc fe42 	bl	800c340 <HAL_GetTick>
 800f6bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if(NULL == pExtCSD)
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d107      	bne.n	800f6d4 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6c8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	e0cf      	b.n	800f874 <HAL_MMC_GetCardExtCSD+0x1c8>
  }

  if(hmmc->State == HAL_MMC_STATE_READY)
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f6da:	b2db      	uxtb	r3, r3
 800f6dc:	2b01      	cmp	r3, #1
 800f6de:	f040 80c8 	bne.w	800f872 <HAL_MMC_GetCardExtCSD+0x1c6>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	639a      	str	r2, [r3, #56]	@ 0x38

    hmmc->State = HAL_MMC_STATE_BUSY;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	2203      	movs	r2, #3
 800f6ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800f700:	613b      	str	r3, [r7, #16]
    config.DataLength    = 512;
 800f702:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f706:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800f708:	2390      	movs	r3, #144	@ 0x90
 800f70a:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800f70c:	2302      	movs	r3, #2
 800f70e:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800f710:	2300      	movs	r3, #0
 800f712:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800f714:	2301      	movs	r3, #1
 800f716:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDIO_ConfigData(hmmc->Instance, &config);
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	f107 0210 	add.w	r2, r7, #16
 800f720:	4611      	mov	r1, r2
 800f722:	4618      	mov	r0, r3
 800f724:	f005 fe65 	bl	80153f2 <SDIO_ConfigData>

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	2100      	movs	r1, #0
 800f72e:	4618      	mov	r0, r3
 800f730:	f006 f85d 	bl	80157ee <SDMMC_CmdSendEXTCSD>
 800f734:	62b8      	str	r0, [r7, #40]	@ 0x28
    if(errorstate != HAL_MMC_ERROR_NONE)
 800f736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d045      	beq.n	800f7c8 <HAL_MMC_GetCardExtCSD+0x11c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	4a4e      	ldr	r2, [pc, #312]	@ (800f87c <HAL_MMC_GetCardExtCSD+0x1d0>)
 800f742:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f74a:	431a      	orrs	r2, r3
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2201      	movs	r2, #1
 800f754:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800f758:	2301      	movs	r3, #1
 800f75a:	e08b      	b.n	800f874 <HAL_MMC_GetCardExtCSD+0x1c8>
    }

    /* Poll on SDMMC flags */
    while(!__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
    {
      if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXFIFOHF))
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f766:	2b00      	cmp	r3, #0
 800f768:	d013      	beq.n	800f792 <HAL_MMC_GetCardExtCSD+0xe6>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800f76a:	2300      	movs	r3, #0
 800f76c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f76e:	e00d      	b.n	800f78c <HAL_MMC_GetCardExtCSD+0xe0>
        {
          *tmp_buf = SDIO_ReadFIFO(hmmc->Instance);
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4618      	mov	r0, r3
 800f776:	f005 fdaa 	bl	80152ce <SDIO_ReadFIFO>
 800f77a:	4602      	mov	r2, r0
 800f77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f77e:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 800f780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f782:	3304      	adds	r3, #4
 800f784:	633b      	str	r3, [r7, #48]	@ 0x30
        for(count = 0U; count < 8U; count++)
 800f786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f788:	3301      	adds	r3, #1
 800f78a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f78c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f78e:	2b07      	cmp	r3, #7
 800f790:	d9ee      	bls.n	800f770 <HAL_MMC_GetCardExtCSD+0xc4>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800f792:	f7fc fdd5 	bl	800c340 <HAL_GetTick>
 800f796:	4602      	mov	r2, r0
 800f798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f79a:	1ad3      	subs	r3, r2, r3
 800f79c:	687a      	ldr	r2, [r7, #4]
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d902      	bls.n	800f7a8 <HAL_MMC_GetCardExtCSD+0xfc>
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d10f      	bne.n	800f7c8 <HAL_MMC_GetCardExtCSD+0x11c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	4a33      	ldr	r2, [pc, #204]	@ (800f87c <HAL_MMC_GetCardExtCSD+0x1d0>)
 800f7ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->State= HAL_MMC_STATE_READY;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	2201      	movs	r2, #1
 800f7c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return HAL_TIMEOUT;
 800f7c4:	2303      	movs	r3, #3
 800f7c6:	e055      	b.n	800f874 <HAL_MMC_GetCardExtCSD+0x1c8>
    while(!__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7ce:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d0c2      	beq.n	800f75c <HAL_MMC_GetCardExtCSD+0xb0>
      }
    }

    /* Get error state */
    if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_DTIMEOUT))
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7dc:	f003 0308 	and.w	r3, r3, #8
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d00f      	beq.n	800f804 <HAL_MMC_GetCardExtCSD+0x158>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	4a24      	ldr	r2, [pc, #144]	@ (800f87c <HAL_MMC_GetCardExtCSD+0x1d0>)
 800f7ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7f0:	f043 0208 	orr.w	r2, r3, #8
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2201      	movs	r2, #1
 800f7fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800f800:	2301      	movs	r3, #1
 800f802:	e037      	b.n	800f874 <HAL_MMC_GetCardExtCSD+0x1c8>
    }
    else if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_DCRCFAIL))
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f80a:	f003 0302 	and.w	r3, r3, #2
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d00f      	beq.n	800f832 <HAL_MMC_GetCardExtCSD+0x186>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	4a19      	ldr	r2, [pc, #100]	@ (800f87c <HAL_MMC_GetCardExtCSD+0x1d0>)
 800f818:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f81e:	f043 0202 	orr.w	r2, r3, #2
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2201      	movs	r2, #1
 800f82a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800f82e:	2301      	movs	r3, #1
 800f830:	e020      	b.n	800f874 <HAL_MMC_GetCardExtCSD+0x1c8>
    }
    else if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR))
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f838:	f003 0320 	and.w	r3, r3, #32
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d00f      	beq.n	800f860 <HAL_MMC_GetCardExtCSD+0x1b4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	4a0d      	ldr	r2, [pc, #52]	@ (800f87c <HAL_MMC_GetCardExtCSD+0x1d0>)
 800f846:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f84c:	f043 0220 	orr.w	r2, r3, #32
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	2201      	movs	r2, #1
 800f858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800f85c:	2301      	movs	r3, #1
 800f85e:	e009      	b.n	800f874 <HAL_MMC_GetCardExtCSD+0x1c8>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_DATA_FLAGS);
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	f240 523a 	movw	r2, #1338	@ 0x53a
 800f868:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	2201      	movs	r2, #1
 800f86e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800f872:	2300      	movs	r3, #0
}
 800f874:	4618      	mov	r0, r3
 800f876:	3738      	adds	r7, #56	@ 0x38
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}
 800f87c:	004005ff 	.word	0x004005ff

0800f880 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 800f880:	b5b0      	push	{r4, r5, r7, lr}
 800f882:	b090      	sub	sp, #64	@ 0x40
 800f884:	af04      	add	r7, sp, #16
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 800f88a:	2300      	movs	r3, #0
 800f88c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2203      	movs	r2, #3
 800f892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  errorstate = MMC_PwrClassUpdate(hmmc, WideMode);
 800f896:	6839      	ldr	r1, [r7, #0]
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f000 fcb5 	bl	8010208 <MMC_PwrClassUpdate>
 800f89e:	62b8      	str	r0, [r7, #40]	@ 0x28

  if(errorstate == HAL_MMC_ERROR_NONE)
 800f8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d17d      	bne.n	800f9a2 <HAL_MMC_ConfigWideBusOperation+0x122>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f8ac:	d107      	bne.n	800f8be <HAL_MMC_ConfigWideBusOperation+0x3e>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	4948      	ldr	r1, [pc, #288]	@ (800f9d4 <HAL_MMC_ConfigWideBusOperation+0x154>)
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f005 ff78 	bl	80157aa <SDMMC_CmdSwitch>
 800f8ba:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f8bc:	e019      	b.n	800f8f2 <HAL_MMC_ConfigWideBusOperation+0x72>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f8c4:	d107      	bne.n	800f8d6 <HAL_MMC_ConfigWideBusOperation+0x56>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	4943      	ldr	r1, [pc, #268]	@ (800f9d8 <HAL_MMC_ConfigWideBusOperation+0x158>)
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f005 ff6c 	bl	80157aa <SDMMC_CmdSwitch>
 800f8d2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f8d4:	e00d      	b.n	800f8f2 <HAL_MMC_ConfigWideBusOperation+0x72>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d107      	bne.n	800f8ec <HAL_MMC_ConfigWideBusOperation+0x6c>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	493e      	ldr	r1, [pc, #248]	@ (800f9dc <HAL_MMC_ConfigWideBusOperation+0x15c>)
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f005 ff61 	bl	80157aa <SDMMC_CmdSwitch>
 800f8e8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f8ea:	e002      	b.n	800f8f2 <HAL_MMC_ConfigWideBusOperation+0x72>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 800f8ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f8f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if(errorstate == HAL_MMC_ERROR_NONE)
 800f8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d154      	bne.n	800f9a2 <HAL_MMC_ConfigWideBusOperation+0x122>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 800f8f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f8fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f906:	041b      	lsls	r3, r3, #16
 800f908:	4619      	mov	r1, r3
 800f90a:	4610      	mov	r0, r2
 800f90c:	f005 ff0c 	bl	8015728 <SDMMC_CmdSendStatus>
 800f910:	62b8      	str	r0, [r7, #40]	@ 0x28
        if(errorstate != HAL_MMC_ERROR_NONE)
 800f912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f914:	2b00      	cmp	r3, #0
 800f916:	d112      	bne.n	800f93e <HAL_MMC_ConfigWideBusOperation+0xbe>
        {
          break;
        }
        
        /* Get command response */
        response = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2100      	movs	r1, #0
 800f91e:	4618      	mov	r0, r3
 800f920:	f005 fd54 	bl	80153cc <SDIO_GetResponse>
 800f924:	6278      	str	r0, [r7, #36]	@ 0x24
        count--;
 800f926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f928:	3b01      	subs	r3, #1
 800f92a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }while(((response & 0x100U) == 0U) && (count != 0U));
 800f92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f92e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f932:	2b00      	cmp	r3, #0
 800f934:	d104      	bne.n	800f940 <HAL_MMC_ConfigWideBusOperation+0xc0>
 800f936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d1e0      	bne.n	800f8fe <HAL_MMC_ConfigWideBusOperation+0x7e>
 800f93c:	e000      	b.n	800f940 <HAL_MMC_ConfigWideBusOperation+0xc0>
          break;
 800f93e:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 800f940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f942:	2b00      	cmp	r3, #0
 800f944:	d027      	beq.n	800f996 <HAL_MMC_ConfigWideBusOperation+0x116>
 800f946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d124      	bne.n	800f996 <HAL_MMC_ConfigWideBusOperation+0x116>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 800f94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f94e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f952:	2b00      	cmp	r3, #0
 800f954:	d003      	beq.n	800f95e <HAL_MMC_ConfigWideBusOperation+0xde>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f956:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800f95a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((response & 0x80U) != 0U)
 800f95c:	e021      	b.n	800f9a2 <HAL_MMC_ConfigWideBusOperation+0x122>
        }
        else
        {
          /* Configure the SDIO peripheral */
          Init = hmmc->Init;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f107 040c 	add.w	r4, r7, #12
 800f964:	1d1d      	adds	r5, r3, #4
 800f966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f96a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f96e:	e884 0003 	stmia.w	r4, {r0, r1}
          Init.BusWide = WideMode;
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	61bb      	str	r3, [r7, #24]
          (void)SDIO_Init(hmmc->Instance, Init);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681d      	ldr	r5, [r3, #0]
 800f97a:	466c      	mov	r4, sp
 800f97c:	f107 0318 	add.w	r3, r7, #24
 800f980:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f984:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f988:	f107 030c 	add.w	r3, r7, #12
 800f98c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f98e:	4628      	mov	r0, r5
 800f990:	f005 fc72 	bl	8015278 <SDIO_Init>
        if ((response & 0x80U) != 0U)
 800f994:	e005      	b.n	800f9a2 <HAL_MMC_ConfigWideBusOperation+0x122>
        }
      }
      else if (count == 0U)
 800f996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d102      	bne.n	800f9a2 <HAL_MMC_ConfigWideBusOperation+0x122>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 800f99c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f9a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(errorstate != HAL_MMC_ERROR_NONE)
 800f9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d00b      	beq.n	800f9c8 <HAL_MMC_ConfigWideBusOperation+0x148>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	4a0a      	ldr	r2, [pc, #40]	@ (800f9e0 <HAL_MMC_ConfigWideBusOperation+0x160>)
 800f9b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9be:	431a      	orrs	r2, r3
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	e000      	b.n	800f9ca <HAL_MMC_ConfigWideBusOperation+0x14a>
  }

  return HAL_OK;
 800f9c8:	2300      	movs	r3, #0
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3730      	adds	r7, #48	@ 0x30
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bdb0      	pop	{r4, r5, r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	03b70200 	.word	0x03b70200
 800f9d8:	03b70100 	.word	0x03b70100
 800f9dc:	03b70000 	.word	0x03b70000
 800f9e0:	004005ff 	.word	0x004005ff

0800f9e4 <HAL_MMC_GetCardState>:
  * @brief  Gets the current mmc card data state.
  * @param  hmmc: pointer to MMC handle
  * @retval Card state
  */
HAL_MMC_CardStateTypeDef HAL_MMC_GetCardState(MMC_HandleTypeDef *hmmc)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b086      	sub	sp, #24
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0U;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	60fb      	str	r3, [r7, #12]

  errorstate = MMC_SendStatus(hmmc, &resp1);
 800f9f0:	f107 030c 	add.w	r3, r7, #12
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f000 fa89 	bl	800ff0e <MMC_SendStatus>
 800f9fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_MMC_ERROR_NONE)
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d005      	beq.n	800fa10 <HAL_MMC_GetCardState+0x2c>
  {
    hmmc->ErrorCode |= errorstate;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	431a      	orrs	r2, r3
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	0a5b      	lsrs	r3, r3, #9
 800fa14:	f003 030f 	and.w	r3, r3, #15
 800fa18:	613b      	str	r3, [r7, #16]

  return (HAL_MMC_CardStateTypeDef)cardstate;
 800fa1a:	693b      	ldr	r3, [r7, #16]
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3718      	adds	r7, #24
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <MMC_DMATransmitCplt>:
  * @brief  DMA MMC transmit process complete callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void MMC_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800fa24:	b480      	push	{r7}
 800fa26:	b085      	sub	sp, #20
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  MMC_HandleTypeDef* hmmc = (MMC_HandleTypeDef* )(hdma->Parent);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa30:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_MMC_ENABLE_IT(hmmc, (SDIO_IT_DATAEND));
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800fa40:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800fa42:	bf00      	nop
 800fa44:	3714      	adds	r7, #20
 800fa46:	46bd      	mov	sp, r7
 800fa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4c:	4770      	bx	lr

0800fa4e <MMC_DMAReceiveCplt>:
  * @brief  DMA MMC receive process complete callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void MMC_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800fa4e:	b580      	push	{r7, lr}
 800fa50:	b084      	sub	sp, #16
 800fa52:	af00      	add	r7, sp, #0
 800fa54:	6078      	str	r0, [r7, #4]
  MMC_HandleTypeDef* hmmc = (MMC_HandleTypeDef* )(hdma->Parent);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa5a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;
  
  /* Send stop command in multiblock write */
  if(hmmc->Context == (MMC_CONTEXT_READ_MULTIPLE_BLOCK | MMC_CONTEXT_DMA))
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa60:	2b82      	cmp	r3, #130	@ 0x82
 800fa62:	d111      	bne.n	800fa88 <MMC_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f005 fd99 	bl	80155a0 <SDMMC_CmdStopTransfer>
 800fa6e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_MMC_ERROR_NONE)
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d008      	beq.n	800fa88 <MMC_DMAReceiveCplt+0x3a>
    {
      hmmc->ErrorCode |= errorstate;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	431a      	orrs	r2, r3
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
      hmmc->ErrorCallback(hmmc);
#else
      HAL_MMC_ErrorCallback(hmmc);
 800fa82:	68f8      	ldr	r0, [r7, #12]
 800fa84:	f7f9 f98c 	bl	8008da0 <HAL_MMC_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the MMC DCTRL register */
  hmmc->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f022 0208 	bic.w	r2, r2, #8
 800fa96:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_DATA_FLAGS);
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f240 523a 	movw	r2, #1338	@ 0x53a
 800faa0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  hmmc->State = HAL_MMC_STATE_READY;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	2201      	movs	r2, #1
 800faa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
  hmmc->RxCpltCallback(hmmc);
#else
  HAL_MMC_RxCpltCallback(hmmc);
 800faaa:	68f8      	ldr	r0, [r7, #12]
 800faac:	f7f9 f96e 	bl	8008d8c <HAL_MMC_RxCpltCallback>
#endif
}
 800fab0:	bf00      	nop
 800fab2:	3710      	adds	r7, #16
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <MMC_DMAError>:
  * @brief  DMA MMC communication error callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void MMC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b086      	sub	sp, #24
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  MMC_HandleTypeDef* hmmc = (MMC_HandleTypeDef* )(hdma->Parent);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fac4:	617b      	str	r3, [r7, #20]
  HAL_MMC_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f7fe fc90 	bl	800e3ec <HAL_DMA_GetError>
 800facc:	4603      	mov	r3, r0
 800face:	2b02      	cmp	r3, #2
 800fad0:	d03b      	beq.n	800fb4a <MMC_DMAError+0x92>
  {
    RxErrorCode = hmmc->hdmarx->ErrorCode;
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fad8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hmmc->hdmatx->ErrorCode;  
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fae0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	2b01      	cmp	r3, #1
 800fae6:	d002      	beq.n	800faee <MMC_DMAError+0x36>
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2b01      	cmp	r3, #1
 800faec:	d12a      	bne.n	800fb44 <MMC_DMAError+0x8c>
    {
      /* Clear All flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	4a18      	ldr	r2, [pc, #96]	@ (800fb54 <MMC_DMAError+0x9c>)
 800faf4:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Disable All interrupts */
      __HAL_MMC_DISABLE_IT(hmmc, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800fb04:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
      
      hmmc->ErrorCode |= HAL_MMC_ERROR_DMA;
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb0a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_MMC_GetCardState(hmmc);
 800fb12:	6978      	ldr	r0, [r7, #20]
 800fb14:	f7ff ff66 	bl	800f9e4 <HAL_MMC_GetCardState>
 800fb18:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_MMC_CARD_RECEIVING) || (CardState == HAL_MMC_CARD_SENDING))
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	2b06      	cmp	r3, #6
 800fb1e:	d002      	beq.n	800fb26 <MMC_DMAError+0x6e>
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	2b05      	cmp	r3, #5
 800fb24:	d10a      	bne.n	800fb3c <MMC_DMAError+0x84>
      {
        hmmc->ErrorCode |= SDMMC_CmdStopTransfer(hmmc->Instance);
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f005 fd38 	bl	80155a0 <SDMMC_CmdStopTransfer>
 800fb30:	4602      	mov	r2, r0
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb36:	431a      	orrs	r2, r3
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	639a      	str	r2, [r3, #56]	@ 0x38
      }
      
      hmmc->State= HAL_MMC_STATE_READY;
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	2201      	movs	r2, #1
 800fb40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
    
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
    hmmc->ErrorCallback(hmmc);
#else
    HAL_MMC_ErrorCallback(hmmc);
 800fb44:	6978      	ldr	r0, [r7, #20]
 800fb46:	f7f9 f92b 	bl	8008da0 <HAL_MMC_ErrorCallback>
#endif
  }
}
 800fb4a:	bf00      	nop
 800fb4c:	3718      	adds	r7, #24
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}
 800fb52:	bf00      	nop
 800fb54:	004005ff 	.word	0x004005ff

0800fb58 <MMC_DMATxAbort>:
  * @brief  DMA MMC Tx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void MMC_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  MMC_HandleTypeDef* hmmc = (MMC_HandleTypeDef* )(hdma->Parent);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb64:	60fb      	str	r3, [r7, #12]
  HAL_MMC_CardStateTypeDef CardState;
  
  if(hmmc->hdmatx != NULL)
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d002      	beq.n	800fb74 <MMC_DMATxAbort+0x1c>
  {
    hmmc->hdmatx = NULL;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2200      	movs	r2, #0
 800fb72:	641a      	str	r2, [r3, #64]	@ 0x40
  }
  
  /* All DMA channels are aborted */
  if(hmmc->hdmarx == NULL)
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d126      	bne.n	800fbca <MMC_DMATxAbort+0x72>
  {
    CardState = HAL_MMC_GetCardState(hmmc);
 800fb7c:	68f8      	ldr	r0, [r7, #12]
 800fb7e:	f7ff ff31 	bl	800f9e4 <HAL_MMC_GetCardState>
 800fb82:	60b8      	str	r0, [r7, #8]
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2200      	movs	r2, #0
 800fb88:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2201      	movs	r2, #1
 800fb8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    if((CardState == HAL_MMC_CARD_RECEIVING) || (CardState == HAL_MMC_CARD_SENDING))
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	2b06      	cmp	r3, #6
 800fb96:	d002      	beq.n	800fb9e <MMC_DMATxAbort+0x46>
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	2b05      	cmp	r3, #5
 800fb9c:	d115      	bne.n	800fbca <MMC_DMATxAbort+0x72>
    {
      hmmc->ErrorCode |= SDMMC_CmdStopTransfer(hmmc->Instance);
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	4618      	mov	r0, r3
 800fba4:	f005 fcfc 	bl	80155a0 <SDMMC_CmdStopTransfer>
 800fba8:	4602      	mov	r2, r0
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbae:	431a      	orrs	r2, r3
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	639a      	str	r2, [r3, #56]	@ 0x38
      
      if(hmmc->ErrorCode != HAL_MMC_ERROR_NONE)
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d003      	beq.n	800fbc4 <MMC_DMATxAbort+0x6c>
      {
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
        hmmc->AbortCpltCallback(hmmc);
#else
        HAL_MMC_AbortCallback(hmmc);
 800fbbc:	68f8      	ldr	r0, [r7, #12]
 800fbbe:	f7ff fbc7 	bl	800f350 <HAL_MMC_AbortCallback>
        HAL_MMC_ErrorCallback(hmmc);
#endif
      }
    }
  }
}
 800fbc2:	e002      	b.n	800fbca <MMC_DMATxAbort+0x72>
        HAL_MMC_ErrorCallback(hmmc);
 800fbc4:	68f8      	ldr	r0, [r7, #12]
 800fbc6:	f7f9 f8eb 	bl	8008da0 <HAL_MMC_ErrorCallback>
}
 800fbca:	bf00      	nop
 800fbcc:	3710      	adds	r7, #16
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}

0800fbd2 <MMC_DMARxAbort>:
  * @brief  DMA MMC Rx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void MMC_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 800fbd2:	b580      	push	{r7, lr}
 800fbd4:	b084      	sub	sp, #16
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	6078      	str	r0, [r7, #4]
  MMC_HandleTypeDef* hmmc = (MMC_HandleTypeDef* )(hdma->Parent);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbde:	60fb      	str	r3, [r7, #12]
  HAL_MMC_CardStateTypeDef CardState;
  
  if(hmmc->hdmarx != NULL)
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d002      	beq.n	800fbee <MMC_DMARxAbort+0x1c>
  {
    hmmc->hdmarx = NULL;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	2200      	movs	r2, #0
 800fbec:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hmmc->hdmatx == NULL)
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d126      	bne.n	800fc44 <MMC_DMARxAbort+0x72>
  {
    CardState = HAL_MMC_GetCardState(hmmc);
 800fbf6:	68f8      	ldr	r0, [r7, #12]
 800fbf8:	f7ff fef4 	bl	800f9e4 <HAL_MMC_GetCardState>
 800fbfc:	60b8      	str	r0, [r7, #8]
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	2200      	movs	r2, #0
 800fc02:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	2201      	movs	r2, #1
 800fc08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    if((CardState == HAL_MMC_CARD_RECEIVING) || (CardState == HAL_MMC_CARD_SENDING))
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	2b06      	cmp	r3, #6
 800fc10:	d002      	beq.n	800fc18 <MMC_DMARxAbort+0x46>
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	2b05      	cmp	r3, #5
 800fc16:	d115      	bne.n	800fc44 <MMC_DMARxAbort+0x72>
    {
      hmmc->ErrorCode |= SDMMC_CmdStopTransfer(hmmc->Instance);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f005 fcbf 	bl	80155a0 <SDMMC_CmdStopTransfer>
 800fc22:	4602      	mov	r2, r0
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc28:	431a      	orrs	r2, r3
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	639a      	str	r2, [r3, #56]	@ 0x38
      
      if(hmmc->ErrorCode != HAL_MMC_ERROR_NONE)
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d003      	beq.n	800fc3e <MMC_DMARxAbort+0x6c>
      {
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
        hmmc->AbortCpltCallback(hmmc);
#else
        HAL_MMC_AbortCallback(hmmc);
 800fc36:	68f8      	ldr	r0, [r7, #12]
 800fc38:	f7ff fb8a 	bl	800f350 <HAL_MMC_AbortCallback>
        HAL_MMC_ErrorCallback(hmmc);
#endif
      }
    }
  }
}
 800fc3c:	e002      	b.n	800fc44 <MMC_DMARxAbort+0x72>
        HAL_MMC_ErrorCallback(hmmc);
 800fc3e:	68f8      	ldr	r0, [r7, #12]
 800fc40:	f7f9 f8ae 	bl	8008da0 <HAL_MMC_ErrorCallback>
}
 800fc44:	bf00      	nop
 800fc46:	3710      	adds	r7, #16
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}

0800fc4c <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 800fc4c:	b5b0      	push	{r4, r5, r7, lr}
 800fc4e:	b09a      	sub	sp, #104	@ 0x68
 800fc50:	af04      	add	r7, sp, #16
 800fc52:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 800fc54:	2302      	movs	r3, #2
 800fc56:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  MMC_InitTypeDef Init;

  /* Check the power State */
  if(SDIO_GetPowerState(hmmc->Instance) == 0U)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f005 fb6f 	bl	8015342 <SDIO_GetPowerState>
 800fc64:	4603      	mov	r3, r0
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d102      	bne.n	800fc70 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 800fc6a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800fc6e:	e0ec      	b.n	800fe4a <MMC_InitCard+0x1fe>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	4618      	mov	r0, r3
 800fc76:	f005 fcf6 	bl	8015666 <SDMMC_CmdSendCID>
 800fc7a:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 800fc7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d001      	beq.n	800fc86 <MMC_InitCard+0x3a>
  {
    return errorstate;
 800fc82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc84:	e0e1      	b.n	800fe4a <MMC_InitCard+0x1fe>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	2100      	movs	r1, #0
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f005 fb9d 	bl	80153cc <SDIO_GetResponse>
 800fc92:	4602      	mov	r2, r0
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	671a      	str	r2, [r3, #112]	@ 0x70
    hmmc->CID[1U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP2);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	2104      	movs	r1, #4
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f005 fb94 	bl	80153cc <SDIO_GetResponse>
 800fca4:	4602      	mov	r2, r0
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	675a      	str	r2, [r3, #116]	@ 0x74
    hmmc->CID[2U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP3);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	2108      	movs	r1, #8
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f005 fb8b 	bl	80153cc <SDIO_GetResponse>
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	679a      	str	r2, [r3, #120]	@ 0x78
    hmmc->CID[3U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP4);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	210c      	movs	r1, #12
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f005 fb82 	bl	80153cc <SDIO_GetResponse>
 800fcc8:	4602      	mov	r2, r0
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	67da      	str	r2, [r3, #124]	@ 0x7c
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800fcd6:	4611      	mov	r1, r2
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f005 fd01 	bl	80156e0 <SDMMC_CmdSetRelAddMmc>
 800fcde:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 800fce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d001      	beq.n	800fcea <MMC_InitCard+0x9e>
  {
    return errorstate;
 800fce6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fce8:	e0af      	b.n	800fe4a <MMC_InitCard+0x1fe>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 800fcea:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681a      	ldr	r2, [r3, #0]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fcfa:	041b      	lsls	r3, r3, #16
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	4610      	mov	r0, r2
 800fd00:	f005 fccf 	bl	80156a2 <SDMMC_CmdSendCSD>
 800fd04:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 800fd06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d001      	beq.n	800fd10 <MMC_InitCard+0xc4>
  {
    return errorstate;
 800fd0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd0e:	e09c      	b.n	800fe4a <MMC_InitCard+0x1fe>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	2100      	movs	r1, #0
 800fd16:	4618      	mov	r0, r3
 800fd18:	f005 fb58 	bl	80153cc <SDIO_GetResponse>
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	661a      	str	r2, [r3, #96]	@ 0x60
    hmmc->CSD[1U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP2);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	2104      	movs	r1, #4
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f005 fb4f 	bl	80153cc <SDIO_GetResponse>
 800fd2e:	4602      	mov	r2, r0
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	665a      	str	r2, [r3, #100]	@ 0x64
    hmmc->CSD[2U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP3);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	2108      	movs	r1, #8
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f005 fb46 	bl	80153cc <SDIO_GetResponse>
 800fd40:	4602      	mov	r2, r0
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CSD[3U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP4);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	210c      	movs	r1, #12
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f005 fb3d 	bl	80153cc <SDIO_GetResponse>
 800fd52:	4602      	mov	r2, r0
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDIO_GetResponse(hmmc->Instance, SDIO_RESP2) >> 20U);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	2104      	movs	r1, #4
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f005 fb34 	bl	80153cc <SDIO_GetResponse>
 800fd64:	4603      	mov	r3, r0
 800fd66:	0d1a      	lsrs	r2, r3, #20
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6819      	ldr	r1, [r3, #0]
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fd74:	041b      	lsls	r3, r3, #16
 800fd76:	2200      	movs	r2, #0
 800fd78:	461c      	mov	r4, r3
 800fd7a:	4615      	mov	r5, r2
 800fd7c:	4622      	mov	r2, r4
 800fd7e:	462b      	mov	r3, r5
 800fd80:	4608      	mov	r0, r1
 800fd82:	f005 fc2f 	bl	80155e4 <SDMMC_CmdSelDesel>
 800fd86:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 800fd88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d001      	beq.n	800fd92 <MMC_InitCard+0x146>
  {
    return errorstate;
 800fd8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd90:	e05b      	b.n	800fe4a <MMC_InitCard+0x1fe>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 800fd92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd96:	4619      	mov	r1, r3
 800fd98:	6878      	ldr	r0, [r7, #4]
 800fd9a:	f7ff fae3 	bl	800f364 <HAL_MMC_GetCardCSD>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d002      	beq.n	800fdaa <MMC_InitCard+0x15e>
  {
    return hmmc->ErrorCode;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fda8:	e04f      	b.n	800fe4a <MMC_InitCard+0x1fe>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681a      	ldr	r2, [r3, #0]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fdb2:	041b      	lsls	r3, r3, #16
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	4610      	mov	r0, r2
 800fdb8:	f005 fcb6 	bl	8015728 <SDMMC_CmdSendStatus>
 800fdbc:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 800fdbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d005      	beq.n	800fdd0 <MMC_InitCard+0x184>
  {
    hmmc->ErrorCode |= errorstate;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fdc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fdca:	431a      	orrs	r2, r3
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	3380      	adds	r3, #128	@ 0x80
 800fdd4:	f04f 32ff 	mov.w	r2, #4294967295
 800fdd8:	4619      	mov	r1, r3
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f7ff fc66 	bl	800f6ac <HAL_MMC_GetCardExtCSD>
 800fde0:	4603      	mov	r3, r0
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d002      	beq.n	800fdec <MMC_InitCard+0x1a0>
  {
    return hmmc->ErrorCode;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdea:	e02e      	b.n	800fe4a <MMC_InitCard+0x1fe>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681a      	ldr	r2, [r3, #0]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fdf4:	041b      	lsls	r3, r3, #16
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	4610      	mov	r0, r2
 800fdfa:	f005 fc95 	bl	8015728 <SDMMC_CmdSendStatus>
 800fdfe:	6538      	str	r0, [r7, #80]	@ 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 800fe00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d005      	beq.n	800fe12 <MMC_InitCard+0x1c6>
  {
    hmmc->ErrorCode |= errorstate;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fe0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe0c:	431a      	orrs	r2, r3
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Configure the SDIO peripheral */
  Init = hmmc->Init;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f107 040c 	add.w	r4, r7, #12
 800fe18:	1d1d      	adds	r5, r3, #4
 800fe1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fe22:	e884 0003 	stmia.w	r4, {r0, r1}
  Init.BusWide = SDIO_BUS_WIDE_1B;
 800fe26:	2300      	movs	r3, #0
 800fe28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_Init(hmmc->Instance, Init);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681d      	ldr	r5, [r3, #0]
 800fe2e:	466c      	mov	r4, sp
 800fe30:	f107 0318 	add.w	r3, r7, #24
 800fe34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fe38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fe3c:	f107 030c 	add.w	r3, r7, #12
 800fe40:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fe42:	4628      	mov	r0, r5
 800fe44:	f005 fa18 	bl	8015278 <SDIO_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 800fe48:	2300      	movs	r3, #0
}
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	3758      	adds	r7, #88	@ 0x58
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800fe54 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b086      	sub	sp, #24
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800fe60:	2300      	movs	r3, #0
 800fe62:	617b      	str	r3, [r7, #20]
 800fe64:	2300      	movs	r3, #0
 800fe66:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f005 fbdc 	bl	801562a <SDMMC_CmdGoIdleState>
 800fe72:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d027      	beq.n	800feca <MMC_PowerON+0x76>
  {
    return errorstate;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	e034      	b.n	800fee8 <MMC_PowerON+0x94>
  }

  while(validvoltage == 0U)
  {
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	1c5a      	adds	r2, r3, #1
 800fe82:	60ba      	str	r2, [r7, #8]
 800fe84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d102      	bne.n	800fe92 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 800fe8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800fe90:	e02a      	b.n	800fee8 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	4916      	ldr	r1, [pc, #88]	@ (800fef0 <MMC_PowerON+0x9c>)
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f005 fc67 	bl	801576c <SDMMC_CmdOpCondition>
 800fe9e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_MMC_ERROR_NONE)
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d002      	beq.n	800feac <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 800fea6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800feaa:	e01d      	b.n	800fee8 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	2100      	movs	r1, #0
 800feb2:	4618      	mov	r0, r3
 800feb4:	f005 fa8a 	bl	80153cc <SDIO_GetResponse>
 800feb8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	0fdb      	lsrs	r3, r3, #31
 800febe:	2b01      	cmp	r3, #1
 800fec0:	d101      	bne.n	800fec6 <MMC_PowerON+0x72>
 800fec2:	2301      	movs	r3, #1
 800fec4:	e000      	b.n	800fec8 <MMC_PowerON+0x74>
 800fec6:	2300      	movs	r3, #0
 800fec8:	613b      	str	r3, [r7, #16]
  while(validvoltage == 0U)
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d0d6      	beq.n	800fe7e <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24U) == 0xC0U)
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	0e1b      	lsrs	r3, r3, #24
 800fed4:	2bc0      	cmp	r3, #192	@ 0xc0
 800fed6:	d103      	bne.n	800fee0 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2201      	movs	r2, #1
 800fedc:	645a      	str	r2, [r3, #68]	@ 0x44
 800fede:	e002      	b.n	800fee6 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2200      	movs	r2, #0
 800fee4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  return HAL_MMC_ERROR_NONE;
 800fee6:	2300      	movs	r3, #0
}
 800fee8:	4618      	mov	r0, r3
 800feea:	3718      	adds	r7, #24
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}
 800fef0:	c0ff8000 	.word	0xc0ff8000

0800fef4 <MMC_PowerOFF>:
  * @brief  Turns the SDIO output signals off.
  * @param  hmmc: Pointer to MMC handle
  * @retval None
  */
static void MMC_PowerOFF(MMC_HandleTypeDef *hmmc)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDIO_PowerState_OFF(hmmc->Instance);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	4618      	mov	r0, r3
 800ff02:	f005 fa10 	bl	8015326 <SDIO_PowerState_OFF>
}
 800ff06:	bf00      	nop
 800ff08:	3708      	adds	r7, #8
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}

0800ff0e <MMC_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the MMC card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t MMC_SendStatus(MMC_HandleTypeDef *hmmc, uint32_t *pCardStatus)
{
 800ff0e:	b580      	push	{r7, lr}
 800ff10:	b084      	sub	sp, #16
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
 800ff16:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d102      	bne.n	800ff24 <MMC_SendStatus+0x16>
  {
    return HAL_MMC_ERROR_PARAM;
 800ff1e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ff22:	e018      	b.n	800ff56 <MMC_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681a      	ldr	r2, [r3, #0]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff2c:	041b      	lsls	r3, r3, #16
 800ff2e:	4619      	mov	r1, r3
 800ff30:	4610      	mov	r0, r2
 800ff32:	f005 fbf9 	bl	8015728 <SDMMC_CmdSendStatus>
 800ff36:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d001      	beq.n	800ff42 <MMC_SendStatus+0x34>
  {
    return errorstate;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	e009      	b.n	800ff56 <MMC_SendStatus+0x48>
  }

  /* Get MMC card status */
  *pCardStatus = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	2100      	movs	r1, #0
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f005 fa3f 	bl	80153cc <SDIO_GetResponse>
 800ff4e:	4602      	mov	r2, r0
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	601a      	str	r2, [r3, #0]

  return HAL_MMC_ERROR_NONE;
 800ff54:	2300      	movs	r3, #0
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3710      	adds	r7, #16
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
	...

0800ff60 <MMC_ReadExtCSD>:
  * @param  FieldIndex: Index of the field to be read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static uint32_t MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData, uint16_t FieldIndex, uint32_t Timeout)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b090      	sub	sp, #64	@ 0x40
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	60b9      	str	r1, [r7, #8]
 800ff6a:	603b      	str	r3, [r7, #0]
 800ff6c:	4613      	mov	r3, r2
 800ff6e:	80fb      	strh	r3, [r7, #6]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ff70:	f7fc f9e6 	bl	800c340 <HAL_GetTick>
 800ff74:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 800ff76:	2300      	movs	r3, #0
 800ff78:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	2200      	movs	r2, #0
 800ff86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ff88:	f04f 33ff 	mov.w	r3, #4294967295
 800ff8c:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512;
 800ff8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ff92:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ff94:	2390      	movs	r3, #144	@ 0x90
 800ff96:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ff98:	2302      	movs	r3, #2
 800ff9a:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDIO_ConfigData(hmmc->Instance, &config);
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	f107 0214 	add.w	r2, r7, #20
 800ffac:	4611      	mov	r1, r2
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f005 fa1f 	bl	80153f2 <SDIO_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2100      	movs	r1, #0
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f005 fc17 	bl	80157ee <SDMMC_CmdSendEXTCSD>
 800ffc0:	6338      	str	r0, [r7, #48]	@ 0x30
  if(errorstate != HAL_MMC_ERROR_NONE)
 800ffc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d04e      	beq.n	8010066 <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	4a3a      	ldr	r2, [pc, #232]	@ (80100b8 <MMC_ReadExtCSD+0x158>)
 800ffce:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ffd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffd6:	431a      	orrs	r2, r3
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	2201      	movs	r2, #1
 800ffe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	e062      	b.n	80100ae <MMC_ReadExtCSD+0x14e>
  }

  /* Poll on SDMMC flags */
  while(!__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
  {
    if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXFIFOHF))
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d01c      	beq.n	8010030 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for(count = 0U; count < 8U; count++)
 800fff6:	2300      	movs	r3, #0
 800fff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fffa:	e013      	b.n	8010024 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDIO_ReadFIFO(hmmc->Instance);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4618      	mov	r0, r3
 8010002:	f005 f964 	bl	80152ce <SDIO_ReadFIFO>
 8010006:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex/4U))
 8010008:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801000a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801000c:	4413      	add	r3, r2
 801000e:	88fa      	ldrh	r2, [r7, #6]
 8010010:	0892      	lsrs	r2, r2, #2
 8010012:	b292      	uxth	r2, r2
 8010014:	4293      	cmp	r3, r2
 8010016:	d102      	bne.n	801001e <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801001c:	601a      	str	r2, [r3, #0]
      for(count = 0U; count < 8U; count++)
 801001e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010020:	3301      	adds	r3, #1
 8010022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010026:	2b07      	cmp	r3, #7
 8010028:	d9e8      	bls.n	800fffc <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 801002a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801002c:	3308      	adds	r3, #8
 801002e:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8010030:	f7fc f986 	bl	800c340 <HAL_GetTick>
 8010034:	4602      	mov	r2, r0
 8010036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010038:	1ad3      	subs	r3, r2, r3
 801003a:	683a      	ldr	r2, [r7, #0]
 801003c:	429a      	cmp	r2, r3
 801003e:	d902      	bls.n	8010046 <MMC_ReadExtCSD+0xe6>
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d10f      	bne.n	8010066 <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	4a1b      	ldr	r2, [pc, #108]	@ (80100b8 <MMC_ReadExtCSD+0x158>)
 801004c:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010052:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State= HAL_MMC_STATE_READY;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	2201      	movs	r2, #1
 801005e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_TIMEOUT;
 8010062:	2303      	movs	r3, #3
 8010064:	e023      	b.n	80100ae <MMC_ReadExtCSD+0x14e>
  while(!__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801006c:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8010070:	2b00      	cmp	r3, #0
 8010072:	d0b9      	beq.n	800ffe8 <MMC_ReadExtCSD+0x88>
    }
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681a      	ldr	r2, [r3, #0]
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801007c:	041b      	lsls	r3, r3, #16
 801007e:	4619      	mov	r1, r3
 8010080:	4610      	mov	r0, r2
 8010082:	f005 fb51 	bl	8015728 <SDMMC_CmdSendStatus>
 8010086:	6338      	str	r0, [r7, #48]	@ 0x30
  if(errorstate != HAL_MMC_ERROR_NONE)
 8010088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801008a:	2b00      	cmp	r3, #0
 801008c:	d005      	beq.n	801009a <MMC_ReadExtCSD+0x13a>
  {
    hmmc->ErrorCode |= errorstate;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010094:	431a      	orrs	r2, r3
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_DATA_FLAGS);
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	f240 523a 	movw	r2, #1338	@ 0x53a
 80100a2:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	2201      	movs	r2, #1
 80100a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80100ac:	2300      	movs	r3, #0
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3740      	adds	r7, #64	@ 0x40
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}
 80100b6:	bf00      	nop
 80100b8:	004005ff 	.word	0x004005ff

080100bc <MMC_Read_IT>:
  * @param  hmmc: pointer to a MMC_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void MMC_Read_IT(MMC_HandleTypeDef *hmmc)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b086      	sub	sp, #24
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hmmc->pRxBuffPtr;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100c8:	60fb      	str	r3, [r7, #12]
  dataremaining = hmmc->RxXferSize;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100ce:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80100d0:	693b      	ldr	r3, [r7, #16]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d03f      	beq.n	8010156 <MMC_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80100d6:	2300      	movs	r3, #0
 80100d8:	617b      	str	r3, [r7, #20]
 80100da:	e033      	b.n	8010144 <MMC_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hmmc->Instance);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	4618      	mov	r0, r3
 80100e2:	f005 f8f4 	bl	80152ce <SDIO_ReadFIFO>
 80100e6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	b2da      	uxtb	r2, r3
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	3301      	adds	r3, #1
 80100f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	3b01      	subs	r3, #1
 80100fa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	0a1b      	lsrs	r3, r3, #8
 8010100:	b2da      	uxtb	r2, r3
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	3301      	adds	r3, #1
 801010a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	3b01      	subs	r3, #1
 8010110:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	0c1b      	lsrs	r3, r3, #16
 8010116:	b2da      	uxtb	r2, r3
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	3301      	adds	r3, #1
 8010120:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	3b01      	subs	r3, #1
 8010126:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	0e1b      	lsrs	r3, r3, #24
 801012c:	b2da      	uxtb	r2, r3
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	3301      	adds	r3, #1
 8010136:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8010138:	693b      	ldr	r3, [r7, #16]
 801013a:	3b01      	subs	r3, #1
 801013c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	3301      	adds	r3, #1
 8010142:	617b      	str	r3, [r7, #20]
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	2b07      	cmp	r3, #7
 8010148:	d9c8      	bls.n	80100dc <MMC_Read_IT+0x20>
    }

    hmmc->pRxBuffPtr = tmp;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	68fa      	ldr	r2, [r7, #12]
 801014e:	629a      	str	r2, [r3, #40]	@ 0x28
    hmmc->RxXferSize = dataremaining;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	693a      	ldr	r2, [r7, #16]
 8010154:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8010156:	bf00      	nop
 8010158:	3718      	adds	r7, #24
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}

0801015e <MMC_Write_IT>:
  * @param  hmmc: pointer to a MMC_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void MMC_Write_IT(MMC_HandleTypeDef *hmmc)
{
 801015e:	b580      	push	{r7, lr}
 8010160:	b086      	sub	sp, #24
 8010162:	af00      	add	r7, sp, #0
 8010164:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hmmc->pTxBuffPtr;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6a1b      	ldr	r3, [r3, #32]
 801016a:	60fb      	str	r3, [r7, #12]
  dataremaining = hmmc->TxXferSize;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010170:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d043      	beq.n	8010200 <MMC_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8010178:	2300      	movs	r3, #0
 801017a:	617b      	str	r3, [r7, #20]
 801017c:	e037      	b.n	80101ee <MMC_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	781b      	ldrb	r3, [r3, #0]
 8010182:	60bb      	str	r3, [r7, #8]
      tmp++;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	3301      	adds	r3, #1
 8010188:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801018a:	693b      	ldr	r3, [r7, #16]
 801018c:	3b01      	subs	r3, #1
 801018e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	021a      	lsls	r2, r3, #8
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	4313      	orrs	r3, r2
 801019a:	60bb      	str	r3, [r7, #8]
      tmp++;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	3301      	adds	r3, #1
 80101a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	3b01      	subs	r3, #1
 80101a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	781b      	ldrb	r3, [r3, #0]
 80101ac:	041a      	lsls	r2, r3, #16
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	4313      	orrs	r3, r2
 80101b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	3301      	adds	r3, #1
 80101b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	3b01      	subs	r3, #1
 80101be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	061a      	lsls	r2, r3, #24
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	4313      	orrs	r3, r2
 80101ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	3301      	adds	r3, #1
 80101d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	3b01      	subs	r3, #1
 80101d6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hmmc->Instance, &data);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	f107 0208 	add.w	r2, r7, #8
 80101e0:	4611      	mov	r1, r2
 80101e2:	4618      	mov	r0, r3
 80101e4:	f005 f880 	bl	80152e8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80101e8:	697b      	ldr	r3, [r7, #20]
 80101ea:	3301      	adds	r3, #1
 80101ec:	617b      	str	r3, [r7, #20]
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	2b07      	cmp	r3, #7
 80101f2:	d9c4      	bls.n	801017e <MMC_Write_IT+0x20>
    }

    hmmc->pTxBuffPtr = tmp;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	68fa      	ldr	r2, [r7, #12]
 80101f8:	621a      	str	r2, [r3, #32]
    hmmc->TxXferSize = dataremaining;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	693a      	ldr	r2, [r7, #16]
 80101fe:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8010200:	bf00      	nop
 8010202:	3718      	adds	r7, #24
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}

08010208 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b088      	sub	sp, #32
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6039      	str	r1, [r7, #0]
  uint32_t count;
  uint32_t response = 0U;
 8010212:	2300      	movs	r3, #0
 8010214:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8010216:	2300      	movs	r3, #0
 8010218:	617b      	str	r3, [r7, #20]
  uint32_t power_class, supported_pwr_class;

  if((Wide == SDIO_BUS_WIDE_8B) || (Wide == SDIO_BUS_WIDE_4B))
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010220:	d003      	beq.n	801022a <MMC_PwrClassUpdate+0x22>
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010228:	d174      	bne.n	8010314 <MMC_PwrClassUpdate+0x10c>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 801022a:	2300      	movs	r3, #0
 801022c:	60fb      	str	r3, [r7, #12]

    /* Read the PowerClass field of the Extended CSD register */
    if(MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 801022e:	f107 010c 	add.w	r1, r7, #12
 8010232:	f04f 33ff 	mov.w	r3, #4294967295
 8010236:	22bb      	movs	r2, #187	@ 0xbb
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f7ff fe91 	bl	800ff60 <MMC_ReadExtCSD>
 801023e:	4603      	mov	r3, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	d003      	beq.n	801024c <MMC_PwrClassUpdate+0x44>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010244:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8010248:	617b      	str	r3, [r7, #20]
 801024a:	e002      	b.n	8010252 <MMC_PwrClassUpdate+0x4a>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	0e1b      	lsrs	r3, r3, #24
 8010250:	60fb      	str	r3, [r7, #12]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    /* Field PWR_CL_26_xxx [201 or 203] */
    supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX/4)] >> MMC_EXT_CSD_PWR_CL_26_POS) & 0x000000FFU);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8010258:	0e1b      	lsrs	r3, r3, #24
 801025a:	613b      	str	r3, [r7, #16]

    if(errorstate == HAL_MMC_ERROR_NONE)
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d158      	bne.n	8010314 <MMC_PwrClassUpdate+0x10c>
    {
      if(Wide == SDIO_BUS_WIDE_8B)
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010268:	d102      	bne.n	8010270 <MMC_PwrClassUpdate+0x68>
      {
        /* Bit [7:4] : power class for 8-bits bus configuration - Bit [3:0] : power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 801026a:	693b      	ldr	r3, [r7, #16]
 801026c:	091b      	lsrs	r3, r3, #4
 801026e:	613b      	str	r3, [r7, #16]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8010270:	68fa      	ldr	r2, [r7, #12]
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	4053      	eors	r3, r2
 8010276:	f003 030f 	and.w	r3, r3, #15
 801027a:	2b00      	cmp	r3, #0
 801027c:	d04a      	beq.n	8010314 <MMC_PwrClassUpdate+0x10c>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681a      	ldr	r2, [r3, #0]
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	021b      	lsls	r3, r3, #8
 8010286:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801028a:	f043 736e 	orr.w	r3, r3, #62390272	@ 0x3b80000
 801028e:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8010292:	4619      	mov	r1, r3
 8010294:	4610      	mov	r0, r2
 8010296:	f005 fa88 	bl	80157aa <SDMMC_CmdSwitch>
 801029a:	6178      	str	r0, [r7, #20]

        if(errorstate == HAL_MMC_ERROR_NONE)
 801029c:	697b      	ldr	r3, [r7, #20]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d138      	bne.n	8010314 <MMC_PwrClassUpdate+0x10c>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 80102a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80102a6:	61fb      	str	r3, [r7, #28]
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681a      	ldr	r2, [r3, #0]
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80102b0:	041b      	lsls	r3, r3, #16
 80102b2:	4619      	mov	r1, r3
 80102b4:	4610      	mov	r0, r2
 80102b6:	f005 fa37 	bl	8015728 <SDMMC_CmdSendStatus>
 80102ba:	6178      	str	r0, [r7, #20]
            if(errorstate != HAL_MMC_ERROR_NONE)
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d112      	bne.n	80102e8 <MMC_PwrClassUpdate+0xe0>
            {
              break;
            }

            /* Get command response */
            response = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2100      	movs	r1, #0
 80102c8:	4618      	mov	r0, r3
 80102ca:	f005 f87f 	bl	80153cc <SDIO_GetResponse>
 80102ce:	61b8      	str	r0, [r7, #24]
            count--;
 80102d0:	69fb      	ldr	r3, [r7, #28]
 80102d2:	3b01      	subs	r3, #1
 80102d4:	61fb      	str	r3, [r7, #28]
          }while(((response & 0x100U) == 0U) && (count != 0U));
 80102d6:	69bb      	ldr	r3, [r7, #24]
 80102d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d104      	bne.n	80102ea <MMC_PwrClassUpdate+0xe2>
 80102e0:	69fb      	ldr	r3, [r7, #28]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d1e0      	bne.n	80102a8 <MMC_PwrClassUpdate+0xa0>
 80102e6:	e000      	b.n	80102ea <MMC_PwrClassUpdate+0xe2>
              break;
 80102e8:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 80102ea:	69fb      	ldr	r3, [r7, #28]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d00b      	beq.n	8010308 <MMC_PwrClassUpdate+0x100>
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d108      	bne.n	8010308 <MMC_PwrClassUpdate+0x100>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 80102f6:	69bb      	ldr	r3, [r7, #24]
 80102f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d009      	beq.n	8010314 <MMC_PwrClassUpdate+0x10c>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8010300:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8010304:	617b      	str	r3, [r7, #20]
            if ((response & 0x80U) != 0U)
 8010306:	e005      	b.n	8010314 <MMC_PwrClassUpdate+0x10c>
            }
          }
          else if (count == 0U)
 8010308:	69fb      	ldr	r3, [r7, #28]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d102      	bne.n	8010314 <MMC_PwrClassUpdate+0x10c>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 801030e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010312:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return errorstate;
 8010314:	697b      	ldr	r3, [r7, #20]
}
 8010316:	4618      	mov	r0, r3
 8010318:	3720      	adds	r7, #32
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
	...

08010320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b084      	sub	sp, #16
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
 8010328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d101      	bne.n	8010334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010330:	2301      	movs	r3, #1
 8010332:	e0cc      	b.n	80104ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010334:	4b68      	ldr	r3, [pc, #416]	@ (80104d8 <HAL_RCC_ClockConfig+0x1b8>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	f003 030f 	and.w	r3, r3, #15
 801033c:	683a      	ldr	r2, [r7, #0]
 801033e:	429a      	cmp	r2, r3
 8010340:	d90c      	bls.n	801035c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010342:	4b65      	ldr	r3, [pc, #404]	@ (80104d8 <HAL_RCC_ClockConfig+0x1b8>)
 8010344:	683a      	ldr	r2, [r7, #0]
 8010346:	b2d2      	uxtb	r2, r2
 8010348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801034a:	4b63      	ldr	r3, [pc, #396]	@ (80104d8 <HAL_RCC_ClockConfig+0x1b8>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	f003 030f 	and.w	r3, r3, #15
 8010352:	683a      	ldr	r2, [r7, #0]
 8010354:	429a      	cmp	r2, r3
 8010356:	d001      	beq.n	801035c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010358:	2301      	movs	r3, #1
 801035a:	e0b8      	b.n	80104ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	f003 0302 	and.w	r3, r3, #2
 8010364:	2b00      	cmp	r3, #0
 8010366:	d020      	beq.n	80103aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	f003 0304 	and.w	r3, r3, #4
 8010370:	2b00      	cmp	r3, #0
 8010372:	d005      	beq.n	8010380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010374:	4b59      	ldr	r3, [pc, #356]	@ (80104dc <HAL_RCC_ClockConfig+0x1bc>)
 8010376:	689b      	ldr	r3, [r3, #8]
 8010378:	4a58      	ldr	r2, [pc, #352]	@ (80104dc <HAL_RCC_ClockConfig+0x1bc>)
 801037a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 801037e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f003 0308 	and.w	r3, r3, #8
 8010388:	2b00      	cmp	r3, #0
 801038a:	d005      	beq.n	8010398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801038c:	4b53      	ldr	r3, [pc, #332]	@ (80104dc <HAL_RCC_ClockConfig+0x1bc>)
 801038e:	689b      	ldr	r3, [r3, #8]
 8010390:	4a52      	ldr	r2, [pc, #328]	@ (80104dc <HAL_RCC_ClockConfig+0x1bc>)
 8010392:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8010396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010398:	4b50      	ldr	r3, [pc, #320]	@ (80104dc <HAL_RCC_ClockConfig+0x1bc>)
 801039a:	689b      	ldr	r3, [r3, #8]
 801039c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	689b      	ldr	r3, [r3, #8]
 80103a4:	494d      	ldr	r1, [pc, #308]	@ (80104dc <HAL_RCC_ClockConfig+0x1bc>)
 80103a6:	4313      	orrs	r3, r2
 80103a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	f003 0301 	and.w	r3, r3, #1
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d044      	beq.n	8010440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	685b      	ldr	r3, [r3, #4]
 80103ba:	2b01      	cmp	r3, #1
 80103bc:	d107      	bne.n	80103ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80103be:	4b47      	ldr	r3, [pc, #284]	@ (80104dc <HAL_RCC_ClockConfig+0x1bc>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d119      	bne.n	80103fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80103ca:	2301      	movs	r3, #1
 80103cc:	e07f      	b.n	80104ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	2b02      	cmp	r3, #2
 80103d4:	d003      	beq.n	80103de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80103da:	2b03      	cmp	r3, #3
 80103dc:	d107      	bne.n	80103ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80103de:	4b3f      	ldr	r3, [pc, #252]	@ (80104dc <HAL_RCC_ClockConfig+0x1bc>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d109      	bne.n	80103fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80103ea:	2301      	movs	r3, #1
 80103ec:	e06f      	b.n	80104ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80103ee:	4b3b      	ldr	r3, [pc, #236]	@ (80104dc <HAL_RCC_ClockConfig+0x1bc>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	f003 0302 	and.w	r3, r3, #2
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d101      	bne.n	80103fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80103fa:	2301      	movs	r3, #1
 80103fc:	e067      	b.n	80104ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80103fe:	4b37      	ldr	r3, [pc, #220]	@ (80104dc <HAL_RCC_ClockConfig+0x1bc>)
 8010400:	689b      	ldr	r3, [r3, #8]
 8010402:	f023 0203 	bic.w	r2, r3, #3
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	4934      	ldr	r1, [pc, #208]	@ (80104dc <HAL_RCC_ClockConfig+0x1bc>)
 801040c:	4313      	orrs	r3, r2
 801040e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010410:	f7fb ff96 	bl	800c340 <HAL_GetTick>
 8010414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010416:	e00a      	b.n	801042e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010418:	f7fb ff92 	bl	800c340 <HAL_GetTick>
 801041c:	4602      	mov	r2, r0
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	1ad3      	subs	r3, r2, r3
 8010422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010426:	4293      	cmp	r3, r2
 8010428:	d901      	bls.n	801042e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801042a:	2303      	movs	r3, #3
 801042c:	e04f      	b.n	80104ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801042e:	4b2b      	ldr	r3, [pc, #172]	@ (80104dc <HAL_RCC_ClockConfig+0x1bc>)
 8010430:	689b      	ldr	r3, [r3, #8]
 8010432:	f003 020c 	and.w	r2, r3, #12
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	685b      	ldr	r3, [r3, #4]
 801043a:	009b      	lsls	r3, r3, #2
 801043c:	429a      	cmp	r2, r3
 801043e:	d1eb      	bne.n	8010418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010440:	4b25      	ldr	r3, [pc, #148]	@ (80104d8 <HAL_RCC_ClockConfig+0x1b8>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	f003 030f 	and.w	r3, r3, #15
 8010448:	683a      	ldr	r2, [r7, #0]
 801044a:	429a      	cmp	r2, r3
 801044c:	d20c      	bcs.n	8010468 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801044e:	4b22      	ldr	r3, [pc, #136]	@ (80104d8 <HAL_RCC_ClockConfig+0x1b8>)
 8010450:	683a      	ldr	r2, [r7, #0]
 8010452:	b2d2      	uxtb	r2, r2
 8010454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010456:	4b20      	ldr	r3, [pc, #128]	@ (80104d8 <HAL_RCC_ClockConfig+0x1b8>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f003 030f 	and.w	r3, r3, #15
 801045e:	683a      	ldr	r2, [r7, #0]
 8010460:	429a      	cmp	r2, r3
 8010462:	d001      	beq.n	8010468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8010464:	2301      	movs	r3, #1
 8010466:	e032      	b.n	80104ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	f003 0304 	and.w	r3, r3, #4
 8010470:	2b00      	cmp	r3, #0
 8010472:	d008      	beq.n	8010486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010474:	4b19      	ldr	r3, [pc, #100]	@ (80104dc <HAL_RCC_ClockConfig+0x1bc>)
 8010476:	689b      	ldr	r3, [r3, #8]
 8010478:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	68db      	ldr	r3, [r3, #12]
 8010480:	4916      	ldr	r1, [pc, #88]	@ (80104dc <HAL_RCC_ClockConfig+0x1bc>)
 8010482:	4313      	orrs	r3, r2
 8010484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	f003 0308 	and.w	r3, r3, #8
 801048e:	2b00      	cmp	r3, #0
 8010490:	d009      	beq.n	80104a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010492:	4b12      	ldr	r3, [pc, #72]	@ (80104dc <HAL_RCC_ClockConfig+0x1bc>)
 8010494:	689b      	ldr	r3, [r3, #8]
 8010496:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	691b      	ldr	r3, [r3, #16]
 801049e:	00db      	lsls	r3, r3, #3
 80104a0:	490e      	ldr	r1, [pc, #56]	@ (80104dc <HAL_RCC_ClockConfig+0x1bc>)
 80104a2:	4313      	orrs	r3, r2
 80104a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80104a6:	f000 fb7f 	bl	8010ba8 <HAL_RCC_GetSysClockFreq>
 80104aa:	4602      	mov	r2, r0
 80104ac:	4b0b      	ldr	r3, [pc, #44]	@ (80104dc <HAL_RCC_ClockConfig+0x1bc>)
 80104ae:	689b      	ldr	r3, [r3, #8]
 80104b0:	091b      	lsrs	r3, r3, #4
 80104b2:	f003 030f 	and.w	r3, r3, #15
 80104b6:	490a      	ldr	r1, [pc, #40]	@ (80104e0 <HAL_RCC_ClockConfig+0x1c0>)
 80104b8:	5ccb      	ldrb	r3, [r1, r3]
 80104ba:	fa22 f303 	lsr.w	r3, r2, r3
 80104be:	4a09      	ldr	r2, [pc, #36]	@ (80104e4 <HAL_RCC_ClockConfig+0x1c4>)
 80104c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80104c2:	4b09      	ldr	r3, [pc, #36]	@ (80104e8 <HAL_RCC_ClockConfig+0x1c8>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7fb fef6 	bl	800c2b8 <HAL_InitTick>

  return HAL_OK;
 80104cc:	2300      	movs	r3, #0
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3710      	adds	r7, #16
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	bf00      	nop
 80104d8:	40023c00 	.word	0x40023c00
 80104dc:	40023800 	.word	0x40023800
 80104e0:	0801b0cc 	.word	0x0801b0cc
 80104e4:	20000200 	.word	0x20000200
 80104e8:	20000204 	.word	0x20000204

080104ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80104ec:	b480      	push	{r7}
 80104ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80104f0:	4b03      	ldr	r3, [pc, #12]	@ (8010500 <HAL_RCC_GetHCLKFreq+0x14>)
 80104f2:	681b      	ldr	r3, [r3, #0]
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr
 80104fe:	bf00      	nop
 8010500:	20000200 	.word	0x20000200

08010504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8010508:	f7ff fff0 	bl	80104ec <HAL_RCC_GetHCLKFreq>
 801050c:	4602      	mov	r2, r0
 801050e:	4b05      	ldr	r3, [pc, #20]	@ (8010524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010510:	689b      	ldr	r3, [r3, #8]
 8010512:	0a9b      	lsrs	r3, r3, #10
 8010514:	f003 0307 	and.w	r3, r3, #7
 8010518:	4903      	ldr	r1, [pc, #12]	@ (8010528 <HAL_RCC_GetPCLK1Freq+0x24>)
 801051a:	5ccb      	ldrb	r3, [r1, r3]
 801051c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010520:	4618      	mov	r0, r3
 8010522:	bd80      	pop	{r7, pc}
 8010524:	40023800 	.word	0x40023800
 8010528:	0801b0dc 	.word	0x0801b0dc

0801052c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8010530:	f7ff ffdc 	bl	80104ec <HAL_RCC_GetHCLKFreq>
 8010534:	4602      	mov	r2, r0
 8010536:	4b05      	ldr	r3, [pc, #20]	@ (801054c <HAL_RCC_GetPCLK2Freq+0x20>)
 8010538:	689b      	ldr	r3, [r3, #8]
 801053a:	0b5b      	lsrs	r3, r3, #13
 801053c:	f003 0307 	and.w	r3, r3, #7
 8010540:	4903      	ldr	r1, [pc, #12]	@ (8010550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010542:	5ccb      	ldrb	r3, [r1, r3]
 8010544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010548:	4618      	mov	r0, r3
 801054a:	bd80      	pop	{r7, pc}
 801054c:	40023800 	.word	0x40023800
 8010550:	0801b0dc 	.word	0x0801b0dc

08010554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b08c      	sub	sp, #48	@ 0x30
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801055c:	2300      	movs	r3, #0
 801055e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8010560:	2300      	movs	r3, #0
 8010562:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8010564:	2300      	movs	r3, #0
 8010566:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8010568:	2300      	movs	r3, #0
 801056a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 801056c:	2300      	movs	r3, #0
 801056e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8010570:	2300      	movs	r3, #0
 8010572:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8010574:	2300      	movs	r3, #0
 8010576:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8010578:	2300      	movs	r3, #0
 801057a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 801057c:	2300      	movs	r3, #0
 801057e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	f003 0301 	and.w	r3, r3, #1
 8010588:	2b00      	cmp	r3, #0
 801058a:	d010      	beq.n	80105ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 801058c:	4b6f      	ldr	r3, [pc, #444]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801058e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010592:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801059a:	496c      	ldr	r1, [pc, #432]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801059c:	4313      	orrs	r3, r2
 801059e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d101      	bne.n	80105ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80105aa:	2301      	movs	r3, #1
 80105ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f003 0302 	and.w	r3, r3, #2
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d010      	beq.n	80105dc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80105ba:	4b64      	ldr	r3, [pc, #400]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80105bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80105c0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105c8:	4960      	ldr	r1, [pc, #384]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80105ca:	4313      	orrs	r3, r2
 80105cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d101      	bne.n	80105dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80105d8:	2301      	movs	r3, #1
 80105da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	f003 0304 	and.w	r3, r3, #4
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d017      	beq.n	8010618 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80105e8:	4b58      	ldr	r3, [pc, #352]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80105ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80105ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105f6:	4955      	ldr	r1, [pc, #340]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80105f8:	4313      	orrs	r3, r2
 80105fa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010606:	d101      	bne.n	801060c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8010608:	2301      	movs	r3, #1
 801060a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010610:	2b00      	cmp	r3, #0
 8010612:	d101      	bne.n	8010618 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8010614:	2301      	movs	r3, #1
 8010616:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	f003 0308 	and.w	r3, r3, #8
 8010620:	2b00      	cmp	r3, #0
 8010622:	d017      	beq.n	8010654 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8010624:	4b49      	ldr	r3, [pc, #292]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8010626:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801062a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010632:	4946      	ldr	r1, [pc, #280]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8010634:	4313      	orrs	r3, r2
 8010636:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801063e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010642:	d101      	bne.n	8010648 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8010644:	2301      	movs	r3, #1
 8010646:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801064c:	2b00      	cmp	r3, #0
 801064e:	d101      	bne.n	8010654 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8010650:	2301      	movs	r3, #1
 8010652:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	f003 0320 	and.w	r3, r3, #32
 801065c:	2b00      	cmp	r3, #0
 801065e:	f000 808a 	beq.w	8010776 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8010662:	2300      	movs	r3, #0
 8010664:	60bb      	str	r3, [r7, #8]
 8010666:	4b39      	ldr	r3, [pc, #228]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8010668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801066a:	4a38      	ldr	r2, [pc, #224]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 801066c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010670:	6413      	str	r3, [r2, #64]	@ 0x40
 8010672:	4b36      	ldr	r3, [pc, #216]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8010674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801067a:	60bb      	str	r3, [r7, #8]
 801067c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801067e:	4b34      	ldr	r3, [pc, #208]	@ (8010750 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	4a33      	ldr	r2, [pc, #204]	@ (8010750 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8010684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010688:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801068a:	f7fb fe59 	bl	800c340 <HAL_GetTick>
 801068e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8010690:	e008      	b.n	80106a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010692:	f7fb fe55 	bl	800c340 <HAL_GetTick>
 8010696:	4602      	mov	r2, r0
 8010698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801069a:	1ad3      	subs	r3, r2, r3
 801069c:	2b02      	cmp	r3, #2
 801069e:	d901      	bls.n	80106a4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80106a0:	2303      	movs	r3, #3
 80106a2:	e278      	b.n	8010b96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80106a4:	4b2a      	ldr	r3, [pc, #168]	@ (8010750 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d0f0      	beq.n	8010692 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80106b0:	4b26      	ldr	r3, [pc, #152]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80106b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80106b8:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80106ba:	6a3b      	ldr	r3, [r7, #32]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d02f      	beq.n	8010720 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80106c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80106c8:	6a3a      	ldr	r2, [r7, #32]
 80106ca:	429a      	cmp	r2, r3
 80106cc:	d028      	beq.n	8010720 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80106ce:	4b1f      	ldr	r3, [pc, #124]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80106d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80106d6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80106d8:	4b1e      	ldr	r3, [pc, #120]	@ (8010754 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80106da:	2201      	movs	r2, #1
 80106dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80106de:	4b1d      	ldr	r3, [pc, #116]	@ (8010754 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80106e0:	2200      	movs	r2, #0
 80106e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80106e4:	4a19      	ldr	r2, [pc, #100]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80106e6:	6a3b      	ldr	r3, [r7, #32]
 80106e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80106ea:	4b18      	ldr	r3, [pc, #96]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80106ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106ee:	f003 0301 	and.w	r3, r3, #1
 80106f2:	2b01      	cmp	r3, #1
 80106f4:	d114      	bne.n	8010720 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80106f6:	f7fb fe23 	bl	800c340 <HAL_GetTick>
 80106fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80106fc:	e00a      	b.n	8010714 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80106fe:	f7fb fe1f 	bl	800c340 <HAL_GetTick>
 8010702:	4602      	mov	r2, r0
 8010704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010706:	1ad3      	subs	r3, r2, r3
 8010708:	f241 3288 	movw	r2, #5000	@ 0x1388
 801070c:	4293      	cmp	r3, r2
 801070e:	d901      	bls.n	8010714 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8010710:	2303      	movs	r3, #3
 8010712:	e240      	b.n	8010b96 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010714:	4b0d      	ldr	r3, [pc, #52]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8010716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010718:	f003 0302 	and.w	r3, r3, #2
 801071c:	2b00      	cmp	r3, #0
 801071e:	d0ee      	beq.n	80106fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010724:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010728:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801072c:	d114      	bne.n	8010758 <HAL_RCCEx_PeriphCLKConfig+0x204>
 801072e:	4b07      	ldr	r3, [pc, #28]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8010730:	689b      	ldr	r3, [r3, #8]
 8010732:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801073a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801073e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010742:	4902      	ldr	r1, [pc, #8]	@ (801074c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8010744:	4313      	orrs	r3, r2
 8010746:	608b      	str	r3, [r1, #8]
 8010748:	e00c      	b.n	8010764 <HAL_RCCEx_PeriphCLKConfig+0x210>
 801074a:	bf00      	nop
 801074c:	40023800 	.word	0x40023800
 8010750:	40007000 	.word	0x40007000
 8010754:	42470e40 	.word	0x42470e40
 8010758:	4b4a      	ldr	r3, [pc, #296]	@ (8010884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801075a:	689b      	ldr	r3, [r3, #8]
 801075c:	4a49      	ldr	r2, [pc, #292]	@ (8010884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801075e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8010762:	6093      	str	r3, [r2, #8]
 8010764:	4b47      	ldr	r3, [pc, #284]	@ (8010884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8010766:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801076c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010770:	4944      	ldr	r1, [pc, #272]	@ (8010884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8010772:	4313      	orrs	r3, r2
 8010774:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	f003 0310 	and.w	r3, r3, #16
 801077e:	2b00      	cmp	r3, #0
 8010780:	d004      	beq.n	801078c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8010788:	4b3f      	ldr	r3, [pc, #252]	@ (8010888 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 801078a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010794:	2b00      	cmp	r3, #0
 8010796:	d00a      	beq.n	80107ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8010798:	4b3a      	ldr	r3, [pc, #232]	@ (8010884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801079a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801079e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80107a6:	4937      	ldr	r1, [pc, #220]	@ (8010884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80107a8:	4313      	orrs	r3, r2
 80107aa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d00a      	beq.n	80107d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80107ba:	4b32      	ldr	r3, [pc, #200]	@ (8010884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80107bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80107c0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80107c8:	492e      	ldr	r1, [pc, #184]	@ (8010884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80107ca:	4313      	orrs	r3, r2
 80107cc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d011      	beq.n	8010800 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80107dc:	4b29      	ldr	r3, [pc, #164]	@ (8010884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80107de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80107e2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80107ea:	4926      	ldr	r1, [pc, #152]	@ (8010884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80107ec:	4313      	orrs	r3, r2
 80107ee:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80107f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80107fa:	d101      	bne.n	8010800 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80107fc:	2301      	movs	r3, #1
 80107fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010808:	2b00      	cmp	r3, #0
 801080a:	d00a      	beq.n	8010822 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 801080c:	4b1d      	ldr	r3, [pc, #116]	@ (8010884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801080e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010812:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801081a:	491a      	ldr	r1, [pc, #104]	@ (8010884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801081c:	4313      	orrs	r3, r2
 801081e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801082a:	2b00      	cmp	r3, #0
 801082c:	d011      	beq.n	8010852 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 801082e:	4b15      	ldr	r3, [pc, #84]	@ (8010884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8010830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010834:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801083c:	4911      	ldr	r1, [pc, #68]	@ (8010884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 801083e:	4313      	orrs	r3, r2
 8010840:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801084c:	d101      	bne.n	8010852 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 801084e:	2301      	movs	r3, #1
 8010850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8010852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010854:	2b01      	cmp	r3, #1
 8010856:	d005      	beq.n	8010864 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010860:	f040 80ff 	bne.w	8010a62 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8010864:	4b09      	ldr	r3, [pc, #36]	@ (801088c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010866:	2200      	movs	r2, #0
 8010868:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801086a:	f7fb fd69 	bl	800c340 <HAL_GetTick>
 801086e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8010870:	e00e      	b.n	8010890 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8010872:	f7fb fd65 	bl	800c340 <HAL_GetTick>
 8010876:	4602      	mov	r2, r0
 8010878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801087a:	1ad3      	subs	r3, r2, r3
 801087c:	2b02      	cmp	r3, #2
 801087e:	d907      	bls.n	8010890 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8010880:	2303      	movs	r3, #3
 8010882:	e188      	b.n	8010b96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8010884:	40023800 	.word	0x40023800
 8010888:	424711e0 	.word	0x424711e0
 801088c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8010890:	4b7e      	ldr	r3, [pc, #504]	@ (8010a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010898:	2b00      	cmp	r3, #0
 801089a:	d1ea      	bne.n	8010872 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	f003 0301 	and.w	r3, r3, #1
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d003      	beq.n	80108b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d009      	beq.n	80108c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d028      	beq.n	801090e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d124      	bne.n	801090e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80108c4:	4b71      	ldr	r3, [pc, #452]	@ (8010a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80108c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108ca:	0c1b      	lsrs	r3, r3, #16
 80108cc:	f003 0303 	and.w	r3, r3, #3
 80108d0:	3301      	adds	r3, #1
 80108d2:	005b      	lsls	r3, r3, #1
 80108d4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80108d6:	4b6d      	ldr	r3, [pc, #436]	@ (8010a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80108d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108dc:	0e1b      	lsrs	r3, r3, #24
 80108de:	f003 030f 	and.w	r3, r3, #15
 80108e2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	685a      	ldr	r2, [r3, #4]
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	689b      	ldr	r3, [r3, #8]
 80108ec:	019b      	lsls	r3, r3, #6
 80108ee:	431a      	orrs	r2, r3
 80108f0:	69fb      	ldr	r3, [r7, #28]
 80108f2:	085b      	lsrs	r3, r3, #1
 80108f4:	3b01      	subs	r3, #1
 80108f6:	041b      	lsls	r3, r3, #16
 80108f8:	431a      	orrs	r2, r3
 80108fa:	69bb      	ldr	r3, [r7, #24]
 80108fc:	061b      	lsls	r3, r3, #24
 80108fe:	431a      	orrs	r2, r3
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	695b      	ldr	r3, [r3, #20]
 8010904:	071b      	lsls	r3, r3, #28
 8010906:	4961      	ldr	r1, [pc, #388]	@ (8010a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8010908:	4313      	orrs	r3, r2
 801090a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	f003 0304 	and.w	r3, r3, #4
 8010916:	2b00      	cmp	r3, #0
 8010918:	d004      	beq.n	8010924 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801091e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010922:	d00a      	beq.n	801093a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801092c:	2b00      	cmp	r3, #0
 801092e:	d035      	beq.n	801099c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010934:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010938:	d130      	bne.n	801099c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 801093a:	4b54      	ldr	r3, [pc, #336]	@ (8010a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801093c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010940:	0c1b      	lsrs	r3, r3, #16
 8010942:	f003 0303 	and.w	r3, r3, #3
 8010946:	3301      	adds	r3, #1
 8010948:	005b      	lsls	r3, r3, #1
 801094a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801094c:	4b4f      	ldr	r3, [pc, #316]	@ (8010a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801094e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010952:	0f1b      	lsrs	r3, r3, #28
 8010954:	f003 0307 	and.w	r3, r3, #7
 8010958:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	685a      	ldr	r2, [r3, #4]
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	689b      	ldr	r3, [r3, #8]
 8010962:	019b      	lsls	r3, r3, #6
 8010964:	431a      	orrs	r2, r3
 8010966:	69fb      	ldr	r3, [r7, #28]
 8010968:	085b      	lsrs	r3, r3, #1
 801096a:	3b01      	subs	r3, #1
 801096c:	041b      	lsls	r3, r3, #16
 801096e:	431a      	orrs	r2, r3
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	691b      	ldr	r3, [r3, #16]
 8010974:	061b      	lsls	r3, r3, #24
 8010976:	431a      	orrs	r2, r3
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	071b      	lsls	r3, r3, #28
 801097c:	4943      	ldr	r1, [pc, #268]	@ (8010a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 801097e:	4313      	orrs	r3, r2
 8010980:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8010984:	4b41      	ldr	r3, [pc, #260]	@ (8010a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8010986:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801098a:	f023 021f 	bic.w	r2, r3, #31
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010992:	3b01      	subs	r3, #1
 8010994:	493d      	ldr	r1, [pc, #244]	@ (8010a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8010996:	4313      	orrs	r3, r2
 8010998:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d029      	beq.n	80109fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80109ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80109b0:	d124      	bne.n	80109fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80109b2:	4b36      	ldr	r3, [pc, #216]	@ (8010a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80109b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80109b8:	0c1b      	lsrs	r3, r3, #16
 80109ba:	f003 0303 	and.w	r3, r3, #3
 80109be:	3301      	adds	r3, #1
 80109c0:	005b      	lsls	r3, r3, #1
 80109c2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80109c4:	4b31      	ldr	r3, [pc, #196]	@ (8010a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80109c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80109ca:	0f1b      	lsrs	r3, r3, #28
 80109cc:	f003 0307 	and.w	r3, r3, #7
 80109d0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	685a      	ldr	r2, [r3, #4]
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	689b      	ldr	r3, [r3, #8]
 80109da:	019b      	lsls	r3, r3, #6
 80109dc:	431a      	orrs	r2, r3
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	68db      	ldr	r3, [r3, #12]
 80109e2:	085b      	lsrs	r3, r3, #1
 80109e4:	3b01      	subs	r3, #1
 80109e6:	041b      	lsls	r3, r3, #16
 80109e8:	431a      	orrs	r2, r3
 80109ea:	69bb      	ldr	r3, [r7, #24]
 80109ec:	061b      	lsls	r3, r3, #24
 80109ee:	431a      	orrs	r2, r3
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	071b      	lsls	r3, r3, #28
 80109f4:	4925      	ldr	r1, [pc, #148]	@ (8010a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80109f6:	4313      	orrs	r3, r2
 80109f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d016      	beq.n	8010a36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	685a      	ldr	r2, [r3, #4]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	689b      	ldr	r3, [r3, #8]
 8010a10:	019b      	lsls	r3, r3, #6
 8010a12:	431a      	orrs	r2, r3
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	68db      	ldr	r3, [r3, #12]
 8010a18:	085b      	lsrs	r3, r3, #1
 8010a1a:	3b01      	subs	r3, #1
 8010a1c:	041b      	lsls	r3, r3, #16
 8010a1e:	431a      	orrs	r2, r3
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	691b      	ldr	r3, [r3, #16]
 8010a24:	061b      	lsls	r3, r3, #24
 8010a26:	431a      	orrs	r2, r3
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	695b      	ldr	r3, [r3, #20]
 8010a2c:	071b      	lsls	r3, r3, #28
 8010a2e:	4917      	ldr	r1, [pc, #92]	@ (8010a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8010a30:	4313      	orrs	r3, r2
 8010a32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8010a36:	4b16      	ldr	r3, [pc, #88]	@ (8010a90 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8010a38:	2201      	movs	r2, #1
 8010a3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8010a3c:	f7fb fc80 	bl	800c340 <HAL_GetTick>
 8010a40:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8010a42:	e008      	b.n	8010a56 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8010a44:	f7fb fc7c 	bl	800c340 <HAL_GetTick>
 8010a48:	4602      	mov	r2, r0
 8010a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a4c:	1ad3      	subs	r3, r2, r3
 8010a4e:	2b02      	cmp	r3, #2
 8010a50:	d901      	bls.n	8010a56 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8010a52:	2303      	movs	r3, #3
 8010a54:	e09f      	b.n	8010b96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8010a56:	4b0d      	ldr	r3, [pc, #52]	@ (8010a8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d0f0      	beq.n	8010a44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8010a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	f040 8095 	bne.w	8010b94 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8010a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8010a94 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8010a70:	f7fb fc66 	bl	800c340 <HAL_GetTick>
 8010a74:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8010a76:	e00f      	b.n	8010a98 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8010a78:	f7fb fc62 	bl	800c340 <HAL_GetTick>
 8010a7c:	4602      	mov	r2, r0
 8010a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a80:	1ad3      	subs	r3, r2, r3
 8010a82:	2b02      	cmp	r3, #2
 8010a84:	d908      	bls.n	8010a98 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8010a86:	2303      	movs	r3, #3
 8010a88:	e085      	b.n	8010b96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8010a8a:	bf00      	nop
 8010a8c:	40023800 	.word	0x40023800
 8010a90:	42470068 	.word	0x42470068
 8010a94:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8010a98:	4b41      	ldr	r3, [pc, #260]	@ (8010ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010aa4:	d0e8      	beq.n	8010a78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	f003 0304 	and.w	r3, r3, #4
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d003      	beq.n	8010aba <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d009      	beq.n	8010ace <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d02b      	beq.n	8010b1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d127      	bne.n	8010b1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8010ace:	4b34      	ldr	r3, [pc, #208]	@ (8010ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8010ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ad4:	0c1b      	lsrs	r3, r3, #16
 8010ad6:	f003 0303 	and.w	r3, r3, #3
 8010ada:	3301      	adds	r3, #1
 8010adc:	005b      	lsls	r3, r3, #1
 8010ade:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	699a      	ldr	r2, [r3, #24]
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	69db      	ldr	r3, [r3, #28]
 8010ae8:	019b      	lsls	r3, r3, #6
 8010aea:	431a      	orrs	r2, r3
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	085b      	lsrs	r3, r3, #1
 8010af0:	3b01      	subs	r3, #1
 8010af2:	041b      	lsls	r3, r3, #16
 8010af4:	431a      	orrs	r2, r3
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010afa:	061b      	lsls	r3, r3, #24
 8010afc:	4928      	ldr	r1, [pc, #160]	@ (8010ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8010afe:	4313      	orrs	r3, r2
 8010b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8010b04:	4b26      	ldr	r3, [pc, #152]	@ (8010ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8010b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010b0a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b12:	3b01      	subs	r3, #1
 8010b14:	021b      	lsls	r3, r3, #8
 8010b16:	4922      	ldr	r1, [pc, #136]	@ (8010ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8010b18:	4313      	orrs	r3, r2
 8010b1a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d01d      	beq.n	8010b66 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010b32:	d118      	bne.n	8010b66 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8010b34:	4b1a      	ldr	r3, [pc, #104]	@ (8010ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8010b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010b3a:	0e1b      	lsrs	r3, r3, #24
 8010b3c:	f003 030f 	and.w	r3, r3, #15
 8010b40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	699a      	ldr	r2, [r3, #24]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	69db      	ldr	r3, [r3, #28]
 8010b4a:	019b      	lsls	r3, r3, #6
 8010b4c:	431a      	orrs	r2, r3
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6a1b      	ldr	r3, [r3, #32]
 8010b52:	085b      	lsrs	r3, r3, #1
 8010b54:	3b01      	subs	r3, #1
 8010b56:	041b      	lsls	r3, r3, #16
 8010b58:	431a      	orrs	r2, r3
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	061b      	lsls	r3, r3, #24
 8010b5e:	4910      	ldr	r1, [pc, #64]	@ (8010ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8010b60:	4313      	orrs	r3, r2
 8010b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8010b66:	4b0f      	ldr	r3, [pc, #60]	@ (8010ba4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8010b68:	2201      	movs	r2, #1
 8010b6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8010b6c:	f7fb fbe8 	bl	800c340 <HAL_GetTick>
 8010b70:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8010b72:	e008      	b.n	8010b86 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8010b74:	f7fb fbe4 	bl	800c340 <HAL_GetTick>
 8010b78:	4602      	mov	r2, r0
 8010b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b7c:	1ad3      	subs	r3, r2, r3
 8010b7e:	2b02      	cmp	r3, #2
 8010b80:	d901      	bls.n	8010b86 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8010b82:	2303      	movs	r3, #3
 8010b84:	e007      	b.n	8010b96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8010b86:	4b06      	ldr	r3, [pc, #24]	@ (8010ba0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010b8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010b92:	d1ef      	bne.n	8010b74 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8010b94:	2300      	movs	r3, #0
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3730      	adds	r7, #48	@ 0x30
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	40023800 	.word	0x40023800
 8010ba4:	42470070 	.word	0x42470070

08010ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010bac:	b0a6      	sub	sp, #152	@ 0x98
 8010bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010bce:	4bc8      	ldr	r3, [pc, #800]	@ (8010ef0 <HAL_RCC_GetSysClockFreq+0x348>)
 8010bd0:	689b      	ldr	r3, [r3, #8]
 8010bd2:	f003 030c 	and.w	r3, r3, #12
 8010bd6:	2b0c      	cmp	r3, #12
 8010bd8:	f200 817e 	bhi.w	8010ed8 <HAL_RCC_GetSysClockFreq+0x330>
 8010bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8010be4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8010bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010be2:	bf00      	nop
 8010be4:	08010c19 	.word	0x08010c19
 8010be8:	08010ed9 	.word	0x08010ed9
 8010bec:	08010ed9 	.word	0x08010ed9
 8010bf0:	08010ed9 	.word	0x08010ed9
 8010bf4:	08010c21 	.word	0x08010c21
 8010bf8:	08010ed9 	.word	0x08010ed9
 8010bfc:	08010ed9 	.word	0x08010ed9
 8010c00:	08010ed9 	.word	0x08010ed9
 8010c04:	08010c29 	.word	0x08010c29
 8010c08:	08010ed9 	.word	0x08010ed9
 8010c0c:	08010ed9 	.word	0x08010ed9
 8010c10:	08010ed9 	.word	0x08010ed9
 8010c14:	08010d93 	.word	0x08010d93
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010c18:	4bb6      	ldr	r3, [pc, #728]	@ (8010ef4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8010c1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8010c1e:	e15f      	b.n	8010ee0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010c20:	4bb5      	ldr	r3, [pc, #724]	@ (8010ef8 <HAL_RCC_GetSysClockFreq+0x350>)
 8010c22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8010c26:	e15b      	b.n	8010ee0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010c28:	4bb1      	ldr	r3, [pc, #708]	@ (8010ef0 <HAL_RCC_GetSysClockFreq+0x348>)
 8010c2a:	685b      	ldr	r3, [r3, #4]
 8010c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010c30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010c34:	4bae      	ldr	r3, [pc, #696]	@ (8010ef0 <HAL_RCC_GetSysClockFreq+0x348>)
 8010c36:	685b      	ldr	r3, [r3, #4]
 8010c38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d031      	beq.n	8010ca4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010c40:	4bab      	ldr	r3, [pc, #684]	@ (8010ef0 <HAL_RCC_GetSysClockFreq+0x348>)
 8010c42:	685b      	ldr	r3, [r3, #4]
 8010c44:	099b      	lsrs	r3, r3, #6
 8010c46:	2200      	movs	r2, #0
 8010c48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010c4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010c4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c52:	663b      	str	r3, [r7, #96]	@ 0x60
 8010c54:	2300      	movs	r3, #0
 8010c56:	667b      	str	r3, [r7, #100]	@ 0x64
 8010c58:	4ba7      	ldr	r3, [pc, #668]	@ (8010ef8 <HAL_RCC_GetSysClockFreq+0x350>)
 8010c5a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8010c5e:	462a      	mov	r2, r5
 8010c60:	fb03 f202 	mul.w	r2, r3, r2
 8010c64:	2300      	movs	r3, #0
 8010c66:	4621      	mov	r1, r4
 8010c68:	fb01 f303 	mul.w	r3, r1, r3
 8010c6c:	4413      	add	r3, r2
 8010c6e:	4aa2      	ldr	r2, [pc, #648]	@ (8010ef8 <HAL_RCC_GetSysClockFreq+0x350>)
 8010c70:	4621      	mov	r1, r4
 8010c72:	fba1 1202 	umull	r1, r2, r1, r2
 8010c76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010c78:	460a      	mov	r2, r1
 8010c7a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8010c7c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010c7e:	4413      	add	r3, r2
 8010c80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010c86:	2200      	movs	r2, #0
 8010c88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010c8a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8010c8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010c90:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8010c94:	f7f0 f818 	bl	8000cc8 <__aeabi_uldivmod>
 8010c98:	4602      	mov	r2, r0
 8010c9a:	460b      	mov	r3, r1
 8010c9c:	4613      	mov	r3, r2
 8010c9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010ca2:	e064      	b.n	8010d6e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010ca4:	4b92      	ldr	r3, [pc, #584]	@ (8010ef0 <HAL_RCC_GetSysClockFreq+0x348>)
 8010ca6:	685b      	ldr	r3, [r3, #4]
 8010ca8:	099b      	lsrs	r3, r3, #6
 8010caa:	2200      	movs	r2, #0
 8010cac:	653b      	str	r3, [r7, #80]	@ 0x50
 8010cae:	657a      	str	r2, [r7, #84]	@ 0x54
 8010cb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010cb8:	2300      	movs	r3, #0
 8010cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010cbc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8010cc0:	4622      	mov	r2, r4
 8010cc2:	462b      	mov	r3, r5
 8010cc4:	f04f 0000 	mov.w	r0, #0
 8010cc8:	f04f 0100 	mov.w	r1, #0
 8010ccc:	0159      	lsls	r1, r3, #5
 8010cce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010cd2:	0150      	lsls	r0, r2, #5
 8010cd4:	4602      	mov	r2, r0
 8010cd6:	460b      	mov	r3, r1
 8010cd8:	4621      	mov	r1, r4
 8010cda:	1a51      	subs	r1, r2, r1
 8010cdc:	6139      	str	r1, [r7, #16]
 8010cde:	4629      	mov	r1, r5
 8010ce0:	eb63 0301 	sbc.w	r3, r3, r1
 8010ce4:	617b      	str	r3, [r7, #20]
 8010ce6:	f04f 0200 	mov.w	r2, #0
 8010cea:	f04f 0300 	mov.w	r3, #0
 8010cee:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010cf2:	4659      	mov	r1, fp
 8010cf4:	018b      	lsls	r3, r1, #6
 8010cf6:	4651      	mov	r1, sl
 8010cf8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8010cfc:	4651      	mov	r1, sl
 8010cfe:	018a      	lsls	r2, r1, #6
 8010d00:	4651      	mov	r1, sl
 8010d02:	ebb2 0801 	subs.w	r8, r2, r1
 8010d06:	4659      	mov	r1, fp
 8010d08:	eb63 0901 	sbc.w	r9, r3, r1
 8010d0c:	f04f 0200 	mov.w	r2, #0
 8010d10:	f04f 0300 	mov.w	r3, #0
 8010d14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010d18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010d1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010d20:	4690      	mov	r8, r2
 8010d22:	4699      	mov	r9, r3
 8010d24:	4623      	mov	r3, r4
 8010d26:	eb18 0303 	adds.w	r3, r8, r3
 8010d2a:	60bb      	str	r3, [r7, #8]
 8010d2c:	462b      	mov	r3, r5
 8010d2e:	eb49 0303 	adc.w	r3, r9, r3
 8010d32:	60fb      	str	r3, [r7, #12]
 8010d34:	f04f 0200 	mov.w	r2, #0
 8010d38:	f04f 0300 	mov.w	r3, #0
 8010d3c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8010d40:	4629      	mov	r1, r5
 8010d42:	028b      	lsls	r3, r1, #10
 8010d44:	4621      	mov	r1, r4
 8010d46:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010d4a:	4621      	mov	r1, r4
 8010d4c:	028a      	lsls	r2, r1, #10
 8010d4e:	4610      	mov	r0, r2
 8010d50:	4619      	mov	r1, r3
 8010d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010d56:	2200      	movs	r2, #0
 8010d58:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8010d5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8010d60:	f7ef ffb2 	bl	8000cc8 <__aeabi_uldivmod>
 8010d64:	4602      	mov	r2, r0
 8010d66:	460b      	mov	r3, r1
 8010d68:	4613      	mov	r3, r2
 8010d6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8010d6e:	4b60      	ldr	r3, [pc, #384]	@ (8010ef0 <HAL_RCC_GetSysClockFreq+0x348>)
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	0c1b      	lsrs	r3, r3, #16
 8010d74:	f003 0303 	and.w	r3, r3, #3
 8010d78:	3301      	adds	r3, #1
 8010d7a:	005b      	lsls	r3, r3, #1
 8010d7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8010d80:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8010d90:	e0a6      	b.n	8010ee0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010d92:	4b57      	ldr	r3, [pc, #348]	@ (8010ef0 <HAL_RCC_GetSysClockFreq+0x348>)
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010d9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010d9e:	4b54      	ldr	r3, [pc, #336]	@ (8010ef0 <HAL_RCC_GetSysClockFreq+0x348>)
 8010da0:	685b      	ldr	r3, [r3, #4]
 8010da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d02a      	beq.n	8010e00 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010daa:	4b51      	ldr	r3, [pc, #324]	@ (8010ef0 <HAL_RCC_GetSysClockFreq+0x348>)
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	099b      	lsrs	r3, r3, #6
 8010db0:	2200      	movs	r2, #0
 8010db2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010db4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8010db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010db8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8010dbc:	2100      	movs	r1, #0
 8010dbe:	4b4e      	ldr	r3, [pc, #312]	@ (8010ef8 <HAL_RCC_GetSysClockFreq+0x350>)
 8010dc0:	fb03 f201 	mul.w	r2, r3, r1
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	fb00 f303 	mul.w	r3, r0, r3
 8010dca:	4413      	add	r3, r2
 8010dcc:	4a4a      	ldr	r2, [pc, #296]	@ (8010ef8 <HAL_RCC_GetSysClockFreq+0x350>)
 8010dce:	fba0 1202 	umull	r1, r2, r0, r2
 8010dd2:	677a      	str	r2, [r7, #116]	@ 0x74
 8010dd4:	460a      	mov	r2, r1
 8010dd6:	673a      	str	r2, [r7, #112]	@ 0x70
 8010dd8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8010dda:	4413      	add	r3, r2
 8010ddc:	677b      	str	r3, [r7, #116]	@ 0x74
 8010dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010de2:	2200      	movs	r2, #0
 8010de4:	633b      	str	r3, [r7, #48]	@ 0x30
 8010de6:	637a      	str	r2, [r7, #52]	@ 0x34
 8010de8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8010dec:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8010df0:	f7ef ff6a 	bl	8000cc8 <__aeabi_uldivmod>
 8010df4:	4602      	mov	r2, r0
 8010df6:	460b      	mov	r3, r1
 8010df8:	4613      	mov	r3, r2
 8010dfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010dfe:	e05b      	b.n	8010eb8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010e00:	4b3b      	ldr	r3, [pc, #236]	@ (8010ef0 <HAL_RCC_GetSysClockFreq+0x348>)
 8010e02:	685b      	ldr	r3, [r3, #4]
 8010e04:	099b      	lsrs	r3, r3, #6
 8010e06:	2200      	movs	r2, #0
 8010e08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e12:	623b      	str	r3, [r7, #32]
 8010e14:	2300      	movs	r3, #0
 8010e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8010e1c:	4642      	mov	r2, r8
 8010e1e:	464b      	mov	r3, r9
 8010e20:	f04f 0000 	mov.w	r0, #0
 8010e24:	f04f 0100 	mov.w	r1, #0
 8010e28:	0159      	lsls	r1, r3, #5
 8010e2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010e2e:	0150      	lsls	r0, r2, #5
 8010e30:	4602      	mov	r2, r0
 8010e32:	460b      	mov	r3, r1
 8010e34:	4641      	mov	r1, r8
 8010e36:	ebb2 0a01 	subs.w	sl, r2, r1
 8010e3a:	4649      	mov	r1, r9
 8010e3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8010e40:	f04f 0200 	mov.w	r2, #0
 8010e44:	f04f 0300 	mov.w	r3, #0
 8010e48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8010e4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8010e50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8010e54:	ebb2 040a 	subs.w	r4, r2, sl
 8010e58:	eb63 050b 	sbc.w	r5, r3, fp
 8010e5c:	f04f 0200 	mov.w	r2, #0
 8010e60:	f04f 0300 	mov.w	r3, #0
 8010e64:	00eb      	lsls	r3, r5, #3
 8010e66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010e6a:	00e2      	lsls	r2, r4, #3
 8010e6c:	4614      	mov	r4, r2
 8010e6e:	461d      	mov	r5, r3
 8010e70:	4643      	mov	r3, r8
 8010e72:	18e3      	adds	r3, r4, r3
 8010e74:	603b      	str	r3, [r7, #0]
 8010e76:	464b      	mov	r3, r9
 8010e78:	eb45 0303 	adc.w	r3, r5, r3
 8010e7c:	607b      	str	r3, [r7, #4]
 8010e7e:	f04f 0200 	mov.w	r2, #0
 8010e82:	f04f 0300 	mov.w	r3, #0
 8010e86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010e8a:	4629      	mov	r1, r5
 8010e8c:	028b      	lsls	r3, r1, #10
 8010e8e:	4621      	mov	r1, r4
 8010e90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010e94:	4621      	mov	r1, r4
 8010e96:	028a      	lsls	r2, r1, #10
 8010e98:	4610      	mov	r0, r2
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	61bb      	str	r3, [r7, #24]
 8010ea4:	61fa      	str	r2, [r7, #28]
 8010ea6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010eaa:	f7ef ff0d 	bl	8000cc8 <__aeabi_uldivmod>
 8010eae:	4602      	mov	r2, r0
 8010eb0:	460b      	mov	r3, r1
 8010eb2:	4613      	mov	r3, r2
 8010eb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8010eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8010ef0 <HAL_RCC_GetSysClockFreq+0x348>)
 8010eba:	685b      	ldr	r3, [r3, #4]
 8010ebc:	0f1b      	lsrs	r3, r3, #28
 8010ebe:	f003 0307 	and.w	r3, r3, #7
 8010ec2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8010ec6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010eca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ed2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8010ed6:	e003      	b.n	8010ee0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010ed8:	4b06      	ldr	r3, [pc, #24]	@ (8010ef4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8010eda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8010ede:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010ee0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	3798      	adds	r7, #152	@ 0x98
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010eee:	bf00      	nop
 8010ef0:	40023800 	.word	0x40023800
 8010ef4:	00f42400 	.word	0x00f42400
 8010ef8:	017d7840 	.word	0x017d7840

08010efc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b086      	sub	sp, #24
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d101      	bne.n	8010f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	e28d      	b.n	801142a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	f003 0301 	and.w	r3, r3, #1
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	f000 8083 	beq.w	8011022 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8010f1c:	4b94      	ldr	r3, [pc, #592]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8010f1e:	689b      	ldr	r3, [r3, #8]
 8010f20:	f003 030c 	and.w	r3, r3, #12
 8010f24:	2b04      	cmp	r3, #4
 8010f26:	d019      	beq.n	8010f5c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8010f28:	4b91      	ldr	r3, [pc, #580]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8010f2a:	689b      	ldr	r3, [r3, #8]
 8010f2c:	f003 030c 	and.w	r3, r3, #12
        || \
 8010f30:	2b08      	cmp	r3, #8
 8010f32:	d106      	bne.n	8010f42 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8010f34:	4b8e      	ldr	r3, [pc, #568]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8010f36:	685b      	ldr	r3, [r3, #4]
 8010f38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010f3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010f40:	d00c      	beq.n	8010f5c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010f42:	4b8b      	ldr	r3, [pc, #556]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8010f44:	689b      	ldr	r3, [r3, #8]
 8010f46:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8010f4a:	2b0c      	cmp	r3, #12
 8010f4c:	d112      	bne.n	8010f74 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010f4e:	4b88      	ldr	r3, [pc, #544]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8010f50:	685b      	ldr	r3, [r3, #4]
 8010f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010f56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010f5a:	d10b      	bne.n	8010f74 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010f5c:	4b84      	ldr	r3, [pc, #528]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d05b      	beq.n	8011020 <HAL_RCC_OscConfig+0x124>
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	685b      	ldr	r3, [r3, #4]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d157      	bne.n	8011020 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8010f70:	2301      	movs	r3, #1
 8010f72:	e25a      	b.n	801142a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	685b      	ldr	r3, [r3, #4]
 8010f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010f7c:	d106      	bne.n	8010f8c <HAL_RCC_OscConfig+0x90>
 8010f7e:	4b7c      	ldr	r3, [pc, #496]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	4a7b      	ldr	r2, [pc, #492]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8010f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010f88:	6013      	str	r3, [r2, #0]
 8010f8a:	e01d      	b.n	8010fc8 <HAL_RCC_OscConfig+0xcc>
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	685b      	ldr	r3, [r3, #4]
 8010f90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010f94:	d10c      	bne.n	8010fb0 <HAL_RCC_OscConfig+0xb4>
 8010f96:	4b76      	ldr	r3, [pc, #472]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	4a75      	ldr	r2, [pc, #468]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8010f9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010fa0:	6013      	str	r3, [r2, #0]
 8010fa2:	4b73      	ldr	r3, [pc, #460]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	4a72      	ldr	r2, [pc, #456]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8010fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010fac:	6013      	str	r3, [r2, #0]
 8010fae:	e00b      	b.n	8010fc8 <HAL_RCC_OscConfig+0xcc>
 8010fb0:	4b6f      	ldr	r3, [pc, #444]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	4a6e      	ldr	r2, [pc, #440]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8010fb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010fba:	6013      	str	r3, [r2, #0]
 8010fbc:	4b6c      	ldr	r3, [pc, #432]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	4a6b      	ldr	r2, [pc, #428]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8010fc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d013      	beq.n	8010ff8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010fd0:	f7fb f9b6 	bl	800c340 <HAL_GetTick>
 8010fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010fd6:	e008      	b.n	8010fea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010fd8:	f7fb f9b2 	bl	800c340 <HAL_GetTick>
 8010fdc:	4602      	mov	r2, r0
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	1ad3      	subs	r3, r2, r3
 8010fe2:	2b64      	cmp	r3, #100	@ 0x64
 8010fe4:	d901      	bls.n	8010fea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8010fe6:	2303      	movs	r3, #3
 8010fe8:	e21f      	b.n	801142a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010fea:	4b61      	ldr	r3, [pc, #388]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d0f0      	beq.n	8010fd8 <HAL_RCC_OscConfig+0xdc>
 8010ff6:	e014      	b.n	8011022 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010ff8:	f7fb f9a2 	bl	800c340 <HAL_GetTick>
 8010ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010ffe:	e008      	b.n	8011012 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011000:	f7fb f99e 	bl	800c340 <HAL_GetTick>
 8011004:	4602      	mov	r2, r0
 8011006:	693b      	ldr	r3, [r7, #16]
 8011008:	1ad3      	subs	r3, r2, r3
 801100a:	2b64      	cmp	r3, #100	@ 0x64
 801100c:	d901      	bls.n	8011012 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 801100e:	2303      	movs	r3, #3
 8011010:	e20b      	b.n	801142a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011012:	4b57      	ldr	r3, [pc, #348]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801101a:	2b00      	cmp	r3, #0
 801101c:	d1f0      	bne.n	8011000 <HAL_RCC_OscConfig+0x104>
 801101e:	e000      	b.n	8011022 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	f003 0302 	and.w	r3, r3, #2
 801102a:	2b00      	cmp	r3, #0
 801102c:	d06f      	beq.n	801110e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801102e:	4b50      	ldr	r3, [pc, #320]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8011030:	689b      	ldr	r3, [r3, #8]
 8011032:	f003 030c 	and.w	r3, r3, #12
 8011036:	2b00      	cmp	r3, #0
 8011038:	d017      	beq.n	801106a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 801103a:	4b4d      	ldr	r3, [pc, #308]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 801103c:	689b      	ldr	r3, [r3, #8]
 801103e:	f003 030c 	and.w	r3, r3, #12
        || \
 8011042:	2b08      	cmp	r3, #8
 8011044:	d105      	bne.n	8011052 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8011046:	4b4a      	ldr	r3, [pc, #296]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801104e:	2b00      	cmp	r3, #0
 8011050:	d00b      	beq.n	801106a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011052:	4b47      	ldr	r3, [pc, #284]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8011054:	689b      	ldr	r3, [r3, #8]
 8011056:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 801105a:	2b0c      	cmp	r3, #12
 801105c:	d11c      	bne.n	8011098 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801105e:	4b44      	ldr	r3, [pc, #272]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011066:	2b00      	cmp	r3, #0
 8011068:	d116      	bne.n	8011098 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801106a:	4b41      	ldr	r3, [pc, #260]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	f003 0302 	and.w	r3, r3, #2
 8011072:	2b00      	cmp	r3, #0
 8011074:	d005      	beq.n	8011082 <HAL_RCC_OscConfig+0x186>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	68db      	ldr	r3, [r3, #12]
 801107a:	2b01      	cmp	r3, #1
 801107c:	d001      	beq.n	8011082 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 801107e:	2301      	movs	r3, #1
 8011080:	e1d3      	b.n	801142a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011082:	4b3b      	ldr	r3, [pc, #236]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	691b      	ldr	r3, [r3, #16]
 801108e:	00db      	lsls	r3, r3, #3
 8011090:	4937      	ldr	r1, [pc, #220]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8011092:	4313      	orrs	r3, r2
 8011094:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011096:	e03a      	b.n	801110e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	68db      	ldr	r3, [r3, #12]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d020      	beq.n	80110e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80110a0:	4b34      	ldr	r3, [pc, #208]	@ (8011174 <HAL_RCC_OscConfig+0x278>)
 80110a2:	2201      	movs	r2, #1
 80110a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80110a6:	f7fb f94b 	bl	800c340 <HAL_GetTick>
 80110aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80110ac:	e008      	b.n	80110c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80110ae:	f7fb f947 	bl	800c340 <HAL_GetTick>
 80110b2:	4602      	mov	r2, r0
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	1ad3      	subs	r3, r2, r3
 80110b8:	2b02      	cmp	r3, #2
 80110ba:	d901      	bls.n	80110c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80110bc:	2303      	movs	r3, #3
 80110be:	e1b4      	b.n	801142a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80110c0:	4b2b      	ldr	r3, [pc, #172]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	f003 0302 	and.w	r3, r3, #2
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d0f0      	beq.n	80110ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80110cc:	4b28      	ldr	r3, [pc, #160]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	691b      	ldr	r3, [r3, #16]
 80110d8:	00db      	lsls	r3, r3, #3
 80110da:	4925      	ldr	r1, [pc, #148]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 80110dc:	4313      	orrs	r3, r2
 80110de:	600b      	str	r3, [r1, #0]
 80110e0:	e015      	b.n	801110e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80110e2:	4b24      	ldr	r3, [pc, #144]	@ (8011174 <HAL_RCC_OscConfig+0x278>)
 80110e4:	2200      	movs	r2, #0
 80110e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80110e8:	f7fb f92a 	bl	800c340 <HAL_GetTick>
 80110ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80110ee:	e008      	b.n	8011102 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80110f0:	f7fb f926 	bl	800c340 <HAL_GetTick>
 80110f4:	4602      	mov	r2, r0
 80110f6:	693b      	ldr	r3, [r7, #16]
 80110f8:	1ad3      	subs	r3, r2, r3
 80110fa:	2b02      	cmp	r3, #2
 80110fc:	d901      	bls.n	8011102 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80110fe:	2303      	movs	r3, #3
 8011100:	e193      	b.n	801142a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011102:	4b1b      	ldr	r3, [pc, #108]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	f003 0302 	and.w	r3, r3, #2
 801110a:	2b00      	cmp	r3, #0
 801110c:	d1f0      	bne.n	80110f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	f003 0308 	and.w	r3, r3, #8
 8011116:	2b00      	cmp	r3, #0
 8011118:	d036      	beq.n	8011188 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	695b      	ldr	r3, [r3, #20]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d016      	beq.n	8011150 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011122:	4b15      	ldr	r3, [pc, #84]	@ (8011178 <HAL_RCC_OscConfig+0x27c>)
 8011124:	2201      	movs	r2, #1
 8011126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011128:	f7fb f90a 	bl	800c340 <HAL_GetTick>
 801112c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801112e:	e008      	b.n	8011142 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011130:	f7fb f906 	bl	800c340 <HAL_GetTick>
 8011134:	4602      	mov	r2, r0
 8011136:	693b      	ldr	r3, [r7, #16]
 8011138:	1ad3      	subs	r3, r2, r3
 801113a:	2b02      	cmp	r3, #2
 801113c:	d901      	bls.n	8011142 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 801113e:	2303      	movs	r3, #3
 8011140:	e173      	b.n	801142a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011142:	4b0b      	ldr	r3, [pc, #44]	@ (8011170 <HAL_RCC_OscConfig+0x274>)
 8011144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011146:	f003 0302 	and.w	r3, r3, #2
 801114a:	2b00      	cmp	r3, #0
 801114c:	d0f0      	beq.n	8011130 <HAL_RCC_OscConfig+0x234>
 801114e:	e01b      	b.n	8011188 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011150:	4b09      	ldr	r3, [pc, #36]	@ (8011178 <HAL_RCC_OscConfig+0x27c>)
 8011152:	2200      	movs	r2, #0
 8011154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011156:	f7fb f8f3 	bl	800c340 <HAL_GetTick>
 801115a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801115c:	e00e      	b.n	801117c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801115e:	f7fb f8ef 	bl	800c340 <HAL_GetTick>
 8011162:	4602      	mov	r2, r0
 8011164:	693b      	ldr	r3, [r7, #16]
 8011166:	1ad3      	subs	r3, r2, r3
 8011168:	2b02      	cmp	r3, #2
 801116a:	d907      	bls.n	801117c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 801116c:	2303      	movs	r3, #3
 801116e:	e15c      	b.n	801142a <HAL_RCC_OscConfig+0x52e>
 8011170:	40023800 	.word	0x40023800
 8011174:	42470000 	.word	0x42470000
 8011178:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801117c:	4b8a      	ldr	r3, [pc, #552]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 801117e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011180:	f003 0302 	and.w	r3, r3, #2
 8011184:	2b00      	cmp	r3, #0
 8011186:	d1ea      	bne.n	801115e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	f003 0304 	and.w	r3, r3, #4
 8011190:	2b00      	cmp	r3, #0
 8011192:	f000 8097 	beq.w	80112c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011196:	2300      	movs	r3, #0
 8011198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801119a:	4b83      	ldr	r3, [pc, #524]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 801119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801119e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d10f      	bne.n	80111c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80111a6:	2300      	movs	r3, #0
 80111a8:	60bb      	str	r3, [r7, #8]
 80111aa:	4b7f      	ldr	r3, [pc, #508]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 80111ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111ae:	4a7e      	ldr	r2, [pc, #504]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 80111b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80111b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80111b6:	4b7c      	ldr	r3, [pc, #496]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 80111b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80111be:	60bb      	str	r3, [r7, #8]
 80111c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80111c2:	2301      	movs	r3, #1
 80111c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80111c6:	4b79      	ldr	r3, [pc, #484]	@ (80113ac <HAL_RCC_OscConfig+0x4b0>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d118      	bne.n	8011204 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80111d2:	4b76      	ldr	r3, [pc, #472]	@ (80113ac <HAL_RCC_OscConfig+0x4b0>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	4a75      	ldr	r2, [pc, #468]	@ (80113ac <HAL_RCC_OscConfig+0x4b0>)
 80111d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80111dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80111de:	f7fb f8af 	bl	800c340 <HAL_GetTick>
 80111e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80111e4:	e008      	b.n	80111f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80111e6:	f7fb f8ab 	bl	800c340 <HAL_GetTick>
 80111ea:	4602      	mov	r2, r0
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	1ad3      	subs	r3, r2, r3
 80111f0:	2b02      	cmp	r3, #2
 80111f2:	d901      	bls.n	80111f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80111f4:	2303      	movs	r3, #3
 80111f6:	e118      	b.n	801142a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80111f8:	4b6c      	ldr	r3, [pc, #432]	@ (80113ac <HAL_RCC_OscConfig+0x4b0>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011200:	2b00      	cmp	r3, #0
 8011202:	d0f0      	beq.n	80111e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	689b      	ldr	r3, [r3, #8]
 8011208:	2b01      	cmp	r3, #1
 801120a:	d106      	bne.n	801121a <HAL_RCC_OscConfig+0x31e>
 801120c:	4b66      	ldr	r3, [pc, #408]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 801120e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011210:	4a65      	ldr	r2, [pc, #404]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 8011212:	f043 0301 	orr.w	r3, r3, #1
 8011216:	6713      	str	r3, [r2, #112]	@ 0x70
 8011218:	e01c      	b.n	8011254 <HAL_RCC_OscConfig+0x358>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	689b      	ldr	r3, [r3, #8]
 801121e:	2b05      	cmp	r3, #5
 8011220:	d10c      	bne.n	801123c <HAL_RCC_OscConfig+0x340>
 8011222:	4b61      	ldr	r3, [pc, #388]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 8011224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011226:	4a60      	ldr	r2, [pc, #384]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 8011228:	f043 0304 	orr.w	r3, r3, #4
 801122c:	6713      	str	r3, [r2, #112]	@ 0x70
 801122e:	4b5e      	ldr	r3, [pc, #376]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 8011230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011232:	4a5d      	ldr	r2, [pc, #372]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 8011234:	f043 0301 	orr.w	r3, r3, #1
 8011238:	6713      	str	r3, [r2, #112]	@ 0x70
 801123a:	e00b      	b.n	8011254 <HAL_RCC_OscConfig+0x358>
 801123c:	4b5a      	ldr	r3, [pc, #360]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 801123e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011240:	4a59      	ldr	r2, [pc, #356]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 8011242:	f023 0301 	bic.w	r3, r3, #1
 8011246:	6713      	str	r3, [r2, #112]	@ 0x70
 8011248:	4b57      	ldr	r3, [pc, #348]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 801124a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801124c:	4a56      	ldr	r2, [pc, #344]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 801124e:	f023 0304 	bic.w	r3, r3, #4
 8011252:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	689b      	ldr	r3, [r3, #8]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d015      	beq.n	8011288 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801125c:	f7fb f870 	bl	800c340 <HAL_GetTick>
 8011260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011262:	e00a      	b.n	801127a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011264:	f7fb f86c 	bl	800c340 <HAL_GetTick>
 8011268:	4602      	mov	r2, r0
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	1ad3      	subs	r3, r2, r3
 801126e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011272:	4293      	cmp	r3, r2
 8011274:	d901      	bls.n	801127a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8011276:	2303      	movs	r3, #3
 8011278:	e0d7      	b.n	801142a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801127a:	4b4b      	ldr	r3, [pc, #300]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 801127c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801127e:	f003 0302 	and.w	r3, r3, #2
 8011282:	2b00      	cmp	r3, #0
 8011284:	d0ee      	beq.n	8011264 <HAL_RCC_OscConfig+0x368>
 8011286:	e014      	b.n	80112b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011288:	f7fb f85a 	bl	800c340 <HAL_GetTick>
 801128c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801128e:	e00a      	b.n	80112a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011290:	f7fb f856 	bl	800c340 <HAL_GetTick>
 8011294:	4602      	mov	r2, r0
 8011296:	693b      	ldr	r3, [r7, #16]
 8011298:	1ad3      	subs	r3, r2, r3
 801129a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801129e:	4293      	cmp	r3, r2
 80112a0:	d901      	bls.n	80112a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80112a2:	2303      	movs	r3, #3
 80112a4:	e0c1      	b.n	801142a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80112a6:	4b40      	ldr	r3, [pc, #256]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 80112a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112aa:	f003 0302 	and.w	r3, r3, #2
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d1ee      	bne.n	8011290 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80112b2:	7dfb      	ldrb	r3, [r7, #23]
 80112b4:	2b01      	cmp	r3, #1
 80112b6:	d105      	bne.n	80112c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80112b8:	4b3b      	ldr	r3, [pc, #236]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 80112ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80112bc:	4a3a      	ldr	r2, [pc, #232]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 80112be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80112c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	699b      	ldr	r3, [r3, #24]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	f000 80ad 	beq.w	8011428 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80112ce:	4b36      	ldr	r3, [pc, #216]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 80112d0:	689b      	ldr	r3, [r3, #8]
 80112d2:	f003 030c 	and.w	r3, r3, #12
 80112d6:	2b08      	cmp	r3, #8
 80112d8:	d060      	beq.n	801139c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	699b      	ldr	r3, [r3, #24]
 80112de:	2b02      	cmp	r3, #2
 80112e0:	d145      	bne.n	801136e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80112e2:	4b33      	ldr	r3, [pc, #204]	@ (80113b0 <HAL_RCC_OscConfig+0x4b4>)
 80112e4:	2200      	movs	r2, #0
 80112e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112e8:	f7fb f82a 	bl	800c340 <HAL_GetTick>
 80112ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80112ee:	e008      	b.n	8011302 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80112f0:	f7fb f826 	bl	800c340 <HAL_GetTick>
 80112f4:	4602      	mov	r2, r0
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	1ad3      	subs	r3, r2, r3
 80112fa:	2b02      	cmp	r3, #2
 80112fc:	d901      	bls.n	8011302 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80112fe:	2303      	movs	r3, #3
 8011300:	e093      	b.n	801142a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011302:	4b29      	ldr	r3, [pc, #164]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801130a:	2b00      	cmp	r3, #0
 801130c:	d1f0      	bne.n	80112f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	69da      	ldr	r2, [r3, #28]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6a1b      	ldr	r3, [r3, #32]
 8011316:	431a      	orrs	r2, r3
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801131c:	019b      	lsls	r3, r3, #6
 801131e:	431a      	orrs	r2, r3
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011324:	085b      	lsrs	r3, r3, #1
 8011326:	3b01      	subs	r3, #1
 8011328:	041b      	lsls	r3, r3, #16
 801132a:	431a      	orrs	r2, r3
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011330:	061b      	lsls	r3, r3, #24
 8011332:	431a      	orrs	r2, r3
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011338:	071b      	lsls	r3, r3, #28
 801133a:	491b      	ldr	r1, [pc, #108]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 801133c:	4313      	orrs	r3, r2
 801133e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011340:	4b1b      	ldr	r3, [pc, #108]	@ (80113b0 <HAL_RCC_OscConfig+0x4b4>)
 8011342:	2201      	movs	r2, #1
 8011344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011346:	f7fa fffb 	bl	800c340 <HAL_GetTick>
 801134a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801134c:	e008      	b.n	8011360 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801134e:	f7fa fff7 	bl	800c340 <HAL_GetTick>
 8011352:	4602      	mov	r2, r0
 8011354:	693b      	ldr	r3, [r7, #16]
 8011356:	1ad3      	subs	r3, r2, r3
 8011358:	2b02      	cmp	r3, #2
 801135a:	d901      	bls.n	8011360 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 801135c:	2303      	movs	r3, #3
 801135e:	e064      	b.n	801142a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011360:	4b11      	ldr	r3, [pc, #68]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011368:	2b00      	cmp	r3, #0
 801136a:	d0f0      	beq.n	801134e <HAL_RCC_OscConfig+0x452>
 801136c:	e05c      	b.n	8011428 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801136e:	4b10      	ldr	r3, [pc, #64]	@ (80113b0 <HAL_RCC_OscConfig+0x4b4>)
 8011370:	2200      	movs	r2, #0
 8011372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011374:	f7fa ffe4 	bl	800c340 <HAL_GetTick>
 8011378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801137a:	e008      	b.n	801138e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801137c:	f7fa ffe0 	bl	800c340 <HAL_GetTick>
 8011380:	4602      	mov	r2, r0
 8011382:	693b      	ldr	r3, [r7, #16]
 8011384:	1ad3      	subs	r3, r2, r3
 8011386:	2b02      	cmp	r3, #2
 8011388:	d901      	bls.n	801138e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 801138a:	2303      	movs	r3, #3
 801138c:	e04d      	b.n	801142a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801138e:	4b06      	ldr	r3, [pc, #24]	@ (80113a8 <HAL_RCC_OscConfig+0x4ac>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011396:	2b00      	cmp	r3, #0
 8011398:	d1f0      	bne.n	801137c <HAL_RCC_OscConfig+0x480>
 801139a:	e045      	b.n	8011428 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	699b      	ldr	r3, [r3, #24]
 80113a0:	2b01      	cmp	r3, #1
 80113a2:	d107      	bne.n	80113b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80113a4:	2301      	movs	r3, #1
 80113a6:	e040      	b.n	801142a <HAL_RCC_OscConfig+0x52e>
 80113a8:	40023800 	.word	0x40023800
 80113ac:	40007000 	.word	0x40007000
 80113b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80113b4:	4b1f      	ldr	r3, [pc, #124]	@ (8011434 <HAL_RCC_OscConfig+0x538>)
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	699b      	ldr	r3, [r3, #24]
 80113be:	2b01      	cmp	r3, #1
 80113c0:	d030      	beq.n	8011424 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80113cc:	429a      	cmp	r2, r3
 80113ce:	d129      	bne.n	8011424 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80113da:	429a      	cmp	r2, r3
 80113dc:	d122      	bne.n	8011424 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80113de:	68fa      	ldr	r2, [r7, #12]
 80113e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80113e4:	4013      	ands	r3, r2
 80113e6:	687a      	ldr	r2, [r7, #4]
 80113e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80113ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80113ec:	4293      	cmp	r3, r2
 80113ee:	d119      	bne.n	8011424 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113fa:	085b      	lsrs	r3, r3, #1
 80113fc:	3b01      	subs	r3, #1
 80113fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011400:	429a      	cmp	r2, r3
 8011402:	d10f      	bne.n	8011424 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801140e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011410:	429a      	cmp	r2, r3
 8011412:	d107      	bne.n	8011424 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801141e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011420:	429a      	cmp	r2, r3
 8011422:	d001      	beq.n	8011428 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8011424:	2301      	movs	r3, #1
 8011426:	e000      	b.n	801142a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8011428:	2300      	movs	r3, #0
}
 801142a:	4618      	mov	r0, r3
 801142c:	3718      	adds	r7, #24
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}
 8011432:	bf00      	nop
 8011434:	40023800 	.word	0x40023800

08011438 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b084      	sub	sp, #16
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d101      	bne.n	801144a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8011446:	2301      	movs	r3, #1
 8011448:	e073      	b.n	8011532 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	7f5b      	ldrb	r3, [r3, #29]
 801144e:	b2db      	uxtb	r3, r3
 8011450:	2b00      	cmp	r3, #0
 8011452:	d105      	bne.n	8011460 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2200      	movs	r2, #0
 8011458:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f7f9 ffa6 	bl	800b3ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2202      	movs	r2, #2
 8011464:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	68db      	ldr	r3, [r3, #12]
 801146c:	f003 0310 	and.w	r3, r3, #16
 8011470:	2b10      	cmp	r3, #16
 8011472:	d055      	beq.n	8011520 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	22ca      	movs	r2, #202	@ 0xca
 801147a:	625a      	str	r2, [r3, #36]	@ 0x24
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	2253      	movs	r2, #83	@ 0x53
 8011482:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f000 fa49 	bl	801191c <RTC_EnterInitMode>
 801148a:	4603      	mov	r3, r0
 801148c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 801148e:	7bfb      	ldrb	r3, [r7, #15]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d12c      	bne.n	80114ee <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	689b      	ldr	r3, [r3, #8]
 801149a:	687a      	ldr	r2, [r7, #4]
 801149c:	6812      	ldr	r2, [r2, #0]
 801149e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80114a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80114a6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	6899      	ldr	r1, [r3, #8]
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	685a      	ldr	r2, [r3, #4]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	691b      	ldr	r3, [r3, #16]
 80114b6:	431a      	orrs	r2, r3
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	695b      	ldr	r3, [r3, #20]
 80114bc:	431a      	orrs	r2, r3
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	430a      	orrs	r2, r1
 80114c4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	687a      	ldr	r2, [r7, #4]
 80114cc:	68d2      	ldr	r2, [r2, #12]
 80114ce:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	6919      	ldr	r1, [r3, #16]
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	689b      	ldr	r3, [r3, #8]
 80114da:	041a      	lsls	r2, r3, #16
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	430a      	orrs	r2, r1
 80114e2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f000 fa50 	bl	801198a <RTC_ExitInitMode>
 80114ea:	4603      	mov	r3, r0
 80114ec:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80114ee:	7bfb      	ldrb	r3, [r7, #15]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d110      	bne.n	8011516 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8011502:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	699a      	ldr	r2, [r3, #24]
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	430a      	orrs	r2, r1
 8011514:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	22ff      	movs	r2, #255	@ 0xff
 801151c:	625a      	str	r2, [r3, #36]	@ 0x24
 801151e:	e001      	b.n	8011524 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8011520:	2300      	movs	r3, #0
 8011522:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8011524:	7bfb      	ldrb	r3, [r7, #15]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d102      	bne.n	8011530 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2201      	movs	r2, #1
 801152e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8011530:	7bfb      	ldrb	r3, [r7, #15]
}
 8011532:	4618      	mov	r0, r3
 8011534:	3710      	adds	r7, #16
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}

0801153a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801153a:	b590      	push	{r4, r7, lr}
 801153c:	b087      	sub	sp, #28
 801153e:	af00      	add	r7, sp, #0
 8011540:	60f8      	str	r0, [r7, #12]
 8011542:	60b9      	str	r1, [r7, #8]
 8011544:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8011546:	2300      	movs	r3, #0
 8011548:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	7f1b      	ldrb	r3, [r3, #28]
 801154e:	2b01      	cmp	r3, #1
 8011550:	d101      	bne.n	8011556 <HAL_RTC_SetTime+0x1c>
 8011552:	2302      	movs	r3, #2
 8011554:	e087      	b.n	8011666 <HAL_RTC_SetTime+0x12c>
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	2201      	movs	r2, #1
 801155a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	2202      	movs	r2, #2
 8011560:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d126      	bne.n	80115b6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	689b      	ldr	r3, [r3, #8]
 801156e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011572:	2b00      	cmp	r3, #0
 8011574:	d102      	bne.n	801157c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	2200      	movs	r2, #0
 801157a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801157c:	68bb      	ldr	r3, [r7, #8]
 801157e:	781b      	ldrb	r3, [r3, #0]
 8011580:	4618      	mov	r0, r3
 8011582:	f000 fa27 	bl	80119d4 <RTC_ByteToBcd2>
 8011586:	4603      	mov	r3, r0
 8011588:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	785b      	ldrb	r3, [r3, #1]
 801158e:	4618      	mov	r0, r3
 8011590:	f000 fa20 	bl	80119d4 <RTC_ByteToBcd2>
 8011594:	4603      	mov	r3, r0
 8011596:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011598:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	789b      	ldrb	r3, [r3, #2]
 801159e:	4618      	mov	r0, r3
 80115a0:	f000 fa18 	bl	80119d4 <RTC_ByteToBcd2>
 80115a4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80115a6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	78db      	ldrb	r3, [r3, #3]
 80115ae:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80115b0:	4313      	orrs	r3, r2
 80115b2:	617b      	str	r3, [r7, #20]
 80115b4:	e018      	b.n	80115e8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	689b      	ldr	r3, [r3, #8]
 80115bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d102      	bne.n	80115ca <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	2200      	movs	r2, #0
 80115c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	781b      	ldrb	r3, [r3, #0]
 80115ce:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	785b      	ldrb	r3, [r3, #1]
 80115d4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80115d6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80115d8:	68ba      	ldr	r2, [r7, #8]
 80115da:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80115dc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	78db      	ldrb	r3, [r3, #3]
 80115e2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80115e4:	4313      	orrs	r3, r2
 80115e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	22ca      	movs	r2, #202	@ 0xca
 80115ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	2253      	movs	r2, #83	@ 0x53
 80115f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80115f8:	68f8      	ldr	r0, [r7, #12]
 80115fa:	f000 f98f 	bl	801191c <RTC_EnterInitMode>
 80115fe:	4603      	mov	r3, r0
 8011600:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8011602:	7cfb      	ldrb	r3, [r7, #19]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d120      	bne.n	801164a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	681a      	ldr	r2, [r3, #0]
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8011612:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8011616:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	689a      	ldr	r2, [r3, #8]
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8011626:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	6899      	ldr	r1, [r3, #8]
 801162e:	68bb      	ldr	r3, [r7, #8]
 8011630:	68da      	ldr	r2, [r3, #12]
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	691b      	ldr	r3, [r3, #16]
 8011636:	431a      	orrs	r2, r3
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	430a      	orrs	r2, r1
 801163e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011640:	68f8      	ldr	r0, [r7, #12]
 8011642:	f000 f9a2 	bl	801198a <RTC_ExitInitMode>
 8011646:	4603      	mov	r3, r0
 8011648:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 801164a:	7cfb      	ldrb	r3, [r7, #19]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d102      	bne.n	8011656 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	2201      	movs	r2, #1
 8011654:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	22ff      	movs	r2, #255	@ 0xff
 801165c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	2200      	movs	r2, #0
 8011662:	771a      	strb	r2, [r3, #28]

  return status;
 8011664:	7cfb      	ldrb	r3, [r7, #19]
}
 8011666:	4618      	mov	r0, r3
 8011668:	371c      	adds	r7, #28
 801166a:	46bd      	mov	sp, r7
 801166c:	bd90      	pop	{r4, r7, pc}

0801166e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801166e:	b580      	push	{r7, lr}
 8011670:	b086      	sub	sp, #24
 8011672:	af00      	add	r7, sp, #0
 8011674:	60f8      	str	r0, [r7, #12]
 8011676:	60b9      	str	r1, [r7, #8]
 8011678:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801167a:	2300      	movs	r3, #0
 801167c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	691b      	ldr	r3, [r3, #16]
 801168e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80116a0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80116a4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	0c1b      	lsrs	r3, r3, #16
 80116aa:	b2db      	uxtb	r3, r3
 80116ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80116b0:	b2da      	uxtb	r2, r3
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	0a1b      	lsrs	r3, r3, #8
 80116ba:	b2db      	uxtb	r3, r3
 80116bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80116c0:	b2da      	uxtb	r2, r3
 80116c2:	68bb      	ldr	r3, [r7, #8]
 80116c4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	b2db      	uxtb	r3, r3
 80116ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80116ce:	b2da      	uxtb	r2, r3
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	0d9b      	lsrs	r3, r3, #22
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	f003 0301 	and.w	r3, r3, #1
 80116de:	b2da      	uxtb	r2, r3
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d11a      	bne.n	8011720 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	781b      	ldrb	r3, [r3, #0]
 80116ee:	4618      	mov	r0, r3
 80116f0:	f000 f98e 	bl	8011a10 <RTC_Bcd2ToByte>
 80116f4:	4603      	mov	r3, r0
 80116f6:	461a      	mov	r2, r3
 80116f8:	68bb      	ldr	r3, [r7, #8]
 80116fa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80116fc:	68bb      	ldr	r3, [r7, #8]
 80116fe:	785b      	ldrb	r3, [r3, #1]
 8011700:	4618      	mov	r0, r3
 8011702:	f000 f985 	bl	8011a10 <RTC_Bcd2ToByte>
 8011706:	4603      	mov	r3, r0
 8011708:	461a      	mov	r2, r3
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	789b      	ldrb	r3, [r3, #2]
 8011712:	4618      	mov	r0, r3
 8011714:	f000 f97c 	bl	8011a10 <RTC_Bcd2ToByte>
 8011718:	4603      	mov	r3, r0
 801171a:	461a      	mov	r2, r3
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8011720:	2300      	movs	r3, #0
}
 8011722:	4618      	mov	r0, r3
 8011724:	3718      	adds	r7, #24
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}

0801172a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801172a:	b590      	push	{r4, r7, lr}
 801172c:	b087      	sub	sp, #28
 801172e:	af00      	add	r7, sp, #0
 8011730:	60f8      	str	r0, [r7, #12]
 8011732:	60b9      	str	r1, [r7, #8]
 8011734:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8011736:	2300      	movs	r3, #0
 8011738:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	7f1b      	ldrb	r3, [r3, #28]
 801173e:	2b01      	cmp	r3, #1
 8011740:	d101      	bne.n	8011746 <HAL_RTC_SetDate+0x1c>
 8011742:	2302      	movs	r3, #2
 8011744:	e071      	b.n	801182a <HAL_RTC_SetDate+0x100>
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2201      	movs	r2, #1
 801174a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	2202      	movs	r2, #2
 8011750:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d10e      	bne.n	8011776 <HAL_RTC_SetDate+0x4c>
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	785b      	ldrb	r3, [r3, #1]
 801175c:	f003 0310 	and.w	r3, r3, #16
 8011760:	2b00      	cmp	r3, #0
 8011762:	d008      	beq.n	8011776 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	785b      	ldrb	r3, [r3, #1]
 8011768:	f023 0310 	bic.w	r3, r3, #16
 801176c:	b2db      	uxtb	r3, r3
 801176e:	330a      	adds	r3, #10
 8011770:	b2da      	uxtb	r2, r3
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d11c      	bne.n	80117b6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801177c:	68bb      	ldr	r3, [r7, #8]
 801177e:	78db      	ldrb	r3, [r3, #3]
 8011780:	4618      	mov	r0, r3
 8011782:	f000 f927 	bl	80119d4 <RTC_ByteToBcd2>
 8011786:	4603      	mov	r3, r0
 8011788:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	785b      	ldrb	r3, [r3, #1]
 801178e:	4618      	mov	r0, r3
 8011790:	f000 f920 	bl	80119d4 <RTC_ByteToBcd2>
 8011794:	4603      	mov	r3, r0
 8011796:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011798:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	789b      	ldrb	r3, [r3, #2]
 801179e:	4618      	mov	r0, r3
 80117a0:	f000 f918 	bl	80119d4 <RTC_ByteToBcd2>
 80117a4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80117a6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80117b0:	4313      	orrs	r3, r2
 80117b2:	617b      	str	r3, [r7, #20]
 80117b4:	e00e      	b.n	80117d4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	78db      	ldrb	r3, [r3, #3]
 80117ba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	785b      	ldrb	r3, [r3, #1]
 80117c0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80117c2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80117c4:	68ba      	ldr	r2, [r7, #8]
 80117c6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80117c8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80117ca:	68bb      	ldr	r3, [r7, #8]
 80117cc:	781b      	ldrb	r3, [r3, #0]
 80117ce:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80117d0:	4313      	orrs	r3, r2
 80117d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	22ca      	movs	r2, #202	@ 0xca
 80117da:	625a      	str	r2, [r3, #36]	@ 0x24
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	2253      	movs	r2, #83	@ 0x53
 80117e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80117e4:	68f8      	ldr	r0, [r7, #12]
 80117e6:	f000 f899 	bl	801191c <RTC_EnterInitMode>
 80117ea:	4603      	mov	r3, r0
 80117ec:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80117ee:	7cfb      	ldrb	r3, [r7, #19]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d10c      	bne.n	801180e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	681a      	ldr	r2, [r3, #0]
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80117fe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011802:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011804:	68f8      	ldr	r0, [r7, #12]
 8011806:	f000 f8c0 	bl	801198a <RTC_ExitInitMode>
 801180a:	4603      	mov	r3, r0
 801180c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 801180e:	7cfb      	ldrb	r3, [r7, #19]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d102      	bne.n	801181a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	2201      	movs	r2, #1
 8011818:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	22ff      	movs	r2, #255	@ 0xff
 8011820:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	2200      	movs	r2, #0
 8011826:	771a      	strb	r2, [r3, #28]

  return status;
 8011828:	7cfb      	ldrb	r3, [r7, #19]
}
 801182a:	4618      	mov	r0, r3
 801182c:	371c      	adds	r7, #28
 801182e:	46bd      	mov	sp, r7
 8011830:	bd90      	pop	{r4, r7, pc}

08011832 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011832:	b580      	push	{r7, lr}
 8011834:	b086      	sub	sp, #24
 8011836:	af00      	add	r7, sp, #0
 8011838:	60f8      	str	r0, [r7, #12]
 801183a:	60b9      	str	r1, [r7, #8]
 801183c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801183e:	2300      	movs	r3, #0
 8011840:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	685b      	ldr	r3, [r3, #4]
 8011848:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801184c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011850:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	0c1b      	lsrs	r3, r3, #16
 8011856:	b2da      	uxtb	r2, r3
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	0a1b      	lsrs	r3, r3, #8
 8011860:	b2db      	uxtb	r3, r3
 8011862:	f003 031f 	and.w	r3, r3, #31
 8011866:	b2da      	uxtb	r2, r3
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	b2db      	uxtb	r3, r3
 8011870:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011874:	b2da      	uxtb	r2, r3
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	0b5b      	lsrs	r3, r3, #13
 801187e:	b2db      	uxtb	r3, r3
 8011880:	f003 0307 	and.w	r3, r3, #7
 8011884:	b2da      	uxtb	r2, r3
 8011886:	68bb      	ldr	r3, [r7, #8]
 8011888:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d11a      	bne.n	80118c6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	78db      	ldrb	r3, [r3, #3]
 8011894:	4618      	mov	r0, r3
 8011896:	f000 f8bb 	bl	8011a10 <RTC_Bcd2ToByte>
 801189a:	4603      	mov	r3, r0
 801189c:	461a      	mov	r2, r3
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	785b      	ldrb	r3, [r3, #1]
 80118a6:	4618      	mov	r0, r3
 80118a8:	f000 f8b2 	bl	8011a10 <RTC_Bcd2ToByte>
 80118ac:	4603      	mov	r3, r0
 80118ae:	461a      	mov	r2, r3
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80118b4:	68bb      	ldr	r3, [r7, #8]
 80118b6:	789b      	ldrb	r3, [r3, #2]
 80118b8:	4618      	mov	r0, r3
 80118ba:	f000 f8a9 	bl	8011a10 <RTC_Bcd2ToByte>
 80118be:	4603      	mov	r3, r0
 80118c0:	461a      	mov	r2, r3
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80118c6:	2300      	movs	r3, #0
}
 80118c8:	4618      	mov	r0, r3
 80118ca:	3718      	adds	r7, #24
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}

080118d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b084      	sub	sp, #16
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80118d8:	2300      	movs	r3, #0
 80118da:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	4a0d      	ldr	r2, [pc, #52]	@ (8011918 <HAL_RTC_WaitForSynchro+0x48>)
 80118e2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80118e4:	f7fa fd2c 	bl	800c340 <HAL_GetTick>
 80118e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80118ea:	e009      	b.n	8011900 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80118ec:	f7fa fd28 	bl	800c340 <HAL_GetTick>
 80118f0:	4602      	mov	r2, r0
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	1ad3      	subs	r3, r2, r3
 80118f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80118fa:	d901      	bls.n	8011900 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80118fc:	2303      	movs	r3, #3
 80118fe:	e007      	b.n	8011910 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	68db      	ldr	r3, [r3, #12]
 8011906:	f003 0320 	and.w	r3, r3, #32
 801190a:	2b00      	cmp	r3, #0
 801190c:	d0ee      	beq.n	80118ec <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 801190e:	2300      	movs	r3, #0
}
 8011910:	4618      	mov	r0, r3
 8011912:	3710      	adds	r7, #16
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}
 8011918:	00017f5f 	.word	0x00017f5f

0801191c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b084      	sub	sp, #16
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011924:	2300      	movs	r3, #0
 8011926:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8011928:	2300      	movs	r3, #0
 801192a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	68db      	ldr	r3, [r3, #12]
 8011932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011936:	2b00      	cmp	r3, #0
 8011938:	d122      	bne.n	8011980 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	68da      	ldr	r2, [r3, #12]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011948:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801194a:	f7fa fcf9 	bl	800c340 <HAL_GetTick>
 801194e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8011950:	e00c      	b.n	801196c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011952:	f7fa fcf5 	bl	800c340 <HAL_GetTick>
 8011956:	4602      	mov	r2, r0
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	1ad3      	subs	r3, r2, r3
 801195c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011960:	d904      	bls.n	801196c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2204      	movs	r2, #4
 8011966:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8011968:	2301      	movs	r3, #1
 801196a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	68db      	ldr	r3, [r3, #12]
 8011972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011976:	2b00      	cmp	r3, #0
 8011978:	d102      	bne.n	8011980 <RTC_EnterInitMode+0x64>
 801197a:	7bfb      	ldrb	r3, [r7, #15]
 801197c:	2b01      	cmp	r3, #1
 801197e:	d1e8      	bne.n	8011952 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8011980:	7bfb      	ldrb	r3, [r7, #15]
}
 8011982:	4618      	mov	r0, r3
 8011984:	3710      	adds	r7, #16
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}

0801198a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801198a:	b580      	push	{r7, lr}
 801198c:	b084      	sub	sp, #16
 801198e:	af00      	add	r7, sp, #0
 8011990:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011992:	2300      	movs	r3, #0
 8011994:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	68da      	ldr	r2, [r3, #12]
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80119a4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	689b      	ldr	r3, [r3, #8]
 80119ac:	f003 0320 	and.w	r3, r3, #32
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d10a      	bne.n	80119ca <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f7ff ff8b 	bl	80118d0 <HAL_RTC_WaitForSynchro>
 80119ba:	4603      	mov	r3, r0
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d004      	beq.n	80119ca <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2204      	movs	r2, #4
 80119c4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80119c6:	2301      	movs	r3, #1
 80119c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80119ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3710      	adds	r7, #16
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80119d4:	b480      	push	{r7}
 80119d6:	b085      	sub	sp, #20
 80119d8:	af00      	add	r7, sp, #0
 80119da:	4603      	mov	r3, r0
 80119dc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80119de:	2300      	movs	r3, #0
 80119e0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80119e2:	e005      	b.n	80119f0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	3301      	adds	r3, #1
 80119e8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80119ea:	79fb      	ldrb	r3, [r7, #7]
 80119ec:	3b0a      	subs	r3, #10
 80119ee:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80119f0:	79fb      	ldrb	r3, [r7, #7]
 80119f2:	2b09      	cmp	r3, #9
 80119f4:	d8f6      	bhi.n	80119e4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	b2db      	uxtb	r3, r3
 80119fa:	011b      	lsls	r3, r3, #4
 80119fc:	b2da      	uxtb	r2, r3
 80119fe:	79fb      	ldrb	r3, [r7, #7]
 8011a00:	4313      	orrs	r3, r2
 8011a02:	b2db      	uxtb	r3, r3
}
 8011a04:	4618      	mov	r0, r3
 8011a06:	3714      	adds	r7, #20
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0e:	4770      	bx	lr

08011a10 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8011a10:	b480      	push	{r7}
 8011a12:	b085      	sub	sp, #20
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	4603      	mov	r3, r0
 8011a18:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8011a1e:	79fb      	ldrb	r3, [r7, #7]
 8011a20:	091b      	lsrs	r3, r3, #4
 8011a22:	b2db      	uxtb	r3, r3
 8011a24:	461a      	mov	r2, r3
 8011a26:	4613      	mov	r3, r2
 8011a28:	009b      	lsls	r3, r3, #2
 8011a2a:	4413      	add	r3, r2
 8011a2c:	005b      	lsls	r3, r3, #1
 8011a2e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	b2da      	uxtb	r2, r3
 8011a34:	79fb      	ldrb	r3, [r7, #7]
 8011a36:	f003 030f 	and.w	r3, r3, #15
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	4413      	add	r3, r2
 8011a3e:	b2db      	uxtb	r3, r3
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3714      	adds	r7, #20
 8011a44:	46bd      	mov	sp, r7
 8011a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4a:	4770      	bx	lr

08011a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b082      	sub	sp, #8
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d101      	bne.n	8011a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011a5a:	2301      	movs	r3, #1
 8011a5c:	e07b      	b.n	8011b56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d108      	bne.n	8011a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011a6e:	d009      	beq.n	8011a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2200      	movs	r2, #0
 8011a74:	61da      	str	r2, [r3, #28]
 8011a76:	e005      	b.n	8011a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2200      	movs	r2, #0
 8011a82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2200      	movs	r2, #0
 8011a88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011a90:	b2db      	uxtb	r3, r3
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d106      	bne.n	8011aa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2200      	movs	r2, #0
 8011a9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f7f9 fe16 	bl	800b6d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2202      	movs	r2, #2
 8011aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	681a      	ldr	r2, [r3, #0]
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011aba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	689b      	ldr	r3, [r3, #8]
 8011ac8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8011acc:	431a      	orrs	r2, r3
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	68db      	ldr	r3, [r3, #12]
 8011ad2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011ad6:	431a      	orrs	r2, r3
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	691b      	ldr	r3, [r3, #16]
 8011adc:	f003 0302 	and.w	r3, r3, #2
 8011ae0:	431a      	orrs	r2, r3
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	695b      	ldr	r3, [r3, #20]
 8011ae6:	f003 0301 	and.w	r3, r3, #1
 8011aea:	431a      	orrs	r2, r3
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	699b      	ldr	r3, [r3, #24]
 8011af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011af4:	431a      	orrs	r2, r3
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	69db      	ldr	r3, [r3, #28]
 8011afa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011afe:	431a      	orrs	r2, r3
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	6a1b      	ldr	r3, [r3, #32]
 8011b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011b08:	ea42 0103 	orr.w	r1, r2, r3
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	430a      	orrs	r2, r1
 8011b1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	699b      	ldr	r3, [r3, #24]
 8011b20:	0c1b      	lsrs	r3, r3, #16
 8011b22:	f003 0104 	and.w	r1, r3, #4
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b2a:	f003 0210 	and.w	r2, r3, #16
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	430a      	orrs	r2, r1
 8011b34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	69da      	ldr	r2, [r3, #28]
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8011b44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2200      	movs	r2, #0
 8011b4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2201      	movs	r2, #1
 8011b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8011b54:	2300      	movs	r3, #0
}
 8011b56:	4618      	mov	r0, r3
 8011b58:	3708      	adds	r7, #8
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}

08011b5e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8011b5e:	b580      	push	{r7, lr}
 8011b60:	b082      	sub	sp, #8
 8011b62:	af00      	add	r7, sp, #0
 8011b64:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d101      	bne.n	8011b70 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	e01a      	b.n	8011ba6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2202      	movs	r2, #2
 8011b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	681a      	ldr	r2, [r3, #0]
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011b86:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f7f9 fee9 	bl	800b960 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2200      	movs	r2, #0
 8011b92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2200      	movs	r2, #0
 8011b98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8011ba4:	2300      	movs	r3, #0
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3708      	adds	r7, #8
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}

08011bae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8011bae:	b580      	push	{r7, lr}
 8011bb0:	b08a      	sub	sp, #40	@ 0x28
 8011bb2:	af00      	add	r7, sp, #0
 8011bb4:	60f8      	str	r0, [r7, #12]
 8011bb6:	60b9      	str	r1, [r7, #8]
 8011bb8:	607a      	str	r2, [r7, #4]
 8011bba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011bc0:	f7fa fbbe 	bl	800c340 <HAL_GetTick>
 8011bc4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011bcc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8011bd4:	887b      	ldrh	r3, [r7, #2]
 8011bd6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011bd8:	7ffb      	ldrb	r3, [r7, #31]
 8011bda:	2b01      	cmp	r3, #1
 8011bdc:	d00c      	beq.n	8011bf8 <HAL_SPI_TransmitReceive+0x4a>
 8011bde:	69bb      	ldr	r3, [r7, #24]
 8011be0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011be4:	d106      	bne.n	8011bf4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	689b      	ldr	r3, [r3, #8]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d102      	bne.n	8011bf4 <HAL_SPI_TransmitReceive+0x46>
 8011bee:	7ffb      	ldrb	r3, [r7, #31]
 8011bf0:	2b04      	cmp	r3, #4
 8011bf2:	d001      	beq.n	8011bf8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8011bf4:	2302      	movs	r3, #2
 8011bf6:	e17f      	b.n	8011ef8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d005      	beq.n	8011c0a <HAL_SPI_TransmitReceive+0x5c>
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d002      	beq.n	8011c0a <HAL_SPI_TransmitReceive+0x5c>
 8011c04:	887b      	ldrh	r3, [r7, #2]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d101      	bne.n	8011c0e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	e174      	b.n	8011ef8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8011c14:	2b01      	cmp	r3, #1
 8011c16:	d101      	bne.n	8011c1c <HAL_SPI_TransmitReceive+0x6e>
 8011c18:	2302      	movs	r3, #2
 8011c1a:	e16d      	b.n	8011ef8 <HAL_SPI_TransmitReceive+0x34a>
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	2201      	movs	r2, #1
 8011c20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011c2a:	b2db      	uxtb	r3, r3
 8011c2c:	2b04      	cmp	r3, #4
 8011c2e:	d003      	beq.n	8011c38 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	2205      	movs	r2, #5
 8011c34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	687a      	ldr	r2, [r7, #4]
 8011c42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	887a      	ldrh	r2, [r7, #2]
 8011c48:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	887a      	ldrh	r2, [r7, #2]
 8011c4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	68ba      	ldr	r2, [r7, #8]
 8011c54:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	887a      	ldrh	r2, [r7, #2]
 8011c5a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	887a      	ldrh	r2, [r7, #2]
 8011c60:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	2200      	movs	r2, #0
 8011c66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c78:	2b40      	cmp	r3, #64	@ 0x40
 8011c7a:	d007      	beq.n	8011c8c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	681a      	ldr	r2, [r3, #0]
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011c8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	68db      	ldr	r3, [r3, #12]
 8011c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011c94:	d17e      	bne.n	8011d94 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	685b      	ldr	r3, [r3, #4]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d002      	beq.n	8011ca4 <HAL_SPI_TransmitReceive+0xf6>
 8011c9e:	8afb      	ldrh	r3, [r7, #22]
 8011ca0:	2b01      	cmp	r3, #1
 8011ca2:	d16c      	bne.n	8011d7e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ca8:	881a      	ldrh	r2, [r3, #0]
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cb4:	1c9a      	adds	r2, r3, #2
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011cbe:	b29b      	uxth	r3, r3
 8011cc0:	3b01      	subs	r3, #1
 8011cc2:	b29a      	uxth	r2, r3
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011cc8:	e059      	b.n	8011d7e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	689b      	ldr	r3, [r3, #8]
 8011cd0:	f003 0302 	and.w	r3, r3, #2
 8011cd4:	2b02      	cmp	r3, #2
 8011cd6:	d11b      	bne.n	8011d10 <HAL_SPI_TransmitReceive+0x162>
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011cdc:	b29b      	uxth	r3, r3
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d016      	beq.n	8011d10 <HAL_SPI_TransmitReceive+0x162>
 8011ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ce4:	2b01      	cmp	r3, #1
 8011ce6:	d113      	bne.n	8011d10 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cec:	881a      	ldrh	r2, [r3, #0]
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cf8:	1c9a      	adds	r2, r3, #2
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011d02:	b29b      	uxth	r3, r3
 8011d04:	3b01      	subs	r3, #1
 8011d06:	b29a      	uxth	r2, r3
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	689b      	ldr	r3, [r3, #8]
 8011d16:	f003 0301 	and.w	r3, r3, #1
 8011d1a:	2b01      	cmp	r3, #1
 8011d1c:	d119      	bne.n	8011d52 <HAL_SPI_TransmitReceive+0x1a4>
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d22:	b29b      	uxth	r3, r3
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d014      	beq.n	8011d52 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	68da      	ldr	r2, [r3, #12]
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d32:	b292      	uxth	r2, r2
 8011d34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d3a:	1c9a      	adds	r2, r3, #2
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d44:	b29b      	uxth	r3, r3
 8011d46:	3b01      	subs	r3, #1
 8011d48:	b29a      	uxth	r2, r3
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011d4e:	2301      	movs	r3, #1
 8011d50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011d52:	f7fa faf5 	bl	800c340 <HAL_GetTick>
 8011d56:	4602      	mov	r2, r0
 8011d58:	6a3b      	ldr	r3, [r7, #32]
 8011d5a:	1ad3      	subs	r3, r2, r3
 8011d5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d80d      	bhi.n	8011d7e <HAL_SPI_TransmitReceive+0x1d0>
 8011d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d68:	d009      	beq.n	8011d7e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	2201      	movs	r2, #1
 8011d6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	2200      	movs	r2, #0
 8011d76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8011d7a:	2303      	movs	r3, #3
 8011d7c:	e0bc      	b.n	8011ef8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d1a0      	bne.n	8011cca <HAL_SPI_TransmitReceive+0x11c>
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d8c:	b29b      	uxth	r3, r3
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d19b      	bne.n	8011cca <HAL_SPI_TransmitReceive+0x11c>
 8011d92:	e082      	b.n	8011e9a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d002      	beq.n	8011da2 <HAL_SPI_TransmitReceive+0x1f4>
 8011d9c:	8afb      	ldrh	r3, [r7, #22]
 8011d9e:	2b01      	cmp	r3, #1
 8011da0:	d171      	bne.n	8011e86 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	330c      	adds	r3, #12
 8011dac:	7812      	ldrb	r2, [r2, #0]
 8011dae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011db4:	1c5a      	adds	r2, r3, #1
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011dbe:	b29b      	uxth	r3, r3
 8011dc0:	3b01      	subs	r3, #1
 8011dc2:	b29a      	uxth	r2, r3
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011dc8:	e05d      	b.n	8011e86 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	689b      	ldr	r3, [r3, #8]
 8011dd0:	f003 0302 	and.w	r3, r3, #2
 8011dd4:	2b02      	cmp	r3, #2
 8011dd6:	d11c      	bne.n	8011e12 <HAL_SPI_TransmitReceive+0x264>
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011ddc:	b29b      	uxth	r3, r3
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d017      	beq.n	8011e12 <HAL_SPI_TransmitReceive+0x264>
 8011de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011de4:	2b01      	cmp	r3, #1
 8011de6:	d114      	bne.n	8011e12 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	330c      	adds	r3, #12
 8011df2:	7812      	ldrb	r2, [r2, #0]
 8011df4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dfa:	1c5a      	adds	r2, r3, #1
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011e04:	b29b      	uxth	r3, r3
 8011e06:	3b01      	subs	r3, #1
 8011e08:	b29a      	uxth	r2, r3
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	689b      	ldr	r3, [r3, #8]
 8011e18:	f003 0301 	and.w	r3, r3, #1
 8011e1c:	2b01      	cmp	r3, #1
 8011e1e:	d119      	bne.n	8011e54 <HAL_SPI_TransmitReceive+0x2a6>
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011e24:	b29b      	uxth	r3, r3
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d014      	beq.n	8011e54 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	68da      	ldr	r2, [r3, #12]
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e34:	b2d2      	uxtb	r2, r2
 8011e36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e3c:	1c5a      	adds	r2, r3, #1
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011e46:	b29b      	uxth	r3, r3
 8011e48:	3b01      	subs	r3, #1
 8011e4a:	b29a      	uxth	r2, r3
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011e50:	2301      	movs	r3, #1
 8011e52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011e54:	f7fa fa74 	bl	800c340 <HAL_GetTick>
 8011e58:	4602      	mov	r2, r0
 8011e5a:	6a3b      	ldr	r3, [r7, #32]
 8011e5c:	1ad3      	subs	r3, r2, r3
 8011e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d803      	bhi.n	8011e6c <HAL_SPI_TransmitReceive+0x2be>
 8011e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e6a:	d102      	bne.n	8011e72 <HAL_SPI_TransmitReceive+0x2c4>
 8011e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d109      	bne.n	8011e86 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	2201      	movs	r2, #1
 8011e76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8011e82:	2303      	movs	r3, #3
 8011e84:	e038      	b.n	8011ef8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d19c      	bne.n	8011dca <HAL_SPI_TransmitReceive+0x21c>
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011e94:	b29b      	uxth	r3, r3
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d197      	bne.n	8011dca <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011e9a:	6a3a      	ldr	r2, [r7, #32]
 8011e9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011e9e:	68f8      	ldr	r0, [r7, #12]
 8011ea0:	f000 fd04 	bl	80128ac <SPI_EndRxTxTransaction>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d008      	beq.n	8011ebc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	2220      	movs	r2, #32
 8011eae:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8011eb8:	2301      	movs	r3, #1
 8011eba:	e01d      	b.n	8011ef8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	689b      	ldr	r3, [r3, #8]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d10a      	bne.n	8011eda <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	613b      	str	r3, [r7, #16]
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	68db      	ldr	r3, [r3, #12]
 8011ece:	613b      	str	r3, [r7, #16]
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	689b      	ldr	r3, [r3, #8]
 8011ed6:	613b      	str	r3, [r7, #16]
 8011ed8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	2201      	movs	r2, #1
 8011ede:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d001      	beq.n	8011ef6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	e000      	b.n	8011ef8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8011ef6:	2300      	movs	r3, #0
  }
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3728      	adds	r7, #40	@ 0x28
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}

08011f00 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b084      	sub	sp, #16
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	60f8      	str	r0, [r7, #12]
 8011f08:	60b9      	str	r1, [r7, #8]
 8011f0a:	4613      	mov	r3, r2
 8011f0c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011f14:	b2db      	uxtb	r3, r3
 8011f16:	2b01      	cmp	r3, #1
 8011f18:	d001      	beq.n	8011f1e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8011f1a:	2302      	movs	r3, #2
 8011f1c:	e097      	b.n	801204e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d002      	beq.n	8011f2a <HAL_SPI_Transmit_DMA+0x2a>
 8011f24:	88fb      	ldrh	r3, [r7, #6]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d101      	bne.n	8011f2e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	e08f      	b.n	801204e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8011f34:	2b01      	cmp	r3, #1
 8011f36:	d101      	bne.n	8011f3c <HAL_SPI_Transmit_DMA+0x3c>
 8011f38:	2302      	movs	r3, #2
 8011f3a:	e088      	b.n	801204e <HAL_SPI_Transmit_DMA+0x14e>
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	2201      	movs	r2, #1
 8011f40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	2203      	movs	r2, #3
 8011f48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	2200      	movs	r2, #0
 8011f50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	68ba      	ldr	r2, [r7, #8]
 8011f56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	88fa      	ldrh	r2, [r7, #6]
 8011f5c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	88fa      	ldrh	r2, [r7, #6]
 8011f62:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	2200      	movs	r2, #0
 8011f68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	2200      	movs	r2, #0
 8011f74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	689b      	ldr	r3, [r3, #8]
 8011f86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011f8a:	d10f      	bne.n	8011fac <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	681a      	ldr	r2, [r3, #0]
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011f9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	681a      	ldr	r2, [r3, #0]
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011faa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011fb0:	4a29      	ldr	r2, [pc, #164]	@ (8012058 <HAL_SPI_Transmit_DMA+0x158>)
 8011fb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011fb8:	4a28      	ldr	r2, [pc, #160]	@ (801205c <HAL_SPI_Transmit_DMA+0x15c>)
 8011fba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011fc0:	4a27      	ldr	r2, [pc, #156]	@ (8012060 <HAL_SPI_Transmit_DMA+0x160>)
 8011fc2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011fc8:	2200      	movs	r2, #0
 8011fca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	330c      	adds	r3, #12
 8011fdc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8011fe2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8011fe4:	f7fb ff8e 	bl	800df04 <HAL_DMA_Start_IT>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d00b      	beq.n	8012006 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011ff2:	f043 0210 	orr.w	r2, r3, #16
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8012002:	2301      	movs	r3, #1
 8012004:	e023      	b.n	801204e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012010:	2b40      	cmp	r3, #64	@ 0x40
 8012012:	d007      	beq.n	8012024 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	681a      	ldr	r2, [r3, #0]
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012022:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	2200      	movs	r2, #0
 8012028:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	685a      	ldr	r2, [r3, #4]
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	f042 0220 	orr.w	r2, r2, #32
 801203a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	685a      	ldr	r2, [r3, #4]
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f042 0202 	orr.w	r2, r2, #2
 801204a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801204c:	2300      	movs	r3, #0
}
 801204e:	4618      	mov	r0, r3
 8012050:	3710      	adds	r7, #16
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}
 8012056:	bf00      	nop
 8012058:	0801263d 	.word	0x0801263d
 801205c:	0801245d 	.word	0x0801245d
 8012060:	08012691 	.word	0x08012691

08012064 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b084      	sub	sp, #16
 8012068:	af00      	add	r7, sp, #0
 801206a:	60f8      	str	r0, [r7, #12]
 801206c:	60b9      	str	r1, [r7, #8]
 801206e:	4613      	mov	r3, r2
 8012070:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012078:	b2db      	uxtb	r3, r3
 801207a:	2b01      	cmp	r3, #1
 801207c:	d001      	beq.n	8012082 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 801207e:	2302      	movs	r3, #2
 8012080:	e0a9      	b.n	80121d6 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8012082:	68bb      	ldr	r3, [r7, #8]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d002      	beq.n	801208e <HAL_SPI_Receive_DMA+0x2a>
 8012088:	88fb      	ldrh	r3, [r7, #6]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d101      	bne.n	8012092 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 801208e:	2301      	movs	r3, #1
 8012090:	e0a1      	b.n	80121d6 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	689b      	ldr	r3, [r3, #8]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d110      	bne.n	80120bc <HAL_SPI_Receive_DMA+0x58>
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	685b      	ldr	r3, [r3, #4]
 801209e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80120a2:	d10b      	bne.n	80120bc <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	2204      	movs	r2, #4
 80120a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80120ac:	88fb      	ldrh	r3, [r7, #6]
 80120ae:	68ba      	ldr	r2, [r7, #8]
 80120b0:	68b9      	ldr	r1, [r7, #8]
 80120b2:	68f8      	ldr	r0, [r7, #12]
 80120b4:	f000 f89a 	bl	80121ec <HAL_SPI_TransmitReceive_DMA>
 80120b8:	4603      	mov	r3, r0
 80120ba:	e08c      	b.n	80121d6 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80120c2:	2b01      	cmp	r3, #1
 80120c4:	d101      	bne.n	80120ca <HAL_SPI_Receive_DMA+0x66>
 80120c6:	2302      	movs	r3, #2
 80120c8:	e085      	b.n	80121d6 <HAL_SPI_Receive_DMA+0x172>
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	2201      	movs	r2, #1
 80120ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	2204      	movs	r2, #4
 80120d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	2200      	movs	r2, #0
 80120de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	68ba      	ldr	r2, [r7, #8]
 80120e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	88fa      	ldrh	r2, [r7, #6]
 80120ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	88fa      	ldrh	r2, [r7, #6]
 80120f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	2200      	movs	r2, #0
 80120f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	2200      	movs	r2, #0
 80120fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	2200      	movs	r2, #0
 8012102:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	2200      	movs	r2, #0
 8012108:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	689b      	ldr	r3, [r3, #8]
 801210e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012112:	d10f      	bne.n	8012134 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	681a      	ldr	r2, [r3, #0]
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012122:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	681a      	ldr	r2, [r3, #0]
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8012132:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012138:	4a29      	ldr	r2, [pc, #164]	@ (80121e0 <HAL_SPI_Receive_DMA+0x17c>)
 801213a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012140:	4a28      	ldr	r2, [pc, #160]	@ (80121e4 <HAL_SPI_Receive_DMA+0x180>)
 8012142:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012148:	4a27      	ldr	r2, [pc, #156]	@ (80121e8 <HAL_SPI_Receive_DMA+0x184>)
 801214a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012150:	2200      	movs	r2, #0
 8012152:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	330c      	adds	r3, #12
 801215e:	4619      	mov	r1, r3
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012164:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801216a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 801216c:	f7fb feca 	bl	800df04 <HAL_DMA_Start_IT>
 8012170:	4603      	mov	r3, r0
 8012172:	2b00      	cmp	r3, #0
 8012174:	d00b      	beq.n	801218e <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801217a:	f043 0210 	orr.w	r2, r3, #16
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	2200      	movs	r2, #0
 8012186:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 801218a:	2301      	movs	r3, #1
 801218c:	e023      	b.n	80121d6 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012198:	2b40      	cmp	r3, #64	@ 0x40
 801219a:	d007      	beq.n	80121ac <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	681a      	ldr	r2, [r3, #0]
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80121aa:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	2200      	movs	r2, #0
 80121b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	685a      	ldr	r2, [r3, #4]
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	f042 0220 	orr.w	r2, r2, #32
 80121c2:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	685a      	ldr	r2, [r3, #4]
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	f042 0201 	orr.w	r2, r2, #1
 80121d2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80121d4:	2300      	movs	r3, #0
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3710      	adds	r7, #16
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}
 80121de:	bf00      	nop
 80121e0:	08012659 	.word	0x08012659
 80121e4:	08012505 	.word	0x08012505
 80121e8:	08012691 	.word	0x08012691

080121ec <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b086      	sub	sp, #24
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	60f8      	str	r0, [r7, #12]
 80121f4:	60b9      	str	r1, [r7, #8]
 80121f6:	607a      	str	r2, [r7, #4]
 80121f8:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012200:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	685b      	ldr	r3, [r3, #4]
 8012206:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8012208:	7dfb      	ldrb	r3, [r7, #23]
 801220a:	2b01      	cmp	r3, #1
 801220c:	d00c      	beq.n	8012228 <HAL_SPI_TransmitReceive_DMA+0x3c>
 801220e:	693b      	ldr	r3, [r7, #16]
 8012210:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012214:	d106      	bne.n	8012224 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	689b      	ldr	r3, [r3, #8]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d102      	bne.n	8012224 <HAL_SPI_TransmitReceive_DMA+0x38>
 801221e:	7dfb      	ldrb	r3, [r7, #23]
 8012220:	2b04      	cmp	r3, #4
 8012222:	d001      	beq.n	8012228 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8012224:	2302      	movs	r3, #2
 8012226:	e0cf      	b.n	80123c8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d005      	beq.n	801223a <HAL_SPI_TransmitReceive_DMA+0x4e>
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d002      	beq.n	801223a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8012234:	887b      	ldrh	r3, [r7, #2]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d101      	bne.n	801223e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 801223a:	2301      	movs	r3, #1
 801223c:	e0c4      	b.n	80123c8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8012244:	2b01      	cmp	r3, #1
 8012246:	d101      	bne.n	801224c <HAL_SPI_TransmitReceive_DMA+0x60>
 8012248:	2302      	movs	r3, #2
 801224a:	e0bd      	b.n	80123c8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	2201      	movs	r2, #1
 8012250:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801225a:	b2db      	uxtb	r3, r3
 801225c:	2b04      	cmp	r3, #4
 801225e:	d003      	beq.n	8012268 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	2205      	movs	r2, #5
 8012264:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2200      	movs	r2, #0
 801226c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	68ba      	ldr	r2, [r7, #8]
 8012272:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	887a      	ldrh	r2, [r7, #2]
 8012278:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	887a      	ldrh	r2, [r7, #2]
 801227e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	687a      	ldr	r2, [r7, #4]
 8012284:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	887a      	ldrh	r2, [r7, #2]
 801228a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	887a      	ldrh	r2, [r7, #2]
 8012290:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	2200      	movs	r2, #0
 8012296:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	2200      	movs	r2, #0
 801229c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80122a4:	b2db      	uxtb	r3, r3
 80122a6:	2b04      	cmp	r3, #4
 80122a8:	d108      	bne.n	80122bc <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80122ae:	4a48      	ldr	r2, [pc, #288]	@ (80123d0 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80122b0:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80122b6:	4a47      	ldr	r2, [pc, #284]	@ (80123d4 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 80122b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80122ba:	e007      	b.n	80122cc <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80122c0:	4a45      	ldr	r2, [pc, #276]	@ (80123d8 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80122c2:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80122c8:	4a44      	ldr	r2, [pc, #272]	@ (80123dc <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80122ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80122d0:	4a43      	ldr	r2, [pc, #268]	@ (80123e0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80122d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80122d8:	2200      	movs	r2, #0
 80122da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	330c      	adds	r3, #12
 80122e6:	4619      	mov	r1, r3
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122ec:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80122f2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80122f4:	f7fb fe06 	bl	800df04 <HAL_DMA_Start_IT>
 80122f8:	4603      	mov	r3, r0
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d00b      	beq.n	8012316 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012302:	f043 0210 	orr.w	r2, r3, #16
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	2200      	movs	r2, #0
 801230e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8012312:	2301      	movs	r3, #1
 8012314:	e058      	b.n	80123c8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	685a      	ldr	r2, [r3, #4]
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	f042 0201 	orr.w	r2, r2, #1
 8012324:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801232a:	2200      	movs	r2, #0
 801232c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012332:	2200      	movs	r2, #0
 8012334:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801233a:	2200      	movs	r2, #0
 801233c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012342:	2200      	movs	r2, #0
 8012344:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801234e:	4619      	mov	r1, r3
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	330c      	adds	r3, #12
 8012356:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801235c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 801235e:	f7fb fdd1 	bl	800df04 <HAL_DMA_Start_IT>
 8012362:	4603      	mov	r3, r0
 8012364:	2b00      	cmp	r3, #0
 8012366:	d00b      	beq.n	8012380 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801236c:	f043 0210 	orr.w	r2, r3, #16
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	2200      	movs	r2, #0
 8012378:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 801237c:	2301      	movs	r3, #1
 801237e:	e023      	b.n	80123c8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801238a:	2b40      	cmp	r3, #64	@ 0x40
 801238c:	d007      	beq.n	801239e <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	681a      	ldr	r2, [r3, #0]
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801239c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	2200      	movs	r2, #0
 80123a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	685a      	ldr	r2, [r3, #4]
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	f042 0220 	orr.w	r2, r2, #32
 80123b4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	685a      	ldr	r2, [r3, #4]
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	f042 0202 	orr.w	r2, r2, #2
 80123c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80123c6:	2300      	movs	r3, #0
}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3718      	adds	r7, #24
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}
 80123d0:	08012659 	.word	0x08012659
 80123d4:	08012505 	.word	0x08012505
 80123d8:	08012675 	.word	0x08012675
 80123dc:	080125ad 	.word	0x080125ad
 80123e0:	08012691 	.word	0x08012691

080123e4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80123e4:	b480      	push	{r7}
 80123e6:	b083      	sub	sp, #12
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80123ec:	bf00      	nop
 80123ee:	370c      	adds	r7, #12
 80123f0:	46bd      	mov	sp, r7
 80123f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f6:	4770      	bx	lr

080123f8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80123f8:	b480      	push	{r7}
 80123fa:	b083      	sub	sp, #12
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012400:	bf00      	nop
 8012402:	370c      	adds	r7, #12
 8012404:	46bd      	mov	sp, r7
 8012406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240a:	4770      	bx	lr

0801240c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 801240c:	b480      	push	{r7}
 801240e:	b083      	sub	sp, #12
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8012414:	bf00      	nop
 8012416:	370c      	adds	r7, #12
 8012418:	46bd      	mov	sp, r7
 801241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241e:	4770      	bx	lr

08012420 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012420:	b480      	push	{r7}
 8012422:	b083      	sub	sp, #12
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8012428:	bf00      	nop
 801242a:	370c      	adds	r7, #12
 801242c:	46bd      	mov	sp, r7
 801242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012432:	4770      	bx	lr

08012434 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012434:	b480      	push	{r7}
 8012436:	b083      	sub	sp, #12
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 801243c:	bf00      	nop
 801243e:	370c      	adds	r7, #12
 8012440:	46bd      	mov	sp, r7
 8012442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012446:	4770      	bx	lr

08012448 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8012448:	b480      	push	{r7}
 801244a:	b083      	sub	sp, #12
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012450:	bf00      	nop
 8012452:	370c      	adds	r7, #12
 8012454:	46bd      	mov	sp, r7
 8012456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245a:	4770      	bx	lr

0801245c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b086      	sub	sp, #24
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012468:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801246a:	f7f9 ff69 	bl	800c340 <HAL_GetTick>
 801246e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801247a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801247e:	d03b      	beq.n	80124f8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	685a      	ldr	r2, [r3, #4]
 8012486:	697b      	ldr	r3, [r7, #20]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	f022 0220 	bic.w	r2, r2, #32
 801248e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	685a      	ldr	r2, [r3, #4]
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	f022 0202 	bic.w	r2, r2, #2
 801249e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80124a0:	693a      	ldr	r2, [r7, #16]
 80124a2:	2164      	movs	r1, #100	@ 0x64
 80124a4:	6978      	ldr	r0, [r7, #20]
 80124a6:	f000 fa01 	bl	80128ac <SPI_EndRxTxTransaction>
 80124aa:	4603      	mov	r3, r0
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d005      	beq.n	80124bc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80124b0:	697b      	ldr	r3, [r7, #20]
 80124b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80124b4:	f043 0220 	orr.w	r2, r3, #32
 80124b8:	697b      	ldr	r3, [r7, #20]
 80124ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	689b      	ldr	r3, [r3, #8]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d10a      	bne.n	80124da <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80124c4:	2300      	movs	r3, #0
 80124c6:	60fb      	str	r3, [r7, #12]
 80124c8:	697b      	ldr	r3, [r7, #20]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	68db      	ldr	r3, [r3, #12]
 80124ce:	60fb      	str	r3, [r7, #12]
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	689b      	ldr	r3, [r3, #8]
 80124d6:	60fb      	str	r3, [r7, #12]
 80124d8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	2200      	movs	r2, #0
 80124de:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80124e0:	697b      	ldr	r3, [r7, #20]
 80124e2:	2201      	movs	r2, #1
 80124e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80124e8:	697b      	ldr	r3, [r7, #20]
 80124ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d003      	beq.n	80124f8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80124f0:	6978      	ldr	r0, [r7, #20]
 80124f2:	f7ff ffa9 	bl	8012448 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80124f6:	e002      	b.n	80124fe <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80124f8:	6978      	ldr	r0, [r7, #20]
 80124fa:	f7ff ff73 	bl	80123e4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80124fe:	3718      	adds	r7, #24
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}

08012504 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b084      	sub	sp, #16
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012510:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012512:	f7f9 ff15 	bl	800c340 <HAL_GetTick>
 8012516:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012526:	d03b      	beq.n	80125a0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	685a      	ldr	r2, [r3, #4]
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	f022 0220 	bic.w	r2, r2, #32
 8012536:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	689b      	ldr	r3, [r3, #8]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d10d      	bne.n	801255c <SPI_DMAReceiveCplt+0x58>
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012548:	d108      	bne.n	801255c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	685a      	ldr	r2, [r3, #4]
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	f022 0203 	bic.w	r2, r2, #3
 8012558:	605a      	str	r2, [r3, #4]
 801255a:	e007      	b.n	801256c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	685a      	ldr	r2, [r3, #4]
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	f022 0201 	bic.w	r2, r2, #1
 801256a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801256c:	68ba      	ldr	r2, [r7, #8]
 801256e:	2164      	movs	r1, #100	@ 0x64
 8012570:	68f8      	ldr	r0, [r7, #12]
 8012572:	f000 f935 	bl	80127e0 <SPI_EndRxTransaction>
 8012576:	4603      	mov	r3, r0
 8012578:	2b00      	cmp	r3, #0
 801257a:	d002      	beq.n	8012582 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	2220      	movs	r2, #32
 8012580:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	2200      	movs	r2, #0
 8012586:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	2201      	movs	r2, #1
 801258c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012594:	2b00      	cmp	r3, #0
 8012596:	d003      	beq.n	80125a0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012598:	68f8      	ldr	r0, [r7, #12]
 801259a:	f7ff ff55 	bl	8012448 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801259e:	e002      	b.n	80125a6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80125a0:	68f8      	ldr	r0, [r7, #12]
 80125a2:	f7ff ff29 	bl	80123f8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80125a6:	3710      	adds	r7, #16
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}

080125ac <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b084      	sub	sp, #16
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80125b8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80125ba:	f7f9 fec1 	bl	800c340 <HAL_GetTick>
 80125be:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80125ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80125ce:	d02f      	beq.n	8012630 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	685a      	ldr	r2, [r3, #4]
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	f022 0220 	bic.w	r2, r2, #32
 80125de:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80125e0:	68ba      	ldr	r2, [r7, #8]
 80125e2:	2164      	movs	r1, #100	@ 0x64
 80125e4:	68f8      	ldr	r0, [r7, #12]
 80125e6:	f000 f961 	bl	80128ac <SPI_EndRxTxTransaction>
 80125ea:	4603      	mov	r3, r0
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d005      	beq.n	80125fc <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80125f4:	f043 0220 	orr.w	r2, r3, #32
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	685a      	ldr	r2, [r3, #4]
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	f022 0203 	bic.w	r2, r2, #3
 801260a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	2200      	movs	r2, #0
 8012610:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	2200      	movs	r2, #0
 8012616:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	2201      	movs	r2, #1
 801261c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012624:	2b00      	cmp	r3, #0
 8012626:	d003      	beq.n	8012630 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012628:	68f8      	ldr	r0, [r7, #12]
 801262a:	f7ff ff0d 	bl	8012448 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801262e:	e002      	b.n	8012636 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8012630:	68f8      	ldr	r0, [r7, #12]
 8012632:	f7f7 fae9 	bl	8009c08 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012636:	3710      	adds	r7, #16
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}

0801263c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b084      	sub	sp, #16
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012648:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 801264a:	68f8      	ldr	r0, [r7, #12]
 801264c:	f7ff fede 	bl	801240c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012650:	bf00      	nop
 8012652:	3710      	adds	r7, #16
 8012654:	46bd      	mov	sp, r7
 8012656:	bd80      	pop	{r7, pc}

08012658 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b084      	sub	sp, #16
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012664:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8012666:	68f8      	ldr	r0, [r7, #12]
 8012668:	f7ff feda 	bl	8012420 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801266c:	bf00      	nop
 801266e:	3710      	adds	r7, #16
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}

08012674 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b084      	sub	sp, #16
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012680:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8012682:	68f8      	ldr	r0, [r7, #12]
 8012684:	f7ff fed6 	bl	8012434 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012688:	bf00      	nop
 801268a:	3710      	adds	r7, #16
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}

08012690 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b084      	sub	sp, #16
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801269c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	685a      	ldr	r2, [r3, #4]
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	f022 0203 	bic.w	r2, r2, #3
 80126ac:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80126b2:	f043 0210 	orr.w	r2, r3, #16
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	2201      	movs	r2, #1
 80126be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80126c2:	68f8      	ldr	r0, [r7, #12]
 80126c4:	f7ff fec0 	bl	8012448 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80126c8:	bf00      	nop
 80126ca:	3710      	adds	r7, #16
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}

080126d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b088      	sub	sp, #32
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	60f8      	str	r0, [r7, #12]
 80126d8:	60b9      	str	r1, [r7, #8]
 80126da:	603b      	str	r3, [r7, #0]
 80126dc:	4613      	mov	r3, r2
 80126de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80126e0:	f7f9 fe2e 	bl	800c340 <HAL_GetTick>
 80126e4:	4602      	mov	r2, r0
 80126e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126e8:	1a9b      	subs	r3, r3, r2
 80126ea:	683a      	ldr	r2, [r7, #0]
 80126ec:	4413      	add	r3, r2
 80126ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80126f0:	f7f9 fe26 	bl	800c340 <HAL_GetTick>
 80126f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80126f6:	4b39      	ldr	r3, [pc, #228]	@ (80127dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	015b      	lsls	r3, r3, #5
 80126fc:	0d1b      	lsrs	r3, r3, #20
 80126fe:	69fa      	ldr	r2, [r7, #28]
 8012700:	fb02 f303 	mul.w	r3, r2, r3
 8012704:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012706:	e055      	b.n	80127b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801270e:	d051      	beq.n	80127b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8012710:	f7f9 fe16 	bl	800c340 <HAL_GetTick>
 8012714:	4602      	mov	r2, r0
 8012716:	69bb      	ldr	r3, [r7, #24]
 8012718:	1ad3      	subs	r3, r2, r3
 801271a:	69fa      	ldr	r2, [r7, #28]
 801271c:	429a      	cmp	r2, r3
 801271e:	d902      	bls.n	8012726 <SPI_WaitFlagStateUntilTimeout+0x56>
 8012720:	69fb      	ldr	r3, [r7, #28]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d13d      	bne.n	80127a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	685a      	ldr	r2, [r3, #4]
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8012734:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	685b      	ldr	r3, [r3, #4]
 801273a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801273e:	d111      	bne.n	8012764 <SPI_WaitFlagStateUntilTimeout+0x94>
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	689b      	ldr	r3, [r3, #8]
 8012744:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012748:	d004      	beq.n	8012754 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	689b      	ldr	r3, [r3, #8]
 801274e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012752:	d107      	bne.n	8012764 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	681a      	ldr	r2, [r3, #0]
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012762:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801276c:	d10f      	bne.n	801278e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	681a      	ldr	r2, [r3, #0]
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801277c:	601a      	str	r2, [r3, #0]
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	681a      	ldr	r2, [r3, #0]
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801278c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	2201      	movs	r2, #1
 8012792:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	2200      	movs	r2, #0
 801279a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 801279e:	2303      	movs	r3, #3
 80127a0:	e018      	b.n	80127d4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80127a2:	697b      	ldr	r3, [r7, #20]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d102      	bne.n	80127ae <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80127a8:	2300      	movs	r3, #0
 80127aa:	61fb      	str	r3, [r7, #28]
 80127ac:	e002      	b.n	80127b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80127ae:	697b      	ldr	r3, [r7, #20]
 80127b0:	3b01      	subs	r3, #1
 80127b2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	689a      	ldr	r2, [r3, #8]
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	4013      	ands	r3, r2
 80127be:	68ba      	ldr	r2, [r7, #8]
 80127c0:	429a      	cmp	r2, r3
 80127c2:	bf0c      	ite	eq
 80127c4:	2301      	moveq	r3, #1
 80127c6:	2300      	movne	r3, #0
 80127c8:	b2db      	uxtb	r3, r3
 80127ca:	461a      	mov	r2, r3
 80127cc:	79fb      	ldrb	r3, [r7, #7]
 80127ce:	429a      	cmp	r2, r3
 80127d0:	d19a      	bne.n	8012708 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80127d2:	2300      	movs	r3, #0
}
 80127d4:	4618      	mov	r0, r3
 80127d6:	3720      	adds	r7, #32
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd80      	pop	{r7, pc}
 80127dc:	20000200 	.word	0x20000200

080127e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b086      	sub	sp, #24
 80127e4:	af02      	add	r7, sp, #8
 80127e6:	60f8      	str	r0, [r7, #12]
 80127e8:	60b9      	str	r1, [r7, #8]
 80127ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	685b      	ldr	r3, [r3, #4]
 80127f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80127f4:	d111      	bne.n	801281a <SPI_EndRxTransaction+0x3a>
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	689b      	ldr	r3, [r3, #8]
 80127fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80127fe:	d004      	beq.n	801280a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	689b      	ldr	r3, [r3, #8]
 8012804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012808:	d107      	bne.n	801281a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	681a      	ldr	r2, [r3, #0]
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012818:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	685b      	ldr	r3, [r3, #4]
 801281e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012822:	d12a      	bne.n	801287a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	689b      	ldr	r3, [r3, #8]
 8012828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801282c:	d012      	beq.n	8012854 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	9300      	str	r3, [sp, #0]
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	2200      	movs	r2, #0
 8012836:	2180      	movs	r1, #128	@ 0x80
 8012838:	68f8      	ldr	r0, [r7, #12]
 801283a:	f7ff ff49 	bl	80126d0 <SPI_WaitFlagStateUntilTimeout>
 801283e:	4603      	mov	r3, r0
 8012840:	2b00      	cmp	r3, #0
 8012842:	d02d      	beq.n	80128a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012848:	f043 0220 	orr.w	r2, r3, #32
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8012850:	2303      	movs	r3, #3
 8012852:	e026      	b.n	80128a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	9300      	str	r3, [sp, #0]
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	2200      	movs	r2, #0
 801285c:	2101      	movs	r1, #1
 801285e:	68f8      	ldr	r0, [r7, #12]
 8012860:	f7ff ff36 	bl	80126d0 <SPI_WaitFlagStateUntilTimeout>
 8012864:	4603      	mov	r3, r0
 8012866:	2b00      	cmp	r3, #0
 8012868:	d01a      	beq.n	80128a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801286e:	f043 0220 	orr.w	r2, r3, #32
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8012876:	2303      	movs	r3, #3
 8012878:	e013      	b.n	80128a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	9300      	str	r3, [sp, #0]
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	2200      	movs	r2, #0
 8012882:	2101      	movs	r1, #1
 8012884:	68f8      	ldr	r0, [r7, #12]
 8012886:	f7ff ff23 	bl	80126d0 <SPI_WaitFlagStateUntilTimeout>
 801288a:	4603      	mov	r3, r0
 801288c:	2b00      	cmp	r3, #0
 801288e:	d007      	beq.n	80128a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012894:	f043 0220 	orr.w	r2, r3, #32
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 801289c:	2303      	movs	r3, #3
 801289e:	e000      	b.n	80128a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80128a0:	2300      	movs	r3, #0
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	3710      	adds	r7, #16
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}
	...

080128ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b088      	sub	sp, #32
 80128b0:	af02      	add	r7, sp, #8
 80128b2:	60f8      	str	r0, [r7, #12]
 80128b4:	60b9      	str	r1, [r7, #8]
 80128b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	9300      	str	r3, [sp, #0]
 80128bc:	68bb      	ldr	r3, [r7, #8]
 80128be:	2201      	movs	r2, #1
 80128c0:	2102      	movs	r1, #2
 80128c2:	68f8      	ldr	r0, [r7, #12]
 80128c4:	f7ff ff04 	bl	80126d0 <SPI_WaitFlagStateUntilTimeout>
 80128c8:	4603      	mov	r3, r0
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d007      	beq.n	80128de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80128d2:	f043 0220 	orr.w	r2, r3, #32
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80128da:	2303      	movs	r3, #3
 80128dc:	e032      	b.n	8012944 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80128de:	4b1b      	ldr	r3, [pc, #108]	@ (801294c <SPI_EndRxTxTransaction+0xa0>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	4a1b      	ldr	r2, [pc, #108]	@ (8012950 <SPI_EndRxTxTransaction+0xa4>)
 80128e4:	fba2 2303 	umull	r2, r3, r2, r3
 80128e8:	0d5b      	lsrs	r3, r3, #21
 80128ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80128ee:	fb02 f303 	mul.w	r3, r2, r3
 80128f2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80128fc:	d112      	bne.n	8012924 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	9300      	str	r3, [sp, #0]
 8012902:	68bb      	ldr	r3, [r7, #8]
 8012904:	2200      	movs	r2, #0
 8012906:	2180      	movs	r1, #128	@ 0x80
 8012908:	68f8      	ldr	r0, [r7, #12]
 801290a:	f7ff fee1 	bl	80126d0 <SPI_WaitFlagStateUntilTimeout>
 801290e:	4603      	mov	r3, r0
 8012910:	2b00      	cmp	r3, #0
 8012912:	d016      	beq.n	8012942 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012918:	f043 0220 	orr.w	r2, r3, #32
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8012920:	2303      	movs	r3, #3
 8012922:	e00f      	b.n	8012944 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d00a      	beq.n	8012940 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	3b01      	subs	r3, #1
 801292e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	689b      	ldr	r3, [r3, #8]
 8012936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801293a:	2b80      	cmp	r3, #128	@ 0x80
 801293c:	d0f2      	beq.n	8012924 <SPI_EndRxTxTransaction+0x78>
 801293e:	e000      	b.n	8012942 <SPI_EndRxTxTransaction+0x96>
        break;
 8012940:	bf00      	nop
  }

  return HAL_OK;
 8012942:	2300      	movs	r3, #0
}
 8012944:	4618      	mov	r0, r3
 8012946:	3718      	adds	r7, #24
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}
 801294c:	20000200 	.word	0x20000200
 8012950:	165e9f81 	.word	0x165e9f81

08012954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b082      	sub	sp, #8
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d101      	bne.n	8012966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012962:	2301      	movs	r3, #1
 8012964:	e041      	b.n	80129ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801296c:	b2db      	uxtb	r3, r3
 801296e:	2b00      	cmp	r3, #0
 8012970:	d106      	bne.n	8012980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2200      	movs	r2, #0
 8012976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f7f9 f836 	bl	800b9ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2202      	movs	r2, #2
 8012984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681a      	ldr	r2, [r3, #0]
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	3304      	adds	r3, #4
 8012990:	4619      	mov	r1, r3
 8012992:	4610      	mov	r0, r2
 8012994:	f000 fe84 	bl	80136a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2201      	movs	r2, #1
 801299c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2201      	movs	r2, #1
 80129a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2201      	movs	r2, #1
 80129ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2201      	movs	r2, #1
 80129b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	2201      	movs	r2, #1
 80129bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2201      	movs	r2, #1
 80129c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	2201      	movs	r2, #1
 80129cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2201      	movs	r2, #1
 80129d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2201      	movs	r2, #1
 80129dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	2201      	movs	r2, #1
 80129e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80129e8:	2300      	movs	r3, #0
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3708      	adds	r7, #8
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
	...

080129f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80129f4:	b480      	push	{r7}
 80129f6:	b085      	sub	sp, #20
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012a02:	b2db      	uxtb	r3, r3
 8012a04:	2b01      	cmp	r3, #1
 8012a06:	d001      	beq.n	8012a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012a08:	2301      	movs	r3, #1
 8012a0a:	e04e      	b.n	8012aaa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2202      	movs	r2, #2
 8012a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	68da      	ldr	r2, [r3, #12]
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	f042 0201 	orr.w	r2, r2, #1
 8012a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	4a23      	ldr	r2, [pc, #140]	@ (8012ab8 <HAL_TIM_Base_Start_IT+0xc4>)
 8012a2a:	4293      	cmp	r3, r2
 8012a2c:	d022      	beq.n	8012a74 <HAL_TIM_Base_Start_IT+0x80>
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012a36:	d01d      	beq.n	8012a74 <HAL_TIM_Base_Start_IT+0x80>
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8012abc <HAL_TIM_Base_Start_IT+0xc8>)
 8012a3e:	4293      	cmp	r3, r2
 8012a40:	d018      	beq.n	8012a74 <HAL_TIM_Base_Start_IT+0x80>
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	4a1e      	ldr	r2, [pc, #120]	@ (8012ac0 <HAL_TIM_Base_Start_IT+0xcc>)
 8012a48:	4293      	cmp	r3, r2
 8012a4a:	d013      	beq.n	8012a74 <HAL_TIM_Base_Start_IT+0x80>
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	4a1c      	ldr	r2, [pc, #112]	@ (8012ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8012a52:	4293      	cmp	r3, r2
 8012a54:	d00e      	beq.n	8012a74 <HAL_TIM_Base_Start_IT+0x80>
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8012ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8012a5c:	4293      	cmp	r3, r2
 8012a5e:	d009      	beq.n	8012a74 <HAL_TIM_Base_Start_IT+0x80>
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	4a19      	ldr	r2, [pc, #100]	@ (8012acc <HAL_TIM_Base_Start_IT+0xd8>)
 8012a66:	4293      	cmp	r3, r2
 8012a68:	d004      	beq.n	8012a74 <HAL_TIM_Base_Start_IT+0x80>
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	4a18      	ldr	r2, [pc, #96]	@ (8012ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8012a70:	4293      	cmp	r3, r2
 8012a72:	d111      	bne.n	8012a98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	689b      	ldr	r3, [r3, #8]
 8012a7a:	f003 0307 	and.w	r3, r3, #7
 8012a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	2b06      	cmp	r3, #6
 8012a84:	d010      	beq.n	8012aa8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	681a      	ldr	r2, [r3, #0]
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	f042 0201 	orr.w	r2, r2, #1
 8012a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a96:	e007      	b.n	8012aa8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	681a      	ldr	r2, [r3, #0]
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	f042 0201 	orr.w	r2, r2, #1
 8012aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012aa8:	2300      	movs	r3, #0
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3714      	adds	r7, #20
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab4:	4770      	bx	lr
 8012ab6:	bf00      	nop
 8012ab8:	40010000 	.word	0x40010000
 8012abc:	40000400 	.word	0x40000400
 8012ac0:	40000800 	.word	0x40000800
 8012ac4:	40000c00 	.word	0x40000c00
 8012ac8:	40010400 	.word	0x40010400
 8012acc:	40014000 	.word	0x40014000
 8012ad0:	40001800 	.word	0x40001800

08012ad4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8012ad4:	b480      	push	{r7}
 8012ad6:	b083      	sub	sp, #12
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	68da      	ldr	r2, [r3, #12]
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	f022 0201 	bic.w	r2, r2, #1
 8012aea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	6a1a      	ldr	r2, [r3, #32]
 8012af2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012af6:	4013      	ands	r3, r2
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d10f      	bne.n	8012b1c <HAL_TIM_Base_Stop_IT+0x48>
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	6a1a      	ldr	r2, [r3, #32]
 8012b02:	f240 4344 	movw	r3, #1092	@ 0x444
 8012b06:	4013      	ands	r3, r2
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d107      	bne.n	8012b1c <HAL_TIM_Base_Stop_IT+0x48>
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	681a      	ldr	r2, [r3, #0]
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	f022 0201 	bic.w	r2, r2, #1
 8012b1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2201      	movs	r2, #1
 8012b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8012b24:	2300      	movs	r3, #0
}
 8012b26:	4618      	mov	r0, r3
 8012b28:	370c      	adds	r7, #12
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b30:	4770      	bx	lr

08012b32 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8012b32:	b580      	push	{r7, lr}
 8012b34:	b082      	sub	sp, #8
 8012b36:	af00      	add	r7, sp, #0
 8012b38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d101      	bne.n	8012b44 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8012b40:	2301      	movs	r3, #1
 8012b42:	e041      	b.n	8012bc8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012b4a:	b2db      	uxtb	r3, r3
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d106      	bne.n	8012b5e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2200      	movs	r2, #0
 8012b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	f000 f839 	bl	8012bd0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	2202      	movs	r2, #2
 8012b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681a      	ldr	r2, [r3, #0]
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	3304      	adds	r3, #4
 8012b6e:	4619      	mov	r1, r3
 8012b70:	4610      	mov	r0, r2
 8012b72:	f000 fd95 	bl	80136a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2201      	movs	r2, #1
 8012b7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2201      	movs	r2, #1
 8012b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2201      	movs	r2, #1
 8012b8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2201      	movs	r2, #1
 8012b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	2201      	movs	r2, #1
 8012b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	2201      	movs	r2, #1
 8012ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2201      	movs	r2, #1
 8012baa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	2201      	movs	r2, #1
 8012bb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2201      	movs	r2, #1
 8012bba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2201      	movs	r2, #1
 8012bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012bc6:	2300      	movs	r3, #0
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3708      	adds	r7, #8
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}

08012bd0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8012bd0:	b480      	push	{r7}
 8012bd2:	b083      	sub	sp, #12
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8012bd8:	bf00      	nop
 8012bda:	370c      	adds	r7, #12
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be2:	4770      	bx	lr

08012be4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b084      	sub	sp, #16
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
 8012bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d104      	bne.n	8012bfe <HAL_TIM_IC_Start+0x1a>
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012bfa:	b2db      	uxtb	r3, r3
 8012bfc:	e013      	b.n	8012c26 <HAL_TIM_IC_Start+0x42>
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	2b04      	cmp	r3, #4
 8012c02:	d104      	bne.n	8012c0e <HAL_TIM_IC_Start+0x2a>
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012c0a:	b2db      	uxtb	r3, r3
 8012c0c:	e00b      	b.n	8012c26 <HAL_TIM_IC_Start+0x42>
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	2b08      	cmp	r3, #8
 8012c12:	d104      	bne.n	8012c1e <HAL_TIM_IC_Start+0x3a>
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012c1a:	b2db      	uxtb	r3, r3
 8012c1c:	e003      	b.n	8012c26 <HAL_TIM_IC_Start+0x42>
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012c24:	b2db      	uxtb	r3, r3
 8012c26:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d104      	bne.n	8012c38 <HAL_TIM_IC_Start+0x54>
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012c34:	b2db      	uxtb	r3, r3
 8012c36:	e013      	b.n	8012c60 <HAL_TIM_IC_Start+0x7c>
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	2b04      	cmp	r3, #4
 8012c3c:	d104      	bne.n	8012c48 <HAL_TIM_IC_Start+0x64>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012c44:	b2db      	uxtb	r3, r3
 8012c46:	e00b      	b.n	8012c60 <HAL_TIM_IC_Start+0x7c>
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	2b08      	cmp	r3, #8
 8012c4c:	d104      	bne.n	8012c58 <HAL_TIM_IC_Start+0x74>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012c54:	b2db      	uxtb	r3, r3
 8012c56:	e003      	b.n	8012c60 <HAL_TIM_IC_Start+0x7c>
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012c5e:	b2db      	uxtb	r3, r3
 8012c60:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8012c62:	7bfb      	ldrb	r3, [r7, #15]
 8012c64:	2b01      	cmp	r3, #1
 8012c66:	d102      	bne.n	8012c6e <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8012c68:	7bbb      	ldrb	r3, [r7, #14]
 8012c6a:	2b01      	cmp	r3, #1
 8012c6c:	d001      	beq.n	8012c72 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8012c6e:	2301      	movs	r3, #1
 8012c70:	e081      	b.n	8012d76 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012c72:	683b      	ldr	r3, [r7, #0]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d104      	bne.n	8012c82 <HAL_TIM_IC_Start+0x9e>
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2202      	movs	r2, #2
 8012c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012c80:	e013      	b.n	8012caa <HAL_TIM_IC_Start+0xc6>
 8012c82:	683b      	ldr	r3, [r7, #0]
 8012c84:	2b04      	cmp	r3, #4
 8012c86:	d104      	bne.n	8012c92 <HAL_TIM_IC_Start+0xae>
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	2202      	movs	r2, #2
 8012c8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012c90:	e00b      	b.n	8012caa <HAL_TIM_IC_Start+0xc6>
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	2b08      	cmp	r3, #8
 8012c96:	d104      	bne.n	8012ca2 <HAL_TIM_IC_Start+0xbe>
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2202      	movs	r2, #2
 8012c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012ca0:	e003      	b.n	8012caa <HAL_TIM_IC_Start+0xc6>
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2202      	movs	r2, #2
 8012ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d104      	bne.n	8012cba <HAL_TIM_IC_Start+0xd6>
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2202      	movs	r2, #2
 8012cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012cb8:	e013      	b.n	8012ce2 <HAL_TIM_IC_Start+0xfe>
 8012cba:	683b      	ldr	r3, [r7, #0]
 8012cbc:	2b04      	cmp	r3, #4
 8012cbe:	d104      	bne.n	8012cca <HAL_TIM_IC_Start+0xe6>
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2202      	movs	r2, #2
 8012cc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012cc8:	e00b      	b.n	8012ce2 <HAL_TIM_IC_Start+0xfe>
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	2b08      	cmp	r3, #8
 8012cce:	d104      	bne.n	8012cda <HAL_TIM_IC_Start+0xf6>
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2202      	movs	r2, #2
 8012cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012cd8:	e003      	b.n	8012ce2 <HAL_TIM_IC_Start+0xfe>
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	2202      	movs	r2, #2
 8012cde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	2201      	movs	r2, #1
 8012ce8:	6839      	ldr	r1, [r7, #0]
 8012cea:	4618      	mov	r0, r3
 8012cec:	f000 ffd4 	bl	8013c98 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	4a22      	ldr	r2, [pc, #136]	@ (8012d80 <HAL_TIM_IC_Start+0x19c>)
 8012cf6:	4293      	cmp	r3, r2
 8012cf8:	d022      	beq.n	8012d40 <HAL_TIM_IC_Start+0x15c>
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012d02:	d01d      	beq.n	8012d40 <HAL_TIM_IC_Start+0x15c>
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	4a1e      	ldr	r2, [pc, #120]	@ (8012d84 <HAL_TIM_IC_Start+0x1a0>)
 8012d0a:	4293      	cmp	r3, r2
 8012d0c:	d018      	beq.n	8012d40 <HAL_TIM_IC_Start+0x15c>
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	4a1d      	ldr	r2, [pc, #116]	@ (8012d88 <HAL_TIM_IC_Start+0x1a4>)
 8012d14:	4293      	cmp	r3, r2
 8012d16:	d013      	beq.n	8012d40 <HAL_TIM_IC_Start+0x15c>
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8012d8c <HAL_TIM_IC_Start+0x1a8>)
 8012d1e:	4293      	cmp	r3, r2
 8012d20:	d00e      	beq.n	8012d40 <HAL_TIM_IC_Start+0x15c>
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	4a1a      	ldr	r2, [pc, #104]	@ (8012d90 <HAL_TIM_IC_Start+0x1ac>)
 8012d28:	4293      	cmp	r3, r2
 8012d2a:	d009      	beq.n	8012d40 <HAL_TIM_IC_Start+0x15c>
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	4a18      	ldr	r2, [pc, #96]	@ (8012d94 <HAL_TIM_IC_Start+0x1b0>)
 8012d32:	4293      	cmp	r3, r2
 8012d34:	d004      	beq.n	8012d40 <HAL_TIM_IC_Start+0x15c>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	4a17      	ldr	r2, [pc, #92]	@ (8012d98 <HAL_TIM_IC_Start+0x1b4>)
 8012d3c:	4293      	cmp	r3, r2
 8012d3e:	d111      	bne.n	8012d64 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	689b      	ldr	r3, [r3, #8]
 8012d46:	f003 0307 	and.w	r3, r3, #7
 8012d4a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	2b06      	cmp	r3, #6
 8012d50:	d010      	beq.n	8012d74 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	681a      	ldr	r2, [r3, #0]
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	f042 0201 	orr.w	r2, r2, #1
 8012d60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d62:	e007      	b.n	8012d74 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	681a      	ldr	r2, [r3, #0]
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	f042 0201 	orr.w	r2, r2, #1
 8012d72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012d74:	2300      	movs	r3, #0
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	3710      	adds	r7, #16
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	40010000 	.word	0x40010000
 8012d84:	40000400 	.word	0x40000400
 8012d88:	40000800 	.word	0x40000800
 8012d8c:	40000c00 	.word	0x40000c00
 8012d90:	40010400 	.word	0x40010400
 8012d94:	40014000 	.word	0x40014000
 8012d98:	40001800 	.word	0x40001800

08012d9c <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b082      	sub	sp, #8
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
 8012da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	2200      	movs	r2, #0
 8012dac:	6839      	ldr	r1, [r7, #0]
 8012dae:	4618      	mov	r0, r3
 8012db0:	f000 ff72 	bl	8013c98 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	6a1a      	ldr	r2, [r3, #32]
 8012dba:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012dbe:	4013      	ands	r3, r2
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d10f      	bne.n	8012de4 <HAL_TIM_IC_Stop+0x48>
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	6a1a      	ldr	r2, [r3, #32]
 8012dca:	f240 4344 	movw	r3, #1092	@ 0x444
 8012dce:	4013      	ands	r3, r2
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d107      	bne.n	8012de4 <HAL_TIM_IC_Stop+0x48>
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	681a      	ldr	r2, [r3, #0]
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	f022 0201 	bic.w	r2, r2, #1
 8012de2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d104      	bne.n	8012df4 <HAL_TIM_IC_Stop+0x58>
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	2201      	movs	r2, #1
 8012dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012df2:	e013      	b.n	8012e1c <HAL_TIM_IC_Stop+0x80>
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	2b04      	cmp	r3, #4
 8012df8:	d104      	bne.n	8012e04 <HAL_TIM_IC_Stop+0x68>
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	2201      	movs	r2, #1
 8012dfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012e02:	e00b      	b.n	8012e1c <HAL_TIM_IC_Stop+0x80>
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	2b08      	cmp	r3, #8
 8012e08:	d104      	bne.n	8012e14 <HAL_TIM_IC_Stop+0x78>
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	2201      	movs	r2, #1
 8012e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012e12:	e003      	b.n	8012e1c <HAL_TIM_IC_Stop+0x80>
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2201      	movs	r2, #1
 8012e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d104      	bne.n	8012e2c <HAL_TIM_IC_Stop+0x90>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	2201      	movs	r2, #1
 8012e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012e2a:	e013      	b.n	8012e54 <HAL_TIM_IC_Stop+0xb8>
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	2b04      	cmp	r3, #4
 8012e30:	d104      	bne.n	8012e3c <HAL_TIM_IC_Stop+0xa0>
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2201      	movs	r2, #1
 8012e36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012e3a:	e00b      	b.n	8012e54 <HAL_TIM_IC_Stop+0xb8>
 8012e3c:	683b      	ldr	r3, [r7, #0]
 8012e3e:	2b08      	cmp	r3, #8
 8012e40:	d104      	bne.n	8012e4c <HAL_TIM_IC_Stop+0xb0>
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	2201      	movs	r2, #1
 8012e46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012e4a:	e003      	b.n	8012e54 <HAL_TIM_IC_Stop+0xb8>
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2201      	movs	r2, #1
 8012e50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8012e54:	2300      	movs	r3, #0
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3708      	adds	r7, #8
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
	...

08012e60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b084      	sub	sp, #16
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
 8012e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d104      	bne.n	8012e7e <HAL_TIM_IC_Start_IT+0x1e>
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012e7a:	b2db      	uxtb	r3, r3
 8012e7c:	e013      	b.n	8012ea6 <HAL_TIM_IC_Start_IT+0x46>
 8012e7e:	683b      	ldr	r3, [r7, #0]
 8012e80:	2b04      	cmp	r3, #4
 8012e82:	d104      	bne.n	8012e8e <HAL_TIM_IC_Start_IT+0x2e>
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012e8a:	b2db      	uxtb	r3, r3
 8012e8c:	e00b      	b.n	8012ea6 <HAL_TIM_IC_Start_IT+0x46>
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	2b08      	cmp	r3, #8
 8012e92:	d104      	bne.n	8012e9e <HAL_TIM_IC_Start_IT+0x3e>
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012e9a:	b2db      	uxtb	r3, r3
 8012e9c:	e003      	b.n	8012ea6 <HAL_TIM_IC_Start_IT+0x46>
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012ea4:	b2db      	uxtb	r3, r3
 8012ea6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d104      	bne.n	8012eb8 <HAL_TIM_IC_Start_IT+0x58>
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012eb4:	b2db      	uxtb	r3, r3
 8012eb6:	e013      	b.n	8012ee0 <HAL_TIM_IC_Start_IT+0x80>
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	2b04      	cmp	r3, #4
 8012ebc:	d104      	bne.n	8012ec8 <HAL_TIM_IC_Start_IT+0x68>
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012ec4:	b2db      	uxtb	r3, r3
 8012ec6:	e00b      	b.n	8012ee0 <HAL_TIM_IC_Start_IT+0x80>
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	2b08      	cmp	r3, #8
 8012ecc:	d104      	bne.n	8012ed8 <HAL_TIM_IC_Start_IT+0x78>
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012ed4:	b2db      	uxtb	r3, r3
 8012ed6:	e003      	b.n	8012ee0 <HAL_TIM_IC_Start_IT+0x80>
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012ede:	b2db      	uxtb	r3, r3
 8012ee0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8012ee2:	7bbb      	ldrb	r3, [r7, #14]
 8012ee4:	2b01      	cmp	r3, #1
 8012ee6:	d102      	bne.n	8012eee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8012ee8:	7b7b      	ldrb	r3, [r7, #13]
 8012eea:	2b01      	cmp	r3, #1
 8012eec:	d001      	beq.n	8012ef2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8012eee:	2301      	movs	r3, #1
 8012ef0:	e0cc      	b.n	801308c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d104      	bne.n	8012f02 <HAL_TIM_IC_Start_IT+0xa2>
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2202      	movs	r2, #2
 8012efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012f00:	e013      	b.n	8012f2a <HAL_TIM_IC_Start_IT+0xca>
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	2b04      	cmp	r3, #4
 8012f06:	d104      	bne.n	8012f12 <HAL_TIM_IC_Start_IT+0xb2>
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2202      	movs	r2, #2
 8012f0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012f10:	e00b      	b.n	8012f2a <HAL_TIM_IC_Start_IT+0xca>
 8012f12:	683b      	ldr	r3, [r7, #0]
 8012f14:	2b08      	cmp	r3, #8
 8012f16:	d104      	bne.n	8012f22 <HAL_TIM_IC_Start_IT+0xc2>
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2202      	movs	r2, #2
 8012f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012f20:	e003      	b.n	8012f2a <HAL_TIM_IC_Start_IT+0xca>
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	2202      	movs	r2, #2
 8012f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d104      	bne.n	8012f3a <HAL_TIM_IC_Start_IT+0xda>
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2202      	movs	r2, #2
 8012f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012f38:	e013      	b.n	8012f62 <HAL_TIM_IC_Start_IT+0x102>
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	2b04      	cmp	r3, #4
 8012f3e:	d104      	bne.n	8012f4a <HAL_TIM_IC_Start_IT+0xea>
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2202      	movs	r2, #2
 8012f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012f48:	e00b      	b.n	8012f62 <HAL_TIM_IC_Start_IT+0x102>
 8012f4a:	683b      	ldr	r3, [r7, #0]
 8012f4c:	2b08      	cmp	r3, #8
 8012f4e:	d104      	bne.n	8012f5a <HAL_TIM_IC_Start_IT+0xfa>
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2202      	movs	r2, #2
 8012f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012f58:	e003      	b.n	8012f62 <HAL_TIM_IC_Start_IT+0x102>
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	2202      	movs	r2, #2
 8012f5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	2b0c      	cmp	r3, #12
 8012f66:	d841      	bhi.n	8012fec <HAL_TIM_IC_Start_IT+0x18c>
 8012f68:	a201      	add	r2, pc, #4	@ (adr r2, 8012f70 <HAL_TIM_IC_Start_IT+0x110>)
 8012f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f6e:	bf00      	nop
 8012f70:	08012fa5 	.word	0x08012fa5
 8012f74:	08012fed 	.word	0x08012fed
 8012f78:	08012fed 	.word	0x08012fed
 8012f7c:	08012fed 	.word	0x08012fed
 8012f80:	08012fb7 	.word	0x08012fb7
 8012f84:	08012fed 	.word	0x08012fed
 8012f88:	08012fed 	.word	0x08012fed
 8012f8c:	08012fed 	.word	0x08012fed
 8012f90:	08012fc9 	.word	0x08012fc9
 8012f94:	08012fed 	.word	0x08012fed
 8012f98:	08012fed 	.word	0x08012fed
 8012f9c:	08012fed 	.word	0x08012fed
 8012fa0:	08012fdb 	.word	0x08012fdb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	68da      	ldr	r2, [r3, #12]
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	f042 0202 	orr.w	r2, r2, #2
 8012fb2:	60da      	str	r2, [r3, #12]
      break;
 8012fb4:	e01d      	b.n	8012ff2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	68da      	ldr	r2, [r3, #12]
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	f042 0204 	orr.w	r2, r2, #4
 8012fc4:	60da      	str	r2, [r3, #12]
      break;
 8012fc6:	e014      	b.n	8012ff2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	68da      	ldr	r2, [r3, #12]
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	f042 0208 	orr.w	r2, r2, #8
 8012fd6:	60da      	str	r2, [r3, #12]
      break;
 8012fd8:	e00b      	b.n	8012ff2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	68da      	ldr	r2, [r3, #12]
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	f042 0210 	orr.w	r2, r2, #16
 8012fe8:	60da      	str	r2, [r3, #12]
      break;
 8012fea:	e002      	b.n	8012ff2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8012fec:	2301      	movs	r3, #1
 8012fee:	73fb      	strb	r3, [r7, #15]
      break;
 8012ff0:	bf00      	nop
  }

  if (status == HAL_OK)
 8012ff2:	7bfb      	ldrb	r3, [r7, #15]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d148      	bne.n	801308a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	2201      	movs	r2, #1
 8012ffe:	6839      	ldr	r1, [r7, #0]
 8013000:	4618      	mov	r0, r3
 8013002:	f000 fe49 	bl	8013c98 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	4a22      	ldr	r2, [pc, #136]	@ (8013094 <HAL_TIM_IC_Start_IT+0x234>)
 801300c:	4293      	cmp	r3, r2
 801300e:	d022      	beq.n	8013056 <HAL_TIM_IC_Start_IT+0x1f6>
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013018:	d01d      	beq.n	8013056 <HAL_TIM_IC_Start_IT+0x1f6>
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	4a1e      	ldr	r2, [pc, #120]	@ (8013098 <HAL_TIM_IC_Start_IT+0x238>)
 8013020:	4293      	cmp	r3, r2
 8013022:	d018      	beq.n	8013056 <HAL_TIM_IC_Start_IT+0x1f6>
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	4a1c      	ldr	r2, [pc, #112]	@ (801309c <HAL_TIM_IC_Start_IT+0x23c>)
 801302a:	4293      	cmp	r3, r2
 801302c:	d013      	beq.n	8013056 <HAL_TIM_IC_Start_IT+0x1f6>
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	4a1b      	ldr	r2, [pc, #108]	@ (80130a0 <HAL_TIM_IC_Start_IT+0x240>)
 8013034:	4293      	cmp	r3, r2
 8013036:	d00e      	beq.n	8013056 <HAL_TIM_IC_Start_IT+0x1f6>
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	4a19      	ldr	r2, [pc, #100]	@ (80130a4 <HAL_TIM_IC_Start_IT+0x244>)
 801303e:	4293      	cmp	r3, r2
 8013040:	d009      	beq.n	8013056 <HAL_TIM_IC_Start_IT+0x1f6>
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	4a18      	ldr	r2, [pc, #96]	@ (80130a8 <HAL_TIM_IC_Start_IT+0x248>)
 8013048:	4293      	cmp	r3, r2
 801304a:	d004      	beq.n	8013056 <HAL_TIM_IC_Start_IT+0x1f6>
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	4a16      	ldr	r2, [pc, #88]	@ (80130ac <HAL_TIM_IC_Start_IT+0x24c>)
 8013052:	4293      	cmp	r3, r2
 8013054:	d111      	bne.n	801307a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	689b      	ldr	r3, [r3, #8]
 801305c:	f003 0307 	and.w	r3, r3, #7
 8013060:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	2b06      	cmp	r3, #6
 8013066:	d010      	beq.n	801308a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	681a      	ldr	r2, [r3, #0]
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	f042 0201 	orr.w	r2, r2, #1
 8013076:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013078:	e007      	b.n	801308a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	681a      	ldr	r2, [r3, #0]
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	f042 0201 	orr.w	r2, r2, #1
 8013088:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 801308a:	7bfb      	ldrb	r3, [r7, #15]
}
 801308c:	4618      	mov	r0, r3
 801308e:	3710      	adds	r7, #16
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}
 8013094:	40010000 	.word	0x40010000
 8013098:	40000400 	.word	0x40000400
 801309c:	40000800 	.word	0x40000800
 80130a0:	40000c00 	.word	0x40000c00
 80130a4:	40010400 	.word	0x40010400
 80130a8:	40014000 	.word	0x40014000
 80130ac:	40001800 	.word	0x40001800

080130b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b084      	sub	sp, #16
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	68db      	ldr	r3, [r3, #12]
 80130be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	691b      	ldr	r3, [r3, #16]
 80130c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	f003 0302 	and.w	r3, r3, #2
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d020      	beq.n	8013114 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	f003 0302 	and.w	r3, r3, #2
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d01b      	beq.n	8013114 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	f06f 0202 	mvn.w	r2, #2
 80130e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	2201      	movs	r2, #1
 80130ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	699b      	ldr	r3, [r3, #24]
 80130f2:	f003 0303 	and.w	r3, r3, #3
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d003      	beq.n	8013102 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80130fa:	6878      	ldr	r0, [r7, #4]
 80130fc:	f7f5 fc20 	bl	8008940 <HAL_TIM_IC_CaptureCallback>
 8013100:	e005      	b.n	801310e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f000 faae 	bl	8013664 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013108:	6878      	ldr	r0, [r7, #4]
 801310a:	f000 fab5 	bl	8013678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	2200      	movs	r2, #0
 8013112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	f003 0304 	and.w	r3, r3, #4
 801311a:	2b00      	cmp	r3, #0
 801311c:	d020      	beq.n	8013160 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	f003 0304 	and.w	r3, r3, #4
 8013124:	2b00      	cmp	r3, #0
 8013126:	d01b      	beq.n	8013160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	f06f 0204 	mvn.w	r2, #4
 8013130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2202      	movs	r2, #2
 8013136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	699b      	ldr	r3, [r3, #24]
 801313e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013142:	2b00      	cmp	r3, #0
 8013144:	d003      	beq.n	801314e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013146:	6878      	ldr	r0, [r7, #4]
 8013148:	f7f5 fbfa 	bl	8008940 <HAL_TIM_IC_CaptureCallback>
 801314c:	e005      	b.n	801315a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f000 fa88 	bl	8013664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f000 fa8f 	bl	8013678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	2200      	movs	r2, #0
 801315e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8013160:	68bb      	ldr	r3, [r7, #8]
 8013162:	f003 0308 	and.w	r3, r3, #8
 8013166:	2b00      	cmp	r3, #0
 8013168:	d020      	beq.n	80131ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	f003 0308 	and.w	r3, r3, #8
 8013170:	2b00      	cmp	r3, #0
 8013172:	d01b      	beq.n	80131ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	f06f 0208 	mvn.w	r2, #8
 801317c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	2204      	movs	r2, #4
 8013182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	69db      	ldr	r3, [r3, #28]
 801318a:	f003 0303 	and.w	r3, r3, #3
 801318e:	2b00      	cmp	r3, #0
 8013190:	d003      	beq.n	801319a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013192:	6878      	ldr	r0, [r7, #4]
 8013194:	f7f5 fbd4 	bl	8008940 <HAL_TIM_IC_CaptureCallback>
 8013198:	e005      	b.n	80131a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f000 fa62 	bl	8013664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f000 fa69 	bl	8013678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	2200      	movs	r2, #0
 80131aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	f003 0310 	and.w	r3, r3, #16
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d020      	beq.n	80131f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	f003 0310 	and.w	r3, r3, #16
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d01b      	beq.n	80131f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	f06f 0210 	mvn.w	r2, #16
 80131c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	2208      	movs	r2, #8
 80131ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	69db      	ldr	r3, [r3, #28]
 80131d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d003      	beq.n	80131e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	f7f5 fbae 	bl	8008940 <HAL_TIM_IC_CaptureCallback>
 80131e4:	e005      	b.n	80131f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80131e6:	6878      	ldr	r0, [r7, #4]
 80131e8:	f000 fa3c 	bl	8013664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	f000 fa43 	bl	8013678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2200      	movs	r2, #0
 80131f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	f003 0301 	and.w	r3, r3, #1
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d00c      	beq.n	801321c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	f003 0301 	and.w	r3, r3, #1
 8013208:	2b00      	cmp	r3, #0
 801320a:	d007      	beq.n	801321c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	f06f 0201 	mvn.w	r2, #1
 8013214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013216:	6878      	ldr	r0, [r7, #4]
 8013218:	f7f6 fd08 	bl	8009c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013222:	2b00      	cmp	r3, #0
 8013224:	d00c      	beq.n	8013240 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801322c:	2b00      	cmp	r3, #0
 801322e:	d007      	beq.n	8013240 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8013238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f000 fdd8 	bl	8013df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013246:	2b00      	cmp	r3, #0
 8013248:	d00c      	beq.n	8013264 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013250:	2b00      	cmp	r3, #0
 8013252:	d007      	beq.n	8013264 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801325c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f000 fa14 	bl	801368c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8013264:	68bb      	ldr	r3, [r7, #8]
 8013266:	f003 0320 	and.w	r3, r3, #32
 801326a:	2b00      	cmp	r3, #0
 801326c:	d00c      	beq.n	8013288 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	f003 0320 	and.w	r3, r3, #32
 8013274:	2b00      	cmp	r3, #0
 8013276:	d007      	beq.n	8013288 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	f06f 0220 	mvn.w	r2, #32
 8013280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f000 fdaa 	bl	8013ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013288:	bf00      	nop
 801328a:	3710      	adds	r7, #16
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}

08013290 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b086      	sub	sp, #24
 8013294:	af00      	add	r7, sp, #0
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801329c:	2300      	movs	r3, #0
 801329e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80132a6:	2b01      	cmp	r3, #1
 80132a8:	d101      	bne.n	80132ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80132aa:	2302      	movs	r3, #2
 80132ac:	e088      	b.n	80133c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	2201      	movs	r2, #1
 80132b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d11b      	bne.n	80132f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80132cc:	f000 fb20 	bl	8013910 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	699a      	ldr	r2, [r3, #24]
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	f022 020c 	bic.w	r2, r2, #12
 80132de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	6999      	ldr	r1, [r3, #24]
 80132e6:	68bb      	ldr	r3, [r7, #8]
 80132e8:	689a      	ldr	r2, [r3, #8]
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	430a      	orrs	r2, r1
 80132f0:	619a      	str	r2, [r3, #24]
 80132f2:	e060      	b.n	80133b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2b04      	cmp	r3, #4
 80132f8:	d11c      	bne.n	8013334 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013302:	68bb      	ldr	r3, [r7, #8]
 8013304:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013306:	68bb      	ldr	r3, [r7, #8]
 8013308:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 801330a:	f000 fba4 	bl	8013a56 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	699a      	ldr	r2, [r3, #24]
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801331c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	6999      	ldr	r1, [r3, #24]
 8013324:	68bb      	ldr	r3, [r7, #8]
 8013326:	689b      	ldr	r3, [r3, #8]
 8013328:	021a      	lsls	r2, r3, #8
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	430a      	orrs	r2, r1
 8013330:	619a      	str	r2, [r3, #24]
 8013332:	e040      	b.n	80133b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2b08      	cmp	r3, #8
 8013338:	d11b      	bne.n	8013372 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013346:	68bb      	ldr	r3, [r7, #8]
 8013348:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 801334a:	f000 fbf1 	bl	8013b30 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	69da      	ldr	r2, [r3, #28]
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	f022 020c 	bic.w	r2, r2, #12
 801335c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	69d9      	ldr	r1, [r3, #28]
 8013364:	68bb      	ldr	r3, [r7, #8]
 8013366:	689a      	ldr	r2, [r3, #8]
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	430a      	orrs	r2, r1
 801336e:	61da      	str	r2, [r3, #28]
 8013370:	e021      	b.n	80133b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	2b0c      	cmp	r3, #12
 8013376:	d11c      	bne.n	80133b2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801337c:	68bb      	ldr	r3, [r7, #8]
 801337e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8013380:	68bb      	ldr	r3, [r7, #8]
 8013382:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8013388:	f000 fc0e 	bl	8013ba8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	69da      	ldr	r2, [r3, #28]
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801339a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	69d9      	ldr	r1, [r3, #28]
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	689b      	ldr	r3, [r3, #8]
 80133a6:	021a      	lsls	r2, r3, #8
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	430a      	orrs	r2, r1
 80133ae:	61da      	str	r2, [r3, #28]
 80133b0:	e001      	b.n	80133b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80133b2:	2301      	movs	r3, #1
 80133b4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	2200      	movs	r2, #0
 80133ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80133be:	7dfb      	ldrb	r3, [r7, #23]
}
 80133c0:	4618      	mov	r0, r3
 80133c2:	3718      	adds	r7, #24
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}

080133c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b084      	sub	sp, #16
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80133d2:	2300      	movs	r3, #0
 80133d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80133dc:	2b01      	cmp	r3, #1
 80133de:	d101      	bne.n	80133e4 <HAL_TIM_ConfigClockSource+0x1c>
 80133e0:	2302      	movs	r3, #2
 80133e2:	e0b4      	b.n	801354e <HAL_TIM_ConfigClockSource+0x186>
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2201      	movs	r2, #1
 80133e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2202      	movs	r2, #2
 80133f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	689b      	ldr	r3, [r3, #8]
 80133fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8013402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013404:	68bb      	ldr	r3, [r7, #8]
 8013406:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801340a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	68ba      	ldr	r2, [r7, #8]
 8013412:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801341c:	d03e      	beq.n	801349c <HAL_TIM_ConfigClockSource+0xd4>
 801341e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013422:	f200 8087 	bhi.w	8013534 <HAL_TIM_ConfigClockSource+0x16c>
 8013426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801342a:	f000 8086 	beq.w	801353a <HAL_TIM_ConfigClockSource+0x172>
 801342e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013432:	d87f      	bhi.n	8013534 <HAL_TIM_ConfigClockSource+0x16c>
 8013434:	2b70      	cmp	r3, #112	@ 0x70
 8013436:	d01a      	beq.n	801346e <HAL_TIM_ConfigClockSource+0xa6>
 8013438:	2b70      	cmp	r3, #112	@ 0x70
 801343a:	d87b      	bhi.n	8013534 <HAL_TIM_ConfigClockSource+0x16c>
 801343c:	2b60      	cmp	r3, #96	@ 0x60
 801343e:	d050      	beq.n	80134e2 <HAL_TIM_ConfigClockSource+0x11a>
 8013440:	2b60      	cmp	r3, #96	@ 0x60
 8013442:	d877      	bhi.n	8013534 <HAL_TIM_ConfigClockSource+0x16c>
 8013444:	2b50      	cmp	r3, #80	@ 0x50
 8013446:	d03c      	beq.n	80134c2 <HAL_TIM_ConfigClockSource+0xfa>
 8013448:	2b50      	cmp	r3, #80	@ 0x50
 801344a:	d873      	bhi.n	8013534 <HAL_TIM_ConfigClockSource+0x16c>
 801344c:	2b40      	cmp	r3, #64	@ 0x40
 801344e:	d058      	beq.n	8013502 <HAL_TIM_ConfigClockSource+0x13a>
 8013450:	2b40      	cmp	r3, #64	@ 0x40
 8013452:	d86f      	bhi.n	8013534 <HAL_TIM_ConfigClockSource+0x16c>
 8013454:	2b30      	cmp	r3, #48	@ 0x30
 8013456:	d064      	beq.n	8013522 <HAL_TIM_ConfigClockSource+0x15a>
 8013458:	2b30      	cmp	r3, #48	@ 0x30
 801345a:	d86b      	bhi.n	8013534 <HAL_TIM_ConfigClockSource+0x16c>
 801345c:	2b20      	cmp	r3, #32
 801345e:	d060      	beq.n	8013522 <HAL_TIM_ConfigClockSource+0x15a>
 8013460:	2b20      	cmp	r3, #32
 8013462:	d867      	bhi.n	8013534 <HAL_TIM_ConfigClockSource+0x16c>
 8013464:	2b00      	cmp	r3, #0
 8013466:	d05c      	beq.n	8013522 <HAL_TIM_ConfigClockSource+0x15a>
 8013468:	2b10      	cmp	r3, #16
 801346a:	d05a      	beq.n	8013522 <HAL_TIM_ConfigClockSource+0x15a>
 801346c:	e062      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801347a:	683b      	ldr	r3, [r7, #0]
 801347c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801347e:	f000 fbeb 	bl	8013c58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	689b      	ldr	r3, [r3, #8]
 8013488:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8013490:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	68ba      	ldr	r2, [r7, #8]
 8013498:	609a      	str	r2, [r3, #8]
      break;
 801349a:	e04f      	b.n	801353c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80134ac:	f000 fbd4 	bl	8013c58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	689a      	ldr	r2, [r3, #8]
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80134be:	609a      	str	r2, [r3, #8]
      break;
 80134c0:	e03c      	b.n	801353c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80134ce:	461a      	mov	r2, r3
 80134d0:	f000 fa92 	bl	80139f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	2150      	movs	r1, #80	@ 0x50
 80134da:	4618      	mov	r0, r3
 80134dc:	f000 fba1 	bl	8013c22 <TIM_ITRx_SetConfig>
      break;
 80134e0:	e02c      	b.n	801353c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80134ea:	683b      	ldr	r3, [r7, #0]
 80134ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80134ee:	461a      	mov	r2, r3
 80134f0:	f000 faee 	bl	8013ad0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	2160      	movs	r1, #96	@ 0x60
 80134fa:	4618      	mov	r0, r3
 80134fc:	f000 fb91 	bl	8013c22 <TIM_ITRx_SetConfig>
      break;
 8013500:	e01c      	b.n	801353c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801350e:	461a      	mov	r2, r3
 8013510:	f000 fa72 	bl	80139f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	2140      	movs	r1, #64	@ 0x40
 801351a:	4618      	mov	r0, r3
 801351c:	f000 fb81 	bl	8013c22 <TIM_ITRx_SetConfig>
      break;
 8013520:	e00c      	b.n	801353c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	681a      	ldr	r2, [r3, #0]
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	4619      	mov	r1, r3
 801352c:	4610      	mov	r0, r2
 801352e:	f000 fb78 	bl	8013c22 <TIM_ITRx_SetConfig>
      break;
 8013532:	e003      	b.n	801353c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8013534:	2301      	movs	r3, #1
 8013536:	73fb      	strb	r3, [r7, #15]
      break;
 8013538:	e000      	b.n	801353c <HAL_TIM_ConfigClockSource+0x174>
      break;
 801353a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2201      	movs	r2, #1
 8013540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	2200      	movs	r2, #0
 8013548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801354c:	7bfb      	ldrb	r3, [r7, #15]
}
 801354e:	4618      	mov	r0, r3
 8013550:	3710      	adds	r7, #16
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}

08013556 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8013556:	b580      	push	{r7, lr}
 8013558:	b082      	sub	sp, #8
 801355a:	af00      	add	r7, sp, #0
 801355c:	6078      	str	r0, [r7, #4]
 801355e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013566:	2b01      	cmp	r3, #1
 8013568:	d101      	bne.n	801356e <HAL_TIM_SlaveConfigSynchro+0x18>
 801356a:	2302      	movs	r3, #2
 801356c:	e031      	b.n	80135d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	2201      	movs	r2, #1
 8013572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	2202      	movs	r2, #2
 801357a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 801357e:	6839      	ldr	r1, [r7, #0]
 8013580:	6878      	ldr	r0, [r7, #4]
 8013582:	f000 f933 	bl	80137ec <TIM_SlaveTimer_SetConfig>
 8013586:	4603      	mov	r3, r0
 8013588:	2b00      	cmp	r3, #0
 801358a:	d009      	beq.n	80135a0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	2201      	movs	r2, #1
 8013590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	2200      	movs	r2, #0
 8013598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 801359c:	2301      	movs	r3, #1
 801359e:	e018      	b.n	80135d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	68da      	ldr	r2, [r3, #12]
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80135ae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	68da      	ldr	r2, [r3, #12]
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80135be:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	2201      	movs	r2, #1
 80135c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	2200      	movs	r2, #0
 80135cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80135d0:	2300      	movs	r3, #0
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	3708      	adds	r7, #8
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}
	...

080135dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80135dc:	b480      	push	{r7}
 80135de:	b085      	sub	sp, #20
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80135e6:	2300      	movs	r3, #0
 80135e8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80135ea:	683b      	ldr	r3, [r7, #0]
 80135ec:	2b0c      	cmp	r3, #12
 80135ee:	d831      	bhi.n	8013654 <HAL_TIM_ReadCapturedValue+0x78>
 80135f0:	a201      	add	r2, pc, #4	@ (adr r2, 80135f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80135f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135f6:	bf00      	nop
 80135f8:	0801362d 	.word	0x0801362d
 80135fc:	08013655 	.word	0x08013655
 8013600:	08013655 	.word	0x08013655
 8013604:	08013655 	.word	0x08013655
 8013608:	08013637 	.word	0x08013637
 801360c:	08013655 	.word	0x08013655
 8013610:	08013655 	.word	0x08013655
 8013614:	08013655 	.word	0x08013655
 8013618:	08013641 	.word	0x08013641
 801361c:	08013655 	.word	0x08013655
 8013620:	08013655 	.word	0x08013655
 8013624:	08013655 	.word	0x08013655
 8013628:	0801364b 	.word	0x0801364b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013632:	60fb      	str	r3, [r7, #12]

      break;
 8013634:	e00f      	b.n	8013656 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801363c:	60fb      	str	r3, [r7, #12]

      break;
 801363e:	e00a      	b.n	8013656 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013646:	60fb      	str	r3, [r7, #12]

      break;
 8013648:	e005      	b.n	8013656 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013650:	60fb      	str	r3, [r7, #12]

      break;
 8013652:	e000      	b.n	8013656 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8013654:	bf00      	nop
  }

  return tmpreg;
 8013656:	68fb      	ldr	r3, [r7, #12]
}
 8013658:	4618      	mov	r0, r3
 801365a:	3714      	adds	r7, #20
 801365c:	46bd      	mov	sp, r7
 801365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013662:	4770      	bx	lr

08013664 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013664:	b480      	push	{r7}
 8013666:	b083      	sub	sp, #12
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801366c:	bf00      	nop
 801366e:	370c      	adds	r7, #12
 8013670:	46bd      	mov	sp, r7
 8013672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013676:	4770      	bx	lr

08013678 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013678:	b480      	push	{r7}
 801367a:	b083      	sub	sp, #12
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013680:	bf00      	nop
 8013682:	370c      	adds	r7, #12
 8013684:	46bd      	mov	sp, r7
 8013686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368a:	4770      	bx	lr

0801368c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801368c:	b480      	push	{r7}
 801368e:	b083      	sub	sp, #12
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013694:	bf00      	nop
 8013696:	370c      	adds	r7, #12
 8013698:	46bd      	mov	sp, r7
 801369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369e:	4770      	bx	lr

080136a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80136a0:	b480      	push	{r7}
 80136a2:	b085      	sub	sp, #20
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
 80136a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	4a43      	ldr	r2, [pc, #268]	@ (80137c0 <TIM_Base_SetConfig+0x120>)
 80136b4:	4293      	cmp	r3, r2
 80136b6:	d013      	beq.n	80136e0 <TIM_Base_SetConfig+0x40>
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80136be:	d00f      	beq.n	80136e0 <TIM_Base_SetConfig+0x40>
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	4a40      	ldr	r2, [pc, #256]	@ (80137c4 <TIM_Base_SetConfig+0x124>)
 80136c4:	4293      	cmp	r3, r2
 80136c6:	d00b      	beq.n	80136e0 <TIM_Base_SetConfig+0x40>
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	4a3f      	ldr	r2, [pc, #252]	@ (80137c8 <TIM_Base_SetConfig+0x128>)
 80136cc:	4293      	cmp	r3, r2
 80136ce:	d007      	beq.n	80136e0 <TIM_Base_SetConfig+0x40>
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	4a3e      	ldr	r2, [pc, #248]	@ (80137cc <TIM_Base_SetConfig+0x12c>)
 80136d4:	4293      	cmp	r3, r2
 80136d6:	d003      	beq.n	80136e0 <TIM_Base_SetConfig+0x40>
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	4a3d      	ldr	r2, [pc, #244]	@ (80137d0 <TIM_Base_SetConfig+0x130>)
 80136dc:	4293      	cmp	r3, r2
 80136de:	d108      	bne.n	80136f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80136e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80136e8:	683b      	ldr	r3, [r7, #0]
 80136ea:	685b      	ldr	r3, [r3, #4]
 80136ec:	68fa      	ldr	r2, [r7, #12]
 80136ee:	4313      	orrs	r3, r2
 80136f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	4a32      	ldr	r2, [pc, #200]	@ (80137c0 <TIM_Base_SetConfig+0x120>)
 80136f6:	4293      	cmp	r3, r2
 80136f8:	d02b      	beq.n	8013752 <TIM_Base_SetConfig+0xb2>
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013700:	d027      	beq.n	8013752 <TIM_Base_SetConfig+0xb2>
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	4a2f      	ldr	r2, [pc, #188]	@ (80137c4 <TIM_Base_SetConfig+0x124>)
 8013706:	4293      	cmp	r3, r2
 8013708:	d023      	beq.n	8013752 <TIM_Base_SetConfig+0xb2>
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	4a2e      	ldr	r2, [pc, #184]	@ (80137c8 <TIM_Base_SetConfig+0x128>)
 801370e:	4293      	cmp	r3, r2
 8013710:	d01f      	beq.n	8013752 <TIM_Base_SetConfig+0xb2>
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	4a2d      	ldr	r2, [pc, #180]	@ (80137cc <TIM_Base_SetConfig+0x12c>)
 8013716:	4293      	cmp	r3, r2
 8013718:	d01b      	beq.n	8013752 <TIM_Base_SetConfig+0xb2>
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	4a2c      	ldr	r2, [pc, #176]	@ (80137d0 <TIM_Base_SetConfig+0x130>)
 801371e:	4293      	cmp	r3, r2
 8013720:	d017      	beq.n	8013752 <TIM_Base_SetConfig+0xb2>
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	4a2b      	ldr	r2, [pc, #172]	@ (80137d4 <TIM_Base_SetConfig+0x134>)
 8013726:	4293      	cmp	r3, r2
 8013728:	d013      	beq.n	8013752 <TIM_Base_SetConfig+0xb2>
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	4a2a      	ldr	r2, [pc, #168]	@ (80137d8 <TIM_Base_SetConfig+0x138>)
 801372e:	4293      	cmp	r3, r2
 8013730:	d00f      	beq.n	8013752 <TIM_Base_SetConfig+0xb2>
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	4a29      	ldr	r2, [pc, #164]	@ (80137dc <TIM_Base_SetConfig+0x13c>)
 8013736:	4293      	cmp	r3, r2
 8013738:	d00b      	beq.n	8013752 <TIM_Base_SetConfig+0xb2>
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	4a28      	ldr	r2, [pc, #160]	@ (80137e0 <TIM_Base_SetConfig+0x140>)
 801373e:	4293      	cmp	r3, r2
 8013740:	d007      	beq.n	8013752 <TIM_Base_SetConfig+0xb2>
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	4a27      	ldr	r2, [pc, #156]	@ (80137e4 <TIM_Base_SetConfig+0x144>)
 8013746:	4293      	cmp	r3, r2
 8013748:	d003      	beq.n	8013752 <TIM_Base_SetConfig+0xb2>
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	4a26      	ldr	r2, [pc, #152]	@ (80137e8 <TIM_Base_SetConfig+0x148>)
 801374e:	4293      	cmp	r3, r2
 8013750:	d108      	bne.n	8013764 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	68db      	ldr	r3, [r3, #12]
 801375e:	68fa      	ldr	r2, [r7, #12]
 8013760:	4313      	orrs	r3, r2
 8013762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	695b      	ldr	r3, [r3, #20]
 801376e:	4313      	orrs	r3, r2
 8013770:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013772:	683b      	ldr	r3, [r7, #0]
 8013774:	689a      	ldr	r2, [r3, #8]
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801377a:	683b      	ldr	r3, [r7, #0]
 801377c:	681a      	ldr	r2, [r3, #0]
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	4a0e      	ldr	r2, [pc, #56]	@ (80137c0 <TIM_Base_SetConfig+0x120>)
 8013786:	4293      	cmp	r3, r2
 8013788:	d003      	beq.n	8013792 <TIM_Base_SetConfig+0xf2>
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	4a10      	ldr	r2, [pc, #64]	@ (80137d0 <TIM_Base_SetConfig+0x130>)
 801378e:	4293      	cmp	r3, r2
 8013790:	d103      	bne.n	801379a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	691a      	ldr	r2, [r3, #16]
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	f043 0204 	orr.w	r2, r3, #4
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2201      	movs	r2, #1
 80137aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	68fa      	ldr	r2, [r7, #12]
 80137b0:	601a      	str	r2, [r3, #0]
}
 80137b2:	bf00      	nop
 80137b4:	3714      	adds	r7, #20
 80137b6:	46bd      	mov	sp, r7
 80137b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137bc:	4770      	bx	lr
 80137be:	bf00      	nop
 80137c0:	40010000 	.word	0x40010000
 80137c4:	40000400 	.word	0x40000400
 80137c8:	40000800 	.word	0x40000800
 80137cc:	40000c00 	.word	0x40000c00
 80137d0:	40010400 	.word	0x40010400
 80137d4:	40014000 	.word	0x40014000
 80137d8:	40014400 	.word	0x40014400
 80137dc:	40014800 	.word	0x40014800
 80137e0:	40001800 	.word	0x40001800
 80137e4:	40001c00 	.word	0x40001c00
 80137e8:	40002000 	.word	0x40002000

080137ec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b086      	sub	sp, #24
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
 80137f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80137f6:	2300      	movs	r3, #0
 80137f8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	689b      	ldr	r3, [r3, #8]
 8013800:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013808:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	685b      	ldr	r3, [r3, #4]
 801380e:	693a      	ldr	r2, [r7, #16]
 8013810:	4313      	orrs	r3, r2
 8013812:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8013814:	693b      	ldr	r3, [r7, #16]
 8013816:	f023 0307 	bic.w	r3, r3, #7
 801381a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	693a      	ldr	r2, [r7, #16]
 8013822:	4313      	orrs	r3, r2
 8013824:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	693a      	ldr	r2, [r7, #16]
 801382c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	685b      	ldr	r3, [r3, #4]
 8013832:	2b70      	cmp	r3, #112	@ 0x70
 8013834:	d01a      	beq.n	801386c <TIM_SlaveTimer_SetConfig+0x80>
 8013836:	2b70      	cmp	r3, #112	@ 0x70
 8013838:	d860      	bhi.n	80138fc <TIM_SlaveTimer_SetConfig+0x110>
 801383a:	2b60      	cmp	r3, #96	@ 0x60
 801383c:	d054      	beq.n	80138e8 <TIM_SlaveTimer_SetConfig+0xfc>
 801383e:	2b60      	cmp	r3, #96	@ 0x60
 8013840:	d85c      	bhi.n	80138fc <TIM_SlaveTimer_SetConfig+0x110>
 8013842:	2b50      	cmp	r3, #80	@ 0x50
 8013844:	d046      	beq.n	80138d4 <TIM_SlaveTimer_SetConfig+0xe8>
 8013846:	2b50      	cmp	r3, #80	@ 0x50
 8013848:	d858      	bhi.n	80138fc <TIM_SlaveTimer_SetConfig+0x110>
 801384a:	2b40      	cmp	r3, #64	@ 0x40
 801384c:	d019      	beq.n	8013882 <TIM_SlaveTimer_SetConfig+0x96>
 801384e:	2b40      	cmp	r3, #64	@ 0x40
 8013850:	d854      	bhi.n	80138fc <TIM_SlaveTimer_SetConfig+0x110>
 8013852:	2b30      	cmp	r3, #48	@ 0x30
 8013854:	d055      	beq.n	8013902 <TIM_SlaveTimer_SetConfig+0x116>
 8013856:	2b30      	cmp	r3, #48	@ 0x30
 8013858:	d850      	bhi.n	80138fc <TIM_SlaveTimer_SetConfig+0x110>
 801385a:	2b20      	cmp	r3, #32
 801385c:	d051      	beq.n	8013902 <TIM_SlaveTimer_SetConfig+0x116>
 801385e:	2b20      	cmp	r3, #32
 8013860:	d84c      	bhi.n	80138fc <TIM_SlaveTimer_SetConfig+0x110>
 8013862:	2b00      	cmp	r3, #0
 8013864:	d04d      	beq.n	8013902 <TIM_SlaveTimer_SetConfig+0x116>
 8013866:	2b10      	cmp	r3, #16
 8013868:	d04b      	beq.n	8013902 <TIM_SlaveTimer_SetConfig+0x116>
 801386a:	e047      	b.n	80138fc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8013874:	683b      	ldr	r3, [r7, #0]
 8013876:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8013878:	683b      	ldr	r3, [r7, #0]
 801387a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 801387c:	f000 f9ec 	bl	8013c58 <TIM_ETR_SetConfig>
      break;
 8013880:	e040      	b.n	8013904 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8013882:	683b      	ldr	r3, [r7, #0]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	2b05      	cmp	r3, #5
 8013888:	d101      	bne.n	801388e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 801388a:	2301      	movs	r3, #1
 801388c:	e03b      	b.n	8013906 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	6a1b      	ldr	r3, [r3, #32]
 8013894:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	6a1a      	ldr	r2, [r3, #32]
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	f022 0201 	bic.w	r2, r2, #1
 80138a4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	699b      	ldr	r3, [r3, #24]
 80138ac:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80138ae:	68bb      	ldr	r3, [r7, #8]
 80138b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80138b4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80138b6:	683b      	ldr	r3, [r7, #0]
 80138b8:	691b      	ldr	r3, [r3, #16]
 80138ba:	011b      	lsls	r3, r3, #4
 80138bc:	68ba      	ldr	r2, [r7, #8]
 80138be:	4313      	orrs	r3, r2
 80138c0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	68ba      	ldr	r2, [r7, #8]
 80138c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	68fa      	ldr	r2, [r7, #12]
 80138d0:	621a      	str	r2, [r3, #32]
      break;
 80138d2:	e017      	b.n	8013904 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80138dc:	683b      	ldr	r3, [r7, #0]
 80138de:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80138e0:	461a      	mov	r2, r3
 80138e2:	f000 f889 	bl	80139f8 <TIM_TI1_ConfigInputStage>
      break;
 80138e6:	e00d      	b.n	8013904 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80138f4:	461a      	mov	r2, r3
 80138f6:	f000 f8eb 	bl	8013ad0 <TIM_TI2_ConfigInputStage>
      break;
 80138fa:	e003      	b.n	8013904 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80138fc:	2301      	movs	r3, #1
 80138fe:	75fb      	strb	r3, [r7, #23]
      break;
 8013900:	e000      	b.n	8013904 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8013902:	bf00      	nop
  }

  return status;
 8013904:	7dfb      	ldrb	r3, [r7, #23]
}
 8013906:	4618      	mov	r0, r3
 8013908:	3718      	adds	r7, #24
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}
	...

08013910 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8013910:	b480      	push	{r7}
 8013912:	b087      	sub	sp, #28
 8013914:	af00      	add	r7, sp, #0
 8013916:	60f8      	str	r0, [r7, #12]
 8013918:	60b9      	str	r1, [r7, #8]
 801391a:	607a      	str	r2, [r7, #4]
 801391c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	6a1b      	ldr	r3, [r3, #32]
 8013922:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	6a1b      	ldr	r3, [r3, #32]
 8013928:	f023 0201 	bic.w	r2, r3, #1
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	699b      	ldr	r3, [r3, #24]
 8013934:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	4a28      	ldr	r2, [pc, #160]	@ (80139dc <TIM_TI1_SetConfig+0xcc>)
 801393a:	4293      	cmp	r3, r2
 801393c:	d01b      	beq.n	8013976 <TIM_TI1_SetConfig+0x66>
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013944:	d017      	beq.n	8013976 <TIM_TI1_SetConfig+0x66>
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	4a25      	ldr	r2, [pc, #148]	@ (80139e0 <TIM_TI1_SetConfig+0xd0>)
 801394a:	4293      	cmp	r3, r2
 801394c:	d013      	beq.n	8013976 <TIM_TI1_SetConfig+0x66>
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	4a24      	ldr	r2, [pc, #144]	@ (80139e4 <TIM_TI1_SetConfig+0xd4>)
 8013952:	4293      	cmp	r3, r2
 8013954:	d00f      	beq.n	8013976 <TIM_TI1_SetConfig+0x66>
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	4a23      	ldr	r2, [pc, #140]	@ (80139e8 <TIM_TI1_SetConfig+0xd8>)
 801395a:	4293      	cmp	r3, r2
 801395c:	d00b      	beq.n	8013976 <TIM_TI1_SetConfig+0x66>
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	4a22      	ldr	r2, [pc, #136]	@ (80139ec <TIM_TI1_SetConfig+0xdc>)
 8013962:	4293      	cmp	r3, r2
 8013964:	d007      	beq.n	8013976 <TIM_TI1_SetConfig+0x66>
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	4a21      	ldr	r2, [pc, #132]	@ (80139f0 <TIM_TI1_SetConfig+0xe0>)
 801396a:	4293      	cmp	r3, r2
 801396c:	d003      	beq.n	8013976 <TIM_TI1_SetConfig+0x66>
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	4a20      	ldr	r2, [pc, #128]	@ (80139f4 <TIM_TI1_SetConfig+0xe4>)
 8013972:	4293      	cmp	r3, r2
 8013974:	d101      	bne.n	801397a <TIM_TI1_SetConfig+0x6a>
 8013976:	2301      	movs	r3, #1
 8013978:	e000      	b.n	801397c <TIM_TI1_SetConfig+0x6c>
 801397a:	2300      	movs	r3, #0
 801397c:	2b00      	cmp	r3, #0
 801397e:	d008      	beq.n	8013992 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8013980:	697b      	ldr	r3, [r7, #20]
 8013982:	f023 0303 	bic.w	r3, r3, #3
 8013986:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8013988:	697a      	ldr	r2, [r7, #20]
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	4313      	orrs	r3, r2
 801398e:	617b      	str	r3, [r7, #20]
 8013990:	e003      	b.n	801399a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	f043 0301 	orr.w	r3, r3, #1
 8013998:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80139a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	011b      	lsls	r3, r3, #4
 80139a6:	b2db      	uxtb	r3, r3
 80139a8:	697a      	ldr	r2, [r7, #20]
 80139aa:	4313      	orrs	r3, r2
 80139ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80139ae:	693b      	ldr	r3, [r7, #16]
 80139b0:	f023 030a 	bic.w	r3, r3, #10
 80139b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80139b6:	68bb      	ldr	r3, [r7, #8]
 80139b8:	f003 030a 	and.w	r3, r3, #10
 80139bc:	693a      	ldr	r2, [r7, #16]
 80139be:	4313      	orrs	r3, r2
 80139c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	697a      	ldr	r2, [r7, #20]
 80139c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	693a      	ldr	r2, [r7, #16]
 80139cc:	621a      	str	r2, [r3, #32]
}
 80139ce:	bf00      	nop
 80139d0:	371c      	adds	r7, #28
 80139d2:	46bd      	mov	sp, r7
 80139d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d8:	4770      	bx	lr
 80139da:	bf00      	nop
 80139dc:	40010000 	.word	0x40010000
 80139e0:	40000400 	.word	0x40000400
 80139e4:	40000800 	.word	0x40000800
 80139e8:	40000c00 	.word	0x40000c00
 80139ec:	40010400 	.word	0x40010400
 80139f0:	40014000 	.word	0x40014000
 80139f4:	40001800 	.word	0x40001800

080139f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80139f8:	b480      	push	{r7}
 80139fa:	b087      	sub	sp, #28
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	60f8      	str	r0, [r7, #12]
 8013a00:	60b9      	str	r1, [r7, #8]
 8013a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	6a1b      	ldr	r3, [r3, #32]
 8013a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	6a1b      	ldr	r3, [r3, #32]
 8013a0e:	f023 0201 	bic.w	r2, r3, #1
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	699b      	ldr	r3, [r3, #24]
 8013a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013a1c:	693b      	ldr	r3, [r7, #16]
 8013a1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	011b      	lsls	r3, r3, #4
 8013a28:	693a      	ldr	r2, [r7, #16]
 8013a2a:	4313      	orrs	r3, r2
 8013a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	f023 030a 	bic.w	r3, r3, #10
 8013a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013a36:	697a      	ldr	r2, [r7, #20]
 8013a38:	68bb      	ldr	r3, [r7, #8]
 8013a3a:	4313      	orrs	r3, r2
 8013a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	693a      	ldr	r2, [r7, #16]
 8013a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	697a      	ldr	r2, [r7, #20]
 8013a48:	621a      	str	r2, [r3, #32]
}
 8013a4a:	bf00      	nop
 8013a4c:	371c      	adds	r7, #28
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a54:	4770      	bx	lr

08013a56 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8013a56:	b480      	push	{r7}
 8013a58:	b087      	sub	sp, #28
 8013a5a:	af00      	add	r7, sp, #0
 8013a5c:	60f8      	str	r0, [r7, #12]
 8013a5e:	60b9      	str	r1, [r7, #8]
 8013a60:	607a      	str	r2, [r7, #4]
 8013a62:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	6a1b      	ldr	r3, [r3, #32]
 8013a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	6a1b      	ldr	r3, [r3, #32]
 8013a6e:	f023 0210 	bic.w	r2, r3, #16
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	699b      	ldr	r3, [r3, #24]
 8013a7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	021b      	lsls	r3, r3, #8
 8013a88:	693a      	ldr	r2, [r7, #16]
 8013a8a:	4313      	orrs	r3, r2
 8013a8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013a8e:	693b      	ldr	r3, [r7, #16]
 8013a90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013a94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8013a96:	683b      	ldr	r3, [r7, #0]
 8013a98:	031b      	lsls	r3, r3, #12
 8013a9a:	b29b      	uxth	r3, r3
 8013a9c:	693a      	ldr	r2, [r7, #16]
 8013a9e:	4313      	orrs	r3, r2
 8013aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013aa2:	697b      	ldr	r3, [r7, #20]
 8013aa4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8013aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	011b      	lsls	r3, r3, #4
 8013aae:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8013ab2:	697a      	ldr	r2, [r7, #20]
 8013ab4:	4313      	orrs	r3, r2
 8013ab6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	693a      	ldr	r2, [r7, #16]
 8013abc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	697a      	ldr	r2, [r7, #20]
 8013ac2:	621a      	str	r2, [r3, #32]
}
 8013ac4:	bf00      	nop
 8013ac6:	371c      	adds	r7, #28
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ace:	4770      	bx	lr

08013ad0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013ad0:	b480      	push	{r7}
 8013ad2:	b087      	sub	sp, #28
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	60f8      	str	r0, [r7, #12]
 8013ad8:	60b9      	str	r1, [r7, #8]
 8013ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	6a1b      	ldr	r3, [r3, #32]
 8013ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	6a1b      	ldr	r3, [r3, #32]
 8013ae6:	f023 0210 	bic.w	r2, r3, #16
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	699b      	ldr	r3, [r3, #24]
 8013af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013af4:	693b      	ldr	r3, [r7, #16]
 8013af6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	031b      	lsls	r3, r3, #12
 8013b00:	693a      	ldr	r2, [r7, #16]
 8013b02:	4313      	orrs	r3, r2
 8013b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013b06:	697b      	ldr	r3, [r7, #20]
 8013b08:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8013b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013b0e:	68bb      	ldr	r3, [r7, #8]
 8013b10:	011b      	lsls	r3, r3, #4
 8013b12:	697a      	ldr	r2, [r7, #20]
 8013b14:	4313      	orrs	r3, r2
 8013b16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	693a      	ldr	r2, [r7, #16]
 8013b1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	697a      	ldr	r2, [r7, #20]
 8013b22:	621a      	str	r2, [r3, #32]
}
 8013b24:	bf00      	nop
 8013b26:	371c      	adds	r7, #28
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2e:	4770      	bx	lr

08013b30 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8013b30:	b480      	push	{r7}
 8013b32:	b087      	sub	sp, #28
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	60f8      	str	r0, [r7, #12]
 8013b38:	60b9      	str	r1, [r7, #8]
 8013b3a:	607a      	str	r2, [r7, #4]
 8013b3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	6a1b      	ldr	r3, [r3, #32]
 8013b42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	6a1b      	ldr	r3, [r3, #32]
 8013b48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	69db      	ldr	r3, [r3, #28]
 8013b54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	f023 0303 	bic.w	r3, r3, #3
 8013b5c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8013b5e:	693a      	ldr	r2, [r7, #16]
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	4313      	orrs	r3, r2
 8013b64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8013b66:	693b      	ldr	r3, [r7, #16]
 8013b68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013b6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8013b6e:	683b      	ldr	r3, [r7, #0]
 8013b70:	011b      	lsls	r3, r3, #4
 8013b72:	b2db      	uxtb	r3, r3
 8013b74:	693a      	ldr	r2, [r7, #16]
 8013b76:	4313      	orrs	r3, r2
 8013b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8013b7a:	697b      	ldr	r3, [r7, #20]
 8013b7c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8013b80:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8013b82:	68bb      	ldr	r3, [r7, #8]
 8013b84:	021b      	lsls	r3, r3, #8
 8013b86:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8013b8a:	697a      	ldr	r2, [r7, #20]
 8013b8c:	4313      	orrs	r3, r2
 8013b8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	693a      	ldr	r2, [r7, #16]
 8013b94:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	697a      	ldr	r2, [r7, #20]
 8013b9a:	621a      	str	r2, [r3, #32]
}
 8013b9c:	bf00      	nop
 8013b9e:	371c      	adds	r7, #28
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba6:	4770      	bx	lr

08013ba8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8013ba8:	b480      	push	{r7}
 8013baa:	b087      	sub	sp, #28
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	60f8      	str	r0, [r7, #12]
 8013bb0:	60b9      	str	r1, [r7, #8]
 8013bb2:	607a      	str	r2, [r7, #4]
 8013bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	6a1b      	ldr	r3, [r3, #32]
 8013bba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	6a1b      	ldr	r3, [r3, #32]
 8013bc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	69db      	ldr	r3, [r3, #28]
 8013bcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8013bce:	693b      	ldr	r3, [r7, #16]
 8013bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013bd4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	021b      	lsls	r3, r3, #8
 8013bda:	693a      	ldr	r2, [r7, #16]
 8013bdc:	4313      	orrs	r3, r2
 8013bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8013be0:	693b      	ldr	r3, [r7, #16]
 8013be2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013be6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	031b      	lsls	r3, r3, #12
 8013bec:	b29b      	uxth	r3, r3
 8013bee:	693a      	ldr	r2, [r7, #16]
 8013bf0:	4313      	orrs	r3, r2
 8013bf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8013bf4:	697b      	ldr	r3, [r7, #20]
 8013bf6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8013bfa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8013bfc:	68bb      	ldr	r3, [r7, #8]
 8013bfe:	031b      	lsls	r3, r3, #12
 8013c00:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8013c04:	697a      	ldr	r2, [r7, #20]
 8013c06:	4313      	orrs	r3, r2
 8013c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	693a      	ldr	r2, [r7, #16]
 8013c0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	697a      	ldr	r2, [r7, #20]
 8013c14:	621a      	str	r2, [r3, #32]
}
 8013c16:	bf00      	nop
 8013c18:	371c      	adds	r7, #28
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c20:	4770      	bx	lr

08013c22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013c22:	b480      	push	{r7}
 8013c24:	b085      	sub	sp, #20
 8013c26:	af00      	add	r7, sp, #0
 8013c28:	6078      	str	r0, [r7, #4]
 8013c2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	689b      	ldr	r3, [r3, #8]
 8013c30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013c38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013c3a:	683a      	ldr	r2, [r7, #0]
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	4313      	orrs	r3, r2
 8013c40:	f043 0307 	orr.w	r3, r3, #7
 8013c44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	68fa      	ldr	r2, [r7, #12]
 8013c4a:	609a      	str	r2, [r3, #8]
}
 8013c4c:	bf00      	nop
 8013c4e:	3714      	adds	r7, #20
 8013c50:	46bd      	mov	sp, r7
 8013c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c56:	4770      	bx	lr

08013c58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013c58:	b480      	push	{r7}
 8013c5a:	b087      	sub	sp, #28
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	60f8      	str	r0, [r7, #12]
 8013c60:	60b9      	str	r1, [r7, #8]
 8013c62:	607a      	str	r2, [r7, #4]
 8013c64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	689b      	ldr	r3, [r3, #8]
 8013c6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013c6c:	697b      	ldr	r3, [r7, #20]
 8013c6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013c72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	021a      	lsls	r2, r3, #8
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	431a      	orrs	r2, r3
 8013c7c:	68bb      	ldr	r3, [r7, #8]
 8013c7e:	4313      	orrs	r3, r2
 8013c80:	697a      	ldr	r2, [r7, #20]
 8013c82:	4313      	orrs	r3, r2
 8013c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	697a      	ldr	r2, [r7, #20]
 8013c8a:	609a      	str	r2, [r3, #8]
}
 8013c8c:	bf00      	nop
 8013c8e:	371c      	adds	r7, #28
 8013c90:	46bd      	mov	sp, r7
 8013c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c96:	4770      	bx	lr

08013c98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013c98:	b480      	push	{r7}
 8013c9a:	b087      	sub	sp, #28
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	60b9      	str	r1, [r7, #8]
 8013ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	f003 031f 	and.w	r3, r3, #31
 8013caa:	2201      	movs	r2, #1
 8013cac:	fa02 f303 	lsl.w	r3, r2, r3
 8013cb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	6a1a      	ldr	r2, [r3, #32]
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	43db      	mvns	r3, r3
 8013cba:	401a      	ands	r2, r3
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	6a1a      	ldr	r2, [r3, #32]
 8013cc4:	68bb      	ldr	r3, [r7, #8]
 8013cc6:	f003 031f 	and.w	r3, r3, #31
 8013cca:	6879      	ldr	r1, [r7, #4]
 8013ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8013cd0:	431a      	orrs	r2, r3
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	621a      	str	r2, [r3, #32]
}
 8013cd6:	bf00      	nop
 8013cd8:	371c      	adds	r7, #28
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce0:	4770      	bx	lr
	...

08013ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013ce4:	b480      	push	{r7}
 8013ce6:	b085      	sub	sp, #20
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
 8013cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013cf4:	2b01      	cmp	r3, #1
 8013cf6:	d101      	bne.n	8013cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013cf8:	2302      	movs	r3, #2
 8013cfa:	e05a      	b.n	8013db2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2201      	movs	r2, #1
 8013d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	2202      	movs	r2, #2
 8013d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	689b      	ldr	r3, [r3, #8]
 8013d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	68fa      	ldr	r2, [r7, #12]
 8013d2a:	4313      	orrs	r3, r2
 8013d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	68fa      	ldr	r2, [r7, #12]
 8013d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	4a21      	ldr	r2, [pc, #132]	@ (8013dc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8013d3c:	4293      	cmp	r3, r2
 8013d3e:	d022      	beq.n	8013d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013d48:	d01d      	beq.n	8013d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8013dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8013d50:	4293      	cmp	r3, r2
 8013d52:	d018      	beq.n	8013d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	4a1b      	ldr	r2, [pc, #108]	@ (8013dc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8013d5a:	4293      	cmp	r3, r2
 8013d5c:	d013      	beq.n	8013d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	4a1a      	ldr	r2, [pc, #104]	@ (8013dcc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8013d64:	4293      	cmp	r3, r2
 8013d66:	d00e      	beq.n	8013d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	4a18      	ldr	r2, [pc, #96]	@ (8013dd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8013d6e:	4293      	cmp	r3, r2
 8013d70:	d009      	beq.n	8013d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	4a17      	ldr	r2, [pc, #92]	@ (8013dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8013d78:	4293      	cmp	r3, r2
 8013d7a:	d004      	beq.n	8013d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4a15      	ldr	r2, [pc, #84]	@ (8013dd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8013d82:	4293      	cmp	r3, r2
 8013d84:	d10c      	bne.n	8013da0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013d8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013d8e:	683b      	ldr	r3, [r7, #0]
 8013d90:	685b      	ldr	r3, [r3, #4]
 8013d92:	68ba      	ldr	r2, [r7, #8]
 8013d94:	4313      	orrs	r3, r2
 8013d96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	68ba      	ldr	r2, [r7, #8]
 8013d9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	2201      	movs	r2, #1
 8013da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	2200      	movs	r2, #0
 8013dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013db0:	2300      	movs	r3, #0
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	3714      	adds	r7, #20
 8013db6:	46bd      	mov	sp, r7
 8013db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbc:	4770      	bx	lr
 8013dbe:	bf00      	nop
 8013dc0:	40010000 	.word	0x40010000
 8013dc4:	40000400 	.word	0x40000400
 8013dc8:	40000800 	.word	0x40000800
 8013dcc:	40000c00 	.word	0x40000c00
 8013dd0:	40010400 	.word	0x40010400
 8013dd4:	40014000 	.word	0x40014000
 8013dd8:	40001800 	.word	0x40001800

08013ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013ddc:	b480      	push	{r7}
 8013dde:	b083      	sub	sp, #12
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013de4:	bf00      	nop
 8013de6:	370c      	adds	r7, #12
 8013de8:	46bd      	mov	sp, r7
 8013dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dee:	4770      	bx	lr

08013df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013df0:	b480      	push	{r7}
 8013df2:	b083      	sub	sp, #12
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013df8:	bf00      	nop
 8013dfa:	370c      	adds	r7, #12
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e02:	4770      	bx	lr

08013e04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b082      	sub	sp, #8
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d101      	bne.n	8013e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013e12:	2301      	movs	r3, #1
 8013e14:	e042      	b.n	8013e9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013e1c:	b2db      	uxtb	r3, r3
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d106      	bne.n	8013e30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	2200      	movs	r2, #0
 8013e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013e2a:	6878      	ldr	r0, [r7, #4]
 8013e2c:	f7f7 ff50 	bl	800bcd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	2224      	movs	r2, #36	@ 0x24
 8013e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	68da      	ldr	r2, [r3, #12]
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8013e46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f000 ffa1 	bl	8014d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	691a      	ldr	r2, [r3, #16]
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8013e5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	695a      	ldr	r2, [r3, #20]
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8013e6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	68da      	ldr	r2, [r3, #12]
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8013e7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2200      	movs	r2, #0
 8013e82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2220      	movs	r2, #32
 8013e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2220      	movs	r2, #32
 8013e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	2200      	movs	r2, #0
 8013e98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8013e9a:	2300      	movs	r3, #0
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	3708      	adds	r7, #8
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	bd80      	pop	{r7, pc}

08013ea4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b08a      	sub	sp, #40	@ 0x28
 8013ea8:	af02      	add	r7, sp, #8
 8013eaa:	60f8      	str	r0, [r7, #12]
 8013eac:	60b9      	str	r1, [r7, #8]
 8013eae:	603b      	str	r3, [r7, #0]
 8013eb0:	4613      	mov	r3, r2
 8013eb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013ebe:	b2db      	uxtb	r3, r3
 8013ec0:	2b20      	cmp	r3, #32
 8013ec2:	d175      	bne.n	8013fb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8013ec4:	68bb      	ldr	r3, [r7, #8]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d002      	beq.n	8013ed0 <HAL_UART_Transmit+0x2c>
 8013eca:	88fb      	ldrh	r3, [r7, #6]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d101      	bne.n	8013ed4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8013ed0:	2301      	movs	r3, #1
 8013ed2:	e06e      	b.n	8013fb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	2221      	movs	r2, #33	@ 0x21
 8013ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013ee2:	f7f8 fa2d 	bl	800c340 <HAL_GetTick>
 8013ee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	88fa      	ldrh	r2, [r7, #6]
 8013eec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	88fa      	ldrh	r2, [r7, #6]
 8013ef2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	689b      	ldr	r3, [r3, #8]
 8013ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013efc:	d108      	bne.n	8013f10 <HAL_UART_Transmit+0x6c>
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	691b      	ldr	r3, [r3, #16]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d104      	bne.n	8013f10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8013f06:	2300      	movs	r3, #0
 8013f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	61bb      	str	r3, [r7, #24]
 8013f0e:	e003      	b.n	8013f18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013f14:	2300      	movs	r3, #0
 8013f16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013f18:	e02e      	b.n	8013f78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	9300      	str	r3, [sp, #0]
 8013f1e:	697b      	ldr	r3, [r7, #20]
 8013f20:	2200      	movs	r2, #0
 8013f22:	2180      	movs	r1, #128	@ 0x80
 8013f24:	68f8      	ldr	r0, [r7, #12]
 8013f26:	f000 fc71 	bl	801480c <UART_WaitOnFlagUntilTimeout>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d005      	beq.n	8013f3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	2220      	movs	r2, #32
 8013f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8013f38:	2303      	movs	r3, #3
 8013f3a:	e03a      	b.n	8013fb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8013f3c:	69fb      	ldr	r3, [r7, #28]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d10b      	bne.n	8013f5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013f42:	69bb      	ldr	r3, [r7, #24]
 8013f44:	881b      	ldrh	r3, [r3, #0]
 8013f46:	461a      	mov	r2, r3
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013f50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8013f52:	69bb      	ldr	r3, [r7, #24]
 8013f54:	3302      	adds	r3, #2
 8013f56:	61bb      	str	r3, [r7, #24]
 8013f58:	e007      	b.n	8013f6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8013f5a:	69fb      	ldr	r3, [r7, #28]
 8013f5c:	781a      	ldrb	r2, [r3, #0]
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8013f64:	69fb      	ldr	r3, [r7, #28]
 8013f66:	3301      	adds	r3, #1
 8013f68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8013f6e:	b29b      	uxth	r3, r3
 8013f70:	3b01      	subs	r3, #1
 8013f72:	b29a      	uxth	r2, r3
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8013f7c:	b29b      	uxth	r3, r3
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d1cb      	bne.n	8013f1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	9300      	str	r3, [sp, #0]
 8013f86:	697b      	ldr	r3, [r7, #20]
 8013f88:	2200      	movs	r2, #0
 8013f8a:	2140      	movs	r1, #64	@ 0x40
 8013f8c:	68f8      	ldr	r0, [r7, #12]
 8013f8e:	f000 fc3d 	bl	801480c <UART_WaitOnFlagUntilTimeout>
 8013f92:	4603      	mov	r3, r0
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d005      	beq.n	8013fa4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	2220      	movs	r2, #32
 8013f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8013fa0:	2303      	movs	r3, #3
 8013fa2:	e006      	b.n	8013fb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	2220      	movs	r2, #32
 8013fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8013fac:	2300      	movs	r3, #0
 8013fae:	e000      	b.n	8013fb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8013fb0:	2302      	movs	r3, #2
  }
}
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	3720      	adds	r7, #32
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}

08013fba <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013fba:	b580      	push	{r7, lr}
 8013fbc:	b08c      	sub	sp, #48	@ 0x30
 8013fbe:	af00      	add	r7, sp, #0
 8013fc0:	60f8      	str	r0, [r7, #12]
 8013fc2:	60b9      	str	r1, [r7, #8]
 8013fc4:	4613      	mov	r3, r2
 8013fc6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013fce:	b2db      	uxtb	r3, r3
 8013fd0:	2b20      	cmp	r3, #32
 8013fd2:	d146      	bne.n	8014062 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8013fd4:	68bb      	ldr	r3, [r7, #8]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d002      	beq.n	8013fe0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8013fda:	88fb      	ldrh	r3, [r7, #6]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d101      	bne.n	8013fe4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	e03f      	b.n	8014064 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	2201      	movs	r2, #1
 8013fe8:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	2200      	movs	r2, #0
 8013fee:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8013ff0:	88fb      	ldrh	r3, [r7, #6]
 8013ff2:	461a      	mov	r2, r3
 8013ff4:	68b9      	ldr	r1, [r7, #8]
 8013ff6:	68f8      	ldr	r0, [r7, #12]
 8013ff8:	f000 fc62 	bl	80148c0 <UART_Start_Receive_DMA>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014006:	2b01      	cmp	r3, #1
 8014008:	d125      	bne.n	8014056 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 801400a:	2300      	movs	r3, #0
 801400c:	613b      	str	r3, [r7, #16]
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	613b      	str	r3, [r7, #16]
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	685b      	ldr	r3, [r3, #4]
 801401c:	613b      	str	r3, [r7, #16]
 801401e:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	330c      	adds	r3, #12
 8014026:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014028:	69bb      	ldr	r3, [r7, #24]
 801402a:	e853 3f00 	ldrex	r3, [r3]
 801402e:	617b      	str	r3, [r7, #20]
   return(result);
 8014030:	697b      	ldr	r3, [r7, #20]
 8014032:	f043 0310 	orr.w	r3, r3, #16
 8014036:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	330c      	adds	r3, #12
 801403e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014040:	627a      	str	r2, [r7, #36]	@ 0x24
 8014042:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014044:	6a39      	ldr	r1, [r7, #32]
 8014046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014048:	e841 2300 	strex	r3, r2, [r1]
 801404c:	61fb      	str	r3, [r7, #28]
   return(result);
 801404e:	69fb      	ldr	r3, [r7, #28]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d1e5      	bne.n	8014020 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8014054:	e002      	b.n	801405c <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8014056:	2301      	movs	r3, #1
 8014058:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 801405c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014060:	e000      	b.n	8014064 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8014062:	2302      	movs	r3, #2
  }
}
 8014064:	4618      	mov	r0, r3
 8014066:	3730      	adds	r7, #48	@ 0x30
 8014068:	46bd      	mov	sp, r7
 801406a:	bd80      	pop	{r7, pc}

0801406c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b0ba      	sub	sp, #232	@ 0xe8
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	68db      	ldr	r3, [r3, #12]
 8014084:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	695b      	ldr	r3, [r3, #20]
 801408e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8014092:	2300      	movs	r3, #0
 8014094:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8014098:	2300      	movs	r3, #0
 801409a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801409e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80140a2:	f003 030f 	and.w	r3, r3, #15
 80140a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80140aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d10f      	bne.n	80140d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80140b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80140b6:	f003 0320 	and.w	r3, r3, #32
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d009      	beq.n	80140d2 <HAL_UART_IRQHandler+0x66>
 80140be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80140c2:	f003 0320 	and.w	r3, r3, #32
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d003      	beq.n	80140d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	f000 fda2 	bl	8014c14 <UART_Receive_IT>
      return;
 80140d0:	e273      	b.n	80145ba <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80140d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	f000 80de 	beq.w	8014298 <HAL_UART_IRQHandler+0x22c>
 80140dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80140e0:	f003 0301 	and.w	r3, r3, #1
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d106      	bne.n	80140f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80140e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80140ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	f000 80d1 	beq.w	8014298 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80140f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80140fa:	f003 0301 	and.w	r3, r3, #1
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d00b      	beq.n	801411a <HAL_UART_IRQHandler+0xae>
 8014102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801410a:	2b00      	cmp	r3, #0
 801410c:	d005      	beq.n	801411a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014112:	f043 0201 	orr.w	r2, r3, #1
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801411a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801411e:	f003 0304 	and.w	r3, r3, #4
 8014122:	2b00      	cmp	r3, #0
 8014124:	d00b      	beq.n	801413e <HAL_UART_IRQHandler+0xd2>
 8014126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801412a:	f003 0301 	and.w	r3, r3, #1
 801412e:	2b00      	cmp	r3, #0
 8014130:	d005      	beq.n	801413e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014136:	f043 0202 	orr.w	r2, r3, #2
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801413e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014142:	f003 0302 	and.w	r3, r3, #2
 8014146:	2b00      	cmp	r3, #0
 8014148:	d00b      	beq.n	8014162 <HAL_UART_IRQHandler+0xf6>
 801414a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801414e:	f003 0301 	and.w	r3, r3, #1
 8014152:	2b00      	cmp	r3, #0
 8014154:	d005      	beq.n	8014162 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801415a:	f043 0204 	orr.w	r2, r3, #4
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8014162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014166:	f003 0308 	and.w	r3, r3, #8
 801416a:	2b00      	cmp	r3, #0
 801416c:	d011      	beq.n	8014192 <HAL_UART_IRQHandler+0x126>
 801416e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014172:	f003 0320 	and.w	r3, r3, #32
 8014176:	2b00      	cmp	r3, #0
 8014178:	d105      	bne.n	8014186 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801417a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801417e:	f003 0301 	and.w	r3, r3, #1
 8014182:	2b00      	cmp	r3, #0
 8014184:	d005      	beq.n	8014192 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801418a:	f043 0208 	orr.w	r2, r3, #8
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014196:	2b00      	cmp	r3, #0
 8014198:	f000 820a 	beq.w	80145b0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801419c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80141a0:	f003 0320 	and.w	r3, r3, #32
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d008      	beq.n	80141ba <HAL_UART_IRQHandler+0x14e>
 80141a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80141ac:	f003 0320 	and.w	r3, r3, #32
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d002      	beq.n	80141ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80141b4:	6878      	ldr	r0, [r7, #4]
 80141b6:	f000 fd2d 	bl	8014c14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	695b      	ldr	r3, [r3, #20]
 80141c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80141c4:	2b40      	cmp	r3, #64	@ 0x40
 80141c6:	bf0c      	ite	eq
 80141c8:	2301      	moveq	r3, #1
 80141ca:	2300      	movne	r3, #0
 80141cc:	b2db      	uxtb	r3, r3
 80141ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80141d6:	f003 0308 	and.w	r3, r3, #8
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d103      	bne.n	80141e6 <HAL_UART_IRQHandler+0x17a>
 80141de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d04f      	beq.n	8014286 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80141e6:	6878      	ldr	r0, [r7, #4]
 80141e8:	f000 fc38 	bl	8014a5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	695b      	ldr	r3, [r3, #20]
 80141f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80141f6:	2b40      	cmp	r3, #64	@ 0x40
 80141f8:	d141      	bne.n	801427e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	3314      	adds	r3, #20
 8014200:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014204:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8014208:	e853 3f00 	ldrex	r3, [r3]
 801420c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8014210:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014214:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014218:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	3314      	adds	r3, #20
 8014222:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8014226:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801422a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801422e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8014232:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8014236:	e841 2300 	strex	r3, r2, [r1]
 801423a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801423e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014242:	2b00      	cmp	r3, #0
 8014244:	d1d9      	bne.n	80141fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801424a:	2b00      	cmp	r3, #0
 801424c:	d013      	beq.n	8014276 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014252:	4a8a      	ldr	r2, [pc, #552]	@ (801447c <HAL_UART_IRQHandler+0x410>)
 8014254:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801425a:	4618      	mov	r0, r3
 801425c:	f7f9 ff1a 	bl	800e094 <HAL_DMA_Abort_IT>
 8014260:	4603      	mov	r3, r0
 8014262:	2b00      	cmp	r3, #0
 8014264:	d016      	beq.n	8014294 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801426a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801426c:	687a      	ldr	r2, [r7, #4]
 801426e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8014270:	4610      	mov	r0, r2
 8014272:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014274:	e00e      	b.n	8014294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014276:	6878      	ldr	r0, [r7, #4]
 8014278:	f000 f9c0 	bl	80145fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801427c:	e00a      	b.n	8014294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801427e:	6878      	ldr	r0, [r7, #4]
 8014280:	f000 f9bc 	bl	80145fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014284:	e006      	b.n	8014294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014286:	6878      	ldr	r0, [r7, #4]
 8014288:	f000 f9b8 	bl	80145fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	2200      	movs	r2, #0
 8014290:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8014292:	e18d      	b.n	80145b0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014294:	bf00      	nop
    return;
 8014296:	e18b      	b.n	80145b0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801429c:	2b01      	cmp	r3, #1
 801429e:	f040 8167 	bne.w	8014570 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80142a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80142a6:	f003 0310 	and.w	r3, r3, #16
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	f000 8160 	beq.w	8014570 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80142b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80142b4:	f003 0310 	and.w	r3, r3, #16
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	f000 8159 	beq.w	8014570 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80142be:	2300      	movs	r3, #0
 80142c0:	60bb      	str	r3, [r7, #8]
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	60bb      	str	r3, [r7, #8]
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	685b      	ldr	r3, [r3, #4]
 80142d0:	60bb      	str	r3, [r7, #8]
 80142d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	695b      	ldr	r3, [r3, #20]
 80142da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80142de:	2b40      	cmp	r3, #64	@ 0x40
 80142e0:	f040 80ce 	bne.w	8014480 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	685b      	ldr	r3, [r3, #4]
 80142ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80142f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	f000 80a9 	beq.w	801444c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80142fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8014302:	429a      	cmp	r2, r3
 8014304:	f080 80a2 	bcs.w	801444c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801430e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014314:	69db      	ldr	r3, [r3, #28]
 8014316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801431a:	f000 8088 	beq.w	801442e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	330c      	adds	r3, #12
 8014324:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014328:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801432c:	e853 3f00 	ldrex	r3, [r3]
 8014330:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8014334:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801433c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	330c      	adds	r3, #12
 8014346:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801434a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801434e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014352:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014356:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801435a:	e841 2300 	strex	r3, r2, [r1]
 801435e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8014362:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014366:	2b00      	cmp	r3, #0
 8014368:	d1d9      	bne.n	801431e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	3314      	adds	r3, #20
 8014370:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014372:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014374:	e853 3f00 	ldrex	r3, [r3]
 8014378:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801437a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801437c:	f023 0301 	bic.w	r3, r3, #1
 8014380:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	3314      	adds	r3, #20
 801438a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801438e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8014392:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014394:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8014396:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801439a:	e841 2300 	strex	r3, r2, [r1]
 801439e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80143a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d1e1      	bne.n	801436a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	3314      	adds	r3, #20
 80143ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80143b0:	e853 3f00 	ldrex	r3, [r3]
 80143b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80143b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80143b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80143bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	3314      	adds	r3, #20
 80143c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80143ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80143cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80143d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80143d2:	e841 2300 	strex	r3, r2, [r1]
 80143d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80143d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d1e3      	bne.n	80143a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2220      	movs	r2, #32
 80143e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	2200      	movs	r2, #0
 80143ea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	330c      	adds	r3, #12
 80143f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80143f6:	e853 3f00 	ldrex	r3, [r3]
 80143fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80143fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80143fe:	f023 0310 	bic.w	r3, r3, #16
 8014402:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	330c      	adds	r3, #12
 801440c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8014410:	65ba      	str	r2, [r7, #88]	@ 0x58
 8014412:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014414:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014416:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014418:	e841 2300 	strex	r3, r2, [r1]
 801441c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801441e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014420:	2b00      	cmp	r3, #0
 8014422:	d1e3      	bne.n	80143ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014428:	4618      	mov	r0, r3
 801442a:	f7f9 fdc3 	bl	800dfb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	2202      	movs	r2, #2
 8014432:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801443c:	b29b      	uxth	r3, r3
 801443e:	1ad3      	subs	r3, r2, r3
 8014440:	b29b      	uxth	r3, r3
 8014442:	4619      	mov	r1, r3
 8014444:	6878      	ldr	r0, [r7, #4]
 8014446:	f7f5 fbbf 	bl	8009bc8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 801444a:	e0b3      	b.n	80145b4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014450:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8014454:	429a      	cmp	r2, r3
 8014456:	f040 80ad 	bne.w	80145b4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801445e:	69db      	ldr	r3, [r3, #28]
 8014460:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014464:	f040 80a6 	bne.w	80145b4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	2202      	movs	r2, #2
 801446c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014472:	4619      	mov	r1, r3
 8014474:	6878      	ldr	r0, [r7, #4]
 8014476:	f7f5 fba7 	bl	8009bc8 <HAL_UARTEx_RxEventCallback>
      return;
 801447a:	e09b      	b.n	80145b4 <HAL_UART_IRQHandler+0x548>
 801447c:	08014b23 	.word	0x08014b23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8014488:	b29b      	uxth	r3, r3
 801448a:	1ad3      	subs	r3, r2, r3
 801448c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8014494:	b29b      	uxth	r3, r3
 8014496:	2b00      	cmp	r3, #0
 8014498:	f000 808e 	beq.w	80145b8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 801449c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	f000 8089 	beq.w	80145b8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	330c      	adds	r3, #12
 80144ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144b0:	e853 3f00 	ldrex	r3, [r3]
 80144b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80144b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80144bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	330c      	adds	r3, #12
 80144c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80144ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80144cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80144d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80144d2:	e841 2300 	strex	r3, r2, [r1]
 80144d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80144d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d1e3      	bne.n	80144a6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	3314      	adds	r3, #20
 80144e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144e8:	e853 3f00 	ldrex	r3, [r3]
 80144ec:	623b      	str	r3, [r7, #32]
   return(result);
 80144ee:	6a3b      	ldr	r3, [r7, #32]
 80144f0:	f023 0301 	bic.w	r3, r3, #1
 80144f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	3314      	adds	r3, #20
 80144fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8014502:	633a      	str	r2, [r7, #48]	@ 0x30
 8014504:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801450a:	e841 2300 	strex	r3, r2, [r1]
 801450e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014512:	2b00      	cmp	r3, #0
 8014514:	d1e3      	bne.n	80144de <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	2220      	movs	r2, #32
 801451a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	2200      	movs	r2, #0
 8014522:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	330c      	adds	r3, #12
 801452a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801452c:	693b      	ldr	r3, [r7, #16]
 801452e:	e853 3f00 	ldrex	r3, [r3]
 8014532:	60fb      	str	r3, [r7, #12]
   return(result);
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	f023 0310 	bic.w	r3, r3, #16
 801453a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	330c      	adds	r3, #12
 8014544:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8014548:	61fa      	str	r2, [r7, #28]
 801454a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801454c:	69b9      	ldr	r1, [r7, #24]
 801454e:	69fa      	ldr	r2, [r7, #28]
 8014550:	e841 2300 	strex	r3, r2, [r1]
 8014554:	617b      	str	r3, [r7, #20]
   return(result);
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d1e3      	bne.n	8014524 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	2202      	movs	r2, #2
 8014560:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014562:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8014566:	4619      	mov	r1, r3
 8014568:	6878      	ldr	r0, [r7, #4]
 801456a:	f7f5 fb2d 	bl	8009bc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801456e:	e023      	b.n	80145b8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8014570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014578:	2b00      	cmp	r3, #0
 801457a:	d009      	beq.n	8014590 <HAL_UART_IRQHandler+0x524>
 801457c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014584:	2b00      	cmp	r3, #0
 8014586:	d003      	beq.n	8014590 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	f000 fadb 	bl	8014b44 <UART_Transmit_IT>
    return;
 801458e:	e014      	b.n	80145ba <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8014590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014598:	2b00      	cmp	r3, #0
 801459a:	d00e      	beq.n	80145ba <HAL_UART_IRQHandler+0x54e>
 801459c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80145a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d008      	beq.n	80145ba <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80145a8:	6878      	ldr	r0, [r7, #4]
 80145aa:	f000 fb1b 	bl	8014be4 <UART_EndTransmit_IT>
    return;
 80145ae:	e004      	b.n	80145ba <HAL_UART_IRQHandler+0x54e>
    return;
 80145b0:	bf00      	nop
 80145b2:	e002      	b.n	80145ba <HAL_UART_IRQHandler+0x54e>
      return;
 80145b4:	bf00      	nop
 80145b6:	e000      	b.n	80145ba <HAL_UART_IRQHandler+0x54e>
      return;
 80145b8:	bf00      	nop
  }
}
 80145ba:	37e8      	adds	r7, #232	@ 0xe8
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}

080145c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80145c0:	b480      	push	{r7}
 80145c2:	b083      	sub	sp, #12
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80145c8:	bf00      	nop
 80145ca:	370c      	adds	r7, #12
 80145cc:	46bd      	mov	sp, r7
 80145ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d2:	4770      	bx	lr

080145d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80145d4:	b480      	push	{r7}
 80145d6:	b083      	sub	sp, #12
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80145dc:	bf00      	nop
 80145de:	370c      	adds	r7, #12
 80145e0:	46bd      	mov	sp, r7
 80145e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e6:	4770      	bx	lr

080145e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80145e8:	b480      	push	{r7}
 80145ea:	b083      	sub	sp, #12
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80145f0:	bf00      	nop
 80145f2:	370c      	adds	r7, #12
 80145f4:	46bd      	mov	sp, r7
 80145f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fa:	4770      	bx	lr

080145fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80145fc:	b480      	push	{r7}
 80145fe:	b083      	sub	sp, #12
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8014604:	bf00      	nop
 8014606:	370c      	adds	r7, #12
 8014608:	46bd      	mov	sp, r7
 801460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460e:	4770      	bx	lr

08014610 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b09c      	sub	sp, #112	@ 0x70
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801461c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014628:	2b00      	cmp	r3, #0
 801462a:	d172      	bne.n	8014712 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801462c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801462e:	2200      	movs	r2, #0
 8014630:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	330c      	adds	r3, #12
 8014638:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801463a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801463c:	e853 3f00 	ldrex	r3, [r3]
 8014640:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8014642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014648:	66bb      	str	r3, [r7, #104]	@ 0x68
 801464a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	330c      	adds	r3, #12
 8014650:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014652:	65ba      	str	r2, [r7, #88]	@ 0x58
 8014654:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014656:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014658:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801465a:	e841 2300 	strex	r3, r2, [r1]
 801465e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8014660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014662:	2b00      	cmp	r3, #0
 8014664:	d1e5      	bne.n	8014632 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	3314      	adds	r3, #20
 801466c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801466e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014670:	e853 3f00 	ldrex	r3, [r3]
 8014674:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014678:	f023 0301 	bic.w	r3, r3, #1
 801467c:	667b      	str	r3, [r7, #100]	@ 0x64
 801467e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	3314      	adds	r3, #20
 8014684:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014686:	647a      	str	r2, [r7, #68]	@ 0x44
 8014688:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801468a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801468c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801468e:	e841 2300 	strex	r3, r2, [r1]
 8014692:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014696:	2b00      	cmp	r3, #0
 8014698:	d1e5      	bne.n	8014666 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801469a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	3314      	adds	r3, #20
 80146a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146a4:	e853 3f00 	ldrex	r3, [r3]
 80146a8:	623b      	str	r3, [r7, #32]
   return(result);
 80146aa:	6a3b      	ldr	r3, [r7, #32]
 80146ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80146b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80146b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	3314      	adds	r3, #20
 80146b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80146ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80146bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80146c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80146c2:	e841 2300 	strex	r3, r2, [r1]
 80146c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80146c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d1e5      	bne.n	801469a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80146ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80146d0:	2220      	movs	r2, #32
 80146d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80146d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80146d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80146da:	2b01      	cmp	r3, #1
 80146dc:	d119      	bne.n	8014712 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80146de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	330c      	adds	r3, #12
 80146e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146e6:	693b      	ldr	r3, [r7, #16]
 80146e8:	e853 3f00 	ldrex	r3, [r3]
 80146ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	f023 0310 	bic.w	r3, r3, #16
 80146f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80146f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	330c      	adds	r3, #12
 80146fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80146fe:	61fa      	str	r2, [r7, #28]
 8014700:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014702:	69b9      	ldr	r1, [r7, #24]
 8014704:	69fa      	ldr	r2, [r7, #28]
 8014706:	e841 2300 	strex	r3, r2, [r1]
 801470a:	617b      	str	r3, [r7, #20]
   return(result);
 801470c:	697b      	ldr	r3, [r7, #20]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d1e5      	bne.n	80146de <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014712:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014714:	2200      	movs	r2, #0
 8014716:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014718:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801471a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801471c:	2b01      	cmp	r3, #1
 801471e:	d106      	bne.n	801472e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014720:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014722:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014724:	4619      	mov	r1, r3
 8014726:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8014728:	f7f5 fa4e 	bl	8009bc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801472c:	e002      	b.n	8014734 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 801472e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8014730:	f7ff ff50 	bl	80145d4 <HAL_UART_RxCpltCallback>
}
 8014734:	bf00      	nop
 8014736:	3770      	adds	r7, #112	@ 0x70
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}

0801473c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b084      	sub	sp, #16
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014748:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	2201      	movs	r2, #1
 801474e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014754:	2b01      	cmp	r3, #1
 8014756:	d108      	bne.n	801476a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801475c:	085b      	lsrs	r3, r3, #1
 801475e:	b29b      	uxth	r3, r3
 8014760:	4619      	mov	r1, r3
 8014762:	68f8      	ldr	r0, [r7, #12]
 8014764:	f7f5 fa30 	bl	8009bc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014768:	e002      	b.n	8014770 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 801476a:	68f8      	ldr	r0, [r7, #12]
 801476c:	f7ff ff3c 	bl	80145e8 <HAL_UART_RxHalfCpltCallback>
}
 8014770:	bf00      	nop
 8014772:	3710      	adds	r7, #16
 8014774:	46bd      	mov	sp, r7
 8014776:	bd80      	pop	{r7, pc}

08014778 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b084      	sub	sp, #16
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8014780:	2300      	movs	r3, #0
 8014782:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014788:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801478a:	68bb      	ldr	r3, [r7, #8]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	695b      	ldr	r3, [r3, #20]
 8014790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014794:	2b80      	cmp	r3, #128	@ 0x80
 8014796:	bf0c      	ite	eq
 8014798:	2301      	moveq	r3, #1
 801479a:	2300      	movne	r3, #0
 801479c:	b2db      	uxtb	r3, r3
 801479e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80147a6:	b2db      	uxtb	r3, r3
 80147a8:	2b21      	cmp	r3, #33	@ 0x21
 80147aa:	d108      	bne.n	80147be <UART_DMAError+0x46>
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d005      	beq.n	80147be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	2200      	movs	r2, #0
 80147b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80147b8:	68b8      	ldr	r0, [r7, #8]
 80147ba:	f000 f927 	bl	8014a0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80147be:	68bb      	ldr	r3, [r7, #8]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	695b      	ldr	r3, [r3, #20]
 80147c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80147c8:	2b40      	cmp	r3, #64	@ 0x40
 80147ca:	bf0c      	ite	eq
 80147cc:	2301      	moveq	r3, #1
 80147ce:	2300      	movne	r3, #0
 80147d0:	b2db      	uxtb	r3, r3
 80147d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80147d4:	68bb      	ldr	r3, [r7, #8]
 80147d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80147da:	b2db      	uxtb	r3, r3
 80147dc:	2b22      	cmp	r3, #34	@ 0x22
 80147de:	d108      	bne.n	80147f2 <UART_DMAError+0x7a>
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d005      	beq.n	80147f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	2200      	movs	r2, #0
 80147ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80147ec:	68b8      	ldr	r0, [r7, #8]
 80147ee:	f000 f935 	bl	8014a5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80147f2:	68bb      	ldr	r3, [r7, #8]
 80147f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80147f6:	f043 0210 	orr.w	r2, r3, #16
 80147fa:	68bb      	ldr	r3, [r7, #8]
 80147fc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80147fe:	68b8      	ldr	r0, [r7, #8]
 8014800:	f7ff fefc 	bl	80145fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014804:	bf00      	nop
 8014806:	3710      	adds	r7, #16
 8014808:	46bd      	mov	sp, r7
 801480a:	bd80      	pop	{r7, pc}

0801480c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b086      	sub	sp, #24
 8014810:	af00      	add	r7, sp, #0
 8014812:	60f8      	str	r0, [r7, #12]
 8014814:	60b9      	str	r1, [r7, #8]
 8014816:	603b      	str	r3, [r7, #0]
 8014818:	4613      	mov	r3, r2
 801481a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801481c:	e03b      	b.n	8014896 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801481e:	6a3b      	ldr	r3, [r7, #32]
 8014820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014824:	d037      	beq.n	8014896 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014826:	f7f7 fd8b 	bl	800c340 <HAL_GetTick>
 801482a:	4602      	mov	r2, r0
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	1ad3      	subs	r3, r2, r3
 8014830:	6a3a      	ldr	r2, [r7, #32]
 8014832:	429a      	cmp	r2, r3
 8014834:	d302      	bcc.n	801483c <UART_WaitOnFlagUntilTimeout+0x30>
 8014836:	6a3b      	ldr	r3, [r7, #32]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d101      	bne.n	8014840 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801483c:	2303      	movs	r3, #3
 801483e:	e03a      	b.n	80148b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	68db      	ldr	r3, [r3, #12]
 8014846:	f003 0304 	and.w	r3, r3, #4
 801484a:	2b00      	cmp	r3, #0
 801484c:	d023      	beq.n	8014896 <UART_WaitOnFlagUntilTimeout+0x8a>
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	2b80      	cmp	r3, #128	@ 0x80
 8014852:	d020      	beq.n	8014896 <UART_WaitOnFlagUntilTimeout+0x8a>
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	2b40      	cmp	r3, #64	@ 0x40
 8014858:	d01d      	beq.n	8014896 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	f003 0308 	and.w	r3, r3, #8
 8014864:	2b08      	cmp	r3, #8
 8014866:	d116      	bne.n	8014896 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8014868:	2300      	movs	r3, #0
 801486a:	617b      	str	r3, [r7, #20]
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	617b      	str	r3, [r7, #20]
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	685b      	ldr	r3, [r3, #4]
 801487a:	617b      	str	r3, [r7, #20]
 801487c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801487e:	68f8      	ldr	r0, [r7, #12]
 8014880:	f000 f8ec 	bl	8014a5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	2208      	movs	r2, #8
 8014888:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	2200      	movs	r2, #0
 801488e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8014892:	2301      	movs	r3, #1
 8014894:	e00f      	b.n	80148b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	681a      	ldr	r2, [r3, #0]
 801489c:	68bb      	ldr	r3, [r7, #8]
 801489e:	4013      	ands	r3, r2
 80148a0:	68ba      	ldr	r2, [r7, #8]
 80148a2:	429a      	cmp	r2, r3
 80148a4:	bf0c      	ite	eq
 80148a6:	2301      	moveq	r3, #1
 80148a8:	2300      	movne	r3, #0
 80148aa:	b2db      	uxtb	r3, r3
 80148ac:	461a      	mov	r2, r3
 80148ae:	79fb      	ldrb	r3, [r7, #7]
 80148b0:	429a      	cmp	r2, r3
 80148b2:	d0b4      	beq.n	801481e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80148b4:	2300      	movs	r3, #0
}
 80148b6:	4618      	mov	r0, r3
 80148b8:	3718      	adds	r7, #24
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
	...

080148c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b098      	sub	sp, #96	@ 0x60
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	60f8      	str	r0, [r7, #12]
 80148c8:	60b9      	str	r1, [r7, #8]
 80148ca:	4613      	mov	r3, r2
 80148cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80148ce:	68ba      	ldr	r2, [r7, #8]
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	88fa      	ldrh	r2, [r7, #6]
 80148d8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	2200      	movs	r2, #0
 80148de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	2222      	movs	r2, #34	@ 0x22
 80148e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80148ec:	4a44      	ldr	r2, [pc, #272]	@ (8014a00 <UART_Start_Receive_DMA+0x140>)
 80148ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80148f4:	4a43      	ldr	r2, [pc, #268]	@ (8014a04 <UART_Start_Receive_DMA+0x144>)
 80148f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80148fc:	4a42      	ldr	r2, [pc, #264]	@ (8014a08 <UART_Start_Receive_DMA+0x148>)
 80148fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014904:	2200      	movs	r2, #0
 8014906:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8014908:	f107 0308 	add.w	r3, r7, #8
 801490c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	3304      	adds	r3, #4
 8014918:	4619      	mov	r1, r3
 801491a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801491c:	681a      	ldr	r2, [r3, #0]
 801491e:	88fb      	ldrh	r3, [r7, #6]
 8014920:	f7f9 faf0 	bl	800df04 <HAL_DMA_Start_IT>
 8014924:	4603      	mov	r3, r0
 8014926:	2b00      	cmp	r3, #0
 8014928:	d008      	beq.n	801493c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	2210      	movs	r2, #16
 801492e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	2220      	movs	r2, #32
 8014934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8014938:	2301      	movs	r3, #1
 801493a:	e05d      	b.n	80149f8 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801493c:	2300      	movs	r3, #0
 801493e:	613b      	str	r3, [r7, #16]
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	613b      	str	r3, [r7, #16]
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	685b      	ldr	r3, [r3, #4]
 801494e:	613b      	str	r3, [r7, #16]
 8014950:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	691b      	ldr	r3, [r3, #16]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d019      	beq.n	801498e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	330c      	adds	r3, #12
 8014960:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014964:	e853 3f00 	ldrex	r3, [r3]
 8014968:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801496a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801496c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014970:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	330c      	adds	r3, #12
 8014978:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801497a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801497c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801497e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8014980:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014982:	e841 2300 	strex	r3, r2, [r1]
 8014986:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8014988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801498a:	2b00      	cmp	r3, #0
 801498c:	d1e5      	bne.n	801495a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	3314      	adds	r3, #20
 8014994:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014998:	e853 3f00 	ldrex	r3, [r3]
 801499c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801499e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149a0:	f043 0301 	orr.w	r3, r3, #1
 80149a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	3314      	adds	r3, #20
 80149ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80149ae:	63ba      	str	r2, [r7, #56]	@ 0x38
 80149b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80149b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80149b6:	e841 2300 	strex	r3, r2, [r1]
 80149ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80149bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d1e5      	bne.n	801498e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	3314      	adds	r3, #20
 80149c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149ca:	69bb      	ldr	r3, [r7, #24]
 80149cc:	e853 3f00 	ldrex	r3, [r3]
 80149d0:	617b      	str	r3, [r7, #20]
   return(result);
 80149d2:	697b      	ldr	r3, [r7, #20]
 80149d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80149d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	3314      	adds	r3, #20
 80149e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80149e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80149e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149e6:	6a39      	ldr	r1, [r7, #32]
 80149e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80149ea:	e841 2300 	strex	r3, r2, [r1]
 80149ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80149f0:	69fb      	ldr	r3, [r7, #28]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d1e5      	bne.n	80149c2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80149f6:	2300      	movs	r3, #0
}
 80149f8:	4618      	mov	r0, r3
 80149fa:	3760      	adds	r7, #96	@ 0x60
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}
 8014a00:	08014611 	.word	0x08014611
 8014a04:	0801473d 	.word	0x0801473d
 8014a08:	08014779 	.word	0x08014779

08014a0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8014a0c:	b480      	push	{r7}
 8014a0e:	b089      	sub	sp, #36	@ 0x24
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	330c      	adds	r3, #12
 8014a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	e853 3f00 	ldrex	r3, [r3]
 8014a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8014a2a:	61fb      	str	r3, [r7, #28]
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	330c      	adds	r3, #12
 8014a32:	69fa      	ldr	r2, [r7, #28]
 8014a34:	61ba      	str	r2, [r7, #24]
 8014a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a38:	6979      	ldr	r1, [r7, #20]
 8014a3a:	69ba      	ldr	r2, [r7, #24]
 8014a3c:	e841 2300 	strex	r3, r2, [r1]
 8014a40:	613b      	str	r3, [r7, #16]
   return(result);
 8014a42:	693b      	ldr	r3, [r7, #16]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d1e5      	bne.n	8014a14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2220      	movs	r2, #32
 8014a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8014a50:	bf00      	nop
 8014a52:	3724      	adds	r7, #36	@ 0x24
 8014a54:	46bd      	mov	sp, r7
 8014a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5a:	4770      	bx	lr

08014a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014a5c:	b480      	push	{r7}
 8014a5e:	b095      	sub	sp, #84	@ 0x54
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	330c      	adds	r3, #12
 8014a6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a6e:	e853 3f00 	ldrex	r3, [r3]
 8014a72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	330c      	adds	r3, #12
 8014a82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014a84:	643a      	str	r2, [r7, #64]	@ 0x40
 8014a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014a8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014a8c:	e841 2300 	strex	r3, r2, [r1]
 8014a90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8014a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d1e5      	bne.n	8014a64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	3314      	adds	r3, #20
 8014a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014aa0:	6a3b      	ldr	r3, [r7, #32]
 8014aa2:	e853 3f00 	ldrex	r3, [r3]
 8014aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8014aa8:	69fb      	ldr	r3, [r7, #28]
 8014aaa:	f023 0301 	bic.w	r3, r3, #1
 8014aae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	3314      	adds	r3, #20
 8014ab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014ab8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014abc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014abe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014ac0:	e841 2300 	strex	r3, r2, [r1]
 8014ac4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d1e5      	bne.n	8014a98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ad0:	2b01      	cmp	r3, #1
 8014ad2:	d119      	bne.n	8014b08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	330c      	adds	r3, #12
 8014ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	e853 3f00 	ldrex	r3, [r3]
 8014ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	f023 0310 	bic.w	r3, r3, #16
 8014aea:	647b      	str	r3, [r7, #68]	@ 0x44
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	330c      	adds	r3, #12
 8014af2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014af4:	61ba      	str	r2, [r7, #24]
 8014af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014af8:	6979      	ldr	r1, [r7, #20]
 8014afa:	69ba      	ldr	r2, [r7, #24]
 8014afc:	e841 2300 	strex	r3, r2, [r1]
 8014b00:	613b      	str	r3, [r7, #16]
   return(result);
 8014b02:	693b      	ldr	r3, [r7, #16]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d1e5      	bne.n	8014ad4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	2220      	movs	r2, #32
 8014b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2200      	movs	r2, #0
 8014b14:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8014b16:	bf00      	nop
 8014b18:	3754      	adds	r7, #84	@ 0x54
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b20:	4770      	bx	lr

08014b22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014b22:	b580      	push	{r7, lr}
 8014b24:	b084      	sub	sp, #16
 8014b26:	af00      	add	r7, sp, #0
 8014b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014b2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	2200      	movs	r2, #0
 8014b34:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014b36:	68f8      	ldr	r0, [r7, #12]
 8014b38:	f7ff fd60 	bl	80145fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014b3c:	bf00      	nop
 8014b3e:	3710      	adds	r7, #16
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bd80      	pop	{r7, pc}

08014b44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8014b44:	b480      	push	{r7}
 8014b46:	b085      	sub	sp, #20
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014b52:	b2db      	uxtb	r3, r3
 8014b54:	2b21      	cmp	r3, #33	@ 0x21
 8014b56:	d13e      	bne.n	8014bd6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	689b      	ldr	r3, [r3, #8]
 8014b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014b60:	d114      	bne.n	8014b8c <UART_Transmit_IT+0x48>
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	691b      	ldr	r3, [r3, #16]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d110      	bne.n	8014b8c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	6a1b      	ldr	r3, [r3, #32]
 8014b6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	881b      	ldrh	r3, [r3, #0]
 8014b74:	461a      	mov	r2, r3
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014b7e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	6a1b      	ldr	r3, [r3, #32]
 8014b84:	1c9a      	adds	r2, r3, #2
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	621a      	str	r2, [r3, #32]
 8014b8a:	e008      	b.n	8014b9e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	6a1b      	ldr	r3, [r3, #32]
 8014b90:	1c59      	adds	r1, r3, #1
 8014b92:	687a      	ldr	r2, [r7, #4]
 8014b94:	6211      	str	r1, [r2, #32]
 8014b96:	781a      	ldrb	r2, [r3, #0]
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8014ba2:	b29b      	uxth	r3, r3
 8014ba4:	3b01      	subs	r3, #1
 8014ba6:	b29b      	uxth	r3, r3
 8014ba8:	687a      	ldr	r2, [r7, #4]
 8014baa:	4619      	mov	r1, r3
 8014bac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d10f      	bne.n	8014bd2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	68da      	ldr	r2, [r3, #12]
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014bc0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	68da      	ldr	r2, [r3, #12]
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014bd0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	e000      	b.n	8014bd8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8014bd6:	2302      	movs	r3, #2
  }
}
 8014bd8:	4618      	mov	r0, r3
 8014bda:	3714      	adds	r7, #20
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be2:	4770      	bx	lr

08014be4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b082      	sub	sp, #8
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	68da      	ldr	r2, [r3, #12]
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8014bfa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	2220      	movs	r2, #32
 8014c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014c04:	6878      	ldr	r0, [r7, #4]
 8014c06:	f7ff fcdb 	bl	80145c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8014c0a:	2300      	movs	r3, #0
}
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	3708      	adds	r7, #8
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd80      	pop	{r7, pc}

08014c14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b08c      	sub	sp, #48	@ 0x30
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8014c20:	2300      	movs	r3, #0
 8014c22:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014c2a:	b2db      	uxtb	r3, r3
 8014c2c:	2b22      	cmp	r3, #34	@ 0x22
 8014c2e:	f040 80aa 	bne.w	8014d86 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	689b      	ldr	r3, [r3, #8]
 8014c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014c3a:	d115      	bne.n	8014c68 <UART_Receive_IT+0x54>
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	691b      	ldr	r3, [r3, #16]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d111      	bne.n	8014c68 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c48:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	685b      	ldr	r3, [r3, #4]
 8014c50:	b29b      	uxth	r3, r3
 8014c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014c56:	b29a      	uxth	r2, r3
 8014c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c60:	1c9a      	adds	r2, r3, #2
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	629a      	str	r2, [r3, #40]	@ 0x28
 8014c66:	e024      	b.n	8014cb2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	689b      	ldr	r3, [r3, #8]
 8014c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014c76:	d007      	beq.n	8014c88 <UART_Receive_IT+0x74>
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	689b      	ldr	r3, [r3, #8]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d10a      	bne.n	8014c96 <UART_Receive_IT+0x82>
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	691b      	ldr	r3, [r3, #16]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d106      	bne.n	8014c96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	685b      	ldr	r3, [r3, #4]
 8014c8e:	b2da      	uxtb	r2, r3
 8014c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c92:	701a      	strb	r2, [r3, #0]
 8014c94:	e008      	b.n	8014ca8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	685b      	ldr	r3, [r3, #4]
 8014c9c:	b2db      	uxtb	r3, r3
 8014c9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014ca2:	b2da      	uxtb	r2, r3
 8014ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ca6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014cac:	1c5a      	adds	r2, r3, #1
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8014cb6:	b29b      	uxth	r3, r3
 8014cb8:	3b01      	subs	r3, #1
 8014cba:	b29b      	uxth	r3, r3
 8014cbc:	687a      	ldr	r2, [r7, #4]
 8014cbe:	4619      	mov	r1, r3
 8014cc0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d15d      	bne.n	8014d82 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	68da      	ldr	r2, [r3, #12]
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	f022 0220 	bic.w	r2, r2, #32
 8014cd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	68da      	ldr	r2, [r3, #12]
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8014ce4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	695a      	ldr	r2, [r3, #20]
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	f022 0201 	bic.w	r2, r2, #1
 8014cf4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	2220      	movs	r2, #32
 8014cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	2200      	movs	r2, #0
 8014d02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d08:	2b01      	cmp	r3, #1
 8014d0a:	d135      	bne.n	8014d78 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	2200      	movs	r2, #0
 8014d10:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	330c      	adds	r3, #12
 8014d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d1a:	697b      	ldr	r3, [r7, #20]
 8014d1c:	e853 3f00 	ldrex	r3, [r3]
 8014d20:	613b      	str	r3, [r7, #16]
   return(result);
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	f023 0310 	bic.w	r3, r3, #16
 8014d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	330c      	adds	r3, #12
 8014d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d32:	623a      	str	r2, [r7, #32]
 8014d34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d36:	69f9      	ldr	r1, [r7, #28]
 8014d38:	6a3a      	ldr	r2, [r7, #32]
 8014d3a:	e841 2300 	strex	r3, r2, [r1]
 8014d3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8014d40:	69bb      	ldr	r3, [r7, #24]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d1e5      	bne.n	8014d12 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	f003 0310 	and.w	r3, r3, #16
 8014d50:	2b10      	cmp	r3, #16
 8014d52:	d10a      	bne.n	8014d6a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8014d54:	2300      	movs	r3, #0
 8014d56:	60fb      	str	r3, [r7, #12]
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	60fb      	str	r3, [r7, #12]
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	685b      	ldr	r3, [r3, #4]
 8014d66:	60fb      	str	r3, [r7, #12]
 8014d68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014d6e:	4619      	mov	r1, r3
 8014d70:	6878      	ldr	r0, [r7, #4]
 8014d72:	f7f4 ff29 	bl	8009bc8 <HAL_UARTEx_RxEventCallback>
 8014d76:	e002      	b.n	8014d7e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8014d78:	6878      	ldr	r0, [r7, #4]
 8014d7a:	f7ff fc2b 	bl	80145d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8014d7e:	2300      	movs	r3, #0
 8014d80:	e002      	b.n	8014d88 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8014d82:	2300      	movs	r3, #0
 8014d84:	e000      	b.n	8014d88 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8014d86:	2302      	movs	r3, #2
  }
}
 8014d88:	4618      	mov	r0, r3
 8014d8a:	3730      	adds	r7, #48	@ 0x30
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}

08014d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014d94:	b0c0      	sub	sp, #256	@ 0x100
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	691b      	ldr	r3, [r3, #16]
 8014da4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8014da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014dac:	68d9      	ldr	r1, [r3, #12]
 8014dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014db2:	681a      	ldr	r2, [r3, #0]
 8014db4:	ea40 0301 	orr.w	r3, r0, r1
 8014db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8014dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014dbe:	689a      	ldr	r2, [r3, #8]
 8014dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014dc4:	691b      	ldr	r3, [r3, #16]
 8014dc6:	431a      	orrs	r2, r3
 8014dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014dcc:	695b      	ldr	r3, [r3, #20]
 8014dce:	431a      	orrs	r2, r3
 8014dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014dd4:	69db      	ldr	r3, [r3, #28]
 8014dd6:	4313      	orrs	r3, r2
 8014dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8014ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	68db      	ldr	r3, [r3, #12]
 8014de4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8014de8:	f021 010c 	bic.w	r1, r1, #12
 8014dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014df0:	681a      	ldr	r2, [r3, #0]
 8014df2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8014df6:	430b      	orrs	r3, r1
 8014df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8014dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	695b      	ldr	r3, [r3, #20]
 8014e02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8014e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014e0a:	6999      	ldr	r1, [r3, #24]
 8014e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014e10:	681a      	ldr	r2, [r3, #0]
 8014e12:	ea40 0301 	orr.w	r3, r0, r1
 8014e16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014e1c:	681a      	ldr	r2, [r3, #0]
 8014e1e:	4b8f      	ldr	r3, [pc, #572]	@ (801505c <UART_SetConfig+0x2cc>)
 8014e20:	429a      	cmp	r2, r3
 8014e22:	d005      	beq.n	8014e30 <UART_SetConfig+0xa0>
 8014e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014e28:	681a      	ldr	r2, [r3, #0]
 8014e2a:	4b8d      	ldr	r3, [pc, #564]	@ (8015060 <UART_SetConfig+0x2d0>)
 8014e2c:	429a      	cmp	r2, r3
 8014e2e:	d104      	bne.n	8014e3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014e30:	f7fb fb7c 	bl	801052c <HAL_RCC_GetPCLK2Freq>
 8014e34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8014e38:	e003      	b.n	8014e42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8014e3a:	f7fb fb63 	bl	8010504 <HAL_RCC_GetPCLK1Freq>
 8014e3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014e46:	69db      	ldr	r3, [r3, #28]
 8014e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014e4c:	f040 810c 	bne.w	8015068 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014e54:	2200      	movs	r2, #0
 8014e56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8014e5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8014e5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8014e62:	4622      	mov	r2, r4
 8014e64:	462b      	mov	r3, r5
 8014e66:	1891      	adds	r1, r2, r2
 8014e68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8014e6a:	415b      	adcs	r3, r3
 8014e6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014e6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8014e72:	4621      	mov	r1, r4
 8014e74:	eb12 0801 	adds.w	r8, r2, r1
 8014e78:	4629      	mov	r1, r5
 8014e7a:	eb43 0901 	adc.w	r9, r3, r1
 8014e7e:	f04f 0200 	mov.w	r2, #0
 8014e82:	f04f 0300 	mov.w	r3, #0
 8014e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8014e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8014e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8014e92:	4690      	mov	r8, r2
 8014e94:	4699      	mov	r9, r3
 8014e96:	4623      	mov	r3, r4
 8014e98:	eb18 0303 	adds.w	r3, r8, r3
 8014e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8014ea0:	462b      	mov	r3, r5
 8014ea2:	eb49 0303 	adc.w	r3, r9, r3
 8014ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8014eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014eae:	685b      	ldr	r3, [r3, #4]
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8014eb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8014eba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8014ebe:	460b      	mov	r3, r1
 8014ec0:	18db      	adds	r3, r3, r3
 8014ec2:	653b      	str	r3, [r7, #80]	@ 0x50
 8014ec4:	4613      	mov	r3, r2
 8014ec6:	eb42 0303 	adc.w	r3, r2, r3
 8014eca:	657b      	str	r3, [r7, #84]	@ 0x54
 8014ecc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8014ed0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8014ed4:	f7eb fef8 	bl	8000cc8 <__aeabi_uldivmod>
 8014ed8:	4602      	mov	r2, r0
 8014eda:	460b      	mov	r3, r1
 8014edc:	4b61      	ldr	r3, [pc, #388]	@ (8015064 <UART_SetConfig+0x2d4>)
 8014ede:	fba3 2302 	umull	r2, r3, r3, r2
 8014ee2:	095b      	lsrs	r3, r3, #5
 8014ee4:	011c      	lsls	r4, r3, #4
 8014ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014eea:	2200      	movs	r2, #0
 8014eec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8014ef0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8014ef4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8014ef8:	4642      	mov	r2, r8
 8014efa:	464b      	mov	r3, r9
 8014efc:	1891      	adds	r1, r2, r2
 8014efe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8014f00:	415b      	adcs	r3, r3
 8014f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014f04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8014f08:	4641      	mov	r1, r8
 8014f0a:	eb12 0a01 	adds.w	sl, r2, r1
 8014f0e:	4649      	mov	r1, r9
 8014f10:	eb43 0b01 	adc.w	fp, r3, r1
 8014f14:	f04f 0200 	mov.w	r2, #0
 8014f18:	f04f 0300 	mov.w	r3, #0
 8014f1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8014f20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8014f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014f28:	4692      	mov	sl, r2
 8014f2a:	469b      	mov	fp, r3
 8014f2c:	4643      	mov	r3, r8
 8014f2e:	eb1a 0303 	adds.w	r3, sl, r3
 8014f32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8014f36:	464b      	mov	r3, r9
 8014f38:	eb4b 0303 	adc.w	r3, fp, r3
 8014f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8014f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014f44:	685b      	ldr	r3, [r3, #4]
 8014f46:	2200      	movs	r2, #0
 8014f48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8014f4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8014f50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8014f54:	460b      	mov	r3, r1
 8014f56:	18db      	adds	r3, r3, r3
 8014f58:	643b      	str	r3, [r7, #64]	@ 0x40
 8014f5a:	4613      	mov	r3, r2
 8014f5c:	eb42 0303 	adc.w	r3, r2, r3
 8014f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8014f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8014f66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8014f6a:	f7eb fead 	bl	8000cc8 <__aeabi_uldivmod>
 8014f6e:	4602      	mov	r2, r0
 8014f70:	460b      	mov	r3, r1
 8014f72:	4611      	mov	r1, r2
 8014f74:	4b3b      	ldr	r3, [pc, #236]	@ (8015064 <UART_SetConfig+0x2d4>)
 8014f76:	fba3 2301 	umull	r2, r3, r3, r1
 8014f7a:	095b      	lsrs	r3, r3, #5
 8014f7c:	2264      	movs	r2, #100	@ 0x64
 8014f7e:	fb02 f303 	mul.w	r3, r2, r3
 8014f82:	1acb      	subs	r3, r1, r3
 8014f84:	00db      	lsls	r3, r3, #3
 8014f86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8014f8a:	4b36      	ldr	r3, [pc, #216]	@ (8015064 <UART_SetConfig+0x2d4>)
 8014f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8014f90:	095b      	lsrs	r3, r3, #5
 8014f92:	005b      	lsls	r3, r3, #1
 8014f94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8014f98:	441c      	add	r4, r3
 8014f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8014fa4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8014fa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8014fac:	4642      	mov	r2, r8
 8014fae:	464b      	mov	r3, r9
 8014fb0:	1891      	adds	r1, r2, r2
 8014fb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8014fb4:	415b      	adcs	r3, r3
 8014fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014fb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8014fbc:	4641      	mov	r1, r8
 8014fbe:	1851      	adds	r1, r2, r1
 8014fc0:	6339      	str	r1, [r7, #48]	@ 0x30
 8014fc2:	4649      	mov	r1, r9
 8014fc4:	414b      	adcs	r3, r1
 8014fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8014fc8:	f04f 0200 	mov.w	r2, #0
 8014fcc:	f04f 0300 	mov.w	r3, #0
 8014fd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8014fd4:	4659      	mov	r1, fp
 8014fd6:	00cb      	lsls	r3, r1, #3
 8014fd8:	4651      	mov	r1, sl
 8014fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014fde:	4651      	mov	r1, sl
 8014fe0:	00ca      	lsls	r2, r1, #3
 8014fe2:	4610      	mov	r0, r2
 8014fe4:	4619      	mov	r1, r3
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	4642      	mov	r2, r8
 8014fea:	189b      	adds	r3, r3, r2
 8014fec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014ff0:	464b      	mov	r3, r9
 8014ff2:	460a      	mov	r2, r1
 8014ff4:	eb42 0303 	adc.w	r3, r2, r3
 8014ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8014ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015000:	685b      	ldr	r3, [r3, #4]
 8015002:	2200      	movs	r2, #0
 8015004:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8015008:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 801500c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8015010:	460b      	mov	r3, r1
 8015012:	18db      	adds	r3, r3, r3
 8015014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015016:	4613      	mov	r3, r2
 8015018:	eb42 0303 	adc.w	r3, r2, r3
 801501c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801501e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8015022:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8015026:	f7eb fe4f 	bl	8000cc8 <__aeabi_uldivmod>
 801502a:	4602      	mov	r2, r0
 801502c:	460b      	mov	r3, r1
 801502e:	4b0d      	ldr	r3, [pc, #52]	@ (8015064 <UART_SetConfig+0x2d4>)
 8015030:	fba3 1302 	umull	r1, r3, r3, r2
 8015034:	095b      	lsrs	r3, r3, #5
 8015036:	2164      	movs	r1, #100	@ 0x64
 8015038:	fb01 f303 	mul.w	r3, r1, r3
 801503c:	1ad3      	subs	r3, r2, r3
 801503e:	00db      	lsls	r3, r3, #3
 8015040:	3332      	adds	r3, #50	@ 0x32
 8015042:	4a08      	ldr	r2, [pc, #32]	@ (8015064 <UART_SetConfig+0x2d4>)
 8015044:	fba2 2303 	umull	r2, r3, r2, r3
 8015048:	095b      	lsrs	r3, r3, #5
 801504a:	f003 0207 	and.w	r2, r3, #7
 801504e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	4422      	add	r2, r4
 8015056:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8015058:	e106      	b.n	8015268 <UART_SetConfig+0x4d8>
 801505a:	bf00      	nop
 801505c:	40011000 	.word	0x40011000
 8015060:	40011400 	.word	0x40011400
 8015064:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801506c:	2200      	movs	r2, #0
 801506e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8015072:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015076:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801507a:	4642      	mov	r2, r8
 801507c:	464b      	mov	r3, r9
 801507e:	1891      	adds	r1, r2, r2
 8015080:	6239      	str	r1, [r7, #32]
 8015082:	415b      	adcs	r3, r3
 8015084:	627b      	str	r3, [r7, #36]	@ 0x24
 8015086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801508a:	4641      	mov	r1, r8
 801508c:	1854      	adds	r4, r2, r1
 801508e:	4649      	mov	r1, r9
 8015090:	eb43 0501 	adc.w	r5, r3, r1
 8015094:	f04f 0200 	mov.w	r2, #0
 8015098:	f04f 0300 	mov.w	r3, #0
 801509c:	00eb      	lsls	r3, r5, #3
 801509e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80150a2:	00e2      	lsls	r2, r4, #3
 80150a4:	4614      	mov	r4, r2
 80150a6:	461d      	mov	r5, r3
 80150a8:	4643      	mov	r3, r8
 80150aa:	18e3      	adds	r3, r4, r3
 80150ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80150b0:	464b      	mov	r3, r9
 80150b2:	eb45 0303 	adc.w	r3, r5, r3
 80150b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80150ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80150be:	685b      	ldr	r3, [r3, #4]
 80150c0:	2200      	movs	r2, #0
 80150c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80150c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80150ca:	f04f 0200 	mov.w	r2, #0
 80150ce:	f04f 0300 	mov.w	r3, #0
 80150d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80150d6:	4629      	mov	r1, r5
 80150d8:	008b      	lsls	r3, r1, #2
 80150da:	4621      	mov	r1, r4
 80150dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80150e0:	4621      	mov	r1, r4
 80150e2:	008a      	lsls	r2, r1, #2
 80150e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80150e8:	f7eb fdee 	bl	8000cc8 <__aeabi_uldivmod>
 80150ec:	4602      	mov	r2, r0
 80150ee:	460b      	mov	r3, r1
 80150f0:	4b60      	ldr	r3, [pc, #384]	@ (8015274 <UART_SetConfig+0x4e4>)
 80150f2:	fba3 2302 	umull	r2, r3, r3, r2
 80150f6:	095b      	lsrs	r3, r3, #5
 80150f8:	011c      	lsls	r4, r3, #4
 80150fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80150fe:	2200      	movs	r2, #0
 8015100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8015104:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8015108:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 801510c:	4642      	mov	r2, r8
 801510e:	464b      	mov	r3, r9
 8015110:	1891      	adds	r1, r2, r2
 8015112:	61b9      	str	r1, [r7, #24]
 8015114:	415b      	adcs	r3, r3
 8015116:	61fb      	str	r3, [r7, #28]
 8015118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801511c:	4641      	mov	r1, r8
 801511e:	1851      	adds	r1, r2, r1
 8015120:	6139      	str	r1, [r7, #16]
 8015122:	4649      	mov	r1, r9
 8015124:	414b      	adcs	r3, r1
 8015126:	617b      	str	r3, [r7, #20]
 8015128:	f04f 0200 	mov.w	r2, #0
 801512c:	f04f 0300 	mov.w	r3, #0
 8015130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8015134:	4659      	mov	r1, fp
 8015136:	00cb      	lsls	r3, r1, #3
 8015138:	4651      	mov	r1, sl
 801513a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801513e:	4651      	mov	r1, sl
 8015140:	00ca      	lsls	r2, r1, #3
 8015142:	4610      	mov	r0, r2
 8015144:	4619      	mov	r1, r3
 8015146:	4603      	mov	r3, r0
 8015148:	4642      	mov	r2, r8
 801514a:	189b      	adds	r3, r3, r2
 801514c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8015150:	464b      	mov	r3, r9
 8015152:	460a      	mov	r2, r1
 8015154:	eb42 0303 	adc.w	r3, r2, r3
 8015158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801515c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015160:	685b      	ldr	r3, [r3, #4]
 8015162:	2200      	movs	r2, #0
 8015164:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015166:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8015168:	f04f 0200 	mov.w	r2, #0
 801516c:	f04f 0300 	mov.w	r3, #0
 8015170:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8015174:	4649      	mov	r1, r9
 8015176:	008b      	lsls	r3, r1, #2
 8015178:	4641      	mov	r1, r8
 801517a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801517e:	4641      	mov	r1, r8
 8015180:	008a      	lsls	r2, r1, #2
 8015182:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8015186:	f7eb fd9f 	bl	8000cc8 <__aeabi_uldivmod>
 801518a:	4602      	mov	r2, r0
 801518c:	460b      	mov	r3, r1
 801518e:	4611      	mov	r1, r2
 8015190:	4b38      	ldr	r3, [pc, #224]	@ (8015274 <UART_SetConfig+0x4e4>)
 8015192:	fba3 2301 	umull	r2, r3, r3, r1
 8015196:	095b      	lsrs	r3, r3, #5
 8015198:	2264      	movs	r2, #100	@ 0x64
 801519a:	fb02 f303 	mul.w	r3, r2, r3
 801519e:	1acb      	subs	r3, r1, r3
 80151a0:	011b      	lsls	r3, r3, #4
 80151a2:	3332      	adds	r3, #50	@ 0x32
 80151a4:	4a33      	ldr	r2, [pc, #204]	@ (8015274 <UART_SetConfig+0x4e4>)
 80151a6:	fba2 2303 	umull	r2, r3, r2, r3
 80151aa:	095b      	lsrs	r3, r3, #5
 80151ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80151b0:	441c      	add	r4, r3
 80151b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80151b6:	2200      	movs	r2, #0
 80151b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80151ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80151bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80151c0:	4642      	mov	r2, r8
 80151c2:	464b      	mov	r3, r9
 80151c4:	1891      	adds	r1, r2, r2
 80151c6:	60b9      	str	r1, [r7, #8]
 80151c8:	415b      	adcs	r3, r3
 80151ca:	60fb      	str	r3, [r7, #12]
 80151cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80151d0:	4641      	mov	r1, r8
 80151d2:	1851      	adds	r1, r2, r1
 80151d4:	6039      	str	r1, [r7, #0]
 80151d6:	4649      	mov	r1, r9
 80151d8:	414b      	adcs	r3, r1
 80151da:	607b      	str	r3, [r7, #4]
 80151dc:	f04f 0200 	mov.w	r2, #0
 80151e0:	f04f 0300 	mov.w	r3, #0
 80151e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80151e8:	4659      	mov	r1, fp
 80151ea:	00cb      	lsls	r3, r1, #3
 80151ec:	4651      	mov	r1, sl
 80151ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80151f2:	4651      	mov	r1, sl
 80151f4:	00ca      	lsls	r2, r1, #3
 80151f6:	4610      	mov	r0, r2
 80151f8:	4619      	mov	r1, r3
 80151fa:	4603      	mov	r3, r0
 80151fc:	4642      	mov	r2, r8
 80151fe:	189b      	adds	r3, r3, r2
 8015200:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015202:	464b      	mov	r3, r9
 8015204:	460a      	mov	r2, r1
 8015206:	eb42 0303 	adc.w	r3, r2, r3
 801520a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015210:	685b      	ldr	r3, [r3, #4]
 8015212:	2200      	movs	r2, #0
 8015214:	663b      	str	r3, [r7, #96]	@ 0x60
 8015216:	667a      	str	r2, [r7, #100]	@ 0x64
 8015218:	f04f 0200 	mov.w	r2, #0
 801521c:	f04f 0300 	mov.w	r3, #0
 8015220:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8015224:	4649      	mov	r1, r9
 8015226:	008b      	lsls	r3, r1, #2
 8015228:	4641      	mov	r1, r8
 801522a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801522e:	4641      	mov	r1, r8
 8015230:	008a      	lsls	r2, r1, #2
 8015232:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8015236:	f7eb fd47 	bl	8000cc8 <__aeabi_uldivmod>
 801523a:	4602      	mov	r2, r0
 801523c:	460b      	mov	r3, r1
 801523e:	4b0d      	ldr	r3, [pc, #52]	@ (8015274 <UART_SetConfig+0x4e4>)
 8015240:	fba3 1302 	umull	r1, r3, r3, r2
 8015244:	095b      	lsrs	r3, r3, #5
 8015246:	2164      	movs	r1, #100	@ 0x64
 8015248:	fb01 f303 	mul.w	r3, r1, r3
 801524c:	1ad3      	subs	r3, r2, r3
 801524e:	011b      	lsls	r3, r3, #4
 8015250:	3332      	adds	r3, #50	@ 0x32
 8015252:	4a08      	ldr	r2, [pc, #32]	@ (8015274 <UART_SetConfig+0x4e4>)
 8015254:	fba2 2303 	umull	r2, r3, r2, r3
 8015258:	095b      	lsrs	r3, r3, #5
 801525a:	f003 020f 	and.w	r2, r3, #15
 801525e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	4422      	add	r2, r4
 8015266:	609a      	str	r2, [r3, #8]
}
 8015268:	bf00      	nop
 801526a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801526e:	46bd      	mov	sp, r7
 8015270:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015274:	51eb851f 	.word	0x51eb851f

08015278 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8015278:	b084      	sub	sp, #16
 801527a:	b480      	push	{r7}
 801527c:	b085      	sub	sp, #20
 801527e:	af00      	add	r7, sp, #0
 8015280:	6078      	str	r0, [r7, #4]
 8015282:	f107 001c 	add.w	r0, r7, #28
 8015286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801528a:	2300      	movs	r3, #0
 801528c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801528e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8015290:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8015292:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8015294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8015296:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8015298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 801529a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801529c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 801529e:	431a      	orrs	r2, r3
             Init.ClockDiv
 80152a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80152a2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80152a4:	68fa      	ldr	r2, [r7, #12]
 80152a6:	4313      	orrs	r3, r2
 80152a8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80152b2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80152b6:	68fa      	ldr	r2, [r7, #12]
 80152b8:	431a      	orrs	r2, r3
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80152be:	2300      	movs	r3, #0
}
 80152c0:	4618      	mov	r0, r3
 80152c2:	3714      	adds	r7, #20
 80152c4:	46bd      	mov	sp, r7
 80152c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ca:	b004      	add	sp, #16
 80152cc:	4770      	bx	lr

080152ce <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80152ce:	b480      	push	{r7}
 80152d0:	b083      	sub	sp, #12
 80152d2:	af00      	add	r7, sp, #0
 80152d4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80152dc:	4618      	mov	r0, r3
 80152de:	370c      	adds	r7, #12
 80152e0:	46bd      	mov	sp, r7
 80152e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e6:	4770      	bx	lr

080152e8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80152e8:	b480      	push	{r7}
 80152ea:	b083      	sub	sp, #12
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
 80152f0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	681a      	ldr	r2, [r3, #0]
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80152fc:	2300      	movs	r3, #0
}
 80152fe:	4618      	mov	r0, r3
 8015300:	370c      	adds	r7, #12
 8015302:	46bd      	mov	sp, r7
 8015304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015308:	4770      	bx	lr

0801530a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 801530a:	b480      	push	{r7}
 801530c:	b083      	sub	sp, #12
 801530e:	af00      	add	r7, sp, #0
 8015310:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	2203      	movs	r2, #3
 8015316:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8015318:	2300      	movs	r3, #0
}
 801531a:	4618      	mov	r0, r3
 801531c:	370c      	adds	r7, #12
 801531e:	46bd      	mov	sp, r7
 8015320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015324:	4770      	bx	lr

08015326 <SDIO_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_OFF(SDIO_TypeDef *SDIOx)
{
 8015326:	b480      	push	{r7}
 8015328:	b083      	sub	sp, #12
 801532a:	af00      	add	r7, sp, #0
 801532c:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDIOx->POWER = (uint32_t)0x00000000;
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	2200      	movs	r2, #0
 8015332:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8015334:	2300      	movs	r3, #0
}
 8015336:	4618      	mov	r0, r3
 8015338:	370c      	adds	r7, #12
 801533a:	46bd      	mov	sp, r7
 801533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015340:	4770      	bx	lr

08015342 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8015342:	b480      	push	{r7}
 8015344:	b083      	sub	sp, #12
 8015346:	af00      	add	r7, sp, #0
 8015348:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	f003 0303 	and.w	r3, r3, #3
}
 8015352:	4618      	mov	r0, r3
 8015354:	370c      	adds	r7, #12
 8015356:	46bd      	mov	sp, r7
 8015358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535c:	4770      	bx	lr

0801535e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 801535e:	b480      	push	{r7}
 8015360:	b085      	sub	sp, #20
 8015362:	af00      	add	r7, sp, #0
 8015364:	6078      	str	r0, [r7, #4]
 8015366:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8015368:	2300      	movs	r3, #0
 801536a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	681a      	ldr	r2, [r3, #0]
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8015374:	683b      	ldr	r3, [r7, #0]
 8015376:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8015378:	683b      	ldr	r3, [r7, #0]
 801537a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801537c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801537e:	683b      	ldr	r3, [r7, #0]
 8015380:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8015382:	431a      	orrs	r2, r3
                       Command->CPSM);
 8015384:	683b      	ldr	r3, [r7, #0]
 8015386:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8015388:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801538a:	68fa      	ldr	r2, [r7, #12]
 801538c:	4313      	orrs	r3, r2
 801538e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	68db      	ldr	r3, [r3, #12]
 8015394:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8015398:	f023 030f 	bic.w	r3, r3, #15
 801539c:	68fa      	ldr	r2, [r7, #12]
 801539e:	431a      	orrs	r2, r3
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80153a4:	2300      	movs	r3, #0
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3714      	adds	r7, #20
 80153aa:	46bd      	mov	sp, r7
 80153ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b0:	4770      	bx	lr

080153b2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80153b2:	b480      	push	{r7}
 80153b4:	b083      	sub	sp, #12
 80153b6:	af00      	add	r7, sp, #0
 80153b8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	691b      	ldr	r3, [r3, #16]
 80153be:	b2db      	uxtb	r3, r3
}
 80153c0:	4618      	mov	r0, r3
 80153c2:	370c      	adds	r7, #12
 80153c4:	46bd      	mov	sp, r7
 80153c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ca:	4770      	bx	lr

080153cc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80153cc:	b480      	push	{r7}
 80153ce:	b085      	sub	sp, #20
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	6078      	str	r0, [r7, #4]
 80153d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	3314      	adds	r3, #20
 80153da:	461a      	mov	r2, r3
 80153dc:	683b      	ldr	r3, [r7, #0]
 80153de:	4413      	add	r3, r2
 80153e0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	681b      	ldr	r3, [r3, #0]
}  
 80153e6:	4618      	mov	r0, r3
 80153e8:	3714      	adds	r7, #20
 80153ea:	46bd      	mov	sp, r7
 80153ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f0:	4770      	bx	lr

080153f2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80153f2:	b480      	push	{r7}
 80153f4:	b085      	sub	sp, #20
 80153f6:	af00      	add	r7, sp, #0
 80153f8:	6078      	str	r0, [r7, #4]
 80153fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80153fc:	2300      	movs	r3, #0
 80153fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	681a      	ldr	r2, [r3, #0]
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	685a      	ldr	r2, [r3, #4]
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8015410:	683b      	ldr	r3, [r7, #0]
 8015412:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8015414:	683b      	ldr	r3, [r7, #0]
 8015416:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8015418:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801541e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8015424:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8015426:	68fa      	ldr	r2, [r7, #12]
 8015428:	4313      	orrs	r3, r2
 801542a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015430:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	431a      	orrs	r2, r3
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 801543c:	2300      	movs	r3, #0

}
 801543e:	4618      	mov	r0, r3
 8015440:	3714      	adds	r7, #20
 8015442:	46bd      	mov	sp, r7
 8015444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015448:	4770      	bx	lr

0801544a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 801544a:	b580      	push	{r7, lr}
 801544c:	b088      	sub	sp, #32
 801544e:	af00      	add	r7, sp, #0
 8015450:	6078      	str	r0, [r7, #4]
 8015452:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8015454:	683b      	ldr	r3, [r7, #0]
 8015456:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8015458:	2310      	movs	r3, #16
 801545a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801545c:	2340      	movs	r3, #64	@ 0x40
 801545e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8015460:	2300      	movs	r3, #0
 8015462:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8015464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015468:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801546a:	f107 0308 	add.w	r3, r7, #8
 801546e:	4619      	mov	r1, r3
 8015470:	6878      	ldr	r0, [r7, #4]
 8015472:	f7ff ff74 	bl	801535e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8015476:	f241 3288 	movw	r2, #5000	@ 0x1388
 801547a:	2110      	movs	r1, #16
 801547c:	6878      	ldr	r0, [r7, #4]
 801547e:	f000 f9d9 	bl	8015834 <SDMMC_GetCmdResp1>
 8015482:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015484:	69fb      	ldr	r3, [r7, #28]
}
 8015486:	4618      	mov	r0, r3
 8015488:	3720      	adds	r7, #32
 801548a:	46bd      	mov	sp, r7
 801548c:	bd80      	pop	{r7, pc}

0801548e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801548e:	b580      	push	{r7, lr}
 8015490:	b088      	sub	sp, #32
 8015492:	af00      	add	r7, sp, #0
 8015494:	6078      	str	r0, [r7, #4]
 8015496:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8015498:	683b      	ldr	r3, [r7, #0]
 801549a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801549c:	2311      	movs	r3, #17
 801549e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80154a0:	2340      	movs	r3, #64	@ 0x40
 80154a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80154a4:	2300      	movs	r3, #0
 80154a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80154a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80154ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80154ae:	f107 0308 	add.w	r3, r7, #8
 80154b2:	4619      	mov	r1, r3
 80154b4:	6878      	ldr	r0, [r7, #4]
 80154b6:	f7ff ff52 	bl	801535e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80154ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80154be:	2111      	movs	r1, #17
 80154c0:	6878      	ldr	r0, [r7, #4]
 80154c2:	f000 f9b7 	bl	8015834 <SDMMC_GetCmdResp1>
 80154c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80154c8:	69fb      	ldr	r3, [r7, #28]
}
 80154ca:	4618      	mov	r0, r3
 80154cc:	3720      	adds	r7, #32
 80154ce:	46bd      	mov	sp, r7
 80154d0:	bd80      	pop	{r7, pc}

080154d2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80154d2:	b580      	push	{r7, lr}
 80154d4:	b088      	sub	sp, #32
 80154d6:	af00      	add	r7, sp, #0
 80154d8:	6078      	str	r0, [r7, #4]
 80154da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80154dc:	683b      	ldr	r3, [r7, #0]
 80154de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80154e0:	2312      	movs	r3, #18
 80154e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80154e4:	2340      	movs	r3, #64	@ 0x40
 80154e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80154e8:	2300      	movs	r3, #0
 80154ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80154ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80154f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80154f2:	f107 0308 	add.w	r3, r7, #8
 80154f6:	4619      	mov	r1, r3
 80154f8:	6878      	ldr	r0, [r7, #4]
 80154fa:	f7ff ff30 	bl	801535e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80154fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015502:	2112      	movs	r1, #18
 8015504:	6878      	ldr	r0, [r7, #4]
 8015506:	f000 f995 	bl	8015834 <SDMMC_GetCmdResp1>
 801550a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801550c:	69fb      	ldr	r3, [r7, #28]
}
 801550e:	4618      	mov	r0, r3
 8015510:	3720      	adds	r7, #32
 8015512:	46bd      	mov	sp, r7
 8015514:	bd80      	pop	{r7, pc}

08015516 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8015516:	b580      	push	{r7, lr}
 8015518:	b088      	sub	sp, #32
 801551a:	af00      	add	r7, sp, #0
 801551c:	6078      	str	r0, [r7, #4]
 801551e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8015520:	683b      	ldr	r3, [r7, #0]
 8015522:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8015524:	2318      	movs	r3, #24
 8015526:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8015528:	2340      	movs	r3, #64	@ 0x40
 801552a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801552c:	2300      	movs	r3, #0
 801552e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8015530:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015534:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8015536:	f107 0308 	add.w	r3, r7, #8
 801553a:	4619      	mov	r1, r3
 801553c:	6878      	ldr	r0, [r7, #4]
 801553e:	f7ff ff0e 	bl	801535e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8015542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015546:	2118      	movs	r1, #24
 8015548:	6878      	ldr	r0, [r7, #4]
 801554a:	f000 f973 	bl	8015834 <SDMMC_GetCmdResp1>
 801554e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015550:	69fb      	ldr	r3, [r7, #28]
}
 8015552:	4618      	mov	r0, r3
 8015554:	3720      	adds	r7, #32
 8015556:	46bd      	mov	sp, r7
 8015558:	bd80      	pop	{r7, pc}

0801555a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801555a:	b580      	push	{r7, lr}
 801555c:	b088      	sub	sp, #32
 801555e:	af00      	add	r7, sp, #0
 8015560:	6078      	str	r0, [r7, #4]
 8015562:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8015568:	2319      	movs	r3, #25
 801556a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801556c:	2340      	movs	r3, #64	@ 0x40
 801556e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8015570:	2300      	movs	r3, #0
 8015572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8015574:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015578:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801557a:	f107 0308 	add.w	r3, r7, #8
 801557e:	4619      	mov	r1, r3
 8015580:	6878      	ldr	r0, [r7, #4]
 8015582:	f7ff feec 	bl	801535e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8015586:	f241 3288 	movw	r2, #5000	@ 0x1388
 801558a:	2119      	movs	r1, #25
 801558c:	6878      	ldr	r0, [r7, #4]
 801558e:	f000 f951 	bl	8015834 <SDMMC_GetCmdResp1>
 8015592:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015594:	69fb      	ldr	r3, [r7, #28]
}
 8015596:	4618      	mov	r0, r3
 8015598:	3720      	adds	r7, #32
 801559a:	46bd      	mov	sp, r7
 801559c:	bd80      	pop	{r7, pc}
	...

080155a0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b088      	sub	sp, #32
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80155a8:	2300      	movs	r3, #0
 80155aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80155ac:	230c      	movs	r3, #12
 80155ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80155b0:	2340      	movs	r3, #64	@ 0x40
 80155b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80155b4:	2300      	movs	r3, #0
 80155b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80155b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80155bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80155be:	f107 0308 	add.w	r3, r7, #8
 80155c2:	4619      	mov	r1, r3
 80155c4:	6878      	ldr	r0, [r7, #4]
 80155c6:	f7ff feca 	bl	801535e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80155ca:	4a05      	ldr	r2, [pc, #20]	@ (80155e0 <SDMMC_CmdStopTransfer+0x40>)
 80155cc:	210c      	movs	r1, #12
 80155ce:	6878      	ldr	r0, [r7, #4]
 80155d0:	f000 f930 	bl	8015834 <SDMMC_GetCmdResp1>
 80155d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80155d6:	69fb      	ldr	r3, [r7, #28]
}
 80155d8:	4618      	mov	r0, r3
 80155da:	3720      	adds	r7, #32
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}
 80155e0:	05f5e100 	.word	0x05f5e100

080155e4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b08a      	sub	sp, #40	@ 0x28
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	60f8      	str	r0, [r7, #12]
 80155ec:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80155f0:	683b      	ldr	r3, [r7, #0]
 80155f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80155f4:	2307      	movs	r3, #7
 80155f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80155f8:	2340      	movs	r3, #64	@ 0x40
 80155fa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80155fc:	2300      	movs	r3, #0
 80155fe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8015600:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015604:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8015606:	f107 0310 	add.w	r3, r7, #16
 801560a:	4619      	mov	r1, r3
 801560c:	68f8      	ldr	r0, [r7, #12]
 801560e:	f7ff fea6 	bl	801535e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8015612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015616:	2107      	movs	r1, #7
 8015618:	68f8      	ldr	r0, [r7, #12]
 801561a:	f000 f90b 	bl	8015834 <SDMMC_GetCmdResp1>
 801561e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8015620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015622:	4618      	mov	r0, r3
 8015624:	3728      	adds	r7, #40	@ 0x28
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}

0801562a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801562a:	b580      	push	{r7, lr}
 801562c:	b088      	sub	sp, #32
 801562e:	af00      	add	r7, sp, #0
 8015630:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8015632:	2300      	movs	r3, #0
 8015634:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8015636:	2300      	movs	r3, #0
 8015638:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801563a:	2300      	movs	r3, #0
 801563c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801563e:	2300      	movs	r3, #0
 8015640:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8015642:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015646:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8015648:	f107 0308 	add.w	r3, r7, #8
 801564c:	4619      	mov	r1, r3
 801564e:	6878      	ldr	r0, [r7, #4]
 8015650:	f7ff fe85 	bl	801535e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8015654:	6878      	ldr	r0, [r7, #4]
 8015656:	f000 fa61 	bl	8015b1c <SDMMC_GetCmdError>
 801565a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801565c:	69fb      	ldr	r3, [r7, #28]
}
 801565e:	4618      	mov	r0, r3
 8015660:	3720      	adds	r7, #32
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}

08015666 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8015666:	b580      	push	{r7, lr}
 8015668:	b088      	sub	sp, #32
 801566a:	af00      	add	r7, sp, #0
 801566c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801566e:	2300      	movs	r3, #0
 8015670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8015672:	2302      	movs	r3, #2
 8015674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8015676:	23c0      	movs	r3, #192	@ 0xc0
 8015678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801567a:	2300      	movs	r3, #0
 801567c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801567e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015682:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8015684:	f107 0308 	add.w	r3, r7, #8
 8015688:	4619      	mov	r1, r3
 801568a:	6878      	ldr	r0, [r7, #4]
 801568c:	f7ff fe67 	bl	801535e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8015690:	6878      	ldr	r0, [r7, #4]
 8015692:	f000 f9bd 	bl	8015a10 <SDMMC_GetCmdResp2>
 8015696:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015698:	69fb      	ldr	r3, [r7, #28]
}
 801569a:	4618      	mov	r0, r3
 801569c:	3720      	adds	r7, #32
 801569e:	46bd      	mov	sp, r7
 80156a0:	bd80      	pop	{r7, pc}

080156a2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80156a2:	b580      	push	{r7, lr}
 80156a4:	b088      	sub	sp, #32
 80156a6:	af00      	add	r7, sp, #0
 80156a8:	6078      	str	r0, [r7, #4]
 80156aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80156ac:	683b      	ldr	r3, [r7, #0]
 80156ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80156b0:	2309      	movs	r3, #9
 80156b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80156b4:	23c0      	movs	r3, #192	@ 0xc0
 80156b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80156b8:	2300      	movs	r3, #0
 80156ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80156bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80156c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80156c2:	f107 0308 	add.w	r3, r7, #8
 80156c6:	4619      	mov	r1, r3
 80156c8:	6878      	ldr	r0, [r7, #4]
 80156ca:	f7ff fe48 	bl	801535e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80156ce:	6878      	ldr	r0, [r7, #4]
 80156d0:	f000 f99e 	bl	8015a10 <SDMMC_GetCmdResp2>
 80156d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80156d6:	69fb      	ldr	r3, [r7, #28]
}
 80156d8:	4618      	mov	r0, r3
 80156da:	3720      	adds	r7, #32
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd80      	pop	{r7, pc}

080156e0 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDIOx Pointer to SDIO register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDIO_TypeDef *SDIOx, uint16_t RCA)
{
 80156e0:	b580      	push	{r7, lr}
 80156e2:	b088      	sub	sp, #32
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]
 80156e8:	460b      	mov	r3, r1
 80156ea:	807b      	strh	r3, [r7, #2]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 80156ec:	887b      	ldrh	r3, [r7, #2]
 80156ee:	041b      	lsls	r3, r3, #16
 80156f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80156f2:	2303      	movs	r3, #3
 80156f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80156f6:	2340      	movs	r3, #64	@ 0x40
 80156f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80156fa:	2300      	movs	r3, #0
 80156fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80156fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015702:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8015704:	f107 0308 	add.w	r3, r7, #8
 8015708:	4619      	mov	r1, r3
 801570a:	6878      	ldr	r0, [r7, #4]
 801570c:	f7ff fe27 	bl	801535e <SDIO_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_REL_ADDR, SDIO_CMDTIMEOUT);
 8015710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015714:	2103      	movs	r1, #3
 8015716:	6878      	ldr	r0, [r7, #4]
 8015718:	f000 f88c 	bl	8015834 <SDMMC_GetCmdResp1>
 801571c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801571e:	69fb      	ldr	r3, [r7, #28]
}
 8015720:	4618      	mov	r0, r3
 8015722:	3720      	adds	r7, #32
 8015724:	46bd      	mov	sp, r7
 8015726:	bd80      	pop	{r7, pc}

08015728 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b088      	sub	sp, #32
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
 8015730:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8015732:	683b      	ldr	r3, [r7, #0]
 8015734:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8015736:	230d      	movs	r3, #13
 8015738:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801573a:	2340      	movs	r3, #64	@ 0x40
 801573c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801573e:	2300      	movs	r3, #0
 8015740:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8015742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015746:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8015748:	f107 0308 	add.w	r3, r7, #8
 801574c:	4619      	mov	r1, r3
 801574e:	6878      	ldr	r0, [r7, #4]
 8015750:	f7ff fe05 	bl	801535e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8015754:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015758:	210d      	movs	r1, #13
 801575a:	6878      	ldr	r0, [r7, #4]
 801575c:	f000 f86a 	bl	8015834 <SDMMC_GetCmdResp1>
 8015760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015762:	69fb      	ldr	r3, [r7, #28]
}
 8015764:	4618      	mov	r0, r3
 8015766:	3720      	adds	r7, #32
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}

0801576c <SDMMC_CmdOpCondition>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801576c:	b580      	push	{r7, lr}
 801576e:	b088      	sub	sp, #32
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
 8015774:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8015776:	683b      	ldr	r3, [r7, #0]
 8015778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 801577a:	2301      	movs	r3, #1
 801577c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801577e:	2340      	movs	r3, #64	@ 0x40
 8015780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8015782:	2300      	movs	r3, #0
 8015784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8015786:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801578a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801578c:	f107 0308 	add.w	r3, r7, #8
 8015790:	4619      	mov	r1, r3
 8015792:	6878      	ldr	r0, [r7, #4]
 8015794:	f7ff fde3 	bl	801535e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8015798:	6878      	ldr	r0, [r7, #4]
 801579a:	f000 f981 	bl	8015aa0 <SDMMC_GetCmdResp3>
 801579e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80157a0:	69fb      	ldr	r3, [r7, #28]
}
 80157a2:	4618      	mov	r0, r3
 80157a4:	3720      	adds	r7, #32
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}

080157aa <SDMMC_CmdSwitch>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80157aa:	b580      	push	{r7, lr}
 80157ac:	b088      	sub	sp, #32
 80157ae:	af00      	add	r7, sp, #0
 80157b0:	6078      	str	r0, [r7, #4]
 80157b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN */
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80157b8:	2306      	movs	r3, #6
 80157ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80157bc:	2340      	movs	r3, #64	@ 0x40
 80157be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80157c0:	2300      	movs	r3, #0
 80157c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80157c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80157c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80157ca:	f107 0308 	add.w	r3, r7, #8
 80157ce:	4619      	mov	r1, r3
 80157d0:	6878      	ldr	r0, [r7, #4]
 80157d2:	f7ff fdc4 	bl	801535e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SWITCH, SDIO_CMDTIMEOUT);
 80157d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80157da:	2106      	movs	r1, #6
 80157dc:	6878      	ldr	r0, [r7, #4]
 80157de:	f000 f829 	bl	8015834 <SDMMC_GetCmdResp1>
 80157e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80157e4:	69fb      	ldr	r3, [r7, #28]
}
 80157e6:	4618      	mov	r0, r3
 80157e8:	3720      	adds	r7, #32
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd80      	pop	{r7, pc}

080157ee <SDMMC_CmdSendEXTCSD>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80157ee:	b580      	push	{r7, lr}
 80157f0:	b088      	sub	sp, #32
 80157f2:	af00      	add	r7, sp, #0
 80157f4:	6078      	str	r0, [r7, #4]
 80157f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80157f8:	683b      	ldr	r3, [r7, #0]
 80157fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80157fc:	2308      	movs	r3, #8
 80157fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8015800:	2340      	movs	r3, #64	@ 0x40
 8015802:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8015804:	2300      	movs	r3, #0
 8015806:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8015808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801580c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801580e:	f107 0308 	add.w	r3, r7, #8
 8015812:	4619      	mov	r1, r3
 8015814:	6878      	ldr	r0, [r7, #4]
 8015816:	f7ff fda2 	bl	801535e <SDIO_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SEND_EXT_CSD,SDIO_CMDTIMEOUT);
 801581a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801581e:	2108      	movs	r1, #8
 8015820:	6878      	ldr	r0, [r7, #4]
 8015822:	f000 f807 	bl	8015834 <SDMMC_GetCmdResp1>
 8015826:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015828:	69fb      	ldr	r3, [r7, #28]
}
 801582a:	4618      	mov	r0, r3
 801582c:	3720      	adds	r7, #32
 801582e:	46bd      	mov	sp, r7
 8015830:	bd80      	pop	{r7, pc}
	...

08015834 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b088      	sub	sp, #32
 8015838:	af00      	add	r7, sp, #0
 801583a:	60f8      	str	r0, [r7, #12]
 801583c:	460b      	mov	r3, r1
 801583e:	607a      	str	r2, [r7, #4]
 8015840:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8015842:	4b70      	ldr	r3, [pc, #448]	@ (8015a04 <SDMMC_GetCmdResp1+0x1d0>)
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	4a70      	ldr	r2, [pc, #448]	@ (8015a08 <SDMMC_GetCmdResp1+0x1d4>)
 8015848:	fba2 2303 	umull	r2, r3, r2, r3
 801584c:	0a5a      	lsrs	r2, r3, #9
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	fb02 f303 	mul.w	r3, r2, r3
 8015854:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8015856:	69fb      	ldr	r3, [r7, #28]
 8015858:	1e5a      	subs	r2, r3, #1
 801585a:	61fa      	str	r2, [r7, #28]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d102      	bne.n	8015866 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015860:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8015864:	e0c9      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801586a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801586c:	69bb      	ldr	r3, [r7, #24]
 801586e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8015872:	2b00      	cmp	r3, #0
 8015874:	d0ef      	beq.n	8015856 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8015876:	69bb      	ldr	r3, [r7, #24]
 8015878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801587c:	2b00      	cmp	r3, #0
 801587e:	d1ea      	bne.n	8015856 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015884:	f003 0304 	and.w	r3, r3, #4
 8015888:	2b00      	cmp	r3, #0
 801588a:	d004      	beq.n	8015896 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	2204      	movs	r2, #4
 8015890:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8015892:	2304      	movs	r3, #4
 8015894:	e0b1      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801589a:	f003 0301 	and.w	r3, r3, #1
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d004      	beq.n	80158ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	2201      	movs	r2, #1
 80158a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80158a8:	2301      	movs	r3, #1
 80158aa:	e0a6      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	22c5      	movs	r2, #197	@ 0xc5
 80158b0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80158b2:	68f8      	ldr	r0, [r7, #12]
 80158b4:	f7ff fd7d 	bl	80153b2 <SDIO_GetCommandResponse>
 80158b8:	4603      	mov	r3, r0
 80158ba:	461a      	mov	r2, r3
 80158bc:	7afb      	ldrb	r3, [r7, #11]
 80158be:	4293      	cmp	r3, r2
 80158c0:	d001      	beq.n	80158c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80158c2:	2301      	movs	r3, #1
 80158c4:	e099      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80158c6:	2100      	movs	r1, #0
 80158c8:	68f8      	ldr	r0, [r7, #12]
 80158ca:	f7ff fd7f 	bl	80153cc <SDIO_GetResponse>
 80158ce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80158d0:	697a      	ldr	r2, [r7, #20]
 80158d2:	4b4e      	ldr	r3, [pc, #312]	@ (8015a0c <SDMMC_GetCmdResp1+0x1d8>)
 80158d4:	4013      	ands	r3, r2
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d101      	bne.n	80158de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80158da:	2300      	movs	r3, #0
 80158dc:	e08d      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80158de:	697b      	ldr	r3, [r7, #20]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	da02      	bge.n	80158ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80158e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80158e8:	e087      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80158ea:	697b      	ldr	r3, [r7, #20]
 80158ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d001      	beq.n	80158f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80158f4:	2340      	movs	r3, #64	@ 0x40
 80158f6:	e080      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80158f8:	697b      	ldr	r3, [r7, #20]
 80158fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d001      	beq.n	8015906 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8015902:	2380      	movs	r3, #128	@ 0x80
 8015904:	e079      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8015906:	697b      	ldr	r3, [r7, #20]
 8015908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801590c:	2b00      	cmp	r3, #0
 801590e:	d002      	beq.n	8015916 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8015910:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015914:	e071      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8015916:	697b      	ldr	r3, [r7, #20]
 8015918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801591c:	2b00      	cmp	r3, #0
 801591e:	d002      	beq.n	8015926 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8015920:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015924:	e069      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8015926:	697b      	ldr	r3, [r7, #20]
 8015928:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801592c:	2b00      	cmp	r3, #0
 801592e:	d002      	beq.n	8015936 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8015930:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015934:	e061      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8015936:	697b      	ldr	r3, [r7, #20]
 8015938:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801593c:	2b00      	cmp	r3, #0
 801593e:	d002      	beq.n	8015946 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8015940:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015944:	e059      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8015946:	697b      	ldr	r3, [r7, #20]
 8015948:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801594c:	2b00      	cmp	r3, #0
 801594e:	d002      	beq.n	8015956 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8015950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015954:	e051      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8015956:	697b      	ldr	r3, [r7, #20]
 8015958:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801595c:	2b00      	cmp	r3, #0
 801595e:	d002      	beq.n	8015966 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8015960:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8015964:	e049      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8015966:	697b      	ldr	r3, [r7, #20]
 8015968:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801596c:	2b00      	cmp	r3, #0
 801596e:	d002      	beq.n	8015976 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8015970:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8015974:	e041      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8015976:	697b      	ldr	r3, [r7, #20]
 8015978:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801597c:	2b00      	cmp	r3, #0
 801597e:	d002      	beq.n	8015986 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8015980:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015984:	e039      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8015986:	697b      	ldr	r3, [r7, #20]
 8015988:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801598c:	2b00      	cmp	r3, #0
 801598e:	d002      	beq.n	8015996 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8015990:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8015994:	e031      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8015996:	697b      	ldr	r3, [r7, #20]
 8015998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801599c:	2b00      	cmp	r3, #0
 801599e:	d002      	beq.n	80159a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80159a0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80159a4:	e029      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80159a6:	697b      	ldr	r3, [r7, #20]
 80159a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d002      	beq.n	80159b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80159b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80159b4:	e021      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80159b6:	697b      	ldr	r3, [r7, #20]
 80159b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d002      	beq.n	80159c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80159c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80159c4:	e019      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80159c6:	697b      	ldr	r3, [r7, #20]
 80159c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d002      	beq.n	80159d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80159d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80159d4:	e011      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80159d6:	697b      	ldr	r3, [r7, #20]
 80159d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d002      	beq.n	80159e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80159e0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80159e4:	e009      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80159e6:	697b      	ldr	r3, [r7, #20]
 80159e8:	f003 0308 	and.w	r3, r3, #8
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d002      	beq.n	80159f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80159f0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80159f4:	e001      	b.n	80159fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80159f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80159fa:	4618      	mov	r0, r3
 80159fc:	3720      	adds	r7, #32
 80159fe:	46bd      	mov	sp, r7
 8015a00:	bd80      	pop	{r7, pc}
 8015a02:	bf00      	nop
 8015a04:	20000200 	.word	0x20000200
 8015a08:	10624dd3 	.word	0x10624dd3
 8015a0c:	fdffe008 	.word	0xfdffe008

08015a10 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8015a10:	b480      	push	{r7}
 8015a12:	b085      	sub	sp, #20
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8015a18:	4b1f      	ldr	r3, [pc, #124]	@ (8015a98 <SDMMC_GetCmdResp2+0x88>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8015a9c <SDMMC_GetCmdResp2+0x8c>)
 8015a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8015a22:	0a5b      	lsrs	r3, r3, #9
 8015a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015a28:	fb02 f303 	mul.w	r3, r2, r3
 8015a2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	1e5a      	subs	r2, r3, #1
 8015a32:	60fa      	str	r2, [r7, #12]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d102      	bne.n	8015a3e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015a38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8015a3c:	e026      	b.n	8015a8c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a42:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8015a44:	68bb      	ldr	r3, [r7, #8]
 8015a46:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d0ef      	beq.n	8015a2e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8015a4e:	68bb      	ldr	r3, [r7, #8]
 8015a50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d1ea      	bne.n	8015a2e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a5c:	f003 0304 	and.w	r3, r3, #4
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d004      	beq.n	8015a6e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	2204      	movs	r2, #4
 8015a68:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8015a6a:	2304      	movs	r3, #4
 8015a6c:	e00e      	b.n	8015a8c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a72:	f003 0301 	and.w	r3, r3, #1
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d004      	beq.n	8015a84 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	2201      	movs	r2, #1
 8015a7e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015a80:	2301      	movs	r3, #1
 8015a82:	e003      	b.n	8015a8c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	22c5      	movs	r2, #197	@ 0xc5
 8015a88:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8015a8a:	2300      	movs	r3, #0
}
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	3714      	adds	r7, #20
 8015a90:	46bd      	mov	sp, r7
 8015a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a96:	4770      	bx	lr
 8015a98:	20000200 	.word	0x20000200
 8015a9c:	10624dd3 	.word	0x10624dd3

08015aa0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8015aa0:	b480      	push	{r7}
 8015aa2:	b085      	sub	sp, #20
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8015aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8015b14 <SDMMC_GetCmdResp3+0x74>)
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	4a1a      	ldr	r2, [pc, #104]	@ (8015b18 <SDMMC_GetCmdResp3+0x78>)
 8015aae:	fba2 2303 	umull	r2, r3, r2, r3
 8015ab2:	0a5b      	lsrs	r3, r3, #9
 8015ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015ab8:	fb02 f303 	mul.w	r3, r2, r3
 8015abc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	1e5a      	subs	r2, r3, #1
 8015ac2:	60fa      	str	r2, [r7, #12]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d102      	bne.n	8015ace <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015ac8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8015acc:	e01b      	b.n	8015b06 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015ad2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8015ad4:	68bb      	ldr	r3, [r7, #8]
 8015ad6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d0ef      	beq.n	8015abe <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8015ade:	68bb      	ldr	r3, [r7, #8]
 8015ae0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d1ea      	bne.n	8015abe <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015aec:	f003 0304 	and.w	r3, r3, #4
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d004      	beq.n	8015afe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	2204      	movs	r2, #4
 8015af8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8015afa:	2304      	movs	r3, #4
 8015afc:	e003      	b.n	8015b06 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	22c5      	movs	r2, #197	@ 0xc5
 8015b02:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8015b04:	2300      	movs	r3, #0
}
 8015b06:	4618      	mov	r0, r3
 8015b08:	3714      	adds	r7, #20
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b10:	4770      	bx	lr
 8015b12:	bf00      	nop
 8015b14:	20000200 	.word	0x20000200
 8015b18:	10624dd3 	.word	0x10624dd3

08015b1c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8015b1c:	b480      	push	{r7}
 8015b1e:	b085      	sub	sp, #20
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8015b24:	4b11      	ldr	r3, [pc, #68]	@ (8015b6c <SDMMC_GetCmdError+0x50>)
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	4a11      	ldr	r2, [pc, #68]	@ (8015b70 <SDMMC_GetCmdError+0x54>)
 8015b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8015b2e:	0a5b      	lsrs	r3, r3, #9
 8015b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015b34:	fb02 f303 	mul.w	r3, r2, r3
 8015b38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	1e5a      	subs	r2, r3, #1
 8015b3e:	60fa      	str	r2, [r7, #12]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d102      	bne.n	8015b4a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015b44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8015b48:	e009      	b.n	8015b5e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d0f1      	beq.n	8015b3a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	22c5      	movs	r2, #197	@ 0xc5
 8015b5a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8015b5c:	2300      	movs	r3, #0
}
 8015b5e:	4618      	mov	r0, r3
 8015b60:	3714      	adds	r7, #20
 8015b62:	46bd      	mov	sp, r7
 8015b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b68:	4770      	bx	lr
 8015b6a:	bf00      	nop
 8015b6c:	20000200 	.word	0x20000200
 8015b70:	10624dd3 	.word	0x10624dd3

08015b74 <calloc>:
 8015b74:	4b02      	ldr	r3, [pc, #8]	@ (8015b80 <calloc+0xc>)
 8015b76:	460a      	mov	r2, r1
 8015b78:	4601      	mov	r1, r0
 8015b7a:	6818      	ldr	r0, [r3, #0]
 8015b7c:	f000 b802 	b.w	8015b84 <_calloc_r>
 8015b80:	20000218 	.word	0x20000218

08015b84 <_calloc_r>:
 8015b84:	b570      	push	{r4, r5, r6, lr}
 8015b86:	fba1 5402 	umull	r5, r4, r1, r2
 8015b8a:	b934      	cbnz	r4, 8015b9a <_calloc_r+0x16>
 8015b8c:	4629      	mov	r1, r5
 8015b8e:	f000 f83f 	bl	8015c10 <_malloc_r>
 8015b92:	4606      	mov	r6, r0
 8015b94:	b928      	cbnz	r0, 8015ba2 <_calloc_r+0x1e>
 8015b96:	4630      	mov	r0, r6
 8015b98:	bd70      	pop	{r4, r5, r6, pc}
 8015b9a:	220c      	movs	r2, #12
 8015b9c:	6002      	str	r2, [r0, #0]
 8015b9e:	2600      	movs	r6, #0
 8015ba0:	e7f9      	b.n	8015b96 <_calloc_r+0x12>
 8015ba2:	462a      	mov	r2, r5
 8015ba4:	4621      	mov	r1, r4
 8015ba6:	f001 fa5f 	bl	8017068 <memset>
 8015baa:	e7f4      	b.n	8015b96 <_calloc_r+0x12>

08015bac <malloc>:
 8015bac:	4b02      	ldr	r3, [pc, #8]	@ (8015bb8 <malloc+0xc>)
 8015bae:	4601      	mov	r1, r0
 8015bb0:	6818      	ldr	r0, [r3, #0]
 8015bb2:	f000 b82d 	b.w	8015c10 <_malloc_r>
 8015bb6:	bf00      	nop
 8015bb8:	20000218 	.word	0x20000218

08015bbc <free>:
 8015bbc:	4b02      	ldr	r3, [pc, #8]	@ (8015bc8 <free+0xc>)
 8015bbe:	4601      	mov	r1, r0
 8015bc0:	6818      	ldr	r0, [r3, #0]
 8015bc2:	f002 b961 	b.w	8017e88 <_free_r>
 8015bc6:	bf00      	nop
 8015bc8:	20000218 	.word	0x20000218

08015bcc <sbrk_aligned>:
 8015bcc:	b570      	push	{r4, r5, r6, lr}
 8015bce:	4e0f      	ldr	r6, [pc, #60]	@ (8015c0c <sbrk_aligned+0x40>)
 8015bd0:	460c      	mov	r4, r1
 8015bd2:	6831      	ldr	r1, [r6, #0]
 8015bd4:	4605      	mov	r5, r0
 8015bd6:	b911      	cbnz	r1, 8015bde <sbrk_aligned+0x12>
 8015bd8:	f001 fa9a 	bl	8017110 <_sbrk_r>
 8015bdc:	6030      	str	r0, [r6, #0]
 8015bde:	4621      	mov	r1, r4
 8015be0:	4628      	mov	r0, r5
 8015be2:	f001 fa95 	bl	8017110 <_sbrk_r>
 8015be6:	1c43      	adds	r3, r0, #1
 8015be8:	d103      	bne.n	8015bf2 <sbrk_aligned+0x26>
 8015bea:	f04f 34ff 	mov.w	r4, #4294967295
 8015bee:	4620      	mov	r0, r4
 8015bf0:	bd70      	pop	{r4, r5, r6, pc}
 8015bf2:	1cc4      	adds	r4, r0, #3
 8015bf4:	f024 0403 	bic.w	r4, r4, #3
 8015bf8:	42a0      	cmp	r0, r4
 8015bfa:	d0f8      	beq.n	8015bee <sbrk_aligned+0x22>
 8015bfc:	1a21      	subs	r1, r4, r0
 8015bfe:	4628      	mov	r0, r5
 8015c00:	f001 fa86 	bl	8017110 <_sbrk_r>
 8015c04:	3001      	adds	r0, #1
 8015c06:	d1f2      	bne.n	8015bee <sbrk_aligned+0x22>
 8015c08:	e7ef      	b.n	8015bea <sbrk_aligned+0x1e>
 8015c0a:	bf00      	nop
 8015c0c:	200042ec 	.word	0x200042ec

08015c10 <_malloc_r>:
 8015c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c14:	1ccd      	adds	r5, r1, #3
 8015c16:	f025 0503 	bic.w	r5, r5, #3
 8015c1a:	3508      	adds	r5, #8
 8015c1c:	2d0c      	cmp	r5, #12
 8015c1e:	bf38      	it	cc
 8015c20:	250c      	movcc	r5, #12
 8015c22:	2d00      	cmp	r5, #0
 8015c24:	4606      	mov	r6, r0
 8015c26:	db01      	blt.n	8015c2c <_malloc_r+0x1c>
 8015c28:	42a9      	cmp	r1, r5
 8015c2a:	d904      	bls.n	8015c36 <_malloc_r+0x26>
 8015c2c:	230c      	movs	r3, #12
 8015c2e:	6033      	str	r3, [r6, #0]
 8015c30:	2000      	movs	r0, #0
 8015c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015d0c <_malloc_r+0xfc>
 8015c3a:	f000 f869 	bl	8015d10 <__malloc_lock>
 8015c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8015c42:	461c      	mov	r4, r3
 8015c44:	bb44      	cbnz	r4, 8015c98 <_malloc_r+0x88>
 8015c46:	4629      	mov	r1, r5
 8015c48:	4630      	mov	r0, r6
 8015c4a:	f7ff ffbf 	bl	8015bcc <sbrk_aligned>
 8015c4e:	1c43      	adds	r3, r0, #1
 8015c50:	4604      	mov	r4, r0
 8015c52:	d158      	bne.n	8015d06 <_malloc_r+0xf6>
 8015c54:	f8d8 4000 	ldr.w	r4, [r8]
 8015c58:	4627      	mov	r7, r4
 8015c5a:	2f00      	cmp	r7, #0
 8015c5c:	d143      	bne.n	8015ce6 <_malloc_r+0xd6>
 8015c5e:	2c00      	cmp	r4, #0
 8015c60:	d04b      	beq.n	8015cfa <_malloc_r+0xea>
 8015c62:	6823      	ldr	r3, [r4, #0]
 8015c64:	4639      	mov	r1, r7
 8015c66:	4630      	mov	r0, r6
 8015c68:	eb04 0903 	add.w	r9, r4, r3
 8015c6c:	f001 fa50 	bl	8017110 <_sbrk_r>
 8015c70:	4581      	cmp	r9, r0
 8015c72:	d142      	bne.n	8015cfa <_malloc_r+0xea>
 8015c74:	6821      	ldr	r1, [r4, #0]
 8015c76:	1a6d      	subs	r5, r5, r1
 8015c78:	4629      	mov	r1, r5
 8015c7a:	4630      	mov	r0, r6
 8015c7c:	f7ff ffa6 	bl	8015bcc <sbrk_aligned>
 8015c80:	3001      	adds	r0, #1
 8015c82:	d03a      	beq.n	8015cfa <_malloc_r+0xea>
 8015c84:	6823      	ldr	r3, [r4, #0]
 8015c86:	442b      	add	r3, r5
 8015c88:	6023      	str	r3, [r4, #0]
 8015c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8015c8e:	685a      	ldr	r2, [r3, #4]
 8015c90:	bb62      	cbnz	r2, 8015cec <_malloc_r+0xdc>
 8015c92:	f8c8 7000 	str.w	r7, [r8]
 8015c96:	e00f      	b.n	8015cb8 <_malloc_r+0xa8>
 8015c98:	6822      	ldr	r2, [r4, #0]
 8015c9a:	1b52      	subs	r2, r2, r5
 8015c9c:	d420      	bmi.n	8015ce0 <_malloc_r+0xd0>
 8015c9e:	2a0b      	cmp	r2, #11
 8015ca0:	d917      	bls.n	8015cd2 <_malloc_r+0xc2>
 8015ca2:	1961      	adds	r1, r4, r5
 8015ca4:	42a3      	cmp	r3, r4
 8015ca6:	6025      	str	r5, [r4, #0]
 8015ca8:	bf18      	it	ne
 8015caa:	6059      	strne	r1, [r3, #4]
 8015cac:	6863      	ldr	r3, [r4, #4]
 8015cae:	bf08      	it	eq
 8015cb0:	f8c8 1000 	streq.w	r1, [r8]
 8015cb4:	5162      	str	r2, [r4, r5]
 8015cb6:	604b      	str	r3, [r1, #4]
 8015cb8:	4630      	mov	r0, r6
 8015cba:	f000 f82f 	bl	8015d1c <__malloc_unlock>
 8015cbe:	f104 000b 	add.w	r0, r4, #11
 8015cc2:	1d23      	adds	r3, r4, #4
 8015cc4:	f020 0007 	bic.w	r0, r0, #7
 8015cc8:	1ac2      	subs	r2, r0, r3
 8015cca:	bf1c      	itt	ne
 8015ccc:	1a1b      	subne	r3, r3, r0
 8015cce:	50a3      	strne	r3, [r4, r2]
 8015cd0:	e7af      	b.n	8015c32 <_malloc_r+0x22>
 8015cd2:	6862      	ldr	r2, [r4, #4]
 8015cd4:	42a3      	cmp	r3, r4
 8015cd6:	bf0c      	ite	eq
 8015cd8:	f8c8 2000 	streq.w	r2, [r8]
 8015cdc:	605a      	strne	r2, [r3, #4]
 8015cde:	e7eb      	b.n	8015cb8 <_malloc_r+0xa8>
 8015ce0:	4623      	mov	r3, r4
 8015ce2:	6864      	ldr	r4, [r4, #4]
 8015ce4:	e7ae      	b.n	8015c44 <_malloc_r+0x34>
 8015ce6:	463c      	mov	r4, r7
 8015ce8:	687f      	ldr	r7, [r7, #4]
 8015cea:	e7b6      	b.n	8015c5a <_malloc_r+0x4a>
 8015cec:	461a      	mov	r2, r3
 8015cee:	685b      	ldr	r3, [r3, #4]
 8015cf0:	42a3      	cmp	r3, r4
 8015cf2:	d1fb      	bne.n	8015cec <_malloc_r+0xdc>
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	6053      	str	r3, [r2, #4]
 8015cf8:	e7de      	b.n	8015cb8 <_malloc_r+0xa8>
 8015cfa:	230c      	movs	r3, #12
 8015cfc:	6033      	str	r3, [r6, #0]
 8015cfe:	4630      	mov	r0, r6
 8015d00:	f000 f80c 	bl	8015d1c <__malloc_unlock>
 8015d04:	e794      	b.n	8015c30 <_malloc_r+0x20>
 8015d06:	6005      	str	r5, [r0, #0]
 8015d08:	e7d6      	b.n	8015cb8 <_malloc_r+0xa8>
 8015d0a:	bf00      	nop
 8015d0c:	200042f0 	.word	0x200042f0

08015d10 <__malloc_lock>:
 8015d10:	4801      	ldr	r0, [pc, #4]	@ (8015d18 <__malloc_lock+0x8>)
 8015d12:	f001 ba4a 	b.w	80171aa <__retarget_lock_acquire_recursive>
 8015d16:	bf00      	nop
 8015d18:	20004434 	.word	0x20004434

08015d1c <__malloc_unlock>:
 8015d1c:	4801      	ldr	r0, [pc, #4]	@ (8015d24 <__malloc_unlock+0x8>)
 8015d1e:	f001 ba45 	b.w	80171ac <__retarget_lock_release_recursive>
 8015d22:	bf00      	nop
 8015d24:	20004434 	.word	0x20004434

08015d28 <__cvt>:
 8015d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015d2c:	ec57 6b10 	vmov	r6, r7, d0
 8015d30:	2f00      	cmp	r7, #0
 8015d32:	460c      	mov	r4, r1
 8015d34:	4619      	mov	r1, r3
 8015d36:	463b      	mov	r3, r7
 8015d38:	bfbb      	ittet	lt
 8015d3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8015d3e:	461f      	movlt	r7, r3
 8015d40:	2300      	movge	r3, #0
 8015d42:	232d      	movlt	r3, #45	@ 0x2d
 8015d44:	700b      	strb	r3, [r1, #0]
 8015d46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015d48:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8015d4c:	4691      	mov	r9, r2
 8015d4e:	f023 0820 	bic.w	r8, r3, #32
 8015d52:	bfbc      	itt	lt
 8015d54:	4632      	movlt	r2, r6
 8015d56:	4616      	movlt	r6, r2
 8015d58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8015d5c:	d005      	beq.n	8015d6a <__cvt+0x42>
 8015d5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8015d62:	d100      	bne.n	8015d66 <__cvt+0x3e>
 8015d64:	3401      	adds	r4, #1
 8015d66:	2102      	movs	r1, #2
 8015d68:	e000      	b.n	8015d6c <__cvt+0x44>
 8015d6a:	2103      	movs	r1, #3
 8015d6c:	ab03      	add	r3, sp, #12
 8015d6e:	9301      	str	r3, [sp, #4]
 8015d70:	ab02      	add	r3, sp, #8
 8015d72:	9300      	str	r3, [sp, #0]
 8015d74:	ec47 6b10 	vmov	d0, r6, r7
 8015d78:	4653      	mov	r3, sl
 8015d7a:	4622      	mov	r2, r4
 8015d7c:	f001 fab4 	bl	80172e8 <_dtoa_r>
 8015d80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8015d84:	4605      	mov	r5, r0
 8015d86:	d119      	bne.n	8015dbc <__cvt+0x94>
 8015d88:	f019 0f01 	tst.w	r9, #1
 8015d8c:	d00e      	beq.n	8015dac <__cvt+0x84>
 8015d8e:	eb00 0904 	add.w	r9, r0, r4
 8015d92:	2200      	movs	r2, #0
 8015d94:	2300      	movs	r3, #0
 8015d96:	4630      	mov	r0, r6
 8015d98:	4639      	mov	r1, r7
 8015d9a:	f7ea feb5 	bl	8000b08 <__aeabi_dcmpeq>
 8015d9e:	b108      	cbz	r0, 8015da4 <__cvt+0x7c>
 8015da0:	f8cd 900c 	str.w	r9, [sp, #12]
 8015da4:	2230      	movs	r2, #48	@ 0x30
 8015da6:	9b03      	ldr	r3, [sp, #12]
 8015da8:	454b      	cmp	r3, r9
 8015daa:	d31e      	bcc.n	8015dea <__cvt+0xc2>
 8015dac:	9b03      	ldr	r3, [sp, #12]
 8015dae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015db0:	1b5b      	subs	r3, r3, r5
 8015db2:	4628      	mov	r0, r5
 8015db4:	6013      	str	r3, [r2, #0]
 8015db6:	b004      	add	sp, #16
 8015db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8015dc0:	eb00 0904 	add.w	r9, r0, r4
 8015dc4:	d1e5      	bne.n	8015d92 <__cvt+0x6a>
 8015dc6:	7803      	ldrb	r3, [r0, #0]
 8015dc8:	2b30      	cmp	r3, #48	@ 0x30
 8015dca:	d10a      	bne.n	8015de2 <__cvt+0xba>
 8015dcc:	2200      	movs	r2, #0
 8015dce:	2300      	movs	r3, #0
 8015dd0:	4630      	mov	r0, r6
 8015dd2:	4639      	mov	r1, r7
 8015dd4:	f7ea fe98 	bl	8000b08 <__aeabi_dcmpeq>
 8015dd8:	b918      	cbnz	r0, 8015de2 <__cvt+0xba>
 8015dda:	f1c4 0401 	rsb	r4, r4, #1
 8015dde:	f8ca 4000 	str.w	r4, [sl]
 8015de2:	f8da 3000 	ldr.w	r3, [sl]
 8015de6:	4499      	add	r9, r3
 8015de8:	e7d3      	b.n	8015d92 <__cvt+0x6a>
 8015dea:	1c59      	adds	r1, r3, #1
 8015dec:	9103      	str	r1, [sp, #12]
 8015dee:	701a      	strb	r2, [r3, #0]
 8015df0:	e7d9      	b.n	8015da6 <__cvt+0x7e>

08015df2 <__exponent>:
 8015df2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015df4:	2900      	cmp	r1, #0
 8015df6:	bfba      	itte	lt
 8015df8:	4249      	neglt	r1, r1
 8015dfa:	232d      	movlt	r3, #45	@ 0x2d
 8015dfc:	232b      	movge	r3, #43	@ 0x2b
 8015dfe:	2909      	cmp	r1, #9
 8015e00:	7002      	strb	r2, [r0, #0]
 8015e02:	7043      	strb	r3, [r0, #1]
 8015e04:	dd29      	ble.n	8015e5a <__exponent+0x68>
 8015e06:	f10d 0307 	add.w	r3, sp, #7
 8015e0a:	461d      	mov	r5, r3
 8015e0c:	270a      	movs	r7, #10
 8015e0e:	461a      	mov	r2, r3
 8015e10:	fbb1 f6f7 	udiv	r6, r1, r7
 8015e14:	fb07 1416 	mls	r4, r7, r6, r1
 8015e18:	3430      	adds	r4, #48	@ 0x30
 8015e1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8015e1e:	460c      	mov	r4, r1
 8015e20:	2c63      	cmp	r4, #99	@ 0x63
 8015e22:	f103 33ff 	add.w	r3, r3, #4294967295
 8015e26:	4631      	mov	r1, r6
 8015e28:	dcf1      	bgt.n	8015e0e <__exponent+0x1c>
 8015e2a:	3130      	adds	r1, #48	@ 0x30
 8015e2c:	1e94      	subs	r4, r2, #2
 8015e2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015e32:	1c41      	adds	r1, r0, #1
 8015e34:	4623      	mov	r3, r4
 8015e36:	42ab      	cmp	r3, r5
 8015e38:	d30a      	bcc.n	8015e50 <__exponent+0x5e>
 8015e3a:	f10d 0309 	add.w	r3, sp, #9
 8015e3e:	1a9b      	subs	r3, r3, r2
 8015e40:	42ac      	cmp	r4, r5
 8015e42:	bf88      	it	hi
 8015e44:	2300      	movhi	r3, #0
 8015e46:	3302      	adds	r3, #2
 8015e48:	4403      	add	r3, r0
 8015e4a:	1a18      	subs	r0, r3, r0
 8015e4c:	b003      	add	sp, #12
 8015e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e50:	f813 6b01 	ldrb.w	r6, [r3], #1
 8015e54:	f801 6f01 	strb.w	r6, [r1, #1]!
 8015e58:	e7ed      	b.n	8015e36 <__exponent+0x44>
 8015e5a:	2330      	movs	r3, #48	@ 0x30
 8015e5c:	3130      	adds	r1, #48	@ 0x30
 8015e5e:	7083      	strb	r3, [r0, #2]
 8015e60:	70c1      	strb	r1, [r0, #3]
 8015e62:	1d03      	adds	r3, r0, #4
 8015e64:	e7f1      	b.n	8015e4a <__exponent+0x58>
	...

08015e68 <_printf_float>:
 8015e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e6c:	b08d      	sub	sp, #52	@ 0x34
 8015e6e:	460c      	mov	r4, r1
 8015e70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8015e74:	4616      	mov	r6, r2
 8015e76:	461f      	mov	r7, r3
 8015e78:	4605      	mov	r5, r0
 8015e7a:	f001 f911 	bl	80170a0 <_localeconv_r>
 8015e7e:	6803      	ldr	r3, [r0, #0]
 8015e80:	9304      	str	r3, [sp, #16]
 8015e82:	4618      	mov	r0, r3
 8015e84:	f7ea fa14 	bl	80002b0 <strlen>
 8015e88:	2300      	movs	r3, #0
 8015e8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8015e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8015e90:	9005      	str	r0, [sp, #20]
 8015e92:	3307      	adds	r3, #7
 8015e94:	f023 0307 	bic.w	r3, r3, #7
 8015e98:	f103 0208 	add.w	r2, r3, #8
 8015e9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015ea0:	f8d4 b000 	ldr.w	fp, [r4]
 8015ea4:	f8c8 2000 	str.w	r2, [r8]
 8015ea8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015eac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8015eb0:	9307      	str	r3, [sp, #28]
 8015eb2:	f8cd 8018 	str.w	r8, [sp, #24]
 8015eb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8015eba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015ebe:	4b9c      	ldr	r3, [pc, #624]	@ (8016130 <_printf_float+0x2c8>)
 8015ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8015ec4:	f7ea fe52 	bl	8000b6c <__aeabi_dcmpun>
 8015ec8:	bb70      	cbnz	r0, 8015f28 <_printf_float+0xc0>
 8015eca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015ece:	4b98      	ldr	r3, [pc, #608]	@ (8016130 <_printf_float+0x2c8>)
 8015ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8015ed4:	f7ea fe2c 	bl	8000b30 <__aeabi_dcmple>
 8015ed8:	bb30      	cbnz	r0, 8015f28 <_printf_float+0xc0>
 8015eda:	2200      	movs	r2, #0
 8015edc:	2300      	movs	r3, #0
 8015ede:	4640      	mov	r0, r8
 8015ee0:	4649      	mov	r1, r9
 8015ee2:	f7ea fe1b 	bl	8000b1c <__aeabi_dcmplt>
 8015ee6:	b110      	cbz	r0, 8015eee <_printf_float+0x86>
 8015ee8:	232d      	movs	r3, #45	@ 0x2d
 8015eea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015eee:	4a91      	ldr	r2, [pc, #580]	@ (8016134 <_printf_float+0x2cc>)
 8015ef0:	4b91      	ldr	r3, [pc, #580]	@ (8016138 <_printf_float+0x2d0>)
 8015ef2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8015ef6:	bf8c      	ite	hi
 8015ef8:	4690      	movhi	r8, r2
 8015efa:	4698      	movls	r8, r3
 8015efc:	2303      	movs	r3, #3
 8015efe:	6123      	str	r3, [r4, #16]
 8015f00:	f02b 0304 	bic.w	r3, fp, #4
 8015f04:	6023      	str	r3, [r4, #0]
 8015f06:	f04f 0900 	mov.w	r9, #0
 8015f0a:	9700      	str	r7, [sp, #0]
 8015f0c:	4633      	mov	r3, r6
 8015f0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8015f10:	4621      	mov	r1, r4
 8015f12:	4628      	mov	r0, r5
 8015f14:	f000 f9d2 	bl	80162bc <_printf_common>
 8015f18:	3001      	adds	r0, #1
 8015f1a:	f040 808d 	bne.w	8016038 <_printf_float+0x1d0>
 8015f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8015f22:	b00d      	add	sp, #52	@ 0x34
 8015f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f28:	4642      	mov	r2, r8
 8015f2a:	464b      	mov	r3, r9
 8015f2c:	4640      	mov	r0, r8
 8015f2e:	4649      	mov	r1, r9
 8015f30:	f7ea fe1c 	bl	8000b6c <__aeabi_dcmpun>
 8015f34:	b140      	cbz	r0, 8015f48 <_printf_float+0xe0>
 8015f36:	464b      	mov	r3, r9
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	bfbc      	itt	lt
 8015f3c:	232d      	movlt	r3, #45	@ 0x2d
 8015f3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8015f42:	4a7e      	ldr	r2, [pc, #504]	@ (801613c <_printf_float+0x2d4>)
 8015f44:	4b7e      	ldr	r3, [pc, #504]	@ (8016140 <_printf_float+0x2d8>)
 8015f46:	e7d4      	b.n	8015ef2 <_printf_float+0x8a>
 8015f48:	6863      	ldr	r3, [r4, #4]
 8015f4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8015f4e:	9206      	str	r2, [sp, #24]
 8015f50:	1c5a      	adds	r2, r3, #1
 8015f52:	d13b      	bne.n	8015fcc <_printf_float+0x164>
 8015f54:	2306      	movs	r3, #6
 8015f56:	6063      	str	r3, [r4, #4]
 8015f58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	6022      	str	r2, [r4, #0]
 8015f60:	9303      	str	r3, [sp, #12]
 8015f62:	ab0a      	add	r3, sp, #40	@ 0x28
 8015f64:	e9cd a301 	strd	sl, r3, [sp, #4]
 8015f68:	ab09      	add	r3, sp, #36	@ 0x24
 8015f6a:	9300      	str	r3, [sp, #0]
 8015f6c:	6861      	ldr	r1, [r4, #4]
 8015f6e:	ec49 8b10 	vmov	d0, r8, r9
 8015f72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8015f76:	4628      	mov	r0, r5
 8015f78:	f7ff fed6 	bl	8015d28 <__cvt>
 8015f7c:	9b06      	ldr	r3, [sp, #24]
 8015f7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015f80:	2b47      	cmp	r3, #71	@ 0x47
 8015f82:	4680      	mov	r8, r0
 8015f84:	d129      	bne.n	8015fda <_printf_float+0x172>
 8015f86:	1cc8      	adds	r0, r1, #3
 8015f88:	db02      	blt.n	8015f90 <_printf_float+0x128>
 8015f8a:	6863      	ldr	r3, [r4, #4]
 8015f8c:	4299      	cmp	r1, r3
 8015f8e:	dd41      	ble.n	8016014 <_printf_float+0x1ac>
 8015f90:	f1aa 0a02 	sub.w	sl, sl, #2
 8015f94:	fa5f fa8a 	uxtb.w	sl, sl
 8015f98:	3901      	subs	r1, #1
 8015f9a:	4652      	mov	r2, sl
 8015f9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8015fa0:	9109      	str	r1, [sp, #36]	@ 0x24
 8015fa2:	f7ff ff26 	bl	8015df2 <__exponent>
 8015fa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015fa8:	1813      	adds	r3, r2, r0
 8015faa:	2a01      	cmp	r2, #1
 8015fac:	4681      	mov	r9, r0
 8015fae:	6123      	str	r3, [r4, #16]
 8015fb0:	dc02      	bgt.n	8015fb8 <_printf_float+0x150>
 8015fb2:	6822      	ldr	r2, [r4, #0]
 8015fb4:	07d2      	lsls	r2, r2, #31
 8015fb6:	d501      	bpl.n	8015fbc <_printf_float+0x154>
 8015fb8:	3301      	adds	r3, #1
 8015fba:	6123      	str	r3, [r4, #16]
 8015fbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d0a2      	beq.n	8015f0a <_printf_float+0xa2>
 8015fc4:	232d      	movs	r3, #45	@ 0x2d
 8015fc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015fca:	e79e      	b.n	8015f0a <_printf_float+0xa2>
 8015fcc:	9a06      	ldr	r2, [sp, #24]
 8015fce:	2a47      	cmp	r2, #71	@ 0x47
 8015fd0:	d1c2      	bne.n	8015f58 <_printf_float+0xf0>
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d1c0      	bne.n	8015f58 <_printf_float+0xf0>
 8015fd6:	2301      	movs	r3, #1
 8015fd8:	e7bd      	b.n	8015f56 <_printf_float+0xee>
 8015fda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8015fde:	d9db      	bls.n	8015f98 <_printf_float+0x130>
 8015fe0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8015fe4:	d118      	bne.n	8016018 <_printf_float+0x1b0>
 8015fe6:	2900      	cmp	r1, #0
 8015fe8:	6863      	ldr	r3, [r4, #4]
 8015fea:	dd0b      	ble.n	8016004 <_printf_float+0x19c>
 8015fec:	6121      	str	r1, [r4, #16]
 8015fee:	b913      	cbnz	r3, 8015ff6 <_printf_float+0x18e>
 8015ff0:	6822      	ldr	r2, [r4, #0]
 8015ff2:	07d0      	lsls	r0, r2, #31
 8015ff4:	d502      	bpl.n	8015ffc <_printf_float+0x194>
 8015ff6:	3301      	adds	r3, #1
 8015ff8:	440b      	add	r3, r1
 8015ffa:	6123      	str	r3, [r4, #16]
 8015ffc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8015ffe:	f04f 0900 	mov.w	r9, #0
 8016002:	e7db      	b.n	8015fbc <_printf_float+0x154>
 8016004:	b913      	cbnz	r3, 801600c <_printf_float+0x1a4>
 8016006:	6822      	ldr	r2, [r4, #0]
 8016008:	07d2      	lsls	r2, r2, #31
 801600a:	d501      	bpl.n	8016010 <_printf_float+0x1a8>
 801600c:	3302      	adds	r3, #2
 801600e:	e7f4      	b.n	8015ffa <_printf_float+0x192>
 8016010:	2301      	movs	r3, #1
 8016012:	e7f2      	b.n	8015ffa <_printf_float+0x192>
 8016014:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8016018:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801601a:	4299      	cmp	r1, r3
 801601c:	db05      	blt.n	801602a <_printf_float+0x1c2>
 801601e:	6823      	ldr	r3, [r4, #0]
 8016020:	6121      	str	r1, [r4, #16]
 8016022:	07d8      	lsls	r0, r3, #31
 8016024:	d5ea      	bpl.n	8015ffc <_printf_float+0x194>
 8016026:	1c4b      	adds	r3, r1, #1
 8016028:	e7e7      	b.n	8015ffa <_printf_float+0x192>
 801602a:	2900      	cmp	r1, #0
 801602c:	bfd4      	ite	le
 801602e:	f1c1 0202 	rsble	r2, r1, #2
 8016032:	2201      	movgt	r2, #1
 8016034:	4413      	add	r3, r2
 8016036:	e7e0      	b.n	8015ffa <_printf_float+0x192>
 8016038:	6823      	ldr	r3, [r4, #0]
 801603a:	055a      	lsls	r2, r3, #21
 801603c:	d407      	bmi.n	801604e <_printf_float+0x1e6>
 801603e:	6923      	ldr	r3, [r4, #16]
 8016040:	4642      	mov	r2, r8
 8016042:	4631      	mov	r1, r6
 8016044:	4628      	mov	r0, r5
 8016046:	47b8      	blx	r7
 8016048:	3001      	adds	r0, #1
 801604a:	d12b      	bne.n	80160a4 <_printf_float+0x23c>
 801604c:	e767      	b.n	8015f1e <_printf_float+0xb6>
 801604e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8016052:	f240 80dd 	bls.w	8016210 <_printf_float+0x3a8>
 8016056:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801605a:	2200      	movs	r2, #0
 801605c:	2300      	movs	r3, #0
 801605e:	f7ea fd53 	bl	8000b08 <__aeabi_dcmpeq>
 8016062:	2800      	cmp	r0, #0
 8016064:	d033      	beq.n	80160ce <_printf_float+0x266>
 8016066:	4a37      	ldr	r2, [pc, #220]	@ (8016144 <_printf_float+0x2dc>)
 8016068:	2301      	movs	r3, #1
 801606a:	4631      	mov	r1, r6
 801606c:	4628      	mov	r0, r5
 801606e:	47b8      	blx	r7
 8016070:	3001      	adds	r0, #1
 8016072:	f43f af54 	beq.w	8015f1e <_printf_float+0xb6>
 8016076:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801607a:	4543      	cmp	r3, r8
 801607c:	db02      	blt.n	8016084 <_printf_float+0x21c>
 801607e:	6823      	ldr	r3, [r4, #0]
 8016080:	07d8      	lsls	r0, r3, #31
 8016082:	d50f      	bpl.n	80160a4 <_printf_float+0x23c>
 8016084:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016088:	4631      	mov	r1, r6
 801608a:	4628      	mov	r0, r5
 801608c:	47b8      	blx	r7
 801608e:	3001      	adds	r0, #1
 8016090:	f43f af45 	beq.w	8015f1e <_printf_float+0xb6>
 8016094:	f04f 0900 	mov.w	r9, #0
 8016098:	f108 38ff 	add.w	r8, r8, #4294967295
 801609c:	f104 0a1a 	add.w	sl, r4, #26
 80160a0:	45c8      	cmp	r8, r9
 80160a2:	dc09      	bgt.n	80160b8 <_printf_float+0x250>
 80160a4:	6823      	ldr	r3, [r4, #0]
 80160a6:	079b      	lsls	r3, r3, #30
 80160a8:	f100 8103 	bmi.w	80162b2 <_printf_float+0x44a>
 80160ac:	68e0      	ldr	r0, [r4, #12]
 80160ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80160b0:	4298      	cmp	r0, r3
 80160b2:	bfb8      	it	lt
 80160b4:	4618      	movlt	r0, r3
 80160b6:	e734      	b.n	8015f22 <_printf_float+0xba>
 80160b8:	2301      	movs	r3, #1
 80160ba:	4652      	mov	r2, sl
 80160bc:	4631      	mov	r1, r6
 80160be:	4628      	mov	r0, r5
 80160c0:	47b8      	blx	r7
 80160c2:	3001      	adds	r0, #1
 80160c4:	f43f af2b 	beq.w	8015f1e <_printf_float+0xb6>
 80160c8:	f109 0901 	add.w	r9, r9, #1
 80160cc:	e7e8      	b.n	80160a0 <_printf_float+0x238>
 80160ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	dc39      	bgt.n	8016148 <_printf_float+0x2e0>
 80160d4:	4a1b      	ldr	r2, [pc, #108]	@ (8016144 <_printf_float+0x2dc>)
 80160d6:	2301      	movs	r3, #1
 80160d8:	4631      	mov	r1, r6
 80160da:	4628      	mov	r0, r5
 80160dc:	47b8      	blx	r7
 80160de:	3001      	adds	r0, #1
 80160e0:	f43f af1d 	beq.w	8015f1e <_printf_float+0xb6>
 80160e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80160e8:	ea59 0303 	orrs.w	r3, r9, r3
 80160ec:	d102      	bne.n	80160f4 <_printf_float+0x28c>
 80160ee:	6823      	ldr	r3, [r4, #0]
 80160f0:	07d9      	lsls	r1, r3, #31
 80160f2:	d5d7      	bpl.n	80160a4 <_printf_float+0x23c>
 80160f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80160f8:	4631      	mov	r1, r6
 80160fa:	4628      	mov	r0, r5
 80160fc:	47b8      	blx	r7
 80160fe:	3001      	adds	r0, #1
 8016100:	f43f af0d 	beq.w	8015f1e <_printf_float+0xb6>
 8016104:	f04f 0a00 	mov.w	sl, #0
 8016108:	f104 0b1a 	add.w	fp, r4, #26
 801610c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801610e:	425b      	negs	r3, r3
 8016110:	4553      	cmp	r3, sl
 8016112:	dc01      	bgt.n	8016118 <_printf_float+0x2b0>
 8016114:	464b      	mov	r3, r9
 8016116:	e793      	b.n	8016040 <_printf_float+0x1d8>
 8016118:	2301      	movs	r3, #1
 801611a:	465a      	mov	r2, fp
 801611c:	4631      	mov	r1, r6
 801611e:	4628      	mov	r0, r5
 8016120:	47b8      	blx	r7
 8016122:	3001      	adds	r0, #1
 8016124:	f43f aefb 	beq.w	8015f1e <_printf_float+0xb6>
 8016128:	f10a 0a01 	add.w	sl, sl, #1
 801612c:	e7ee      	b.n	801610c <_printf_float+0x2a4>
 801612e:	bf00      	nop
 8016130:	7fefffff 	.word	0x7fefffff
 8016134:	0801b0f0 	.word	0x0801b0f0
 8016138:	0801b0ec 	.word	0x0801b0ec
 801613c:	0801b0f8 	.word	0x0801b0f8
 8016140:	0801b0f4 	.word	0x0801b0f4
 8016144:	0801b0fc 	.word	0x0801b0fc
 8016148:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801614a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801614e:	4553      	cmp	r3, sl
 8016150:	bfa8      	it	ge
 8016152:	4653      	movge	r3, sl
 8016154:	2b00      	cmp	r3, #0
 8016156:	4699      	mov	r9, r3
 8016158:	dc36      	bgt.n	80161c8 <_printf_float+0x360>
 801615a:	f04f 0b00 	mov.w	fp, #0
 801615e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016162:	f104 021a 	add.w	r2, r4, #26
 8016166:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016168:	9306      	str	r3, [sp, #24]
 801616a:	eba3 0309 	sub.w	r3, r3, r9
 801616e:	455b      	cmp	r3, fp
 8016170:	dc31      	bgt.n	80161d6 <_printf_float+0x36e>
 8016172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016174:	459a      	cmp	sl, r3
 8016176:	dc3a      	bgt.n	80161ee <_printf_float+0x386>
 8016178:	6823      	ldr	r3, [r4, #0]
 801617a:	07da      	lsls	r2, r3, #31
 801617c:	d437      	bmi.n	80161ee <_printf_float+0x386>
 801617e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016180:	ebaa 0903 	sub.w	r9, sl, r3
 8016184:	9b06      	ldr	r3, [sp, #24]
 8016186:	ebaa 0303 	sub.w	r3, sl, r3
 801618a:	4599      	cmp	r9, r3
 801618c:	bfa8      	it	ge
 801618e:	4699      	movge	r9, r3
 8016190:	f1b9 0f00 	cmp.w	r9, #0
 8016194:	dc33      	bgt.n	80161fe <_printf_float+0x396>
 8016196:	f04f 0800 	mov.w	r8, #0
 801619a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801619e:	f104 0b1a 	add.w	fp, r4, #26
 80161a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80161a4:	ebaa 0303 	sub.w	r3, sl, r3
 80161a8:	eba3 0309 	sub.w	r3, r3, r9
 80161ac:	4543      	cmp	r3, r8
 80161ae:	f77f af79 	ble.w	80160a4 <_printf_float+0x23c>
 80161b2:	2301      	movs	r3, #1
 80161b4:	465a      	mov	r2, fp
 80161b6:	4631      	mov	r1, r6
 80161b8:	4628      	mov	r0, r5
 80161ba:	47b8      	blx	r7
 80161bc:	3001      	adds	r0, #1
 80161be:	f43f aeae 	beq.w	8015f1e <_printf_float+0xb6>
 80161c2:	f108 0801 	add.w	r8, r8, #1
 80161c6:	e7ec      	b.n	80161a2 <_printf_float+0x33a>
 80161c8:	4642      	mov	r2, r8
 80161ca:	4631      	mov	r1, r6
 80161cc:	4628      	mov	r0, r5
 80161ce:	47b8      	blx	r7
 80161d0:	3001      	adds	r0, #1
 80161d2:	d1c2      	bne.n	801615a <_printf_float+0x2f2>
 80161d4:	e6a3      	b.n	8015f1e <_printf_float+0xb6>
 80161d6:	2301      	movs	r3, #1
 80161d8:	4631      	mov	r1, r6
 80161da:	4628      	mov	r0, r5
 80161dc:	9206      	str	r2, [sp, #24]
 80161de:	47b8      	blx	r7
 80161e0:	3001      	adds	r0, #1
 80161e2:	f43f ae9c 	beq.w	8015f1e <_printf_float+0xb6>
 80161e6:	9a06      	ldr	r2, [sp, #24]
 80161e8:	f10b 0b01 	add.w	fp, fp, #1
 80161ec:	e7bb      	b.n	8016166 <_printf_float+0x2fe>
 80161ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80161f2:	4631      	mov	r1, r6
 80161f4:	4628      	mov	r0, r5
 80161f6:	47b8      	blx	r7
 80161f8:	3001      	adds	r0, #1
 80161fa:	d1c0      	bne.n	801617e <_printf_float+0x316>
 80161fc:	e68f      	b.n	8015f1e <_printf_float+0xb6>
 80161fe:	9a06      	ldr	r2, [sp, #24]
 8016200:	464b      	mov	r3, r9
 8016202:	4442      	add	r2, r8
 8016204:	4631      	mov	r1, r6
 8016206:	4628      	mov	r0, r5
 8016208:	47b8      	blx	r7
 801620a:	3001      	adds	r0, #1
 801620c:	d1c3      	bne.n	8016196 <_printf_float+0x32e>
 801620e:	e686      	b.n	8015f1e <_printf_float+0xb6>
 8016210:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8016214:	f1ba 0f01 	cmp.w	sl, #1
 8016218:	dc01      	bgt.n	801621e <_printf_float+0x3b6>
 801621a:	07db      	lsls	r3, r3, #31
 801621c:	d536      	bpl.n	801628c <_printf_float+0x424>
 801621e:	2301      	movs	r3, #1
 8016220:	4642      	mov	r2, r8
 8016222:	4631      	mov	r1, r6
 8016224:	4628      	mov	r0, r5
 8016226:	47b8      	blx	r7
 8016228:	3001      	adds	r0, #1
 801622a:	f43f ae78 	beq.w	8015f1e <_printf_float+0xb6>
 801622e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016232:	4631      	mov	r1, r6
 8016234:	4628      	mov	r0, r5
 8016236:	47b8      	blx	r7
 8016238:	3001      	adds	r0, #1
 801623a:	f43f ae70 	beq.w	8015f1e <_printf_float+0xb6>
 801623e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8016242:	2200      	movs	r2, #0
 8016244:	2300      	movs	r3, #0
 8016246:	f10a 3aff 	add.w	sl, sl, #4294967295
 801624a:	f7ea fc5d 	bl	8000b08 <__aeabi_dcmpeq>
 801624e:	b9c0      	cbnz	r0, 8016282 <_printf_float+0x41a>
 8016250:	4653      	mov	r3, sl
 8016252:	f108 0201 	add.w	r2, r8, #1
 8016256:	4631      	mov	r1, r6
 8016258:	4628      	mov	r0, r5
 801625a:	47b8      	blx	r7
 801625c:	3001      	adds	r0, #1
 801625e:	d10c      	bne.n	801627a <_printf_float+0x412>
 8016260:	e65d      	b.n	8015f1e <_printf_float+0xb6>
 8016262:	2301      	movs	r3, #1
 8016264:	465a      	mov	r2, fp
 8016266:	4631      	mov	r1, r6
 8016268:	4628      	mov	r0, r5
 801626a:	47b8      	blx	r7
 801626c:	3001      	adds	r0, #1
 801626e:	f43f ae56 	beq.w	8015f1e <_printf_float+0xb6>
 8016272:	f108 0801 	add.w	r8, r8, #1
 8016276:	45d0      	cmp	r8, sl
 8016278:	dbf3      	blt.n	8016262 <_printf_float+0x3fa>
 801627a:	464b      	mov	r3, r9
 801627c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8016280:	e6df      	b.n	8016042 <_printf_float+0x1da>
 8016282:	f04f 0800 	mov.w	r8, #0
 8016286:	f104 0b1a 	add.w	fp, r4, #26
 801628a:	e7f4      	b.n	8016276 <_printf_float+0x40e>
 801628c:	2301      	movs	r3, #1
 801628e:	4642      	mov	r2, r8
 8016290:	e7e1      	b.n	8016256 <_printf_float+0x3ee>
 8016292:	2301      	movs	r3, #1
 8016294:	464a      	mov	r2, r9
 8016296:	4631      	mov	r1, r6
 8016298:	4628      	mov	r0, r5
 801629a:	47b8      	blx	r7
 801629c:	3001      	adds	r0, #1
 801629e:	f43f ae3e 	beq.w	8015f1e <_printf_float+0xb6>
 80162a2:	f108 0801 	add.w	r8, r8, #1
 80162a6:	68e3      	ldr	r3, [r4, #12]
 80162a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80162aa:	1a5b      	subs	r3, r3, r1
 80162ac:	4543      	cmp	r3, r8
 80162ae:	dcf0      	bgt.n	8016292 <_printf_float+0x42a>
 80162b0:	e6fc      	b.n	80160ac <_printf_float+0x244>
 80162b2:	f04f 0800 	mov.w	r8, #0
 80162b6:	f104 0919 	add.w	r9, r4, #25
 80162ba:	e7f4      	b.n	80162a6 <_printf_float+0x43e>

080162bc <_printf_common>:
 80162bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162c0:	4616      	mov	r6, r2
 80162c2:	4698      	mov	r8, r3
 80162c4:	688a      	ldr	r2, [r1, #8]
 80162c6:	690b      	ldr	r3, [r1, #16]
 80162c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80162cc:	4293      	cmp	r3, r2
 80162ce:	bfb8      	it	lt
 80162d0:	4613      	movlt	r3, r2
 80162d2:	6033      	str	r3, [r6, #0]
 80162d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80162d8:	4607      	mov	r7, r0
 80162da:	460c      	mov	r4, r1
 80162dc:	b10a      	cbz	r2, 80162e2 <_printf_common+0x26>
 80162de:	3301      	adds	r3, #1
 80162e0:	6033      	str	r3, [r6, #0]
 80162e2:	6823      	ldr	r3, [r4, #0]
 80162e4:	0699      	lsls	r1, r3, #26
 80162e6:	bf42      	ittt	mi
 80162e8:	6833      	ldrmi	r3, [r6, #0]
 80162ea:	3302      	addmi	r3, #2
 80162ec:	6033      	strmi	r3, [r6, #0]
 80162ee:	6825      	ldr	r5, [r4, #0]
 80162f0:	f015 0506 	ands.w	r5, r5, #6
 80162f4:	d106      	bne.n	8016304 <_printf_common+0x48>
 80162f6:	f104 0a19 	add.w	sl, r4, #25
 80162fa:	68e3      	ldr	r3, [r4, #12]
 80162fc:	6832      	ldr	r2, [r6, #0]
 80162fe:	1a9b      	subs	r3, r3, r2
 8016300:	42ab      	cmp	r3, r5
 8016302:	dc26      	bgt.n	8016352 <_printf_common+0x96>
 8016304:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016308:	6822      	ldr	r2, [r4, #0]
 801630a:	3b00      	subs	r3, #0
 801630c:	bf18      	it	ne
 801630e:	2301      	movne	r3, #1
 8016310:	0692      	lsls	r2, r2, #26
 8016312:	d42b      	bmi.n	801636c <_printf_common+0xb0>
 8016314:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016318:	4641      	mov	r1, r8
 801631a:	4638      	mov	r0, r7
 801631c:	47c8      	blx	r9
 801631e:	3001      	adds	r0, #1
 8016320:	d01e      	beq.n	8016360 <_printf_common+0xa4>
 8016322:	6823      	ldr	r3, [r4, #0]
 8016324:	6922      	ldr	r2, [r4, #16]
 8016326:	f003 0306 	and.w	r3, r3, #6
 801632a:	2b04      	cmp	r3, #4
 801632c:	bf02      	ittt	eq
 801632e:	68e5      	ldreq	r5, [r4, #12]
 8016330:	6833      	ldreq	r3, [r6, #0]
 8016332:	1aed      	subeq	r5, r5, r3
 8016334:	68a3      	ldr	r3, [r4, #8]
 8016336:	bf0c      	ite	eq
 8016338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801633c:	2500      	movne	r5, #0
 801633e:	4293      	cmp	r3, r2
 8016340:	bfc4      	itt	gt
 8016342:	1a9b      	subgt	r3, r3, r2
 8016344:	18ed      	addgt	r5, r5, r3
 8016346:	2600      	movs	r6, #0
 8016348:	341a      	adds	r4, #26
 801634a:	42b5      	cmp	r5, r6
 801634c:	d11a      	bne.n	8016384 <_printf_common+0xc8>
 801634e:	2000      	movs	r0, #0
 8016350:	e008      	b.n	8016364 <_printf_common+0xa8>
 8016352:	2301      	movs	r3, #1
 8016354:	4652      	mov	r2, sl
 8016356:	4641      	mov	r1, r8
 8016358:	4638      	mov	r0, r7
 801635a:	47c8      	blx	r9
 801635c:	3001      	adds	r0, #1
 801635e:	d103      	bne.n	8016368 <_printf_common+0xac>
 8016360:	f04f 30ff 	mov.w	r0, #4294967295
 8016364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016368:	3501      	adds	r5, #1
 801636a:	e7c6      	b.n	80162fa <_printf_common+0x3e>
 801636c:	18e1      	adds	r1, r4, r3
 801636e:	1c5a      	adds	r2, r3, #1
 8016370:	2030      	movs	r0, #48	@ 0x30
 8016372:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016376:	4422      	add	r2, r4
 8016378:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801637c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016380:	3302      	adds	r3, #2
 8016382:	e7c7      	b.n	8016314 <_printf_common+0x58>
 8016384:	2301      	movs	r3, #1
 8016386:	4622      	mov	r2, r4
 8016388:	4641      	mov	r1, r8
 801638a:	4638      	mov	r0, r7
 801638c:	47c8      	blx	r9
 801638e:	3001      	adds	r0, #1
 8016390:	d0e6      	beq.n	8016360 <_printf_common+0xa4>
 8016392:	3601      	adds	r6, #1
 8016394:	e7d9      	b.n	801634a <_printf_common+0x8e>
	...

08016398 <_printf_i>:
 8016398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801639c:	7e0f      	ldrb	r7, [r1, #24]
 801639e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80163a0:	2f78      	cmp	r7, #120	@ 0x78
 80163a2:	4691      	mov	r9, r2
 80163a4:	4680      	mov	r8, r0
 80163a6:	460c      	mov	r4, r1
 80163a8:	469a      	mov	sl, r3
 80163aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80163ae:	d807      	bhi.n	80163c0 <_printf_i+0x28>
 80163b0:	2f62      	cmp	r7, #98	@ 0x62
 80163b2:	d80a      	bhi.n	80163ca <_printf_i+0x32>
 80163b4:	2f00      	cmp	r7, #0
 80163b6:	f000 80d1 	beq.w	801655c <_printf_i+0x1c4>
 80163ba:	2f58      	cmp	r7, #88	@ 0x58
 80163bc:	f000 80b8 	beq.w	8016530 <_printf_i+0x198>
 80163c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80163c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80163c8:	e03a      	b.n	8016440 <_printf_i+0xa8>
 80163ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80163ce:	2b15      	cmp	r3, #21
 80163d0:	d8f6      	bhi.n	80163c0 <_printf_i+0x28>
 80163d2:	a101      	add	r1, pc, #4	@ (adr r1, 80163d8 <_printf_i+0x40>)
 80163d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80163d8:	08016431 	.word	0x08016431
 80163dc:	08016445 	.word	0x08016445
 80163e0:	080163c1 	.word	0x080163c1
 80163e4:	080163c1 	.word	0x080163c1
 80163e8:	080163c1 	.word	0x080163c1
 80163ec:	080163c1 	.word	0x080163c1
 80163f0:	08016445 	.word	0x08016445
 80163f4:	080163c1 	.word	0x080163c1
 80163f8:	080163c1 	.word	0x080163c1
 80163fc:	080163c1 	.word	0x080163c1
 8016400:	080163c1 	.word	0x080163c1
 8016404:	08016543 	.word	0x08016543
 8016408:	0801646f 	.word	0x0801646f
 801640c:	080164fd 	.word	0x080164fd
 8016410:	080163c1 	.word	0x080163c1
 8016414:	080163c1 	.word	0x080163c1
 8016418:	08016565 	.word	0x08016565
 801641c:	080163c1 	.word	0x080163c1
 8016420:	0801646f 	.word	0x0801646f
 8016424:	080163c1 	.word	0x080163c1
 8016428:	080163c1 	.word	0x080163c1
 801642c:	08016505 	.word	0x08016505
 8016430:	6833      	ldr	r3, [r6, #0]
 8016432:	1d1a      	adds	r2, r3, #4
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	6032      	str	r2, [r6, #0]
 8016438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801643c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016440:	2301      	movs	r3, #1
 8016442:	e09c      	b.n	801657e <_printf_i+0x1e6>
 8016444:	6833      	ldr	r3, [r6, #0]
 8016446:	6820      	ldr	r0, [r4, #0]
 8016448:	1d19      	adds	r1, r3, #4
 801644a:	6031      	str	r1, [r6, #0]
 801644c:	0606      	lsls	r6, r0, #24
 801644e:	d501      	bpl.n	8016454 <_printf_i+0xbc>
 8016450:	681d      	ldr	r5, [r3, #0]
 8016452:	e003      	b.n	801645c <_printf_i+0xc4>
 8016454:	0645      	lsls	r5, r0, #25
 8016456:	d5fb      	bpl.n	8016450 <_printf_i+0xb8>
 8016458:	f9b3 5000 	ldrsh.w	r5, [r3]
 801645c:	2d00      	cmp	r5, #0
 801645e:	da03      	bge.n	8016468 <_printf_i+0xd0>
 8016460:	232d      	movs	r3, #45	@ 0x2d
 8016462:	426d      	negs	r5, r5
 8016464:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016468:	4858      	ldr	r0, [pc, #352]	@ (80165cc <_printf_i+0x234>)
 801646a:	230a      	movs	r3, #10
 801646c:	e011      	b.n	8016492 <_printf_i+0xfa>
 801646e:	6821      	ldr	r1, [r4, #0]
 8016470:	6833      	ldr	r3, [r6, #0]
 8016472:	0608      	lsls	r0, r1, #24
 8016474:	f853 5b04 	ldr.w	r5, [r3], #4
 8016478:	d402      	bmi.n	8016480 <_printf_i+0xe8>
 801647a:	0649      	lsls	r1, r1, #25
 801647c:	bf48      	it	mi
 801647e:	b2ad      	uxthmi	r5, r5
 8016480:	2f6f      	cmp	r7, #111	@ 0x6f
 8016482:	4852      	ldr	r0, [pc, #328]	@ (80165cc <_printf_i+0x234>)
 8016484:	6033      	str	r3, [r6, #0]
 8016486:	bf14      	ite	ne
 8016488:	230a      	movne	r3, #10
 801648a:	2308      	moveq	r3, #8
 801648c:	2100      	movs	r1, #0
 801648e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016492:	6866      	ldr	r6, [r4, #4]
 8016494:	60a6      	str	r6, [r4, #8]
 8016496:	2e00      	cmp	r6, #0
 8016498:	db05      	blt.n	80164a6 <_printf_i+0x10e>
 801649a:	6821      	ldr	r1, [r4, #0]
 801649c:	432e      	orrs	r6, r5
 801649e:	f021 0104 	bic.w	r1, r1, #4
 80164a2:	6021      	str	r1, [r4, #0]
 80164a4:	d04b      	beq.n	801653e <_printf_i+0x1a6>
 80164a6:	4616      	mov	r6, r2
 80164a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80164ac:	fb03 5711 	mls	r7, r3, r1, r5
 80164b0:	5dc7      	ldrb	r7, [r0, r7]
 80164b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80164b6:	462f      	mov	r7, r5
 80164b8:	42bb      	cmp	r3, r7
 80164ba:	460d      	mov	r5, r1
 80164bc:	d9f4      	bls.n	80164a8 <_printf_i+0x110>
 80164be:	2b08      	cmp	r3, #8
 80164c0:	d10b      	bne.n	80164da <_printf_i+0x142>
 80164c2:	6823      	ldr	r3, [r4, #0]
 80164c4:	07df      	lsls	r7, r3, #31
 80164c6:	d508      	bpl.n	80164da <_printf_i+0x142>
 80164c8:	6923      	ldr	r3, [r4, #16]
 80164ca:	6861      	ldr	r1, [r4, #4]
 80164cc:	4299      	cmp	r1, r3
 80164ce:	bfde      	ittt	le
 80164d0:	2330      	movle	r3, #48	@ 0x30
 80164d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80164d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80164da:	1b92      	subs	r2, r2, r6
 80164dc:	6122      	str	r2, [r4, #16]
 80164de:	f8cd a000 	str.w	sl, [sp]
 80164e2:	464b      	mov	r3, r9
 80164e4:	aa03      	add	r2, sp, #12
 80164e6:	4621      	mov	r1, r4
 80164e8:	4640      	mov	r0, r8
 80164ea:	f7ff fee7 	bl	80162bc <_printf_common>
 80164ee:	3001      	adds	r0, #1
 80164f0:	d14a      	bne.n	8016588 <_printf_i+0x1f0>
 80164f2:	f04f 30ff 	mov.w	r0, #4294967295
 80164f6:	b004      	add	sp, #16
 80164f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164fc:	6823      	ldr	r3, [r4, #0]
 80164fe:	f043 0320 	orr.w	r3, r3, #32
 8016502:	6023      	str	r3, [r4, #0]
 8016504:	4832      	ldr	r0, [pc, #200]	@ (80165d0 <_printf_i+0x238>)
 8016506:	2778      	movs	r7, #120	@ 0x78
 8016508:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801650c:	6823      	ldr	r3, [r4, #0]
 801650e:	6831      	ldr	r1, [r6, #0]
 8016510:	061f      	lsls	r7, r3, #24
 8016512:	f851 5b04 	ldr.w	r5, [r1], #4
 8016516:	d402      	bmi.n	801651e <_printf_i+0x186>
 8016518:	065f      	lsls	r7, r3, #25
 801651a:	bf48      	it	mi
 801651c:	b2ad      	uxthmi	r5, r5
 801651e:	6031      	str	r1, [r6, #0]
 8016520:	07d9      	lsls	r1, r3, #31
 8016522:	bf44      	itt	mi
 8016524:	f043 0320 	orrmi.w	r3, r3, #32
 8016528:	6023      	strmi	r3, [r4, #0]
 801652a:	b11d      	cbz	r5, 8016534 <_printf_i+0x19c>
 801652c:	2310      	movs	r3, #16
 801652e:	e7ad      	b.n	801648c <_printf_i+0xf4>
 8016530:	4826      	ldr	r0, [pc, #152]	@ (80165cc <_printf_i+0x234>)
 8016532:	e7e9      	b.n	8016508 <_printf_i+0x170>
 8016534:	6823      	ldr	r3, [r4, #0]
 8016536:	f023 0320 	bic.w	r3, r3, #32
 801653a:	6023      	str	r3, [r4, #0]
 801653c:	e7f6      	b.n	801652c <_printf_i+0x194>
 801653e:	4616      	mov	r6, r2
 8016540:	e7bd      	b.n	80164be <_printf_i+0x126>
 8016542:	6833      	ldr	r3, [r6, #0]
 8016544:	6825      	ldr	r5, [r4, #0]
 8016546:	6961      	ldr	r1, [r4, #20]
 8016548:	1d18      	adds	r0, r3, #4
 801654a:	6030      	str	r0, [r6, #0]
 801654c:	062e      	lsls	r6, r5, #24
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	d501      	bpl.n	8016556 <_printf_i+0x1be>
 8016552:	6019      	str	r1, [r3, #0]
 8016554:	e002      	b.n	801655c <_printf_i+0x1c4>
 8016556:	0668      	lsls	r0, r5, #25
 8016558:	d5fb      	bpl.n	8016552 <_printf_i+0x1ba>
 801655a:	8019      	strh	r1, [r3, #0]
 801655c:	2300      	movs	r3, #0
 801655e:	6123      	str	r3, [r4, #16]
 8016560:	4616      	mov	r6, r2
 8016562:	e7bc      	b.n	80164de <_printf_i+0x146>
 8016564:	6833      	ldr	r3, [r6, #0]
 8016566:	1d1a      	adds	r2, r3, #4
 8016568:	6032      	str	r2, [r6, #0]
 801656a:	681e      	ldr	r6, [r3, #0]
 801656c:	6862      	ldr	r2, [r4, #4]
 801656e:	2100      	movs	r1, #0
 8016570:	4630      	mov	r0, r6
 8016572:	f7e9 fe4d 	bl	8000210 <memchr>
 8016576:	b108      	cbz	r0, 801657c <_printf_i+0x1e4>
 8016578:	1b80      	subs	r0, r0, r6
 801657a:	6060      	str	r0, [r4, #4]
 801657c:	6863      	ldr	r3, [r4, #4]
 801657e:	6123      	str	r3, [r4, #16]
 8016580:	2300      	movs	r3, #0
 8016582:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016586:	e7aa      	b.n	80164de <_printf_i+0x146>
 8016588:	6923      	ldr	r3, [r4, #16]
 801658a:	4632      	mov	r2, r6
 801658c:	4649      	mov	r1, r9
 801658e:	4640      	mov	r0, r8
 8016590:	47d0      	blx	sl
 8016592:	3001      	adds	r0, #1
 8016594:	d0ad      	beq.n	80164f2 <_printf_i+0x15a>
 8016596:	6823      	ldr	r3, [r4, #0]
 8016598:	079b      	lsls	r3, r3, #30
 801659a:	d413      	bmi.n	80165c4 <_printf_i+0x22c>
 801659c:	68e0      	ldr	r0, [r4, #12]
 801659e:	9b03      	ldr	r3, [sp, #12]
 80165a0:	4298      	cmp	r0, r3
 80165a2:	bfb8      	it	lt
 80165a4:	4618      	movlt	r0, r3
 80165a6:	e7a6      	b.n	80164f6 <_printf_i+0x15e>
 80165a8:	2301      	movs	r3, #1
 80165aa:	4632      	mov	r2, r6
 80165ac:	4649      	mov	r1, r9
 80165ae:	4640      	mov	r0, r8
 80165b0:	47d0      	blx	sl
 80165b2:	3001      	adds	r0, #1
 80165b4:	d09d      	beq.n	80164f2 <_printf_i+0x15a>
 80165b6:	3501      	adds	r5, #1
 80165b8:	68e3      	ldr	r3, [r4, #12]
 80165ba:	9903      	ldr	r1, [sp, #12]
 80165bc:	1a5b      	subs	r3, r3, r1
 80165be:	42ab      	cmp	r3, r5
 80165c0:	dcf2      	bgt.n	80165a8 <_printf_i+0x210>
 80165c2:	e7eb      	b.n	801659c <_printf_i+0x204>
 80165c4:	2500      	movs	r5, #0
 80165c6:	f104 0619 	add.w	r6, r4, #25
 80165ca:	e7f5      	b.n	80165b8 <_printf_i+0x220>
 80165cc:	0801b0fe 	.word	0x0801b0fe
 80165d0:	0801b10f 	.word	0x0801b10f

080165d4 <_scanf_float>:
 80165d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165d8:	b087      	sub	sp, #28
 80165da:	4691      	mov	r9, r2
 80165dc:	9303      	str	r3, [sp, #12]
 80165de:	688b      	ldr	r3, [r1, #8]
 80165e0:	1e5a      	subs	r2, r3, #1
 80165e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80165e6:	bf81      	itttt	hi
 80165e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80165ec:	eb03 0b05 	addhi.w	fp, r3, r5
 80165f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80165f4:	608b      	strhi	r3, [r1, #8]
 80165f6:	680b      	ldr	r3, [r1, #0]
 80165f8:	460a      	mov	r2, r1
 80165fa:	f04f 0500 	mov.w	r5, #0
 80165fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8016602:	f842 3b1c 	str.w	r3, [r2], #28
 8016606:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801660a:	4680      	mov	r8, r0
 801660c:	460c      	mov	r4, r1
 801660e:	bf98      	it	ls
 8016610:	f04f 0b00 	movls.w	fp, #0
 8016614:	9201      	str	r2, [sp, #4]
 8016616:	4616      	mov	r6, r2
 8016618:	46aa      	mov	sl, r5
 801661a:	462f      	mov	r7, r5
 801661c:	9502      	str	r5, [sp, #8]
 801661e:	68a2      	ldr	r2, [r4, #8]
 8016620:	b15a      	cbz	r2, 801663a <_scanf_float+0x66>
 8016622:	f8d9 3000 	ldr.w	r3, [r9]
 8016626:	781b      	ldrb	r3, [r3, #0]
 8016628:	2b4e      	cmp	r3, #78	@ 0x4e
 801662a:	d863      	bhi.n	80166f4 <_scanf_float+0x120>
 801662c:	2b40      	cmp	r3, #64	@ 0x40
 801662e:	d83b      	bhi.n	80166a8 <_scanf_float+0xd4>
 8016630:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8016634:	b2c8      	uxtb	r0, r1
 8016636:	280e      	cmp	r0, #14
 8016638:	d939      	bls.n	80166ae <_scanf_float+0xda>
 801663a:	b11f      	cbz	r7, 8016644 <_scanf_float+0x70>
 801663c:	6823      	ldr	r3, [r4, #0]
 801663e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016642:	6023      	str	r3, [r4, #0]
 8016644:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016648:	f1ba 0f01 	cmp.w	sl, #1
 801664c:	f200 8114 	bhi.w	8016878 <_scanf_float+0x2a4>
 8016650:	9b01      	ldr	r3, [sp, #4]
 8016652:	429e      	cmp	r6, r3
 8016654:	f200 8105 	bhi.w	8016862 <_scanf_float+0x28e>
 8016658:	2001      	movs	r0, #1
 801665a:	b007      	add	sp, #28
 801665c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016660:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8016664:	2a0d      	cmp	r2, #13
 8016666:	d8e8      	bhi.n	801663a <_scanf_float+0x66>
 8016668:	a101      	add	r1, pc, #4	@ (adr r1, 8016670 <_scanf_float+0x9c>)
 801666a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801666e:	bf00      	nop
 8016670:	080167b9 	.word	0x080167b9
 8016674:	0801663b 	.word	0x0801663b
 8016678:	0801663b 	.word	0x0801663b
 801667c:	0801663b 	.word	0x0801663b
 8016680:	08016815 	.word	0x08016815
 8016684:	080167ef 	.word	0x080167ef
 8016688:	0801663b 	.word	0x0801663b
 801668c:	0801663b 	.word	0x0801663b
 8016690:	080167c7 	.word	0x080167c7
 8016694:	0801663b 	.word	0x0801663b
 8016698:	0801663b 	.word	0x0801663b
 801669c:	0801663b 	.word	0x0801663b
 80166a0:	0801663b 	.word	0x0801663b
 80166a4:	08016783 	.word	0x08016783
 80166a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80166ac:	e7da      	b.n	8016664 <_scanf_float+0x90>
 80166ae:	290e      	cmp	r1, #14
 80166b0:	d8c3      	bhi.n	801663a <_scanf_float+0x66>
 80166b2:	a001      	add	r0, pc, #4	@ (adr r0, 80166b8 <_scanf_float+0xe4>)
 80166b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80166b8:	08016773 	.word	0x08016773
 80166bc:	0801663b 	.word	0x0801663b
 80166c0:	08016773 	.word	0x08016773
 80166c4:	08016803 	.word	0x08016803
 80166c8:	0801663b 	.word	0x0801663b
 80166cc:	08016715 	.word	0x08016715
 80166d0:	08016759 	.word	0x08016759
 80166d4:	08016759 	.word	0x08016759
 80166d8:	08016759 	.word	0x08016759
 80166dc:	08016759 	.word	0x08016759
 80166e0:	08016759 	.word	0x08016759
 80166e4:	08016759 	.word	0x08016759
 80166e8:	08016759 	.word	0x08016759
 80166ec:	08016759 	.word	0x08016759
 80166f0:	08016759 	.word	0x08016759
 80166f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80166f6:	d809      	bhi.n	801670c <_scanf_float+0x138>
 80166f8:	2b60      	cmp	r3, #96	@ 0x60
 80166fa:	d8b1      	bhi.n	8016660 <_scanf_float+0x8c>
 80166fc:	2b54      	cmp	r3, #84	@ 0x54
 80166fe:	d07b      	beq.n	80167f8 <_scanf_float+0x224>
 8016700:	2b59      	cmp	r3, #89	@ 0x59
 8016702:	d19a      	bne.n	801663a <_scanf_float+0x66>
 8016704:	2d07      	cmp	r5, #7
 8016706:	d198      	bne.n	801663a <_scanf_float+0x66>
 8016708:	2508      	movs	r5, #8
 801670a:	e02f      	b.n	801676c <_scanf_float+0x198>
 801670c:	2b74      	cmp	r3, #116	@ 0x74
 801670e:	d073      	beq.n	80167f8 <_scanf_float+0x224>
 8016710:	2b79      	cmp	r3, #121	@ 0x79
 8016712:	e7f6      	b.n	8016702 <_scanf_float+0x12e>
 8016714:	6821      	ldr	r1, [r4, #0]
 8016716:	05c8      	lsls	r0, r1, #23
 8016718:	d51e      	bpl.n	8016758 <_scanf_float+0x184>
 801671a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801671e:	6021      	str	r1, [r4, #0]
 8016720:	3701      	adds	r7, #1
 8016722:	f1bb 0f00 	cmp.w	fp, #0
 8016726:	d003      	beq.n	8016730 <_scanf_float+0x15c>
 8016728:	3201      	adds	r2, #1
 801672a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801672e:	60a2      	str	r2, [r4, #8]
 8016730:	68a3      	ldr	r3, [r4, #8]
 8016732:	3b01      	subs	r3, #1
 8016734:	60a3      	str	r3, [r4, #8]
 8016736:	6923      	ldr	r3, [r4, #16]
 8016738:	3301      	adds	r3, #1
 801673a:	6123      	str	r3, [r4, #16]
 801673c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016740:	3b01      	subs	r3, #1
 8016742:	2b00      	cmp	r3, #0
 8016744:	f8c9 3004 	str.w	r3, [r9, #4]
 8016748:	f340 8082 	ble.w	8016850 <_scanf_float+0x27c>
 801674c:	f8d9 3000 	ldr.w	r3, [r9]
 8016750:	3301      	adds	r3, #1
 8016752:	f8c9 3000 	str.w	r3, [r9]
 8016756:	e762      	b.n	801661e <_scanf_float+0x4a>
 8016758:	eb1a 0105 	adds.w	r1, sl, r5
 801675c:	f47f af6d 	bne.w	801663a <_scanf_float+0x66>
 8016760:	6822      	ldr	r2, [r4, #0]
 8016762:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8016766:	6022      	str	r2, [r4, #0]
 8016768:	460d      	mov	r5, r1
 801676a:	468a      	mov	sl, r1
 801676c:	f806 3b01 	strb.w	r3, [r6], #1
 8016770:	e7de      	b.n	8016730 <_scanf_float+0x15c>
 8016772:	6822      	ldr	r2, [r4, #0]
 8016774:	0610      	lsls	r0, r2, #24
 8016776:	f57f af60 	bpl.w	801663a <_scanf_float+0x66>
 801677a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801677e:	6022      	str	r2, [r4, #0]
 8016780:	e7f4      	b.n	801676c <_scanf_float+0x198>
 8016782:	f1ba 0f00 	cmp.w	sl, #0
 8016786:	d10c      	bne.n	80167a2 <_scanf_float+0x1ce>
 8016788:	b977      	cbnz	r7, 80167a8 <_scanf_float+0x1d4>
 801678a:	6822      	ldr	r2, [r4, #0]
 801678c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8016790:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8016794:	d108      	bne.n	80167a8 <_scanf_float+0x1d4>
 8016796:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801679a:	6022      	str	r2, [r4, #0]
 801679c:	f04f 0a01 	mov.w	sl, #1
 80167a0:	e7e4      	b.n	801676c <_scanf_float+0x198>
 80167a2:	f1ba 0f02 	cmp.w	sl, #2
 80167a6:	d050      	beq.n	801684a <_scanf_float+0x276>
 80167a8:	2d01      	cmp	r5, #1
 80167aa:	d002      	beq.n	80167b2 <_scanf_float+0x1de>
 80167ac:	2d04      	cmp	r5, #4
 80167ae:	f47f af44 	bne.w	801663a <_scanf_float+0x66>
 80167b2:	3501      	adds	r5, #1
 80167b4:	b2ed      	uxtb	r5, r5
 80167b6:	e7d9      	b.n	801676c <_scanf_float+0x198>
 80167b8:	f1ba 0f01 	cmp.w	sl, #1
 80167bc:	f47f af3d 	bne.w	801663a <_scanf_float+0x66>
 80167c0:	f04f 0a02 	mov.w	sl, #2
 80167c4:	e7d2      	b.n	801676c <_scanf_float+0x198>
 80167c6:	b975      	cbnz	r5, 80167e6 <_scanf_float+0x212>
 80167c8:	2f00      	cmp	r7, #0
 80167ca:	f47f af37 	bne.w	801663c <_scanf_float+0x68>
 80167ce:	6822      	ldr	r2, [r4, #0]
 80167d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80167d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80167d8:	f040 8103 	bne.w	80169e2 <_scanf_float+0x40e>
 80167dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80167e0:	6022      	str	r2, [r4, #0]
 80167e2:	2501      	movs	r5, #1
 80167e4:	e7c2      	b.n	801676c <_scanf_float+0x198>
 80167e6:	2d03      	cmp	r5, #3
 80167e8:	d0e3      	beq.n	80167b2 <_scanf_float+0x1de>
 80167ea:	2d05      	cmp	r5, #5
 80167ec:	e7df      	b.n	80167ae <_scanf_float+0x1da>
 80167ee:	2d02      	cmp	r5, #2
 80167f0:	f47f af23 	bne.w	801663a <_scanf_float+0x66>
 80167f4:	2503      	movs	r5, #3
 80167f6:	e7b9      	b.n	801676c <_scanf_float+0x198>
 80167f8:	2d06      	cmp	r5, #6
 80167fa:	f47f af1e 	bne.w	801663a <_scanf_float+0x66>
 80167fe:	2507      	movs	r5, #7
 8016800:	e7b4      	b.n	801676c <_scanf_float+0x198>
 8016802:	6822      	ldr	r2, [r4, #0]
 8016804:	0591      	lsls	r1, r2, #22
 8016806:	f57f af18 	bpl.w	801663a <_scanf_float+0x66>
 801680a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801680e:	6022      	str	r2, [r4, #0]
 8016810:	9702      	str	r7, [sp, #8]
 8016812:	e7ab      	b.n	801676c <_scanf_float+0x198>
 8016814:	6822      	ldr	r2, [r4, #0]
 8016816:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801681a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801681e:	d005      	beq.n	801682c <_scanf_float+0x258>
 8016820:	0550      	lsls	r0, r2, #21
 8016822:	f57f af0a 	bpl.w	801663a <_scanf_float+0x66>
 8016826:	2f00      	cmp	r7, #0
 8016828:	f000 80db 	beq.w	80169e2 <_scanf_float+0x40e>
 801682c:	0591      	lsls	r1, r2, #22
 801682e:	bf58      	it	pl
 8016830:	9902      	ldrpl	r1, [sp, #8]
 8016832:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8016836:	bf58      	it	pl
 8016838:	1a79      	subpl	r1, r7, r1
 801683a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801683e:	bf58      	it	pl
 8016840:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016844:	6022      	str	r2, [r4, #0]
 8016846:	2700      	movs	r7, #0
 8016848:	e790      	b.n	801676c <_scanf_float+0x198>
 801684a:	f04f 0a03 	mov.w	sl, #3
 801684e:	e78d      	b.n	801676c <_scanf_float+0x198>
 8016850:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016854:	4649      	mov	r1, r9
 8016856:	4640      	mov	r0, r8
 8016858:	4798      	blx	r3
 801685a:	2800      	cmp	r0, #0
 801685c:	f43f aedf 	beq.w	801661e <_scanf_float+0x4a>
 8016860:	e6eb      	b.n	801663a <_scanf_float+0x66>
 8016862:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016866:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801686a:	464a      	mov	r2, r9
 801686c:	4640      	mov	r0, r8
 801686e:	4798      	blx	r3
 8016870:	6923      	ldr	r3, [r4, #16]
 8016872:	3b01      	subs	r3, #1
 8016874:	6123      	str	r3, [r4, #16]
 8016876:	e6eb      	b.n	8016650 <_scanf_float+0x7c>
 8016878:	1e6b      	subs	r3, r5, #1
 801687a:	2b06      	cmp	r3, #6
 801687c:	d824      	bhi.n	80168c8 <_scanf_float+0x2f4>
 801687e:	2d02      	cmp	r5, #2
 8016880:	d836      	bhi.n	80168f0 <_scanf_float+0x31c>
 8016882:	9b01      	ldr	r3, [sp, #4]
 8016884:	429e      	cmp	r6, r3
 8016886:	f67f aee7 	bls.w	8016658 <_scanf_float+0x84>
 801688a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801688e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016892:	464a      	mov	r2, r9
 8016894:	4640      	mov	r0, r8
 8016896:	4798      	blx	r3
 8016898:	6923      	ldr	r3, [r4, #16]
 801689a:	3b01      	subs	r3, #1
 801689c:	6123      	str	r3, [r4, #16]
 801689e:	e7f0      	b.n	8016882 <_scanf_float+0x2ae>
 80168a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80168a4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80168a8:	464a      	mov	r2, r9
 80168aa:	4640      	mov	r0, r8
 80168ac:	4798      	blx	r3
 80168ae:	6923      	ldr	r3, [r4, #16]
 80168b0:	3b01      	subs	r3, #1
 80168b2:	6123      	str	r3, [r4, #16]
 80168b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80168b8:	fa5f fa8a 	uxtb.w	sl, sl
 80168bc:	f1ba 0f02 	cmp.w	sl, #2
 80168c0:	d1ee      	bne.n	80168a0 <_scanf_float+0x2cc>
 80168c2:	3d03      	subs	r5, #3
 80168c4:	b2ed      	uxtb	r5, r5
 80168c6:	1b76      	subs	r6, r6, r5
 80168c8:	6823      	ldr	r3, [r4, #0]
 80168ca:	05da      	lsls	r2, r3, #23
 80168cc:	d530      	bpl.n	8016930 <_scanf_float+0x35c>
 80168ce:	055b      	lsls	r3, r3, #21
 80168d0:	d511      	bpl.n	80168f6 <_scanf_float+0x322>
 80168d2:	9b01      	ldr	r3, [sp, #4]
 80168d4:	429e      	cmp	r6, r3
 80168d6:	f67f aebf 	bls.w	8016658 <_scanf_float+0x84>
 80168da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80168de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80168e2:	464a      	mov	r2, r9
 80168e4:	4640      	mov	r0, r8
 80168e6:	4798      	blx	r3
 80168e8:	6923      	ldr	r3, [r4, #16]
 80168ea:	3b01      	subs	r3, #1
 80168ec:	6123      	str	r3, [r4, #16]
 80168ee:	e7f0      	b.n	80168d2 <_scanf_float+0x2fe>
 80168f0:	46aa      	mov	sl, r5
 80168f2:	46b3      	mov	fp, r6
 80168f4:	e7de      	b.n	80168b4 <_scanf_float+0x2e0>
 80168f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80168fa:	6923      	ldr	r3, [r4, #16]
 80168fc:	2965      	cmp	r1, #101	@ 0x65
 80168fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8016902:	f106 35ff 	add.w	r5, r6, #4294967295
 8016906:	6123      	str	r3, [r4, #16]
 8016908:	d00c      	beq.n	8016924 <_scanf_float+0x350>
 801690a:	2945      	cmp	r1, #69	@ 0x45
 801690c:	d00a      	beq.n	8016924 <_scanf_float+0x350>
 801690e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016912:	464a      	mov	r2, r9
 8016914:	4640      	mov	r0, r8
 8016916:	4798      	blx	r3
 8016918:	6923      	ldr	r3, [r4, #16]
 801691a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801691e:	3b01      	subs	r3, #1
 8016920:	1eb5      	subs	r5, r6, #2
 8016922:	6123      	str	r3, [r4, #16]
 8016924:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016928:	464a      	mov	r2, r9
 801692a:	4640      	mov	r0, r8
 801692c:	4798      	blx	r3
 801692e:	462e      	mov	r6, r5
 8016930:	6822      	ldr	r2, [r4, #0]
 8016932:	f012 0210 	ands.w	r2, r2, #16
 8016936:	d001      	beq.n	801693c <_scanf_float+0x368>
 8016938:	2000      	movs	r0, #0
 801693a:	e68e      	b.n	801665a <_scanf_float+0x86>
 801693c:	7032      	strb	r2, [r6, #0]
 801693e:	6823      	ldr	r3, [r4, #0]
 8016940:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8016944:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016948:	d125      	bne.n	8016996 <_scanf_float+0x3c2>
 801694a:	9b02      	ldr	r3, [sp, #8]
 801694c:	429f      	cmp	r7, r3
 801694e:	d00a      	beq.n	8016966 <_scanf_float+0x392>
 8016950:	1bda      	subs	r2, r3, r7
 8016952:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8016956:	429e      	cmp	r6, r3
 8016958:	bf28      	it	cs
 801695a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801695e:	4922      	ldr	r1, [pc, #136]	@ (80169e8 <_scanf_float+0x414>)
 8016960:	4630      	mov	r0, r6
 8016962:	f000 fa6d 	bl	8016e40 <siprintf>
 8016966:	9901      	ldr	r1, [sp, #4]
 8016968:	2200      	movs	r2, #0
 801696a:	4640      	mov	r0, r8
 801696c:	f002 fd84 	bl	8019478 <_strtod_r>
 8016970:	9b03      	ldr	r3, [sp, #12]
 8016972:	6821      	ldr	r1, [r4, #0]
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	f011 0f02 	tst.w	r1, #2
 801697a:	ec57 6b10 	vmov	r6, r7, d0
 801697e:	f103 0204 	add.w	r2, r3, #4
 8016982:	d015      	beq.n	80169b0 <_scanf_float+0x3dc>
 8016984:	9903      	ldr	r1, [sp, #12]
 8016986:	600a      	str	r2, [r1, #0]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	e9c3 6700 	strd	r6, r7, [r3]
 801698e:	68e3      	ldr	r3, [r4, #12]
 8016990:	3301      	adds	r3, #1
 8016992:	60e3      	str	r3, [r4, #12]
 8016994:	e7d0      	b.n	8016938 <_scanf_float+0x364>
 8016996:	9b04      	ldr	r3, [sp, #16]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d0e4      	beq.n	8016966 <_scanf_float+0x392>
 801699c:	9905      	ldr	r1, [sp, #20]
 801699e:	230a      	movs	r3, #10
 80169a0:	3101      	adds	r1, #1
 80169a2:	4640      	mov	r0, r8
 80169a4:	f002 fde8 	bl	8019578 <_strtol_r>
 80169a8:	9b04      	ldr	r3, [sp, #16]
 80169aa:	9e05      	ldr	r6, [sp, #20]
 80169ac:	1ac2      	subs	r2, r0, r3
 80169ae:	e7d0      	b.n	8016952 <_scanf_float+0x37e>
 80169b0:	f011 0f04 	tst.w	r1, #4
 80169b4:	9903      	ldr	r1, [sp, #12]
 80169b6:	600a      	str	r2, [r1, #0]
 80169b8:	d1e6      	bne.n	8016988 <_scanf_float+0x3b4>
 80169ba:	681d      	ldr	r5, [r3, #0]
 80169bc:	4632      	mov	r2, r6
 80169be:	463b      	mov	r3, r7
 80169c0:	4630      	mov	r0, r6
 80169c2:	4639      	mov	r1, r7
 80169c4:	f7ea f8d2 	bl	8000b6c <__aeabi_dcmpun>
 80169c8:	b128      	cbz	r0, 80169d6 <_scanf_float+0x402>
 80169ca:	4808      	ldr	r0, [pc, #32]	@ (80169ec <_scanf_float+0x418>)
 80169cc:	f000 fbfe 	bl	80171cc <nanf>
 80169d0:	ed85 0a00 	vstr	s0, [r5]
 80169d4:	e7db      	b.n	801698e <_scanf_float+0x3ba>
 80169d6:	4630      	mov	r0, r6
 80169d8:	4639      	mov	r1, r7
 80169da:	f7ea f925 	bl	8000c28 <__aeabi_d2f>
 80169de:	6028      	str	r0, [r5, #0]
 80169e0:	e7d5      	b.n	801698e <_scanf_float+0x3ba>
 80169e2:	2700      	movs	r7, #0
 80169e4:	e62e      	b.n	8016644 <_scanf_float+0x70>
 80169e6:	bf00      	nop
 80169e8:	0801b120 	.word	0x0801b120
 80169ec:	0801b261 	.word	0x0801b261

080169f0 <__sflush_r>:
 80169f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80169f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169f8:	0716      	lsls	r6, r2, #28
 80169fa:	4605      	mov	r5, r0
 80169fc:	460c      	mov	r4, r1
 80169fe:	d454      	bmi.n	8016aaa <__sflush_r+0xba>
 8016a00:	684b      	ldr	r3, [r1, #4]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	dc02      	bgt.n	8016a0c <__sflush_r+0x1c>
 8016a06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	dd48      	ble.n	8016a9e <__sflush_r+0xae>
 8016a0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016a0e:	2e00      	cmp	r6, #0
 8016a10:	d045      	beq.n	8016a9e <__sflush_r+0xae>
 8016a12:	2300      	movs	r3, #0
 8016a14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016a18:	682f      	ldr	r7, [r5, #0]
 8016a1a:	6a21      	ldr	r1, [r4, #32]
 8016a1c:	602b      	str	r3, [r5, #0]
 8016a1e:	d030      	beq.n	8016a82 <__sflush_r+0x92>
 8016a20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016a22:	89a3      	ldrh	r3, [r4, #12]
 8016a24:	0759      	lsls	r1, r3, #29
 8016a26:	d505      	bpl.n	8016a34 <__sflush_r+0x44>
 8016a28:	6863      	ldr	r3, [r4, #4]
 8016a2a:	1ad2      	subs	r2, r2, r3
 8016a2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016a2e:	b10b      	cbz	r3, 8016a34 <__sflush_r+0x44>
 8016a30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016a32:	1ad2      	subs	r2, r2, r3
 8016a34:	2300      	movs	r3, #0
 8016a36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016a38:	6a21      	ldr	r1, [r4, #32]
 8016a3a:	4628      	mov	r0, r5
 8016a3c:	47b0      	blx	r6
 8016a3e:	1c43      	adds	r3, r0, #1
 8016a40:	89a3      	ldrh	r3, [r4, #12]
 8016a42:	d106      	bne.n	8016a52 <__sflush_r+0x62>
 8016a44:	6829      	ldr	r1, [r5, #0]
 8016a46:	291d      	cmp	r1, #29
 8016a48:	d82b      	bhi.n	8016aa2 <__sflush_r+0xb2>
 8016a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8016af4 <__sflush_r+0x104>)
 8016a4c:	40ca      	lsrs	r2, r1
 8016a4e:	07d6      	lsls	r6, r2, #31
 8016a50:	d527      	bpl.n	8016aa2 <__sflush_r+0xb2>
 8016a52:	2200      	movs	r2, #0
 8016a54:	6062      	str	r2, [r4, #4]
 8016a56:	04d9      	lsls	r1, r3, #19
 8016a58:	6922      	ldr	r2, [r4, #16]
 8016a5a:	6022      	str	r2, [r4, #0]
 8016a5c:	d504      	bpl.n	8016a68 <__sflush_r+0x78>
 8016a5e:	1c42      	adds	r2, r0, #1
 8016a60:	d101      	bne.n	8016a66 <__sflush_r+0x76>
 8016a62:	682b      	ldr	r3, [r5, #0]
 8016a64:	b903      	cbnz	r3, 8016a68 <__sflush_r+0x78>
 8016a66:	6560      	str	r0, [r4, #84]	@ 0x54
 8016a68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016a6a:	602f      	str	r7, [r5, #0]
 8016a6c:	b1b9      	cbz	r1, 8016a9e <__sflush_r+0xae>
 8016a6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016a72:	4299      	cmp	r1, r3
 8016a74:	d002      	beq.n	8016a7c <__sflush_r+0x8c>
 8016a76:	4628      	mov	r0, r5
 8016a78:	f001 fa06 	bl	8017e88 <_free_r>
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8016a80:	e00d      	b.n	8016a9e <__sflush_r+0xae>
 8016a82:	2301      	movs	r3, #1
 8016a84:	4628      	mov	r0, r5
 8016a86:	47b0      	blx	r6
 8016a88:	4602      	mov	r2, r0
 8016a8a:	1c50      	adds	r0, r2, #1
 8016a8c:	d1c9      	bne.n	8016a22 <__sflush_r+0x32>
 8016a8e:	682b      	ldr	r3, [r5, #0]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d0c6      	beq.n	8016a22 <__sflush_r+0x32>
 8016a94:	2b1d      	cmp	r3, #29
 8016a96:	d001      	beq.n	8016a9c <__sflush_r+0xac>
 8016a98:	2b16      	cmp	r3, #22
 8016a9a:	d11e      	bne.n	8016ada <__sflush_r+0xea>
 8016a9c:	602f      	str	r7, [r5, #0]
 8016a9e:	2000      	movs	r0, #0
 8016aa0:	e022      	b.n	8016ae8 <__sflush_r+0xf8>
 8016aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016aa6:	b21b      	sxth	r3, r3
 8016aa8:	e01b      	b.n	8016ae2 <__sflush_r+0xf2>
 8016aaa:	690f      	ldr	r7, [r1, #16]
 8016aac:	2f00      	cmp	r7, #0
 8016aae:	d0f6      	beq.n	8016a9e <__sflush_r+0xae>
 8016ab0:	0793      	lsls	r3, r2, #30
 8016ab2:	680e      	ldr	r6, [r1, #0]
 8016ab4:	bf08      	it	eq
 8016ab6:	694b      	ldreq	r3, [r1, #20]
 8016ab8:	600f      	str	r7, [r1, #0]
 8016aba:	bf18      	it	ne
 8016abc:	2300      	movne	r3, #0
 8016abe:	eba6 0807 	sub.w	r8, r6, r7
 8016ac2:	608b      	str	r3, [r1, #8]
 8016ac4:	f1b8 0f00 	cmp.w	r8, #0
 8016ac8:	dde9      	ble.n	8016a9e <__sflush_r+0xae>
 8016aca:	6a21      	ldr	r1, [r4, #32]
 8016acc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016ace:	4643      	mov	r3, r8
 8016ad0:	463a      	mov	r2, r7
 8016ad2:	4628      	mov	r0, r5
 8016ad4:	47b0      	blx	r6
 8016ad6:	2800      	cmp	r0, #0
 8016ad8:	dc08      	bgt.n	8016aec <__sflush_r+0xfc>
 8016ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016ae2:	81a3      	strh	r3, [r4, #12]
 8016ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8016ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016aec:	4407      	add	r7, r0
 8016aee:	eba8 0800 	sub.w	r8, r8, r0
 8016af2:	e7e7      	b.n	8016ac4 <__sflush_r+0xd4>
 8016af4:	20400001 	.word	0x20400001

08016af8 <_fflush_r>:
 8016af8:	b538      	push	{r3, r4, r5, lr}
 8016afa:	690b      	ldr	r3, [r1, #16]
 8016afc:	4605      	mov	r5, r0
 8016afe:	460c      	mov	r4, r1
 8016b00:	b913      	cbnz	r3, 8016b08 <_fflush_r+0x10>
 8016b02:	2500      	movs	r5, #0
 8016b04:	4628      	mov	r0, r5
 8016b06:	bd38      	pop	{r3, r4, r5, pc}
 8016b08:	b118      	cbz	r0, 8016b12 <_fflush_r+0x1a>
 8016b0a:	6a03      	ldr	r3, [r0, #32]
 8016b0c:	b90b      	cbnz	r3, 8016b12 <_fflush_r+0x1a>
 8016b0e:	f000 f8bb 	bl	8016c88 <__sinit>
 8016b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d0f3      	beq.n	8016b02 <_fflush_r+0xa>
 8016b1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016b1c:	07d0      	lsls	r0, r2, #31
 8016b1e:	d404      	bmi.n	8016b2a <_fflush_r+0x32>
 8016b20:	0599      	lsls	r1, r3, #22
 8016b22:	d402      	bmi.n	8016b2a <_fflush_r+0x32>
 8016b24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b26:	f000 fb40 	bl	80171aa <__retarget_lock_acquire_recursive>
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	4621      	mov	r1, r4
 8016b2e:	f7ff ff5f 	bl	80169f0 <__sflush_r>
 8016b32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016b34:	07da      	lsls	r2, r3, #31
 8016b36:	4605      	mov	r5, r0
 8016b38:	d4e4      	bmi.n	8016b04 <_fflush_r+0xc>
 8016b3a:	89a3      	ldrh	r3, [r4, #12]
 8016b3c:	059b      	lsls	r3, r3, #22
 8016b3e:	d4e1      	bmi.n	8016b04 <_fflush_r+0xc>
 8016b40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b42:	f000 fb33 	bl	80171ac <__retarget_lock_release_recursive>
 8016b46:	e7dd      	b.n	8016b04 <_fflush_r+0xc>

08016b48 <fflush>:
 8016b48:	4601      	mov	r1, r0
 8016b4a:	b920      	cbnz	r0, 8016b56 <fflush+0xe>
 8016b4c:	4a04      	ldr	r2, [pc, #16]	@ (8016b60 <fflush+0x18>)
 8016b4e:	4905      	ldr	r1, [pc, #20]	@ (8016b64 <fflush+0x1c>)
 8016b50:	4805      	ldr	r0, [pc, #20]	@ (8016b68 <fflush+0x20>)
 8016b52:	f000 b8b1 	b.w	8016cb8 <_fwalk_sglue>
 8016b56:	4b05      	ldr	r3, [pc, #20]	@ (8016b6c <fflush+0x24>)
 8016b58:	6818      	ldr	r0, [r3, #0]
 8016b5a:	f7ff bfcd 	b.w	8016af8 <_fflush_r>
 8016b5e:	bf00      	nop
 8016b60:	2000020c 	.word	0x2000020c
 8016b64:	08016af9 	.word	0x08016af9
 8016b68:	2000021c 	.word	0x2000021c
 8016b6c:	20000218 	.word	0x20000218

08016b70 <std>:
 8016b70:	2300      	movs	r3, #0
 8016b72:	b510      	push	{r4, lr}
 8016b74:	4604      	mov	r4, r0
 8016b76:	e9c0 3300 	strd	r3, r3, [r0]
 8016b7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016b7e:	6083      	str	r3, [r0, #8]
 8016b80:	8181      	strh	r1, [r0, #12]
 8016b82:	6643      	str	r3, [r0, #100]	@ 0x64
 8016b84:	81c2      	strh	r2, [r0, #14]
 8016b86:	6183      	str	r3, [r0, #24]
 8016b88:	4619      	mov	r1, r3
 8016b8a:	2208      	movs	r2, #8
 8016b8c:	305c      	adds	r0, #92	@ 0x5c
 8016b8e:	f000 fa6b 	bl	8017068 <memset>
 8016b92:	4b0d      	ldr	r3, [pc, #52]	@ (8016bc8 <std+0x58>)
 8016b94:	6263      	str	r3, [r4, #36]	@ 0x24
 8016b96:	4b0d      	ldr	r3, [pc, #52]	@ (8016bcc <std+0x5c>)
 8016b98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8016bd0 <std+0x60>)
 8016b9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8016bd4 <std+0x64>)
 8016ba0:	6323      	str	r3, [r4, #48]	@ 0x30
 8016ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8016bd8 <std+0x68>)
 8016ba4:	6224      	str	r4, [r4, #32]
 8016ba6:	429c      	cmp	r4, r3
 8016ba8:	d006      	beq.n	8016bb8 <std+0x48>
 8016baa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016bae:	4294      	cmp	r4, r2
 8016bb0:	d002      	beq.n	8016bb8 <std+0x48>
 8016bb2:	33d0      	adds	r3, #208	@ 0xd0
 8016bb4:	429c      	cmp	r4, r3
 8016bb6:	d105      	bne.n	8016bc4 <std+0x54>
 8016bb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bc0:	f000 baf2 	b.w	80171a8 <__retarget_lock_init_recursive>
 8016bc4:	bd10      	pop	{r4, pc}
 8016bc6:	bf00      	nop
 8016bc8:	08016e85 	.word	0x08016e85
 8016bcc:	08016ea7 	.word	0x08016ea7
 8016bd0:	08016edf 	.word	0x08016edf
 8016bd4:	08016f03 	.word	0x08016f03
 8016bd8:	200042f4 	.word	0x200042f4

08016bdc <stdio_exit_handler>:
 8016bdc:	4a02      	ldr	r2, [pc, #8]	@ (8016be8 <stdio_exit_handler+0xc>)
 8016bde:	4903      	ldr	r1, [pc, #12]	@ (8016bec <stdio_exit_handler+0x10>)
 8016be0:	4803      	ldr	r0, [pc, #12]	@ (8016bf0 <stdio_exit_handler+0x14>)
 8016be2:	f000 b869 	b.w	8016cb8 <_fwalk_sglue>
 8016be6:	bf00      	nop
 8016be8:	2000020c 	.word	0x2000020c
 8016bec:	08016af9 	.word	0x08016af9
 8016bf0:	2000021c 	.word	0x2000021c

08016bf4 <cleanup_stdio>:
 8016bf4:	6841      	ldr	r1, [r0, #4]
 8016bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8016c28 <cleanup_stdio+0x34>)
 8016bf8:	4299      	cmp	r1, r3
 8016bfa:	b510      	push	{r4, lr}
 8016bfc:	4604      	mov	r4, r0
 8016bfe:	d001      	beq.n	8016c04 <cleanup_stdio+0x10>
 8016c00:	f7ff ff7a 	bl	8016af8 <_fflush_r>
 8016c04:	68a1      	ldr	r1, [r4, #8]
 8016c06:	4b09      	ldr	r3, [pc, #36]	@ (8016c2c <cleanup_stdio+0x38>)
 8016c08:	4299      	cmp	r1, r3
 8016c0a:	d002      	beq.n	8016c12 <cleanup_stdio+0x1e>
 8016c0c:	4620      	mov	r0, r4
 8016c0e:	f7ff ff73 	bl	8016af8 <_fflush_r>
 8016c12:	68e1      	ldr	r1, [r4, #12]
 8016c14:	4b06      	ldr	r3, [pc, #24]	@ (8016c30 <cleanup_stdio+0x3c>)
 8016c16:	4299      	cmp	r1, r3
 8016c18:	d004      	beq.n	8016c24 <cleanup_stdio+0x30>
 8016c1a:	4620      	mov	r0, r4
 8016c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c20:	f7ff bf6a 	b.w	8016af8 <_fflush_r>
 8016c24:	bd10      	pop	{r4, pc}
 8016c26:	bf00      	nop
 8016c28:	200042f4 	.word	0x200042f4
 8016c2c:	2000435c 	.word	0x2000435c
 8016c30:	200043c4 	.word	0x200043c4

08016c34 <global_stdio_init.part.0>:
 8016c34:	b510      	push	{r4, lr}
 8016c36:	4b0b      	ldr	r3, [pc, #44]	@ (8016c64 <global_stdio_init.part.0+0x30>)
 8016c38:	4c0b      	ldr	r4, [pc, #44]	@ (8016c68 <global_stdio_init.part.0+0x34>)
 8016c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8016c6c <global_stdio_init.part.0+0x38>)
 8016c3c:	601a      	str	r2, [r3, #0]
 8016c3e:	4620      	mov	r0, r4
 8016c40:	2200      	movs	r2, #0
 8016c42:	2104      	movs	r1, #4
 8016c44:	f7ff ff94 	bl	8016b70 <std>
 8016c48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016c4c:	2201      	movs	r2, #1
 8016c4e:	2109      	movs	r1, #9
 8016c50:	f7ff ff8e 	bl	8016b70 <std>
 8016c54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016c58:	2202      	movs	r2, #2
 8016c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c5e:	2112      	movs	r1, #18
 8016c60:	f7ff bf86 	b.w	8016b70 <std>
 8016c64:	2000442c 	.word	0x2000442c
 8016c68:	200042f4 	.word	0x200042f4
 8016c6c:	08016bdd 	.word	0x08016bdd

08016c70 <__sfp_lock_acquire>:
 8016c70:	4801      	ldr	r0, [pc, #4]	@ (8016c78 <__sfp_lock_acquire+0x8>)
 8016c72:	f000 ba9a 	b.w	80171aa <__retarget_lock_acquire_recursive>
 8016c76:	bf00      	nop
 8016c78:	20004435 	.word	0x20004435

08016c7c <__sfp_lock_release>:
 8016c7c:	4801      	ldr	r0, [pc, #4]	@ (8016c84 <__sfp_lock_release+0x8>)
 8016c7e:	f000 ba95 	b.w	80171ac <__retarget_lock_release_recursive>
 8016c82:	bf00      	nop
 8016c84:	20004435 	.word	0x20004435

08016c88 <__sinit>:
 8016c88:	b510      	push	{r4, lr}
 8016c8a:	4604      	mov	r4, r0
 8016c8c:	f7ff fff0 	bl	8016c70 <__sfp_lock_acquire>
 8016c90:	6a23      	ldr	r3, [r4, #32]
 8016c92:	b11b      	cbz	r3, 8016c9c <__sinit+0x14>
 8016c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c98:	f7ff bff0 	b.w	8016c7c <__sfp_lock_release>
 8016c9c:	4b04      	ldr	r3, [pc, #16]	@ (8016cb0 <__sinit+0x28>)
 8016c9e:	6223      	str	r3, [r4, #32]
 8016ca0:	4b04      	ldr	r3, [pc, #16]	@ (8016cb4 <__sinit+0x2c>)
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d1f5      	bne.n	8016c94 <__sinit+0xc>
 8016ca8:	f7ff ffc4 	bl	8016c34 <global_stdio_init.part.0>
 8016cac:	e7f2      	b.n	8016c94 <__sinit+0xc>
 8016cae:	bf00      	nop
 8016cb0:	08016bf5 	.word	0x08016bf5
 8016cb4:	2000442c 	.word	0x2000442c

08016cb8 <_fwalk_sglue>:
 8016cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016cbc:	4607      	mov	r7, r0
 8016cbe:	4688      	mov	r8, r1
 8016cc0:	4614      	mov	r4, r2
 8016cc2:	2600      	movs	r6, #0
 8016cc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016cc8:	f1b9 0901 	subs.w	r9, r9, #1
 8016ccc:	d505      	bpl.n	8016cda <_fwalk_sglue+0x22>
 8016cce:	6824      	ldr	r4, [r4, #0]
 8016cd0:	2c00      	cmp	r4, #0
 8016cd2:	d1f7      	bne.n	8016cc4 <_fwalk_sglue+0xc>
 8016cd4:	4630      	mov	r0, r6
 8016cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cda:	89ab      	ldrh	r3, [r5, #12]
 8016cdc:	2b01      	cmp	r3, #1
 8016cde:	d907      	bls.n	8016cf0 <_fwalk_sglue+0x38>
 8016ce0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016ce4:	3301      	adds	r3, #1
 8016ce6:	d003      	beq.n	8016cf0 <_fwalk_sglue+0x38>
 8016ce8:	4629      	mov	r1, r5
 8016cea:	4638      	mov	r0, r7
 8016cec:	47c0      	blx	r8
 8016cee:	4306      	orrs	r6, r0
 8016cf0:	3568      	adds	r5, #104	@ 0x68
 8016cf2:	e7e9      	b.n	8016cc8 <_fwalk_sglue+0x10>

08016cf4 <iprintf>:
 8016cf4:	b40f      	push	{r0, r1, r2, r3}
 8016cf6:	b507      	push	{r0, r1, r2, lr}
 8016cf8:	4906      	ldr	r1, [pc, #24]	@ (8016d14 <iprintf+0x20>)
 8016cfa:	ab04      	add	r3, sp, #16
 8016cfc:	6808      	ldr	r0, [r1, #0]
 8016cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d02:	6881      	ldr	r1, [r0, #8]
 8016d04:	9301      	str	r3, [sp, #4]
 8016d06:	f002 fdbb 	bl	8019880 <_vfiprintf_r>
 8016d0a:	b003      	add	sp, #12
 8016d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d10:	b004      	add	sp, #16
 8016d12:	4770      	bx	lr
 8016d14:	20000218 	.word	0x20000218

08016d18 <_puts_r>:
 8016d18:	6a03      	ldr	r3, [r0, #32]
 8016d1a:	b570      	push	{r4, r5, r6, lr}
 8016d1c:	6884      	ldr	r4, [r0, #8]
 8016d1e:	4605      	mov	r5, r0
 8016d20:	460e      	mov	r6, r1
 8016d22:	b90b      	cbnz	r3, 8016d28 <_puts_r+0x10>
 8016d24:	f7ff ffb0 	bl	8016c88 <__sinit>
 8016d28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016d2a:	07db      	lsls	r3, r3, #31
 8016d2c:	d405      	bmi.n	8016d3a <_puts_r+0x22>
 8016d2e:	89a3      	ldrh	r3, [r4, #12]
 8016d30:	0598      	lsls	r0, r3, #22
 8016d32:	d402      	bmi.n	8016d3a <_puts_r+0x22>
 8016d34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016d36:	f000 fa38 	bl	80171aa <__retarget_lock_acquire_recursive>
 8016d3a:	89a3      	ldrh	r3, [r4, #12]
 8016d3c:	0719      	lsls	r1, r3, #28
 8016d3e:	d502      	bpl.n	8016d46 <_puts_r+0x2e>
 8016d40:	6923      	ldr	r3, [r4, #16]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d135      	bne.n	8016db2 <_puts_r+0x9a>
 8016d46:	4621      	mov	r1, r4
 8016d48:	4628      	mov	r0, r5
 8016d4a:	f000 f91d 	bl	8016f88 <__swsetup_r>
 8016d4e:	b380      	cbz	r0, 8016db2 <_puts_r+0x9a>
 8016d50:	f04f 35ff 	mov.w	r5, #4294967295
 8016d54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016d56:	07da      	lsls	r2, r3, #31
 8016d58:	d405      	bmi.n	8016d66 <_puts_r+0x4e>
 8016d5a:	89a3      	ldrh	r3, [r4, #12]
 8016d5c:	059b      	lsls	r3, r3, #22
 8016d5e:	d402      	bmi.n	8016d66 <_puts_r+0x4e>
 8016d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016d62:	f000 fa23 	bl	80171ac <__retarget_lock_release_recursive>
 8016d66:	4628      	mov	r0, r5
 8016d68:	bd70      	pop	{r4, r5, r6, pc}
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	da04      	bge.n	8016d78 <_puts_r+0x60>
 8016d6e:	69a2      	ldr	r2, [r4, #24]
 8016d70:	429a      	cmp	r2, r3
 8016d72:	dc17      	bgt.n	8016da4 <_puts_r+0x8c>
 8016d74:	290a      	cmp	r1, #10
 8016d76:	d015      	beq.n	8016da4 <_puts_r+0x8c>
 8016d78:	6823      	ldr	r3, [r4, #0]
 8016d7a:	1c5a      	adds	r2, r3, #1
 8016d7c:	6022      	str	r2, [r4, #0]
 8016d7e:	7019      	strb	r1, [r3, #0]
 8016d80:	68a3      	ldr	r3, [r4, #8]
 8016d82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016d86:	3b01      	subs	r3, #1
 8016d88:	60a3      	str	r3, [r4, #8]
 8016d8a:	2900      	cmp	r1, #0
 8016d8c:	d1ed      	bne.n	8016d6a <_puts_r+0x52>
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	da11      	bge.n	8016db6 <_puts_r+0x9e>
 8016d92:	4622      	mov	r2, r4
 8016d94:	210a      	movs	r1, #10
 8016d96:	4628      	mov	r0, r5
 8016d98:	f000 f8b7 	bl	8016f0a <__swbuf_r>
 8016d9c:	3001      	adds	r0, #1
 8016d9e:	d0d7      	beq.n	8016d50 <_puts_r+0x38>
 8016da0:	250a      	movs	r5, #10
 8016da2:	e7d7      	b.n	8016d54 <_puts_r+0x3c>
 8016da4:	4622      	mov	r2, r4
 8016da6:	4628      	mov	r0, r5
 8016da8:	f000 f8af 	bl	8016f0a <__swbuf_r>
 8016dac:	3001      	adds	r0, #1
 8016dae:	d1e7      	bne.n	8016d80 <_puts_r+0x68>
 8016db0:	e7ce      	b.n	8016d50 <_puts_r+0x38>
 8016db2:	3e01      	subs	r6, #1
 8016db4:	e7e4      	b.n	8016d80 <_puts_r+0x68>
 8016db6:	6823      	ldr	r3, [r4, #0]
 8016db8:	1c5a      	adds	r2, r3, #1
 8016dba:	6022      	str	r2, [r4, #0]
 8016dbc:	220a      	movs	r2, #10
 8016dbe:	701a      	strb	r2, [r3, #0]
 8016dc0:	e7ee      	b.n	8016da0 <_puts_r+0x88>
	...

08016dc4 <puts>:
 8016dc4:	4b02      	ldr	r3, [pc, #8]	@ (8016dd0 <puts+0xc>)
 8016dc6:	4601      	mov	r1, r0
 8016dc8:	6818      	ldr	r0, [r3, #0]
 8016dca:	f7ff bfa5 	b.w	8016d18 <_puts_r>
 8016dce:	bf00      	nop
 8016dd0:	20000218 	.word	0x20000218

08016dd4 <sniprintf>:
 8016dd4:	b40c      	push	{r2, r3}
 8016dd6:	b530      	push	{r4, r5, lr}
 8016dd8:	4b18      	ldr	r3, [pc, #96]	@ (8016e3c <sniprintf+0x68>)
 8016dda:	1e0c      	subs	r4, r1, #0
 8016ddc:	681d      	ldr	r5, [r3, #0]
 8016dde:	b09d      	sub	sp, #116	@ 0x74
 8016de0:	da08      	bge.n	8016df4 <sniprintf+0x20>
 8016de2:	238b      	movs	r3, #139	@ 0x8b
 8016de4:	602b      	str	r3, [r5, #0]
 8016de6:	f04f 30ff 	mov.w	r0, #4294967295
 8016dea:	b01d      	add	sp, #116	@ 0x74
 8016dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016df0:	b002      	add	sp, #8
 8016df2:	4770      	bx	lr
 8016df4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016df8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016dfc:	f04f 0300 	mov.w	r3, #0
 8016e00:	931b      	str	r3, [sp, #108]	@ 0x6c
 8016e02:	bf14      	ite	ne
 8016e04:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016e08:	4623      	moveq	r3, r4
 8016e0a:	9304      	str	r3, [sp, #16]
 8016e0c:	9307      	str	r3, [sp, #28]
 8016e0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016e12:	9002      	str	r0, [sp, #8]
 8016e14:	9006      	str	r0, [sp, #24]
 8016e16:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016e1a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016e1c:	ab21      	add	r3, sp, #132	@ 0x84
 8016e1e:	a902      	add	r1, sp, #8
 8016e20:	4628      	mov	r0, r5
 8016e22:	9301      	str	r3, [sp, #4]
 8016e24:	f002 fc06 	bl	8019634 <_svfiprintf_r>
 8016e28:	1c43      	adds	r3, r0, #1
 8016e2a:	bfbc      	itt	lt
 8016e2c:	238b      	movlt	r3, #139	@ 0x8b
 8016e2e:	602b      	strlt	r3, [r5, #0]
 8016e30:	2c00      	cmp	r4, #0
 8016e32:	d0da      	beq.n	8016dea <sniprintf+0x16>
 8016e34:	9b02      	ldr	r3, [sp, #8]
 8016e36:	2200      	movs	r2, #0
 8016e38:	701a      	strb	r2, [r3, #0]
 8016e3a:	e7d6      	b.n	8016dea <sniprintf+0x16>
 8016e3c:	20000218 	.word	0x20000218

08016e40 <siprintf>:
 8016e40:	b40e      	push	{r1, r2, r3}
 8016e42:	b510      	push	{r4, lr}
 8016e44:	b09d      	sub	sp, #116	@ 0x74
 8016e46:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016e48:	9002      	str	r0, [sp, #8]
 8016e4a:	9006      	str	r0, [sp, #24]
 8016e4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016e50:	480a      	ldr	r0, [pc, #40]	@ (8016e7c <siprintf+0x3c>)
 8016e52:	9107      	str	r1, [sp, #28]
 8016e54:	9104      	str	r1, [sp, #16]
 8016e56:	490a      	ldr	r1, [pc, #40]	@ (8016e80 <siprintf+0x40>)
 8016e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e5c:	9105      	str	r1, [sp, #20]
 8016e5e:	2400      	movs	r4, #0
 8016e60:	a902      	add	r1, sp, #8
 8016e62:	6800      	ldr	r0, [r0, #0]
 8016e64:	9301      	str	r3, [sp, #4]
 8016e66:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016e68:	f002 fbe4 	bl	8019634 <_svfiprintf_r>
 8016e6c:	9b02      	ldr	r3, [sp, #8]
 8016e6e:	701c      	strb	r4, [r3, #0]
 8016e70:	b01d      	add	sp, #116	@ 0x74
 8016e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e76:	b003      	add	sp, #12
 8016e78:	4770      	bx	lr
 8016e7a:	bf00      	nop
 8016e7c:	20000218 	.word	0x20000218
 8016e80:	ffff0208 	.word	0xffff0208

08016e84 <__sread>:
 8016e84:	b510      	push	{r4, lr}
 8016e86:	460c      	mov	r4, r1
 8016e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e8c:	f000 f92e 	bl	80170ec <_read_r>
 8016e90:	2800      	cmp	r0, #0
 8016e92:	bfab      	itete	ge
 8016e94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016e96:	89a3      	ldrhlt	r3, [r4, #12]
 8016e98:	181b      	addge	r3, r3, r0
 8016e9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016e9e:	bfac      	ite	ge
 8016ea0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016ea2:	81a3      	strhlt	r3, [r4, #12]
 8016ea4:	bd10      	pop	{r4, pc}

08016ea6 <__swrite>:
 8016ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eaa:	461f      	mov	r7, r3
 8016eac:	898b      	ldrh	r3, [r1, #12]
 8016eae:	05db      	lsls	r3, r3, #23
 8016eb0:	4605      	mov	r5, r0
 8016eb2:	460c      	mov	r4, r1
 8016eb4:	4616      	mov	r6, r2
 8016eb6:	d505      	bpl.n	8016ec4 <__swrite+0x1e>
 8016eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ebc:	2302      	movs	r3, #2
 8016ebe:	2200      	movs	r2, #0
 8016ec0:	f000 f902 	bl	80170c8 <_lseek_r>
 8016ec4:	89a3      	ldrh	r3, [r4, #12]
 8016ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016eca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016ece:	81a3      	strh	r3, [r4, #12]
 8016ed0:	4632      	mov	r2, r6
 8016ed2:	463b      	mov	r3, r7
 8016ed4:	4628      	mov	r0, r5
 8016ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016eda:	f000 b929 	b.w	8017130 <_write_r>

08016ede <__sseek>:
 8016ede:	b510      	push	{r4, lr}
 8016ee0:	460c      	mov	r4, r1
 8016ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ee6:	f000 f8ef 	bl	80170c8 <_lseek_r>
 8016eea:	1c43      	adds	r3, r0, #1
 8016eec:	89a3      	ldrh	r3, [r4, #12]
 8016eee:	bf15      	itete	ne
 8016ef0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016ef2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016ef6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016efa:	81a3      	strheq	r3, [r4, #12]
 8016efc:	bf18      	it	ne
 8016efe:	81a3      	strhne	r3, [r4, #12]
 8016f00:	bd10      	pop	{r4, pc}

08016f02 <__sclose>:
 8016f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f06:	f000 b8cf 	b.w	80170a8 <_close_r>

08016f0a <__swbuf_r>:
 8016f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f0c:	460e      	mov	r6, r1
 8016f0e:	4614      	mov	r4, r2
 8016f10:	4605      	mov	r5, r0
 8016f12:	b118      	cbz	r0, 8016f1c <__swbuf_r+0x12>
 8016f14:	6a03      	ldr	r3, [r0, #32]
 8016f16:	b90b      	cbnz	r3, 8016f1c <__swbuf_r+0x12>
 8016f18:	f7ff feb6 	bl	8016c88 <__sinit>
 8016f1c:	69a3      	ldr	r3, [r4, #24]
 8016f1e:	60a3      	str	r3, [r4, #8]
 8016f20:	89a3      	ldrh	r3, [r4, #12]
 8016f22:	071a      	lsls	r2, r3, #28
 8016f24:	d501      	bpl.n	8016f2a <__swbuf_r+0x20>
 8016f26:	6923      	ldr	r3, [r4, #16]
 8016f28:	b943      	cbnz	r3, 8016f3c <__swbuf_r+0x32>
 8016f2a:	4621      	mov	r1, r4
 8016f2c:	4628      	mov	r0, r5
 8016f2e:	f000 f82b 	bl	8016f88 <__swsetup_r>
 8016f32:	b118      	cbz	r0, 8016f3c <__swbuf_r+0x32>
 8016f34:	f04f 37ff 	mov.w	r7, #4294967295
 8016f38:	4638      	mov	r0, r7
 8016f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f3c:	6823      	ldr	r3, [r4, #0]
 8016f3e:	6922      	ldr	r2, [r4, #16]
 8016f40:	1a98      	subs	r0, r3, r2
 8016f42:	6963      	ldr	r3, [r4, #20]
 8016f44:	b2f6      	uxtb	r6, r6
 8016f46:	4283      	cmp	r3, r0
 8016f48:	4637      	mov	r7, r6
 8016f4a:	dc05      	bgt.n	8016f58 <__swbuf_r+0x4e>
 8016f4c:	4621      	mov	r1, r4
 8016f4e:	4628      	mov	r0, r5
 8016f50:	f7ff fdd2 	bl	8016af8 <_fflush_r>
 8016f54:	2800      	cmp	r0, #0
 8016f56:	d1ed      	bne.n	8016f34 <__swbuf_r+0x2a>
 8016f58:	68a3      	ldr	r3, [r4, #8]
 8016f5a:	3b01      	subs	r3, #1
 8016f5c:	60a3      	str	r3, [r4, #8]
 8016f5e:	6823      	ldr	r3, [r4, #0]
 8016f60:	1c5a      	adds	r2, r3, #1
 8016f62:	6022      	str	r2, [r4, #0]
 8016f64:	701e      	strb	r6, [r3, #0]
 8016f66:	6962      	ldr	r2, [r4, #20]
 8016f68:	1c43      	adds	r3, r0, #1
 8016f6a:	429a      	cmp	r2, r3
 8016f6c:	d004      	beq.n	8016f78 <__swbuf_r+0x6e>
 8016f6e:	89a3      	ldrh	r3, [r4, #12]
 8016f70:	07db      	lsls	r3, r3, #31
 8016f72:	d5e1      	bpl.n	8016f38 <__swbuf_r+0x2e>
 8016f74:	2e0a      	cmp	r6, #10
 8016f76:	d1df      	bne.n	8016f38 <__swbuf_r+0x2e>
 8016f78:	4621      	mov	r1, r4
 8016f7a:	4628      	mov	r0, r5
 8016f7c:	f7ff fdbc 	bl	8016af8 <_fflush_r>
 8016f80:	2800      	cmp	r0, #0
 8016f82:	d0d9      	beq.n	8016f38 <__swbuf_r+0x2e>
 8016f84:	e7d6      	b.n	8016f34 <__swbuf_r+0x2a>
	...

08016f88 <__swsetup_r>:
 8016f88:	b538      	push	{r3, r4, r5, lr}
 8016f8a:	4b29      	ldr	r3, [pc, #164]	@ (8017030 <__swsetup_r+0xa8>)
 8016f8c:	4605      	mov	r5, r0
 8016f8e:	6818      	ldr	r0, [r3, #0]
 8016f90:	460c      	mov	r4, r1
 8016f92:	b118      	cbz	r0, 8016f9c <__swsetup_r+0x14>
 8016f94:	6a03      	ldr	r3, [r0, #32]
 8016f96:	b90b      	cbnz	r3, 8016f9c <__swsetup_r+0x14>
 8016f98:	f7ff fe76 	bl	8016c88 <__sinit>
 8016f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fa0:	0719      	lsls	r1, r3, #28
 8016fa2:	d422      	bmi.n	8016fea <__swsetup_r+0x62>
 8016fa4:	06da      	lsls	r2, r3, #27
 8016fa6:	d407      	bmi.n	8016fb8 <__swsetup_r+0x30>
 8016fa8:	2209      	movs	r2, #9
 8016faa:	602a      	str	r2, [r5, #0]
 8016fac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016fb0:	81a3      	strh	r3, [r4, #12]
 8016fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8016fb6:	e033      	b.n	8017020 <__swsetup_r+0x98>
 8016fb8:	0758      	lsls	r0, r3, #29
 8016fba:	d512      	bpl.n	8016fe2 <__swsetup_r+0x5a>
 8016fbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016fbe:	b141      	cbz	r1, 8016fd2 <__swsetup_r+0x4a>
 8016fc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016fc4:	4299      	cmp	r1, r3
 8016fc6:	d002      	beq.n	8016fce <__swsetup_r+0x46>
 8016fc8:	4628      	mov	r0, r5
 8016fca:	f000 ff5d 	bl	8017e88 <_free_r>
 8016fce:	2300      	movs	r3, #0
 8016fd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8016fd2:	89a3      	ldrh	r3, [r4, #12]
 8016fd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016fd8:	81a3      	strh	r3, [r4, #12]
 8016fda:	2300      	movs	r3, #0
 8016fdc:	6063      	str	r3, [r4, #4]
 8016fde:	6923      	ldr	r3, [r4, #16]
 8016fe0:	6023      	str	r3, [r4, #0]
 8016fe2:	89a3      	ldrh	r3, [r4, #12]
 8016fe4:	f043 0308 	orr.w	r3, r3, #8
 8016fe8:	81a3      	strh	r3, [r4, #12]
 8016fea:	6923      	ldr	r3, [r4, #16]
 8016fec:	b94b      	cbnz	r3, 8017002 <__swsetup_r+0x7a>
 8016fee:	89a3      	ldrh	r3, [r4, #12]
 8016ff0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016ff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016ff8:	d003      	beq.n	8017002 <__swsetup_r+0x7a>
 8016ffa:	4621      	mov	r1, r4
 8016ffc:	4628      	mov	r0, r5
 8016ffe:	f002 fd7d 	bl	8019afc <__smakebuf_r>
 8017002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017006:	f013 0201 	ands.w	r2, r3, #1
 801700a:	d00a      	beq.n	8017022 <__swsetup_r+0x9a>
 801700c:	2200      	movs	r2, #0
 801700e:	60a2      	str	r2, [r4, #8]
 8017010:	6962      	ldr	r2, [r4, #20]
 8017012:	4252      	negs	r2, r2
 8017014:	61a2      	str	r2, [r4, #24]
 8017016:	6922      	ldr	r2, [r4, #16]
 8017018:	b942      	cbnz	r2, 801702c <__swsetup_r+0xa4>
 801701a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801701e:	d1c5      	bne.n	8016fac <__swsetup_r+0x24>
 8017020:	bd38      	pop	{r3, r4, r5, pc}
 8017022:	0799      	lsls	r1, r3, #30
 8017024:	bf58      	it	pl
 8017026:	6962      	ldrpl	r2, [r4, #20]
 8017028:	60a2      	str	r2, [r4, #8]
 801702a:	e7f4      	b.n	8017016 <__swsetup_r+0x8e>
 801702c:	2000      	movs	r0, #0
 801702e:	e7f7      	b.n	8017020 <__swsetup_r+0x98>
 8017030:	20000218 	.word	0x20000218

08017034 <memmove>:
 8017034:	4288      	cmp	r0, r1
 8017036:	b510      	push	{r4, lr}
 8017038:	eb01 0402 	add.w	r4, r1, r2
 801703c:	d902      	bls.n	8017044 <memmove+0x10>
 801703e:	4284      	cmp	r4, r0
 8017040:	4623      	mov	r3, r4
 8017042:	d807      	bhi.n	8017054 <memmove+0x20>
 8017044:	1e43      	subs	r3, r0, #1
 8017046:	42a1      	cmp	r1, r4
 8017048:	d008      	beq.n	801705c <memmove+0x28>
 801704a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801704e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017052:	e7f8      	b.n	8017046 <memmove+0x12>
 8017054:	4402      	add	r2, r0
 8017056:	4601      	mov	r1, r0
 8017058:	428a      	cmp	r2, r1
 801705a:	d100      	bne.n	801705e <memmove+0x2a>
 801705c:	bd10      	pop	{r4, pc}
 801705e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017066:	e7f7      	b.n	8017058 <memmove+0x24>

08017068 <memset>:
 8017068:	4402      	add	r2, r0
 801706a:	4603      	mov	r3, r0
 801706c:	4293      	cmp	r3, r2
 801706e:	d100      	bne.n	8017072 <memset+0xa>
 8017070:	4770      	bx	lr
 8017072:	f803 1b01 	strb.w	r1, [r3], #1
 8017076:	e7f9      	b.n	801706c <memset+0x4>

08017078 <strncat>:
 8017078:	b530      	push	{r4, r5, lr}
 801707a:	4604      	mov	r4, r0
 801707c:	7825      	ldrb	r5, [r4, #0]
 801707e:	4623      	mov	r3, r4
 8017080:	3401      	adds	r4, #1
 8017082:	2d00      	cmp	r5, #0
 8017084:	d1fa      	bne.n	801707c <strncat+0x4>
 8017086:	3a01      	subs	r2, #1
 8017088:	d304      	bcc.n	8017094 <strncat+0x1c>
 801708a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801708e:	f803 4b01 	strb.w	r4, [r3], #1
 8017092:	b904      	cbnz	r4, 8017096 <strncat+0x1e>
 8017094:	bd30      	pop	{r4, r5, pc}
 8017096:	2a00      	cmp	r2, #0
 8017098:	d1f5      	bne.n	8017086 <strncat+0xe>
 801709a:	701a      	strb	r2, [r3, #0]
 801709c:	e7f3      	b.n	8017086 <strncat+0xe>
	...

080170a0 <_localeconv_r>:
 80170a0:	4800      	ldr	r0, [pc, #0]	@ (80170a4 <_localeconv_r+0x4>)
 80170a2:	4770      	bx	lr
 80170a4:	20000358 	.word	0x20000358

080170a8 <_close_r>:
 80170a8:	b538      	push	{r3, r4, r5, lr}
 80170aa:	4d06      	ldr	r5, [pc, #24]	@ (80170c4 <_close_r+0x1c>)
 80170ac:	2300      	movs	r3, #0
 80170ae:	4604      	mov	r4, r0
 80170b0:	4608      	mov	r0, r1
 80170b2:	602b      	str	r3, [r5, #0]
 80170b4:	f7f5 f838 	bl	800c128 <_close>
 80170b8:	1c43      	adds	r3, r0, #1
 80170ba:	d102      	bne.n	80170c2 <_close_r+0x1a>
 80170bc:	682b      	ldr	r3, [r5, #0]
 80170be:	b103      	cbz	r3, 80170c2 <_close_r+0x1a>
 80170c0:	6023      	str	r3, [r4, #0]
 80170c2:	bd38      	pop	{r3, r4, r5, pc}
 80170c4:	20004430 	.word	0x20004430

080170c8 <_lseek_r>:
 80170c8:	b538      	push	{r3, r4, r5, lr}
 80170ca:	4d07      	ldr	r5, [pc, #28]	@ (80170e8 <_lseek_r+0x20>)
 80170cc:	4604      	mov	r4, r0
 80170ce:	4608      	mov	r0, r1
 80170d0:	4611      	mov	r1, r2
 80170d2:	2200      	movs	r2, #0
 80170d4:	602a      	str	r2, [r5, #0]
 80170d6:	461a      	mov	r2, r3
 80170d8:	f7f5 f84d 	bl	800c176 <_lseek>
 80170dc:	1c43      	adds	r3, r0, #1
 80170de:	d102      	bne.n	80170e6 <_lseek_r+0x1e>
 80170e0:	682b      	ldr	r3, [r5, #0]
 80170e2:	b103      	cbz	r3, 80170e6 <_lseek_r+0x1e>
 80170e4:	6023      	str	r3, [r4, #0]
 80170e6:	bd38      	pop	{r3, r4, r5, pc}
 80170e8:	20004430 	.word	0x20004430

080170ec <_read_r>:
 80170ec:	b538      	push	{r3, r4, r5, lr}
 80170ee:	4d07      	ldr	r5, [pc, #28]	@ (801710c <_read_r+0x20>)
 80170f0:	4604      	mov	r4, r0
 80170f2:	4608      	mov	r0, r1
 80170f4:	4611      	mov	r1, r2
 80170f6:	2200      	movs	r2, #0
 80170f8:	602a      	str	r2, [r5, #0]
 80170fa:	461a      	mov	r2, r3
 80170fc:	f7f4 ffdb 	bl	800c0b6 <_read>
 8017100:	1c43      	adds	r3, r0, #1
 8017102:	d102      	bne.n	801710a <_read_r+0x1e>
 8017104:	682b      	ldr	r3, [r5, #0]
 8017106:	b103      	cbz	r3, 801710a <_read_r+0x1e>
 8017108:	6023      	str	r3, [r4, #0]
 801710a:	bd38      	pop	{r3, r4, r5, pc}
 801710c:	20004430 	.word	0x20004430

08017110 <_sbrk_r>:
 8017110:	b538      	push	{r3, r4, r5, lr}
 8017112:	4d06      	ldr	r5, [pc, #24]	@ (801712c <_sbrk_r+0x1c>)
 8017114:	2300      	movs	r3, #0
 8017116:	4604      	mov	r4, r0
 8017118:	4608      	mov	r0, r1
 801711a:	602b      	str	r3, [r5, #0]
 801711c:	f7f5 f838 	bl	800c190 <_sbrk>
 8017120:	1c43      	adds	r3, r0, #1
 8017122:	d102      	bne.n	801712a <_sbrk_r+0x1a>
 8017124:	682b      	ldr	r3, [r5, #0]
 8017126:	b103      	cbz	r3, 801712a <_sbrk_r+0x1a>
 8017128:	6023      	str	r3, [r4, #0]
 801712a:	bd38      	pop	{r3, r4, r5, pc}
 801712c:	20004430 	.word	0x20004430

08017130 <_write_r>:
 8017130:	b538      	push	{r3, r4, r5, lr}
 8017132:	4d07      	ldr	r5, [pc, #28]	@ (8017150 <_write_r+0x20>)
 8017134:	4604      	mov	r4, r0
 8017136:	4608      	mov	r0, r1
 8017138:	4611      	mov	r1, r2
 801713a:	2200      	movs	r2, #0
 801713c:	602a      	str	r2, [r5, #0]
 801713e:	461a      	mov	r2, r3
 8017140:	f7f4 ffd6 	bl	800c0f0 <_write>
 8017144:	1c43      	adds	r3, r0, #1
 8017146:	d102      	bne.n	801714e <_write_r+0x1e>
 8017148:	682b      	ldr	r3, [r5, #0]
 801714a:	b103      	cbz	r3, 801714e <_write_r+0x1e>
 801714c:	6023      	str	r3, [r4, #0]
 801714e:	bd38      	pop	{r3, r4, r5, pc}
 8017150:	20004430 	.word	0x20004430

08017154 <__errno>:
 8017154:	4b01      	ldr	r3, [pc, #4]	@ (801715c <__errno+0x8>)
 8017156:	6818      	ldr	r0, [r3, #0]
 8017158:	4770      	bx	lr
 801715a:	bf00      	nop
 801715c:	20000218 	.word	0x20000218

08017160 <__libc_init_array>:
 8017160:	b570      	push	{r4, r5, r6, lr}
 8017162:	4d0d      	ldr	r5, [pc, #52]	@ (8017198 <__libc_init_array+0x38>)
 8017164:	4c0d      	ldr	r4, [pc, #52]	@ (801719c <__libc_init_array+0x3c>)
 8017166:	1b64      	subs	r4, r4, r5
 8017168:	10a4      	asrs	r4, r4, #2
 801716a:	2600      	movs	r6, #0
 801716c:	42a6      	cmp	r6, r4
 801716e:	d109      	bne.n	8017184 <__libc_init_array+0x24>
 8017170:	4d0b      	ldr	r5, [pc, #44]	@ (80171a0 <__libc_init_array+0x40>)
 8017172:	4c0c      	ldr	r4, [pc, #48]	@ (80171a4 <__libc_init_array+0x44>)
 8017174:	f003 f946 	bl	801a404 <_init>
 8017178:	1b64      	subs	r4, r4, r5
 801717a:	10a4      	asrs	r4, r4, #2
 801717c:	2600      	movs	r6, #0
 801717e:	42a6      	cmp	r6, r4
 8017180:	d105      	bne.n	801718e <__libc_init_array+0x2e>
 8017182:	bd70      	pop	{r4, r5, r6, pc}
 8017184:	f855 3b04 	ldr.w	r3, [r5], #4
 8017188:	4798      	blx	r3
 801718a:	3601      	adds	r6, #1
 801718c:	e7ee      	b.n	801716c <__libc_init_array+0xc>
 801718e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017192:	4798      	blx	r3
 8017194:	3601      	adds	r6, #1
 8017196:	e7f2      	b.n	801717e <__libc_init_array+0x1e>
 8017198:	0801b51c 	.word	0x0801b51c
 801719c:	0801b51c 	.word	0x0801b51c
 80171a0:	0801b51c 	.word	0x0801b51c
 80171a4:	0801b520 	.word	0x0801b520

080171a8 <__retarget_lock_init_recursive>:
 80171a8:	4770      	bx	lr

080171aa <__retarget_lock_acquire_recursive>:
 80171aa:	4770      	bx	lr

080171ac <__retarget_lock_release_recursive>:
 80171ac:	4770      	bx	lr

080171ae <memcpy>:
 80171ae:	440a      	add	r2, r1
 80171b0:	4291      	cmp	r1, r2
 80171b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80171b6:	d100      	bne.n	80171ba <memcpy+0xc>
 80171b8:	4770      	bx	lr
 80171ba:	b510      	push	{r4, lr}
 80171bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80171c4:	4291      	cmp	r1, r2
 80171c6:	d1f9      	bne.n	80171bc <memcpy+0xe>
 80171c8:	bd10      	pop	{r4, pc}
	...

080171cc <nanf>:
 80171cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80171d4 <nanf+0x8>
 80171d0:	4770      	bx	lr
 80171d2:	bf00      	nop
 80171d4:	7fc00000 	.word	0x7fc00000

080171d8 <quorem>:
 80171d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171dc:	6903      	ldr	r3, [r0, #16]
 80171de:	690c      	ldr	r4, [r1, #16]
 80171e0:	42a3      	cmp	r3, r4
 80171e2:	4607      	mov	r7, r0
 80171e4:	db7e      	blt.n	80172e4 <quorem+0x10c>
 80171e6:	3c01      	subs	r4, #1
 80171e8:	f101 0814 	add.w	r8, r1, #20
 80171ec:	00a3      	lsls	r3, r4, #2
 80171ee:	f100 0514 	add.w	r5, r0, #20
 80171f2:	9300      	str	r3, [sp, #0]
 80171f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80171f8:	9301      	str	r3, [sp, #4]
 80171fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80171fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017202:	3301      	adds	r3, #1
 8017204:	429a      	cmp	r2, r3
 8017206:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801720a:	fbb2 f6f3 	udiv	r6, r2, r3
 801720e:	d32e      	bcc.n	801726e <quorem+0x96>
 8017210:	f04f 0a00 	mov.w	sl, #0
 8017214:	46c4      	mov	ip, r8
 8017216:	46ae      	mov	lr, r5
 8017218:	46d3      	mov	fp, sl
 801721a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801721e:	b298      	uxth	r0, r3
 8017220:	fb06 a000 	mla	r0, r6, r0, sl
 8017224:	0c02      	lsrs	r2, r0, #16
 8017226:	0c1b      	lsrs	r3, r3, #16
 8017228:	fb06 2303 	mla	r3, r6, r3, r2
 801722c:	f8de 2000 	ldr.w	r2, [lr]
 8017230:	b280      	uxth	r0, r0
 8017232:	b292      	uxth	r2, r2
 8017234:	1a12      	subs	r2, r2, r0
 8017236:	445a      	add	r2, fp
 8017238:	f8de 0000 	ldr.w	r0, [lr]
 801723c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017240:	b29b      	uxth	r3, r3
 8017242:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8017246:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801724a:	b292      	uxth	r2, r2
 801724c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8017250:	45e1      	cmp	r9, ip
 8017252:	f84e 2b04 	str.w	r2, [lr], #4
 8017256:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801725a:	d2de      	bcs.n	801721a <quorem+0x42>
 801725c:	9b00      	ldr	r3, [sp, #0]
 801725e:	58eb      	ldr	r3, [r5, r3]
 8017260:	b92b      	cbnz	r3, 801726e <quorem+0x96>
 8017262:	9b01      	ldr	r3, [sp, #4]
 8017264:	3b04      	subs	r3, #4
 8017266:	429d      	cmp	r5, r3
 8017268:	461a      	mov	r2, r3
 801726a:	d32f      	bcc.n	80172cc <quorem+0xf4>
 801726c:	613c      	str	r4, [r7, #16]
 801726e:	4638      	mov	r0, r7
 8017270:	f001 f910 	bl	8018494 <__mcmp>
 8017274:	2800      	cmp	r0, #0
 8017276:	db25      	blt.n	80172c4 <quorem+0xec>
 8017278:	4629      	mov	r1, r5
 801727a:	2000      	movs	r0, #0
 801727c:	f858 2b04 	ldr.w	r2, [r8], #4
 8017280:	f8d1 c000 	ldr.w	ip, [r1]
 8017284:	fa1f fe82 	uxth.w	lr, r2
 8017288:	fa1f f38c 	uxth.w	r3, ip
 801728c:	eba3 030e 	sub.w	r3, r3, lr
 8017290:	4403      	add	r3, r0
 8017292:	0c12      	lsrs	r2, r2, #16
 8017294:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8017298:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801729c:	b29b      	uxth	r3, r3
 801729e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80172a2:	45c1      	cmp	r9, r8
 80172a4:	f841 3b04 	str.w	r3, [r1], #4
 80172a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80172ac:	d2e6      	bcs.n	801727c <quorem+0xa4>
 80172ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80172b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80172b6:	b922      	cbnz	r2, 80172c2 <quorem+0xea>
 80172b8:	3b04      	subs	r3, #4
 80172ba:	429d      	cmp	r5, r3
 80172bc:	461a      	mov	r2, r3
 80172be:	d30b      	bcc.n	80172d8 <quorem+0x100>
 80172c0:	613c      	str	r4, [r7, #16]
 80172c2:	3601      	adds	r6, #1
 80172c4:	4630      	mov	r0, r6
 80172c6:	b003      	add	sp, #12
 80172c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172cc:	6812      	ldr	r2, [r2, #0]
 80172ce:	3b04      	subs	r3, #4
 80172d0:	2a00      	cmp	r2, #0
 80172d2:	d1cb      	bne.n	801726c <quorem+0x94>
 80172d4:	3c01      	subs	r4, #1
 80172d6:	e7c6      	b.n	8017266 <quorem+0x8e>
 80172d8:	6812      	ldr	r2, [r2, #0]
 80172da:	3b04      	subs	r3, #4
 80172dc:	2a00      	cmp	r2, #0
 80172de:	d1ef      	bne.n	80172c0 <quorem+0xe8>
 80172e0:	3c01      	subs	r4, #1
 80172e2:	e7ea      	b.n	80172ba <quorem+0xe2>
 80172e4:	2000      	movs	r0, #0
 80172e6:	e7ee      	b.n	80172c6 <quorem+0xee>

080172e8 <_dtoa_r>:
 80172e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172ec:	69c7      	ldr	r7, [r0, #28]
 80172ee:	b097      	sub	sp, #92	@ 0x5c
 80172f0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80172f4:	ec55 4b10 	vmov	r4, r5, d0
 80172f8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80172fa:	9107      	str	r1, [sp, #28]
 80172fc:	4681      	mov	r9, r0
 80172fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8017300:	9311      	str	r3, [sp, #68]	@ 0x44
 8017302:	b97f      	cbnz	r7, 8017324 <_dtoa_r+0x3c>
 8017304:	2010      	movs	r0, #16
 8017306:	f7fe fc51 	bl	8015bac <malloc>
 801730a:	4602      	mov	r2, r0
 801730c:	f8c9 001c 	str.w	r0, [r9, #28]
 8017310:	b920      	cbnz	r0, 801731c <_dtoa_r+0x34>
 8017312:	4ba9      	ldr	r3, [pc, #676]	@ (80175b8 <_dtoa_r+0x2d0>)
 8017314:	21ef      	movs	r1, #239	@ 0xef
 8017316:	48a9      	ldr	r0, [pc, #676]	@ (80175bc <_dtoa_r+0x2d4>)
 8017318:	f002 fc6a 	bl	8019bf0 <__assert_func>
 801731c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8017320:	6007      	str	r7, [r0, #0]
 8017322:	60c7      	str	r7, [r0, #12]
 8017324:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8017328:	6819      	ldr	r1, [r3, #0]
 801732a:	b159      	cbz	r1, 8017344 <_dtoa_r+0x5c>
 801732c:	685a      	ldr	r2, [r3, #4]
 801732e:	604a      	str	r2, [r1, #4]
 8017330:	2301      	movs	r3, #1
 8017332:	4093      	lsls	r3, r2
 8017334:	608b      	str	r3, [r1, #8]
 8017336:	4648      	mov	r0, r9
 8017338:	f000 fe30 	bl	8017f9c <_Bfree>
 801733c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8017340:	2200      	movs	r2, #0
 8017342:	601a      	str	r2, [r3, #0]
 8017344:	1e2b      	subs	r3, r5, #0
 8017346:	bfb9      	ittee	lt
 8017348:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801734c:	9305      	strlt	r3, [sp, #20]
 801734e:	2300      	movge	r3, #0
 8017350:	6033      	strge	r3, [r6, #0]
 8017352:	9f05      	ldr	r7, [sp, #20]
 8017354:	4b9a      	ldr	r3, [pc, #616]	@ (80175c0 <_dtoa_r+0x2d8>)
 8017356:	bfbc      	itt	lt
 8017358:	2201      	movlt	r2, #1
 801735a:	6032      	strlt	r2, [r6, #0]
 801735c:	43bb      	bics	r3, r7
 801735e:	d112      	bne.n	8017386 <_dtoa_r+0x9e>
 8017360:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017362:	f242 730f 	movw	r3, #9999	@ 0x270f
 8017366:	6013      	str	r3, [r2, #0]
 8017368:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801736c:	4323      	orrs	r3, r4
 801736e:	f000 855a 	beq.w	8017e26 <_dtoa_r+0xb3e>
 8017372:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8017374:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80175d4 <_dtoa_r+0x2ec>
 8017378:	2b00      	cmp	r3, #0
 801737a:	f000 855c 	beq.w	8017e36 <_dtoa_r+0xb4e>
 801737e:	f10a 0303 	add.w	r3, sl, #3
 8017382:	f000 bd56 	b.w	8017e32 <_dtoa_r+0xb4a>
 8017386:	ed9d 7b04 	vldr	d7, [sp, #16]
 801738a:	2200      	movs	r2, #0
 801738c:	ec51 0b17 	vmov	r0, r1, d7
 8017390:	2300      	movs	r3, #0
 8017392:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8017396:	f7e9 fbb7 	bl	8000b08 <__aeabi_dcmpeq>
 801739a:	4680      	mov	r8, r0
 801739c:	b158      	cbz	r0, 80173b6 <_dtoa_r+0xce>
 801739e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80173a0:	2301      	movs	r3, #1
 80173a2:	6013      	str	r3, [r2, #0]
 80173a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80173a6:	b113      	cbz	r3, 80173ae <_dtoa_r+0xc6>
 80173a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80173aa:	4b86      	ldr	r3, [pc, #536]	@ (80175c4 <_dtoa_r+0x2dc>)
 80173ac:	6013      	str	r3, [r2, #0]
 80173ae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80175d8 <_dtoa_r+0x2f0>
 80173b2:	f000 bd40 	b.w	8017e36 <_dtoa_r+0xb4e>
 80173b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80173ba:	aa14      	add	r2, sp, #80	@ 0x50
 80173bc:	a915      	add	r1, sp, #84	@ 0x54
 80173be:	4648      	mov	r0, r9
 80173c0:	f001 f988 	bl	80186d4 <__d2b>
 80173c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80173c8:	9002      	str	r0, [sp, #8]
 80173ca:	2e00      	cmp	r6, #0
 80173cc:	d078      	beq.n	80174c0 <_dtoa_r+0x1d8>
 80173ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80173d0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80173d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80173d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80173dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80173e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80173e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80173e8:	4619      	mov	r1, r3
 80173ea:	2200      	movs	r2, #0
 80173ec:	4b76      	ldr	r3, [pc, #472]	@ (80175c8 <_dtoa_r+0x2e0>)
 80173ee:	f7e8 ff6b 	bl	80002c8 <__aeabi_dsub>
 80173f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80175a0 <_dtoa_r+0x2b8>)
 80173f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173f8:	f7e9 f91e 	bl	8000638 <__aeabi_dmul>
 80173fc:	a36a      	add	r3, pc, #424	@ (adr r3, 80175a8 <_dtoa_r+0x2c0>)
 80173fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017402:	f7e8 ff63 	bl	80002cc <__adddf3>
 8017406:	4604      	mov	r4, r0
 8017408:	4630      	mov	r0, r6
 801740a:	460d      	mov	r5, r1
 801740c:	f7e9 f8aa 	bl	8000564 <__aeabi_i2d>
 8017410:	a367      	add	r3, pc, #412	@ (adr r3, 80175b0 <_dtoa_r+0x2c8>)
 8017412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017416:	f7e9 f90f 	bl	8000638 <__aeabi_dmul>
 801741a:	4602      	mov	r2, r0
 801741c:	460b      	mov	r3, r1
 801741e:	4620      	mov	r0, r4
 8017420:	4629      	mov	r1, r5
 8017422:	f7e8 ff53 	bl	80002cc <__adddf3>
 8017426:	4604      	mov	r4, r0
 8017428:	460d      	mov	r5, r1
 801742a:	f7e9 fbb5 	bl	8000b98 <__aeabi_d2iz>
 801742e:	2200      	movs	r2, #0
 8017430:	4607      	mov	r7, r0
 8017432:	2300      	movs	r3, #0
 8017434:	4620      	mov	r0, r4
 8017436:	4629      	mov	r1, r5
 8017438:	f7e9 fb70 	bl	8000b1c <__aeabi_dcmplt>
 801743c:	b140      	cbz	r0, 8017450 <_dtoa_r+0x168>
 801743e:	4638      	mov	r0, r7
 8017440:	f7e9 f890 	bl	8000564 <__aeabi_i2d>
 8017444:	4622      	mov	r2, r4
 8017446:	462b      	mov	r3, r5
 8017448:	f7e9 fb5e 	bl	8000b08 <__aeabi_dcmpeq>
 801744c:	b900      	cbnz	r0, 8017450 <_dtoa_r+0x168>
 801744e:	3f01      	subs	r7, #1
 8017450:	2f16      	cmp	r7, #22
 8017452:	d852      	bhi.n	80174fa <_dtoa_r+0x212>
 8017454:	4b5d      	ldr	r3, [pc, #372]	@ (80175cc <_dtoa_r+0x2e4>)
 8017456:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801745e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8017462:	f7e9 fb5b 	bl	8000b1c <__aeabi_dcmplt>
 8017466:	2800      	cmp	r0, #0
 8017468:	d049      	beq.n	80174fe <_dtoa_r+0x216>
 801746a:	3f01      	subs	r7, #1
 801746c:	2300      	movs	r3, #0
 801746e:	9310      	str	r3, [sp, #64]	@ 0x40
 8017470:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017472:	1b9b      	subs	r3, r3, r6
 8017474:	1e5a      	subs	r2, r3, #1
 8017476:	bf45      	ittet	mi
 8017478:	f1c3 0301 	rsbmi	r3, r3, #1
 801747c:	9300      	strmi	r3, [sp, #0]
 801747e:	2300      	movpl	r3, #0
 8017480:	2300      	movmi	r3, #0
 8017482:	9206      	str	r2, [sp, #24]
 8017484:	bf54      	ite	pl
 8017486:	9300      	strpl	r3, [sp, #0]
 8017488:	9306      	strmi	r3, [sp, #24]
 801748a:	2f00      	cmp	r7, #0
 801748c:	db39      	blt.n	8017502 <_dtoa_r+0x21a>
 801748e:	9b06      	ldr	r3, [sp, #24]
 8017490:	970d      	str	r7, [sp, #52]	@ 0x34
 8017492:	443b      	add	r3, r7
 8017494:	9306      	str	r3, [sp, #24]
 8017496:	2300      	movs	r3, #0
 8017498:	9308      	str	r3, [sp, #32]
 801749a:	9b07      	ldr	r3, [sp, #28]
 801749c:	2b09      	cmp	r3, #9
 801749e:	d863      	bhi.n	8017568 <_dtoa_r+0x280>
 80174a0:	2b05      	cmp	r3, #5
 80174a2:	bfc4      	itt	gt
 80174a4:	3b04      	subgt	r3, #4
 80174a6:	9307      	strgt	r3, [sp, #28]
 80174a8:	9b07      	ldr	r3, [sp, #28]
 80174aa:	f1a3 0302 	sub.w	r3, r3, #2
 80174ae:	bfcc      	ite	gt
 80174b0:	2400      	movgt	r4, #0
 80174b2:	2401      	movle	r4, #1
 80174b4:	2b03      	cmp	r3, #3
 80174b6:	d863      	bhi.n	8017580 <_dtoa_r+0x298>
 80174b8:	e8df f003 	tbb	[pc, r3]
 80174bc:	2b375452 	.word	0x2b375452
 80174c0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80174c4:	441e      	add	r6, r3
 80174c6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80174ca:	2b20      	cmp	r3, #32
 80174cc:	bfc1      	itttt	gt
 80174ce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80174d2:	409f      	lslgt	r7, r3
 80174d4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80174d8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80174dc:	bfd6      	itet	le
 80174de:	f1c3 0320 	rsble	r3, r3, #32
 80174e2:	ea47 0003 	orrgt.w	r0, r7, r3
 80174e6:	fa04 f003 	lslle.w	r0, r4, r3
 80174ea:	f7e9 f82b 	bl	8000544 <__aeabi_ui2d>
 80174ee:	2201      	movs	r2, #1
 80174f0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80174f4:	3e01      	subs	r6, #1
 80174f6:	9212      	str	r2, [sp, #72]	@ 0x48
 80174f8:	e776      	b.n	80173e8 <_dtoa_r+0x100>
 80174fa:	2301      	movs	r3, #1
 80174fc:	e7b7      	b.n	801746e <_dtoa_r+0x186>
 80174fe:	9010      	str	r0, [sp, #64]	@ 0x40
 8017500:	e7b6      	b.n	8017470 <_dtoa_r+0x188>
 8017502:	9b00      	ldr	r3, [sp, #0]
 8017504:	1bdb      	subs	r3, r3, r7
 8017506:	9300      	str	r3, [sp, #0]
 8017508:	427b      	negs	r3, r7
 801750a:	9308      	str	r3, [sp, #32]
 801750c:	2300      	movs	r3, #0
 801750e:	930d      	str	r3, [sp, #52]	@ 0x34
 8017510:	e7c3      	b.n	801749a <_dtoa_r+0x1b2>
 8017512:	2301      	movs	r3, #1
 8017514:	9309      	str	r3, [sp, #36]	@ 0x24
 8017516:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017518:	eb07 0b03 	add.w	fp, r7, r3
 801751c:	f10b 0301 	add.w	r3, fp, #1
 8017520:	2b01      	cmp	r3, #1
 8017522:	9303      	str	r3, [sp, #12]
 8017524:	bfb8      	it	lt
 8017526:	2301      	movlt	r3, #1
 8017528:	e006      	b.n	8017538 <_dtoa_r+0x250>
 801752a:	2301      	movs	r3, #1
 801752c:	9309      	str	r3, [sp, #36]	@ 0x24
 801752e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017530:	2b00      	cmp	r3, #0
 8017532:	dd28      	ble.n	8017586 <_dtoa_r+0x29e>
 8017534:	469b      	mov	fp, r3
 8017536:	9303      	str	r3, [sp, #12]
 8017538:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801753c:	2100      	movs	r1, #0
 801753e:	2204      	movs	r2, #4
 8017540:	f102 0514 	add.w	r5, r2, #20
 8017544:	429d      	cmp	r5, r3
 8017546:	d926      	bls.n	8017596 <_dtoa_r+0x2ae>
 8017548:	6041      	str	r1, [r0, #4]
 801754a:	4648      	mov	r0, r9
 801754c:	f000 fce6 	bl	8017f1c <_Balloc>
 8017550:	4682      	mov	sl, r0
 8017552:	2800      	cmp	r0, #0
 8017554:	d142      	bne.n	80175dc <_dtoa_r+0x2f4>
 8017556:	4b1e      	ldr	r3, [pc, #120]	@ (80175d0 <_dtoa_r+0x2e8>)
 8017558:	4602      	mov	r2, r0
 801755a:	f240 11af 	movw	r1, #431	@ 0x1af
 801755e:	e6da      	b.n	8017316 <_dtoa_r+0x2e>
 8017560:	2300      	movs	r3, #0
 8017562:	e7e3      	b.n	801752c <_dtoa_r+0x244>
 8017564:	2300      	movs	r3, #0
 8017566:	e7d5      	b.n	8017514 <_dtoa_r+0x22c>
 8017568:	2401      	movs	r4, #1
 801756a:	2300      	movs	r3, #0
 801756c:	9307      	str	r3, [sp, #28]
 801756e:	9409      	str	r4, [sp, #36]	@ 0x24
 8017570:	f04f 3bff 	mov.w	fp, #4294967295
 8017574:	2200      	movs	r2, #0
 8017576:	f8cd b00c 	str.w	fp, [sp, #12]
 801757a:	2312      	movs	r3, #18
 801757c:	920c      	str	r2, [sp, #48]	@ 0x30
 801757e:	e7db      	b.n	8017538 <_dtoa_r+0x250>
 8017580:	2301      	movs	r3, #1
 8017582:	9309      	str	r3, [sp, #36]	@ 0x24
 8017584:	e7f4      	b.n	8017570 <_dtoa_r+0x288>
 8017586:	f04f 0b01 	mov.w	fp, #1
 801758a:	f8cd b00c 	str.w	fp, [sp, #12]
 801758e:	465b      	mov	r3, fp
 8017590:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8017594:	e7d0      	b.n	8017538 <_dtoa_r+0x250>
 8017596:	3101      	adds	r1, #1
 8017598:	0052      	lsls	r2, r2, #1
 801759a:	e7d1      	b.n	8017540 <_dtoa_r+0x258>
 801759c:	f3af 8000 	nop.w
 80175a0:	636f4361 	.word	0x636f4361
 80175a4:	3fd287a7 	.word	0x3fd287a7
 80175a8:	8b60c8b3 	.word	0x8b60c8b3
 80175ac:	3fc68a28 	.word	0x3fc68a28
 80175b0:	509f79fb 	.word	0x509f79fb
 80175b4:	3fd34413 	.word	0x3fd34413
 80175b8:	0801b132 	.word	0x0801b132
 80175bc:	0801b149 	.word	0x0801b149
 80175c0:	7ff00000 	.word	0x7ff00000
 80175c4:	0801b0fd 	.word	0x0801b0fd
 80175c8:	3ff80000 	.word	0x3ff80000
 80175cc:	0801b2f8 	.word	0x0801b2f8
 80175d0:	0801b1a1 	.word	0x0801b1a1
 80175d4:	0801b12e 	.word	0x0801b12e
 80175d8:	0801b0fc 	.word	0x0801b0fc
 80175dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80175e0:	6018      	str	r0, [r3, #0]
 80175e2:	9b03      	ldr	r3, [sp, #12]
 80175e4:	2b0e      	cmp	r3, #14
 80175e6:	f200 80a1 	bhi.w	801772c <_dtoa_r+0x444>
 80175ea:	2c00      	cmp	r4, #0
 80175ec:	f000 809e 	beq.w	801772c <_dtoa_r+0x444>
 80175f0:	2f00      	cmp	r7, #0
 80175f2:	dd33      	ble.n	801765c <_dtoa_r+0x374>
 80175f4:	4b9c      	ldr	r3, [pc, #624]	@ (8017868 <_dtoa_r+0x580>)
 80175f6:	f007 020f 	and.w	r2, r7, #15
 80175fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80175fe:	ed93 7b00 	vldr	d7, [r3]
 8017602:	05f8      	lsls	r0, r7, #23
 8017604:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8017608:	ea4f 1427 	mov.w	r4, r7, asr #4
 801760c:	d516      	bpl.n	801763c <_dtoa_r+0x354>
 801760e:	4b97      	ldr	r3, [pc, #604]	@ (801786c <_dtoa_r+0x584>)
 8017610:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8017614:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017618:	f7e9 f938 	bl	800088c <__aeabi_ddiv>
 801761c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017620:	f004 040f 	and.w	r4, r4, #15
 8017624:	2603      	movs	r6, #3
 8017626:	4d91      	ldr	r5, [pc, #580]	@ (801786c <_dtoa_r+0x584>)
 8017628:	b954      	cbnz	r4, 8017640 <_dtoa_r+0x358>
 801762a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801762e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017632:	f7e9 f92b 	bl	800088c <__aeabi_ddiv>
 8017636:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801763a:	e028      	b.n	801768e <_dtoa_r+0x3a6>
 801763c:	2602      	movs	r6, #2
 801763e:	e7f2      	b.n	8017626 <_dtoa_r+0x33e>
 8017640:	07e1      	lsls	r1, r4, #31
 8017642:	d508      	bpl.n	8017656 <_dtoa_r+0x36e>
 8017644:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8017648:	e9d5 2300 	ldrd	r2, r3, [r5]
 801764c:	f7e8 fff4 	bl	8000638 <__aeabi_dmul>
 8017650:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8017654:	3601      	adds	r6, #1
 8017656:	1064      	asrs	r4, r4, #1
 8017658:	3508      	adds	r5, #8
 801765a:	e7e5      	b.n	8017628 <_dtoa_r+0x340>
 801765c:	f000 80af 	beq.w	80177be <_dtoa_r+0x4d6>
 8017660:	427c      	negs	r4, r7
 8017662:	4b81      	ldr	r3, [pc, #516]	@ (8017868 <_dtoa_r+0x580>)
 8017664:	4d81      	ldr	r5, [pc, #516]	@ (801786c <_dtoa_r+0x584>)
 8017666:	f004 020f 	and.w	r2, r4, #15
 801766a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017672:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8017676:	f7e8 ffdf 	bl	8000638 <__aeabi_dmul>
 801767a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801767e:	1124      	asrs	r4, r4, #4
 8017680:	2300      	movs	r3, #0
 8017682:	2602      	movs	r6, #2
 8017684:	2c00      	cmp	r4, #0
 8017686:	f040 808f 	bne.w	80177a8 <_dtoa_r+0x4c0>
 801768a:	2b00      	cmp	r3, #0
 801768c:	d1d3      	bne.n	8017636 <_dtoa_r+0x34e>
 801768e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017690:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8017694:	2b00      	cmp	r3, #0
 8017696:	f000 8094 	beq.w	80177c2 <_dtoa_r+0x4da>
 801769a:	4b75      	ldr	r3, [pc, #468]	@ (8017870 <_dtoa_r+0x588>)
 801769c:	2200      	movs	r2, #0
 801769e:	4620      	mov	r0, r4
 80176a0:	4629      	mov	r1, r5
 80176a2:	f7e9 fa3b 	bl	8000b1c <__aeabi_dcmplt>
 80176a6:	2800      	cmp	r0, #0
 80176a8:	f000 808b 	beq.w	80177c2 <_dtoa_r+0x4da>
 80176ac:	9b03      	ldr	r3, [sp, #12]
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	f000 8087 	beq.w	80177c2 <_dtoa_r+0x4da>
 80176b4:	f1bb 0f00 	cmp.w	fp, #0
 80176b8:	dd34      	ble.n	8017724 <_dtoa_r+0x43c>
 80176ba:	4620      	mov	r0, r4
 80176bc:	4b6d      	ldr	r3, [pc, #436]	@ (8017874 <_dtoa_r+0x58c>)
 80176be:	2200      	movs	r2, #0
 80176c0:	4629      	mov	r1, r5
 80176c2:	f7e8 ffb9 	bl	8000638 <__aeabi_dmul>
 80176c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80176ca:	f107 38ff 	add.w	r8, r7, #4294967295
 80176ce:	3601      	adds	r6, #1
 80176d0:	465c      	mov	r4, fp
 80176d2:	4630      	mov	r0, r6
 80176d4:	f7e8 ff46 	bl	8000564 <__aeabi_i2d>
 80176d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80176dc:	f7e8 ffac 	bl	8000638 <__aeabi_dmul>
 80176e0:	4b65      	ldr	r3, [pc, #404]	@ (8017878 <_dtoa_r+0x590>)
 80176e2:	2200      	movs	r2, #0
 80176e4:	f7e8 fdf2 	bl	80002cc <__adddf3>
 80176e8:	4605      	mov	r5, r0
 80176ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80176ee:	2c00      	cmp	r4, #0
 80176f0:	d16a      	bne.n	80177c8 <_dtoa_r+0x4e0>
 80176f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80176f6:	4b61      	ldr	r3, [pc, #388]	@ (801787c <_dtoa_r+0x594>)
 80176f8:	2200      	movs	r2, #0
 80176fa:	f7e8 fde5 	bl	80002c8 <__aeabi_dsub>
 80176fe:	4602      	mov	r2, r0
 8017700:	460b      	mov	r3, r1
 8017702:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017706:	462a      	mov	r2, r5
 8017708:	4633      	mov	r3, r6
 801770a:	f7e9 fa25 	bl	8000b58 <__aeabi_dcmpgt>
 801770e:	2800      	cmp	r0, #0
 8017710:	f040 8298 	bne.w	8017c44 <_dtoa_r+0x95c>
 8017714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017718:	462a      	mov	r2, r5
 801771a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801771e:	f7e9 f9fd 	bl	8000b1c <__aeabi_dcmplt>
 8017722:	bb38      	cbnz	r0, 8017774 <_dtoa_r+0x48c>
 8017724:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8017728:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801772c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801772e:	2b00      	cmp	r3, #0
 8017730:	f2c0 8157 	blt.w	80179e2 <_dtoa_r+0x6fa>
 8017734:	2f0e      	cmp	r7, #14
 8017736:	f300 8154 	bgt.w	80179e2 <_dtoa_r+0x6fa>
 801773a:	4b4b      	ldr	r3, [pc, #300]	@ (8017868 <_dtoa_r+0x580>)
 801773c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017740:	ed93 7b00 	vldr	d7, [r3]
 8017744:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017746:	2b00      	cmp	r3, #0
 8017748:	ed8d 7b00 	vstr	d7, [sp]
 801774c:	f280 80e5 	bge.w	801791a <_dtoa_r+0x632>
 8017750:	9b03      	ldr	r3, [sp, #12]
 8017752:	2b00      	cmp	r3, #0
 8017754:	f300 80e1 	bgt.w	801791a <_dtoa_r+0x632>
 8017758:	d10c      	bne.n	8017774 <_dtoa_r+0x48c>
 801775a:	4b48      	ldr	r3, [pc, #288]	@ (801787c <_dtoa_r+0x594>)
 801775c:	2200      	movs	r2, #0
 801775e:	ec51 0b17 	vmov	r0, r1, d7
 8017762:	f7e8 ff69 	bl	8000638 <__aeabi_dmul>
 8017766:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801776a:	f7e9 f9eb 	bl	8000b44 <__aeabi_dcmpge>
 801776e:	2800      	cmp	r0, #0
 8017770:	f000 8266 	beq.w	8017c40 <_dtoa_r+0x958>
 8017774:	2400      	movs	r4, #0
 8017776:	4625      	mov	r5, r4
 8017778:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801777a:	4656      	mov	r6, sl
 801777c:	ea6f 0803 	mvn.w	r8, r3
 8017780:	2700      	movs	r7, #0
 8017782:	4621      	mov	r1, r4
 8017784:	4648      	mov	r0, r9
 8017786:	f000 fc09 	bl	8017f9c <_Bfree>
 801778a:	2d00      	cmp	r5, #0
 801778c:	f000 80bd 	beq.w	801790a <_dtoa_r+0x622>
 8017790:	b12f      	cbz	r7, 801779e <_dtoa_r+0x4b6>
 8017792:	42af      	cmp	r7, r5
 8017794:	d003      	beq.n	801779e <_dtoa_r+0x4b6>
 8017796:	4639      	mov	r1, r7
 8017798:	4648      	mov	r0, r9
 801779a:	f000 fbff 	bl	8017f9c <_Bfree>
 801779e:	4629      	mov	r1, r5
 80177a0:	4648      	mov	r0, r9
 80177a2:	f000 fbfb 	bl	8017f9c <_Bfree>
 80177a6:	e0b0      	b.n	801790a <_dtoa_r+0x622>
 80177a8:	07e2      	lsls	r2, r4, #31
 80177aa:	d505      	bpl.n	80177b8 <_dtoa_r+0x4d0>
 80177ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80177b0:	f7e8 ff42 	bl	8000638 <__aeabi_dmul>
 80177b4:	3601      	adds	r6, #1
 80177b6:	2301      	movs	r3, #1
 80177b8:	1064      	asrs	r4, r4, #1
 80177ba:	3508      	adds	r5, #8
 80177bc:	e762      	b.n	8017684 <_dtoa_r+0x39c>
 80177be:	2602      	movs	r6, #2
 80177c0:	e765      	b.n	801768e <_dtoa_r+0x3a6>
 80177c2:	9c03      	ldr	r4, [sp, #12]
 80177c4:	46b8      	mov	r8, r7
 80177c6:	e784      	b.n	80176d2 <_dtoa_r+0x3ea>
 80177c8:	4b27      	ldr	r3, [pc, #156]	@ (8017868 <_dtoa_r+0x580>)
 80177ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80177cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80177d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80177d4:	4454      	add	r4, sl
 80177d6:	2900      	cmp	r1, #0
 80177d8:	d054      	beq.n	8017884 <_dtoa_r+0x59c>
 80177da:	4929      	ldr	r1, [pc, #164]	@ (8017880 <_dtoa_r+0x598>)
 80177dc:	2000      	movs	r0, #0
 80177de:	f7e9 f855 	bl	800088c <__aeabi_ddiv>
 80177e2:	4633      	mov	r3, r6
 80177e4:	462a      	mov	r2, r5
 80177e6:	f7e8 fd6f 	bl	80002c8 <__aeabi_dsub>
 80177ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80177ee:	4656      	mov	r6, sl
 80177f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80177f4:	f7e9 f9d0 	bl	8000b98 <__aeabi_d2iz>
 80177f8:	4605      	mov	r5, r0
 80177fa:	f7e8 feb3 	bl	8000564 <__aeabi_i2d>
 80177fe:	4602      	mov	r2, r0
 8017800:	460b      	mov	r3, r1
 8017802:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017806:	f7e8 fd5f 	bl	80002c8 <__aeabi_dsub>
 801780a:	3530      	adds	r5, #48	@ 0x30
 801780c:	4602      	mov	r2, r0
 801780e:	460b      	mov	r3, r1
 8017810:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017814:	f806 5b01 	strb.w	r5, [r6], #1
 8017818:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801781c:	f7e9 f97e 	bl	8000b1c <__aeabi_dcmplt>
 8017820:	2800      	cmp	r0, #0
 8017822:	d172      	bne.n	801790a <_dtoa_r+0x622>
 8017824:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017828:	4911      	ldr	r1, [pc, #68]	@ (8017870 <_dtoa_r+0x588>)
 801782a:	2000      	movs	r0, #0
 801782c:	f7e8 fd4c 	bl	80002c8 <__aeabi_dsub>
 8017830:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8017834:	f7e9 f972 	bl	8000b1c <__aeabi_dcmplt>
 8017838:	2800      	cmp	r0, #0
 801783a:	f040 80b4 	bne.w	80179a6 <_dtoa_r+0x6be>
 801783e:	42a6      	cmp	r6, r4
 8017840:	f43f af70 	beq.w	8017724 <_dtoa_r+0x43c>
 8017844:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8017848:	4b0a      	ldr	r3, [pc, #40]	@ (8017874 <_dtoa_r+0x58c>)
 801784a:	2200      	movs	r2, #0
 801784c:	f7e8 fef4 	bl	8000638 <__aeabi_dmul>
 8017850:	4b08      	ldr	r3, [pc, #32]	@ (8017874 <_dtoa_r+0x58c>)
 8017852:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8017856:	2200      	movs	r2, #0
 8017858:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801785c:	f7e8 feec 	bl	8000638 <__aeabi_dmul>
 8017860:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017864:	e7c4      	b.n	80177f0 <_dtoa_r+0x508>
 8017866:	bf00      	nop
 8017868:	0801b2f8 	.word	0x0801b2f8
 801786c:	0801b2d0 	.word	0x0801b2d0
 8017870:	3ff00000 	.word	0x3ff00000
 8017874:	40240000 	.word	0x40240000
 8017878:	401c0000 	.word	0x401c0000
 801787c:	40140000 	.word	0x40140000
 8017880:	3fe00000 	.word	0x3fe00000
 8017884:	4631      	mov	r1, r6
 8017886:	4628      	mov	r0, r5
 8017888:	f7e8 fed6 	bl	8000638 <__aeabi_dmul>
 801788c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8017890:	9413      	str	r4, [sp, #76]	@ 0x4c
 8017892:	4656      	mov	r6, sl
 8017894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017898:	f7e9 f97e 	bl	8000b98 <__aeabi_d2iz>
 801789c:	4605      	mov	r5, r0
 801789e:	f7e8 fe61 	bl	8000564 <__aeabi_i2d>
 80178a2:	4602      	mov	r2, r0
 80178a4:	460b      	mov	r3, r1
 80178a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80178aa:	f7e8 fd0d 	bl	80002c8 <__aeabi_dsub>
 80178ae:	3530      	adds	r5, #48	@ 0x30
 80178b0:	f806 5b01 	strb.w	r5, [r6], #1
 80178b4:	4602      	mov	r2, r0
 80178b6:	460b      	mov	r3, r1
 80178b8:	42a6      	cmp	r6, r4
 80178ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80178be:	f04f 0200 	mov.w	r2, #0
 80178c2:	d124      	bne.n	801790e <_dtoa_r+0x626>
 80178c4:	4baf      	ldr	r3, [pc, #700]	@ (8017b84 <_dtoa_r+0x89c>)
 80178c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80178ca:	f7e8 fcff 	bl	80002cc <__adddf3>
 80178ce:	4602      	mov	r2, r0
 80178d0:	460b      	mov	r3, r1
 80178d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80178d6:	f7e9 f93f 	bl	8000b58 <__aeabi_dcmpgt>
 80178da:	2800      	cmp	r0, #0
 80178dc:	d163      	bne.n	80179a6 <_dtoa_r+0x6be>
 80178de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80178e2:	49a8      	ldr	r1, [pc, #672]	@ (8017b84 <_dtoa_r+0x89c>)
 80178e4:	2000      	movs	r0, #0
 80178e6:	f7e8 fcef 	bl	80002c8 <__aeabi_dsub>
 80178ea:	4602      	mov	r2, r0
 80178ec:	460b      	mov	r3, r1
 80178ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80178f2:	f7e9 f913 	bl	8000b1c <__aeabi_dcmplt>
 80178f6:	2800      	cmp	r0, #0
 80178f8:	f43f af14 	beq.w	8017724 <_dtoa_r+0x43c>
 80178fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80178fe:	1e73      	subs	r3, r6, #1
 8017900:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017902:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017906:	2b30      	cmp	r3, #48	@ 0x30
 8017908:	d0f8      	beq.n	80178fc <_dtoa_r+0x614>
 801790a:	4647      	mov	r7, r8
 801790c:	e03b      	b.n	8017986 <_dtoa_r+0x69e>
 801790e:	4b9e      	ldr	r3, [pc, #632]	@ (8017b88 <_dtoa_r+0x8a0>)
 8017910:	f7e8 fe92 	bl	8000638 <__aeabi_dmul>
 8017914:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017918:	e7bc      	b.n	8017894 <_dtoa_r+0x5ac>
 801791a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801791e:	4656      	mov	r6, sl
 8017920:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017924:	4620      	mov	r0, r4
 8017926:	4629      	mov	r1, r5
 8017928:	f7e8 ffb0 	bl	800088c <__aeabi_ddiv>
 801792c:	f7e9 f934 	bl	8000b98 <__aeabi_d2iz>
 8017930:	4680      	mov	r8, r0
 8017932:	f7e8 fe17 	bl	8000564 <__aeabi_i2d>
 8017936:	e9dd 2300 	ldrd	r2, r3, [sp]
 801793a:	f7e8 fe7d 	bl	8000638 <__aeabi_dmul>
 801793e:	4602      	mov	r2, r0
 8017940:	460b      	mov	r3, r1
 8017942:	4620      	mov	r0, r4
 8017944:	4629      	mov	r1, r5
 8017946:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801794a:	f7e8 fcbd 	bl	80002c8 <__aeabi_dsub>
 801794e:	f806 4b01 	strb.w	r4, [r6], #1
 8017952:	9d03      	ldr	r5, [sp, #12]
 8017954:	eba6 040a 	sub.w	r4, r6, sl
 8017958:	42a5      	cmp	r5, r4
 801795a:	4602      	mov	r2, r0
 801795c:	460b      	mov	r3, r1
 801795e:	d133      	bne.n	80179c8 <_dtoa_r+0x6e0>
 8017960:	f7e8 fcb4 	bl	80002cc <__adddf3>
 8017964:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017968:	4604      	mov	r4, r0
 801796a:	460d      	mov	r5, r1
 801796c:	f7e9 f8f4 	bl	8000b58 <__aeabi_dcmpgt>
 8017970:	b9c0      	cbnz	r0, 80179a4 <_dtoa_r+0x6bc>
 8017972:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017976:	4620      	mov	r0, r4
 8017978:	4629      	mov	r1, r5
 801797a:	f7e9 f8c5 	bl	8000b08 <__aeabi_dcmpeq>
 801797e:	b110      	cbz	r0, 8017986 <_dtoa_r+0x69e>
 8017980:	f018 0f01 	tst.w	r8, #1
 8017984:	d10e      	bne.n	80179a4 <_dtoa_r+0x6bc>
 8017986:	9902      	ldr	r1, [sp, #8]
 8017988:	4648      	mov	r0, r9
 801798a:	f000 fb07 	bl	8017f9c <_Bfree>
 801798e:	2300      	movs	r3, #0
 8017990:	7033      	strb	r3, [r6, #0]
 8017992:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017994:	3701      	adds	r7, #1
 8017996:	601f      	str	r7, [r3, #0]
 8017998:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801799a:	2b00      	cmp	r3, #0
 801799c:	f000 824b 	beq.w	8017e36 <_dtoa_r+0xb4e>
 80179a0:	601e      	str	r6, [r3, #0]
 80179a2:	e248      	b.n	8017e36 <_dtoa_r+0xb4e>
 80179a4:	46b8      	mov	r8, r7
 80179a6:	4633      	mov	r3, r6
 80179a8:	461e      	mov	r6, r3
 80179aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80179ae:	2a39      	cmp	r2, #57	@ 0x39
 80179b0:	d106      	bne.n	80179c0 <_dtoa_r+0x6d8>
 80179b2:	459a      	cmp	sl, r3
 80179b4:	d1f8      	bne.n	80179a8 <_dtoa_r+0x6c0>
 80179b6:	2230      	movs	r2, #48	@ 0x30
 80179b8:	f108 0801 	add.w	r8, r8, #1
 80179bc:	f88a 2000 	strb.w	r2, [sl]
 80179c0:	781a      	ldrb	r2, [r3, #0]
 80179c2:	3201      	adds	r2, #1
 80179c4:	701a      	strb	r2, [r3, #0]
 80179c6:	e7a0      	b.n	801790a <_dtoa_r+0x622>
 80179c8:	4b6f      	ldr	r3, [pc, #444]	@ (8017b88 <_dtoa_r+0x8a0>)
 80179ca:	2200      	movs	r2, #0
 80179cc:	f7e8 fe34 	bl	8000638 <__aeabi_dmul>
 80179d0:	2200      	movs	r2, #0
 80179d2:	2300      	movs	r3, #0
 80179d4:	4604      	mov	r4, r0
 80179d6:	460d      	mov	r5, r1
 80179d8:	f7e9 f896 	bl	8000b08 <__aeabi_dcmpeq>
 80179dc:	2800      	cmp	r0, #0
 80179de:	d09f      	beq.n	8017920 <_dtoa_r+0x638>
 80179e0:	e7d1      	b.n	8017986 <_dtoa_r+0x69e>
 80179e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80179e4:	2a00      	cmp	r2, #0
 80179e6:	f000 80ea 	beq.w	8017bbe <_dtoa_r+0x8d6>
 80179ea:	9a07      	ldr	r2, [sp, #28]
 80179ec:	2a01      	cmp	r2, #1
 80179ee:	f300 80cd 	bgt.w	8017b8c <_dtoa_r+0x8a4>
 80179f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80179f4:	2a00      	cmp	r2, #0
 80179f6:	f000 80c1 	beq.w	8017b7c <_dtoa_r+0x894>
 80179fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80179fe:	9c08      	ldr	r4, [sp, #32]
 8017a00:	9e00      	ldr	r6, [sp, #0]
 8017a02:	9a00      	ldr	r2, [sp, #0]
 8017a04:	441a      	add	r2, r3
 8017a06:	9200      	str	r2, [sp, #0]
 8017a08:	9a06      	ldr	r2, [sp, #24]
 8017a0a:	2101      	movs	r1, #1
 8017a0c:	441a      	add	r2, r3
 8017a0e:	4648      	mov	r0, r9
 8017a10:	9206      	str	r2, [sp, #24]
 8017a12:	f000 fbc1 	bl	8018198 <__i2b>
 8017a16:	4605      	mov	r5, r0
 8017a18:	b166      	cbz	r6, 8017a34 <_dtoa_r+0x74c>
 8017a1a:	9b06      	ldr	r3, [sp, #24]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	dd09      	ble.n	8017a34 <_dtoa_r+0x74c>
 8017a20:	42b3      	cmp	r3, r6
 8017a22:	9a00      	ldr	r2, [sp, #0]
 8017a24:	bfa8      	it	ge
 8017a26:	4633      	movge	r3, r6
 8017a28:	1ad2      	subs	r2, r2, r3
 8017a2a:	9200      	str	r2, [sp, #0]
 8017a2c:	9a06      	ldr	r2, [sp, #24]
 8017a2e:	1af6      	subs	r6, r6, r3
 8017a30:	1ad3      	subs	r3, r2, r3
 8017a32:	9306      	str	r3, [sp, #24]
 8017a34:	9b08      	ldr	r3, [sp, #32]
 8017a36:	b30b      	cbz	r3, 8017a7c <_dtoa_r+0x794>
 8017a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	f000 80c6 	beq.w	8017bcc <_dtoa_r+0x8e4>
 8017a40:	2c00      	cmp	r4, #0
 8017a42:	f000 80c0 	beq.w	8017bc6 <_dtoa_r+0x8de>
 8017a46:	4629      	mov	r1, r5
 8017a48:	4622      	mov	r2, r4
 8017a4a:	4648      	mov	r0, r9
 8017a4c:	f000 fc5c 	bl	8018308 <__pow5mult>
 8017a50:	9a02      	ldr	r2, [sp, #8]
 8017a52:	4601      	mov	r1, r0
 8017a54:	4605      	mov	r5, r0
 8017a56:	4648      	mov	r0, r9
 8017a58:	f000 fbb4 	bl	80181c4 <__multiply>
 8017a5c:	9902      	ldr	r1, [sp, #8]
 8017a5e:	4680      	mov	r8, r0
 8017a60:	4648      	mov	r0, r9
 8017a62:	f000 fa9b 	bl	8017f9c <_Bfree>
 8017a66:	9b08      	ldr	r3, [sp, #32]
 8017a68:	1b1b      	subs	r3, r3, r4
 8017a6a:	9308      	str	r3, [sp, #32]
 8017a6c:	f000 80b1 	beq.w	8017bd2 <_dtoa_r+0x8ea>
 8017a70:	9a08      	ldr	r2, [sp, #32]
 8017a72:	4641      	mov	r1, r8
 8017a74:	4648      	mov	r0, r9
 8017a76:	f000 fc47 	bl	8018308 <__pow5mult>
 8017a7a:	9002      	str	r0, [sp, #8]
 8017a7c:	2101      	movs	r1, #1
 8017a7e:	4648      	mov	r0, r9
 8017a80:	f000 fb8a 	bl	8018198 <__i2b>
 8017a84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017a86:	4604      	mov	r4, r0
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	f000 81d8 	beq.w	8017e3e <_dtoa_r+0xb56>
 8017a8e:	461a      	mov	r2, r3
 8017a90:	4601      	mov	r1, r0
 8017a92:	4648      	mov	r0, r9
 8017a94:	f000 fc38 	bl	8018308 <__pow5mult>
 8017a98:	9b07      	ldr	r3, [sp, #28]
 8017a9a:	2b01      	cmp	r3, #1
 8017a9c:	4604      	mov	r4, r0
 8017a9e:	f300 809f 	bgt.w	8017be0 <_dtoa_r+0x8f8>
 8017aa2:	9b04      	ldr	r3, [sp, #16]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	f040 8097 	bne.w	8017bd8 <_dtoa_r+0x8f0>
 8017aaa:	9b05      	ldr	r3, [sp, #20]
 8017aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	f040 8093 	bne.w	8017bdc <_dtoa_r+0x8f4>
 8017ab6:	9b05      	ldr	r3, [sp, #20]
 8017ab8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017abc:	0d1b      	lsrs	r3, r3, #20
 8017abe:	051b      	lsls	r3, r3, #20
 8017ac0:	b133      	cbz	r3, 8017ad0 <_dtoa_r+0x7e8>
 8017ac2:	9b00      	ldr	r3, [sp, #0]
 8017ac4:	3301      	adds	r3, #1
 8017ac6:	9300      	str	r3, [sp, #0]
 8017ac8:	9b06      	ldr	r3, [sp, #24]
 8017aca:	3301      	adds	r3, #1
 8017acc:	9306      	str	r3, [sp, #24]
 8017ace:	2301      	movs	r3, #1
 8017ad0:	9308      	str	r3, [sp, #32]
 8017ad2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	f000 81b8 	beq.w	8017e4a <_dtoa_r+0xb62>
 8017ada:	6923      	ldr	r3, [r4, #16]
 8017adc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017ae0:	6918      	ldr	r0, [r3, #16]
 8017ae2:	f000 fb0d 	bl	8018100 <__hi0bits>
 8017ae6:	f1c0 0020 	rsb	r0, r0, #32
 8017aea:	9b06      	ldr	r3, [sp, #24]
 8017aec:	4418      	add	r0, r3
 8017aee:	f010 001f 	ands.w	r0, r0, #31
 8017af2:	f000 8082 	beq.w	8017bfa <_dtoa_r+0x912>
 8017af6:	f1c0 0320 	rsb	r3, r0, #32
 8017afa:	2b04      	cmp	r3, #4
 8017afc:	dd73      	ble.n	8017be6 <_dtoa_r+0x8fe>
 8017afe:	9b00      	ldr	r3, [sp, #0]
 8017b00:	f1c0 001c 	rsb	r0, r0, #28
 8017b04:	4403      	add	r3, r0
 8017b06:	9300      	str	r3, [sp, #0]
 8017b08:	9b06      	ldr	r3, [sp, #24]
 8017b0a:	4403      	add	r3, r0
 8017b0c:	4406      	add	r6, r0
 8017b0e:	9306      	str	r3, [sp, #24]
 8017b10:	9b00      	ldr	r3, [sp, #0]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	dd05      	ble.n	8017b22 <_dtoa_r+0x83a>
 8017b16:	9902      	ldr	r1, [sp, #8]
 8017b18:	461a      	mov	r2, r3
 8017b1a:	4648      	mov	r0, r9
 8017b1c:	f000 fc4e 	bl	80183bc <__lshift>
 8017b20:	9002      	str	r0, [sp, #8]
 8017b22:	9b06      	ldr	r3, [sp, #24]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	dd05      	ble.n	8017b34 <_dtoa_r+0x84c>
 8017b28:	4621      	mov	r1, r4
 8017b2a:	461a      	mov	r2, r3
 8017b2c:	4648      	mov	r0, r9
 8017b2e:	f000 fc45 	bl	80183bc <__lshift>
 8017b32:	4604      	mov	r4, r0
 8017b34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d061      	beq.n	8017bfe <_dtoa_r+0x916>
 8017b3a:	9802      	ldr	r0, [sp, #8]
 8017b3c:	4621      	mov	r1, r4
 8017b3e:	f000 fca9 	bl	8018494 <__mcmp>
 8017b42:	2800      	cmp	r0, #0
 8017b44:	da5b      	bge.n	8017bfe <_dtoa_r+0x916>
 8017b46:	2300      	movs	r3, #0
 8017b48:	9902      	ldr	r1, [sp, #8]
 8017b4a:	220a      	movs	r2, #10
 8017b4c:	4648      	mov	r0, r9
 8017b4e:	f000 fa47 	bl	8017fe0 <__multadd>
 8017b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b54:	9002      	str	r0, [sp, #8]
 8017b56:	f107 38ff 	add.w	r8, r7, #4294967295
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	f000 8177 	beq.w	8017e4e <_dtoa_r+0xb66>
 8017b60:	4629      	mov	r1, r5
 8017b62:	2300      	movs	r3, #0
 8017b64:	220a      	movs	r2, #10
 8017b66:	4648      	mov	r0, r9
 8017b68:	f000 fa3a 	bl	8017fe0 <__multadd>
 8017b6c:	f1bb 0f00 	cmp.w	fp, #0
 8017b70:	4605      	mov	r5, r0
 8017b72:	dc6f      	bgt.n	8017c54 <_dtoa_r+0x96c>
 8017b74:	9b07      	ldr	r3, [sp, #28]
 8017b76:	2b02      	cmp	r3, #2
 8017b78:	dc49      	bgt.n	8017c0e <_dtoa_r+0x926>
 8017b7a:	e06b      	b.n	8017c54 <_dtoa_r+0x96c>
 8017b7c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017b7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8017b82:	e73c      	b.n	80179fe <_dtoa_r+0x716>
 8017b84:	3fe00000 	.word	0x3fe00000
 8017b88:	40240000 	.word	0x40240000
 8017b8c:	9b03      	ldr	r3, [sp, #12]
 8017b8e:	1e5c      	subs	r4, r3, #1
 8017b90:	9b08      	ldr	r3, [sp, #32]
 8017b92:	42a3      	cmp	r3, r4
 8017b94:	db09      	blt.n	8017baa <_dtoa_r+0x8c2>
 8017b96:	1b1c      	subs	r4, r3, r4
 8017b98:	9b03      	ldr	r3, [sp, #12]
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	f6bf af30 	bge.w	8017a00 <_dtoa_r+0x718>
 8017ba0:	9b00      	ldr	r3, [sp, #0]
 8017ba2:	9a03      	ldr	r2, [sp, #12]
 8017ba4:	1a9e      	subs	r6, r3, r2
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	e72b      	b.n	8017a02 <_dtoa_r+0x71a>
 8017baa:	9b08      	ldr	r3, [sp, #32]
 8017bac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017bae:	9408      	str	r4, [sp, #32]
 8017bb0:	1ae3      	subs	r3, r4, r3
 8017bb2:	441a      	add	r2, r3
 8017bb4:	9e00      	ldr	r6, [sp, #0]
 8017bb6:	9b03      	ldr	r3, [sp, #12]
 8017bb8:	920d      	str	r2, [sp, #52]	@ 0x34
 8017bba:	2400      	movs	r4, #0
 8017bbc:	e721      	b.n	8017a02 <_dtoa_r+0x71a>
 8017bbe:	9c08      	ldr	r4, [sp, #32]
 8017bc0:	9e00      	ldr	r6, [sp, #0]
 8017bc2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8017bc4:	e728      	b.n	8017a18 <_dtoa_r+0x730>
 8017bc6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8017bca:	e751      	b.n	8017a70 <_dtoa_r+0x788>
 8017bcc:	9a08      	ldr	r2, [sp, #32]
 8017bce:	9902      	ldr	r1, [sp, #8]
 8017bd0:	e750      	b.n	8017a74 <_dtoa_r+0x78c>
 8017bd2:	f8cd 8008 	str.w	r8, [sp, #8]
 8017bd6:	e751      	b.n	8017a7c <_dtoa_r+0x794>
 8017bd8:	2300      	movs	r3, #0
 8017bda:	e779      	b.n	8017ad0 <_dtoa_r+0x7e8>
 8017bdc:	9b04      	ldr	r3, [sp, #16]
 8017bde:	e777      	b.n	8017ad0 <_dtoa_r+0x7e8>
 8017be0:	2300      	movs	r3, #0
 8017be2:	9308      	str	r3, [sp, #32]
 8017be4:	e779      	b.n	8017ada <_dtoa_r+0x7f2>
 8017be6:	d093      	beq.n	8017b10 <_dtoa_r+0x828>
 8017be8:	9a00      	ldr	r2, [sp, #0]
 8017bea:	331c      	adds	r3, #28
 8017bec:	441a      	add	r2, r3
 8017bee:	9200      	str	r2, [sp, #0]
 8017bf0:	9a06      	ldr	r2, [sp, #24]
 8017bf2:	441a      	add	r2, r3
 8017bf4:	441e      	add	r6, r3
 8017bf6:	9206      	str	r2, [sp, #24]
 8017bf8:	e78a      	b.n	8017b10 <_dtoa_r+0x828>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	e7f4      	b.n	8017be8 <_dtoa_r+0x900>
 8017bfe:	9b03      	ldr	r3, [sp, #12]
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	46b8      	mov	r8, r7
 8017c04:	dc20      	bgt.n	8017c48 <_dtoa_r+0x960>
 8017c06:	469b      	mov	fp, r3
 8017c08:	9b07      	ldr	r3, [sp, #28]
 8017c0a:	2b02      	cmp	r3, #2
 8017c0c:	dd1e      	ble.n	8017c4c <_dtoa_r+0x964>
 8017c0e:	f1bb 0f00 	cmp.w	fp, #0
 8017c12:	f47f adb1 	bne.w	8017778 <_dtoa_r+0x490>
 8017c16:	4621      	mov	r1, r4
 8017c18:	465b      	mov	r3, fp
 8017c1a:	2205      	movs	r2, #5
 8017c1c:	4648      	mov	r0, r9
 8017c1e:	f000 f9df 	bl	8017fe0 <__multadd>
 8017c22:	4601      	mov	r1, r0
 8017c24:	4604      	mov	r4, r0
 8017c26:	9802      	ldr	r0, [sp, #8]
 8017c28:	f000 fc34 	bl	8018494 <__mcmp>
 8017c2c:	2800      	cmp	r0, #0
 8017c2e:	f77f ada3 	ble.w	8017778 <_dtoa_r+0x490>
 8017c32:	4656      	mov	r6, sl
 8017c34:	2331      	movs	r3, #49	@ 0x31
 8017c36:	f806 3b01 	strb.w	r3, [r6], #1
 8017c3a:	f108 0801 	add.w	r8, r8, #1
 8017c3e:	e59f      	b.n	8017780 <_dtoa_r+0x498>
 8017c40:	9c03      	ldr	r4, [sp, #12]
 8017c42:	46b8      	mov	r8, r7
 8017c44:	4625      	mov	r5, r4
 8017c46:	e7f4      	b.n	8017c32 <_dtoa_r+0x94a>
 8017c48:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8017c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	f000 8101 	beq.w	8017e56 <_dtoa_r+0xb6e>
 8017c54:	2e00      	cmp	r6, #0
 8017c56:	dd05      	ble.n	8017c64 <_dtoa_r+0x97c>
 8017c58:	4629      	mov	r1, r5
 8017c5a:	4632      	mov	r2, r6
 8017c5c:	4648      	mov	r0, r9
 8017c5e:	f000 fbad 	bl	80183bc <__lshift>
 8017c62:	4605      	mov	r5, r0
 8017c64:	9b08      	ldr	r3, [sp, #32]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d05c      	beq.n	8017d24 <_dtoa_r+0xa3c>
 8017c6a:	6869      	ldr	r1, [r5, #4]
 8017c6c:	4648      	mov	r0, r9
 8017c6e:	f000 f955 	bl	8017f1c <_Balloc>
 8017c72:	4606      	mov	r6, r0
 8017c74:	b928      	cbnz	r0, 8017c82 <_dtoa_r+0x99a>
 8017c76:	4b82      	ldr	r3, [pc, #520]	@ (8017e80 <_dtoa_r+0xb98>)
 8017c78:	4602      	mov	r2, r0
 8017c7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8017c7e:	f7ff bb4a 	b.w	8017316 <_dtoa_r+0x2e>
 8017c82:	692a      	ldr	r2, [r5, #16]
 8017c84:	3202      	adds	r2, #2
 8017c86:	0092      	lsls	r2, r2, #2
 8017c88:	f105 010c 	add.w	r1, r5, #12
 8017c8c:	300c      	adds	r0, #12
 8017c8e:	f7ff fa8e 	bl	80171ae <memcpy>
 8017c92:	2201      	movs	r2, #1
 8017c94:	4631      	mov	r1, r6
 8017c96:	4648      	mov	r0, r9
 8017c98:	f000 fb90 	bl	80183bc <__lshift>
 8017c9c:	f10a 0301 	add.w	r3, sl, #1
 8017ca0:	9300      	str	r3, [sp, #0]
 8017ca2:	eb0a 030b 	add.w	r3, sl, fp
 8017ca6:	9308      	str	r3, [sp, #32]
 8017ca8:	9b04      	ldr	r3, [sp, #16]
 8017caa:	f003 0301 	and.w	r3, r3, #1
 8017cae:	462f      	mov	r7, r5
 8017cb0:	9306      	str	r3, [sp, #24]
 8017cb2:	4605      	mov	r5, r0
 8017cb4:	9b00      	ldr	r3, [sp, #0]
 8017cb6:	9802      	ldr	r0, [sp, #8]
 8017cb8:	4621      	mov	r1, r4
 8017cba:	f103 3bff 	add.w	fp, r3, #4294967295
 8017cbe:	f7ff fa8b 	bl	80171d8 <quorem>
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	3330      	adds	r3, #48	@ 0x30
 8017cc6:	9003      	str	r0, [sp, #12]
 8017cc8:	4639      	mov	r1, r7
 8017cca:	9802      	ldr	r0, [sp, #8]
 8017ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8017cce:	f000 fbe1 	bl	8018494 <__mcmp>
 8017cd2:	462a      	mov	r2, r5
 8017cd4:	9004      	str	r0, [sp, #16]
 8017cd6:	4621      	mov	r1, r4
 8017cd8:	4648      	mov	r0, r9
 8017cda:	f000 fbf7 	bl	80184cc <__mdiff>
 8017cde:	68c2      	ldr	r2, [r0, #12]
 8017ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ce2:	4606      	mov	r6, r0
 8017ce4:	bb02      	cbnz	r2, 8017d28 <_dtoa_r+0xa40>
 8017ce6:	4601      	mov	r1, r0
 8017ce8:	9802      	ldr	r0, [sp, #8]
 8017cea:	f000 fbd3 	bl	8018494 <__mcmp>
 8017cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017cf0:	4602      	mov	r2, r0
 8017cf2:	4631      	mov	r1, r6
 8017cf4:	4648      	mov	r0, r9
 8017cf6:	920c      	str	r2, [sp, #48]	@ 0x30
 8017cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8017cfa:	f000 f94f 	bl	8017f9c <_Bfree>
 8017cfe:	9b07      	ldr	r3, [sp, #28]
 8017d00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017d02:	9e00      	ldr	r6, [sp, #0]
 8017d04:	ea42 0103 	orr.w	r1, r2, r3
 8017d08:	9b06      	ldr	r3, [sp, #24]
 8017d0a:	4319      	orrs	r1, r3
 8017d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017d0e:	d10d      	bne.n	8017d2c <_dtoa_r+0xa44>
 8017d10:	2b39      	cmp	r3, #57	@ 0x39
 8017d12:	d027      	beq.n	8017d64 <_dtoa_r+0xa7c>
 8017d14:	9a04      	ldr	r2, [sp, #16]
 8017d16:	2a00      	cmp	r2, #0
 8017d18:	dd01      	ble.n	8017d1e <_dtoa_r+0xa36>
 8017d1a:	9b03      	ldr	r3, [sp, #12]
 8017d1c:	3331      	adds	r3, #49	@ 0x31
 8017d1e:	f88b 3000 	strb.w	r3, [fp]
 8017d22:	e52e      	b.n	8017782 <_dtoa_r+0x49a>
 8017d24:	4628      	mov	r0, r5
 8017d26:	e7b9      	b.n	8017c9c <_dtoa_r+0x9b4>
 8017d28:	2201      	movs	r2, #1
 8017d2a:	e7e2      	b.n	8017cf2 <_dtoa_r+0xa0a>
 8017d2c:	9904      	ldr	r1, [sp, #16]
 8017d2e:	2900      	cmp	r1, #0
 8017d30:	db04      	blt.n	8017d3c <_dtoa_r+0xa54>
 8017d32:	9807      	ldr	r0, [sp, #28]
 8017d34:	4301      	orrs	r1, r0
 8017d36:	9806      	ldr	r0, [sp, #24]
 8017d38:	4301      	orrs	r1, r0
 8017d3a:	d120      	bne.n	8017d7e <_dtoa_r+0xa96>
 8017d3c:	2a00      	cmp	r2, #0
 8017d3e:	ddee      	ble.n	8017d1e <_dtoa_r+0xa36>
 8017d40:	9902      	ldr	r1, [sp, #8]
 8017d42:	9300      	str	r3, [sp, #0]
 8017d44:	2201      	movs	r2, #1
 8017d46:	4648      	mov	r0, r9
 8017d48:	f000 fb38 	bl	80183bc <__lshift>
 8017d4c:	4621      	mov	r1, r4
 8017d4e:	9002      	str	r0, [sp, #8]
 8017d50:	f000 fba0 	bl	8018494 <__mcmp>
 8017d54:	2800      	cmp	r0, #0
 8017d56:	9b00      	ldr	r3, [sp, #0]
 8017d58:	dc02      	bgt.n	8017d60 <_dtoa_r+0xa78>
 8017d5a:	d1e0      	bne.n	8017d1e <_dtoa_r+0xa36>
 8017d5c:	07da      	lsls	r2, r3, #31
 8017d5e:	d5de      	bpl.n	8017d1e <_dtoa_r+0xa36>
 8017d60:	2b39      	cmp	r3, #57	@ 0x39
 8017d62:	d1da      	bne.n	8017d1a <_dtoa_r+0xa32>
 8017d64:	2339      	movs	r3, #57	@ 0x39
 8017d66:	f88b 3000 	strb.w	r3, [fp]
 8017d6a:	4633      	mov	r3, r6
 8017d6c:	461e      	mov	r6, r3
 8017d6e:	3b01      	subs	r3, #1
 8017d70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8017d74:	2a39      	cmp	r2, #57	@ 0x39
 8017d76:	d04e      	beq.n	8017e16 <_dtoa_r+0xb2e>
 8017d78:	3201      	adds	r2, #1
 8017d7a:	701a      	strb	r2, [r3, #0]
 8017d7c:	e501      	b.n	8017782 <_dtoa_r+0x49a>
 8017d7e:	2a00      	cmp	r2, #0
 8017d80:	dd03      	ble.n	8017d8a <_dtoa_r+0xaa2>
 8017d82:	2b39      	cmp	r3, #57	@ 0x39
 8017d84:	d0ee      	beq.n	8017d64 <_dtoa_r+0xa7c>
 8017d86:	3301      	adds	r3, #1
 8017d88:	e7c9      	b.n	8017d1e <_dtoa_r+0xa36>
 8017d8a:	9a00      	ldr	r2, [sp, #0]
 8017d8c:	9908      	ldr	r1, [sp, #32]
 8017d8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017d92:	428a      	cmp	r2, r1
 8017d94:	d028      	beq.n	8017de8 <_dtoa_r+0xb00>
 8017d96:	9902      	ldr	r1, [sp, #8]
 8017d98:	2300      	movs	r3, #0
 8017d9a:	220a      	movs	r2, #10
 8017d9c:	4648      	mov	r0, r9
 8017d9e:	f000 f91f 	bl	8017fe0 <__multadd>
 8017da2:	42af      	cmp	r7, r5
 8017da4:	9002      	str	r0, [sp, #8]
 8017da6:	f04f 0300 	mov.w	r3, #0
 8017daa:	f04f 020a 	mov.w	r2, #10
 8017dae:	4639      	mov	r1, r7
 8017db0:	4648      	mov	r0, r9
 8017db2:	d107      	bne.n	8017dc4 <_dtoa_r+0xadc>
 8017db4:	f000 f914 	bl	8017fe0 <__multadd>
 8017db8:	4607      	mov	r7, r0
 8017dba:	4605      	mov	r5, r0
 8017dbc:	9b00      	ldr	r3, [sp, #0]
 8017dbe:	3301      	adds	r3, #1
 8017dc0:	9300      	str	r3, [sp, #0]
 8017dc2:	e777      	b.n	8017cb4 <_dtoa_r+0x9cc>
 8017dc4:	f000 f90c 	bl	8017fe0 <__multadd>
 8017dc8:	4629      	mov	r1, r5
 8017dca:	4607      	mov	r7, r0
 8017dcc:	2300      	movs	r3, #0
 8017dce:	220a      	movs	r2, #10
 8017dd0:	4648      	mov	r0, r9
 8017dd2:	f000 f905 	bl	8017fe0 <__multadd>
 8017dd6:	4605      	mov	r5, r0
 8017dd8:	e7f0      	b.n	8017dbc <_dtoa_r+0xad4>
 8017dda:	f1bb 0f00 	cmp.w	fp, #0
 8017dde:	bfcc      	ite	gt
 8017de0:	465e      	movgt	r6, fp
 8017de2:	2601      	movle	r6, #1
 8017de4:	4456      	add	r6, sl
 8017de6:	2700      	movs	r7, #0
 8017de8:	9902      	ldr	r1, [sp, #8]
 8017dea:	9300      	str	r3, [sp, #0]
 8017dec:	2201      	movs	r2, #1
 8017dee:	4648      	mov	r0, r9
 8017df0:	f000 fae4 	bl	80183bc <__lshift>
 8017df4:	4621      	mov	r1, r4
 8017df6:	9002      	str	r0, [sp, #8]
 8017df8:	f000 fb4c 	bl	8018494 <__mcmp>
 8017dfc:	2800      	cmp	r0, #0
 8017dfe:	dcb4      	bgt.n	8017d6a <_dtoa_r+0xa82>
 8017e00:	d102      	bne.n	8017e08 <_dtoa_r+0xb20>
 8017e02:	9b00      	ldr	r3, [sp, #0]
 8017e04:	07db      	lsls	r3, r3, #31
 8017e06:	d4b0      	bmi.n	8017d6a <_dtoa_r+0xa82>
 8017e08:	4633      	mov	r3, r6
 8017e0a:	461e      	mov	r6, r3
 8017e0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017e10:	2a30      	cmp	r2, #48	@ 0x30
 8017e12:	d0fa      	beq.n	8017e0a <_dtoa_r+0xb22>
 8017e14:	e4b5      	b.n	8017782 <_dtoa_r+0x49a>
 8017e16:	459a      	cmp	sl, r3
 8017e18:	d1a8      	bne.n	8017d6c <_dtoa_r+0xa84>
 8017e1a:	2331      	movs	r3, #49	@ 0x31
 8017e1c:	f108 0801 	add.w	r8, r8, #1
 8017e20:	f88a 3000 	strb.w	r3, [sl]
 8017e24:	e4ad      	b.n	8017782 <_dtoa_r+0x49a>
 8017e26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8017e28:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8017e84 <_dtoa_r+0xb9c>
 8017e2c:	b11b      	cbz	r3, 8017e36 <_dtoa_r+0xb4e>
 8017e2e:	f10a 0308 	add.w	r3, sl, #8
 8017e32:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8017e34:	6013      	str	r3, [r2, #0]
 8017e36:	4650      	mov	r0, sl
 8017e38:	b017      	add	sp, #92	@ 0x5c
 8017e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e3e:	9b07      	ldr	r3, [sp, #28]
 8017e40:	2b01      	cmp	r3, #1
 8017e42:	f77f ae2e 	ble.w	8017aa2 <_dtoa_r+0x7ba>
 8017e46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017e48:	9308      	str	r3, [sp, #32]
 8017e4a:	2001      	movs	r0, #1
 8017e4c:	e64d      	b.n	8017aea <_dtoa_r+0x802>
 8017e4e:	f1bb 0f00 	cmp.w	fp, #0
 8017e52:	f77f aed9 	ble.w	8017c08 <_dtoa_r+0x920>
 8017e56:	4656      	mov	r6, sl
 8017e58:	9802      	ldr	r0, [sp, #8]
 8017e5a:	4621      	mov	r1, r4
 8017e5c:	f7ff f9bc 	bl	80171d8 <quorem>
 8017e60:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8017e64:	f806 3b01 	strb.w	r3, [r6], #1
 8017e68:	eba6 020a 	sub.w	r2, r6, sl
 8017e6c:	4593      	cmp	fp, r2
 8017e6e:	ddb4      	ble.n	8017dda <_dtoa_r+0xaf2>
 8017e70:	9902      	ldr	r1, [sp, #8]
 8017e72:	2300      	movs	r3, #0
 8017e74:	220a      	movs	r2, #10
 8017e76:	4648      	mov	r0, r9
 8017e78:	f000 f8b2 	bl	8017fe0 <__multadd>
 8017e7c:	9002      	str	r0, [sp, #8]
 8017e7e:	e7eb      	b.n	8017e58 <_dtoa_r+0xb70>
 8017e80:	0801b1a1 	.word	0x0801b1a1
 8017e84:	0801b125 	.word	0x0801b125

08017e88 <_free_r>:
 8017e88:	b538      	push	{r3, r4, r5, lr}
 8017e8a:	4605      	mov	r5, r0
 8017e8c:	2900      	cmp	r1, #0
 8017e8e:	d041      	beq.n	8017f14 <_free_r+0x8c>
 8017e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e94:	1f0c      	subs	r4, r1, #4
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	bfb8      	it	lt
 8017e9a:	18e4      	addlt	r4, r4, r3
 8017e9c:	f7fd ff38 	bl	8015d10 <__malloc_lock>
 8017ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8017f18 <_free_r+0x90>)
 8017ea2:	6813      	ldr	r3, [r2, #0]
 8017ea4:	b933      	cbnz	r3, 8017eb4 <_free_r+0x2c>
 8017ea6:	6063      	str	r3, [r4, #4]
 8017ea8:	6014      	str	r4, [r2, #0]
 8017eaa:	4628      	mov	r0, r5
 8017eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017eb0:	f7fd bf34 	b.w	8015d1c <__malloc_unlock>
 8017eb4:	42a3      	cmp	r3, r4
 8017eb6:	d908      	bls.n	8017eca <_free_r+0x42>
 8017eb8:	6820      	ldr	r0, [r4, #0]
 8017eba:	1821      	adds	r1, r4, r0
 8017ebc:	428b      	cmp	r3, r1
 8017ebe:	bf01      	itttt	eq
 8017ec0:	6819      	ldreq	r1, [r3, #0]
 8017ec2:	685b      	ldreq	r3, [r3, #4]
 8017ec4:	1809      	addeq	r1, r1, r0
 8017ec6:	6021      	streq	r1, [r4, #0]
 8017ec8:	e7ed      	b.n	8017ea6 <_free_r+0x1e>
 8017eca:	461a      	mov	r2, r3
 8017ecc:	685b      	ldr	r3, [r3, #4]
 8017ece:	b10b      	cbz	r3, 8017ed4 <_free_r+0x4c>
 8017ed0:	42a3      	cmp	r3, r4
 8017ed2:	d9fa      	bls.n	8017eca <_free_r+0x42>
 8017ed4:	6811      	ldr	r1, [r2, #0]
 8017ed6:	1850      	adds	r0, r2, r1
 8017ed8:	42a0      	cmp	r0, r4
 8017eda:	d10b      	bne.n	8017ef4 <_free_r+0x6c>
 8017edc:	6820      	ldr	r0, [r4, #0]
 8017ede:	4401      	add	r1, r0
 8017ee0:	1850      	adds	r0, r2, r1
 8017ee2:	4283      	cmp	r3, r0
 8017ee4:	6011      	str	r1, [r2, #0]
 8017ee6:	d1e0      	bne.n	8017eaa <_free_r+0x22>
 8017ee8:	6818      	ldr	r0, [r3, #0]
 8017eea:	685b      	ldr	r3, [r3, #4]
 8017eec:	6053      	str	r3, [r2, #4]
 8017eee:	4408      	add	r0, r1
 8017ef0:	6010      	str	r0, [r2, #0]
 8017ef2:	e7da      	b.n	8017eaa <_free_r+0x22>
 8017ef4:	d902      	bls.n	8017efc <_free_r+0x74>
 8017ef6:	230c      	movs	r3, #12
 8017ef8:	602b      	str	r3, [r5, #0]
 8017efa:	e7d6      	b.n	8017eaa <_free_r+0x22>
 8017efc:	6820      	ldr	r0, [r4, #0]
 8017efe:	1821      	adds	r1, r4, r0
 8017f00:	428b      	cmp	r3, r1
 8017f02:	bf04      	itt	eq
 8017f04:	6819      	ldreq	r1, [r3, #0]
 8017f06:	685b      	ldreq	r3, [r3, #4]
 8017f08:	6063      	str	r3, [r4, #4]
 8017f0a:	bf04      	itt	eq
 8017f0c:	1809      	addeq	r1, r1, r0
 8017f0e:	6021      	streq	r1, [r4, #0]
 8017f10:	6054      	str	r4, [r2, #4]
 8017f12:	e7ca      	b.n	8017eaa <_free_r+0x22>
 8017f14:	bd38      	pop	{r3, r4, r5, pc}
 8017f16:	bf00      	nop
 8017f18:	200042f0 	.word	0x200042f0

08017f1c <_Balloc>:
 8017f1c:	b570      	push	{r4, r5, r6, lr}
 8017f1e:	69c6      	ldr	r6, [r0, #28]
 8017f20:	4604      	mov	r4, r0
 8017f22:	460d      	mov	r5, r1
 8017f24:	b976      	cbnz	r6, 8017f44 <_Balloc+0x28>
 8017f26:	2010      	movs	r0, #16
 8017f28:	f7fd fe40 	bl	8015bac <malloc>
 8017f2c:	4602      	mov	r2, r0
 8017f2e:	61e0      	str	r0, [r4, #28]
 8017f30:	b920      	cbnz	r0, 8017f3c <_Balloc+0x20>
 8017f32:	4b18      	ldr	r3, [pc, #96]	@ (8017f94 <_Balloc+0x78>)
 8017f34:	4818      	ldr	r0, [pc, #96]	@ (8017f98 <_Balloc+0x7c>)
 8017f36:	216b      	movs	r1, #107	@ 0x6b
 8017f38:	f001 fe5a 	bl	8019bf0 <__assert_func>
 8017f3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017f40:	6006      	str	r6, [r0, #0]
 8017f42:	60c6      	str	r6, [r0, #12]
 8017f44:	69e6      	ldr	r6, [r4, #28]
 8017f46:	68f3      	ldr	r3, [r6, #12]
 8017f48:	b183      	cbz	r3, 8017f6c <_Balloc+0x50>
 8017f4a:	69e3      	ldr	r3, [r4, #28]
 8017f4c:	68db      	ldr	r3, [r3, #12]
 8017f4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017f52:	b9b8      	cbnz	r0, 8017f84 <_Balloc+0x68>
 8017f54:	2101      	movs	r1, #1
 8017f56:	fa01 f605 	lsl.w	r6, r1, r5
 8017f5a:	1d72      	adds	r2, r6, #5
 8017f5c:	0092      	lsls	r2, r2, #2
 8017f5e:	4620      	mov	r0, r4
 8017f60:	f7fd fe10 	bl	8015b84 <_calloc_r>
 8017f64:	b160      	cbz	r0, 8017f80 <_Balloc+0x64>
 8017f66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017f6a:	e00e      	b.n	8017f8a <_Balloc+0x6e>
 8017f6c:	2221      	movs	r2, #33	@ 0x21
 8017f6e:	2104      	movs	r1, #4
 8017f70:	4620      	mov	r0, r4
 8017f72:	f7fd fe07 	bl	8015b84 <_calloc_r>
 8017f76:	69e3      	ldr	r3, [r4, #28]
 8017f78:	60f0      	str	r0, [r6, #12]
 8017f7a:	68db      	ldr	r3, [r3, #12]
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d1e4      	bne.n	8017f4a <_Balloc+0x2e>
 8017f80:	2000      	movs	r0, #0
 8017f82:	bd70      	pop	{r4, r5, r6, pc}
 8017f84:	6802      	ldr	r2, [r0, #0]
 8017f86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017f90:	e7f7      	b.n	8017f82 <_Balloc+0x66>
 8017f92:	bf00      	nop
 8017f94:	0801b132 	.word	0x0801b132
 8017f98:	0801b1b2 	.word	0x0801b1b2

08017f9c <_Bfree>:
 8017f9c:	b570      	push	{r4, r5, r6, lr}
 8017f9e:	69c6      	ldr	r6, [r0, #28]
 8017fa0:	4605      	mov	r5, r0
 8017fa2:	460c      	mov	r4, r1
 8017fa4:	b976      	cbnz	r6, 8017fc4 <_Bfree+0x28>
 8017fa6:	2010      	movs	r0, #16
 8017fa8:	f7fd fe00 	bl	8015bac <malloc>
 8017fac:	4602      	mov	r2, r0
 8017fae:	61e8      	str	r0, [r5, #28]
 8017fb0:	b920      	cbnz	r0, 8017fbc <_Bfree+0x20>
 8017fb2:	4b09      	ldr	r3, [pc, #36]	@ (8017fd8 <_Bfree+0x3c>)
 8017fb4:	4809      	ldr	r0, [pc, #36]	@ (8017fdc <_Bfree+0x40>)
 8017fb6:	218f      	movs	r1, #143	@ 0x8f
 8017fb8:	f001 fe1a 	bl	8019bf0 <__assert_func>
 8017fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017fc0:	6006      	str	r6, [r0, #0]
 8017fc2:	60c6      	str	r6, [r0, #12]
 8017fc4:	b13c      	cbz	r4, 8017fd6 <_Bfree+0x3a>
 8017fc6:	69eb      	ldr	r3, [r5, #28]
 8017fc8:	6862      	ldr	r2, [r4, #4]
 8017fca:	68db      	ldr	r3, [r3, #12]
 8017fcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017fd0:	6021      	str	r1, [r4, #0]
 8017fd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017fd6:	bd70      	pop	{r4, r5, r6, pc}
 8017fd8:	0801b132 	.word	0x0801b132
 8017fdc:	0801b1b2 	.word	0x0801b1b2

08017fe0 <__multadd>:
 8017fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fe4:	690d      	ldr	r5, [r1, #16]
 8017fe6:	4607      	mov	r7, r0
 8017fe8:	460c      	mov	r4, r1
 8017fea:	461e      	mov	r6, r3
 8017fec:	f101 0c14 	add.w	ip, r1, #20
 8017ff0:	2000      	movs	r0, #0
 8017ff2:	f8dc 3000 	ldr.w	r3, [ip]
 8017ff6:	b299      	uxth	r1, r3
 8017ff8:	fb02 6101 	mla	r1, r2, r1, r6
 8017ffc:	0c1e      	lsrs	r6, r3, #16
 8017ffe:	0c0b      	lsrs	r3, r1, #16
 8018000:	fb02 3306 	mla	r3, r2, r6, r3
 8018004:	b289      	uxth	r1, r1
 8018006:	3001      	adds	r0, #1
 8018008:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801800c:	4285      	cmp	r5, r0
 801800e:	f84c 1b04 	str.w	r1, [ip], #4
 8018012:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018016:	dcec      	bgt.n	8017ff2 <__multadd+0x12>
 8018018:	b30e      	cbz	r6, 801805e <__multadd+0x7e>
 801801a:	68a3      	ldr	r3, [r4, #8]
 801801c:	42ab      	cmp	r3, r5
 801801e:	dc19      	bgt.n	8018054 <__multadd+0x74>
 8018020:	6861      	ldr	r1, [r4, #4]
 8018022:	4638      	mov	r0, r7
 8018024:	3101      	adds	r1, #1
 8018026:	f7ff ff79 	bl	8017f1c <_Balloc>
 801802a:	4680      	mov	r8, r0
 801802c:	b928      	cbnz	r0, 801803a <__multadd+0x5a>
 801802e:	4602      	mov	r2, r0
 8018030:	4b0c      	ldr	r3, [pc, #48]	@ (8018064 <__multadd+0x84>)
 8018032:	480d      	ldr	r0, [pc, #52]	@ (8018068 <__multadd+0x88>)
 8018034:	21ba      	movs	r1, #186	@ 0xba
 8018036:	f001 fddb 	bl	8019bf0 <__assert_func>
 801803a:	6922      	ldr	r2, [r4, #16]
 801803c:	3202      	adds	r2, #2
 801803e:	f104 010c 	add.w	r1, r4, #12
 8018042:	0092      	lsls	r2, r2, #2
 8018044:	300c      	adds	r0, #12
 8018046:	f7ff f8b2 	bl	80171ae <memcpy>
 801804a:	4621      	mov	r1, r4
 801804c:	4638      	mov	r0, r7
 801804e:	f7ff ffa5 	bl	8017f9c <_Bfree>
 8018052:	4644      	mov	r4, r8
 8018054:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018058:	3501      	adds	r5, #1
 801805a:	615e      	str	r6, [r3, #20]
 801805c:	6125      	str	r5, [r4, #16]
 801805e:	4620      	mov	r0, r4
 8018060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018064:	0801b1a1 	.word	0x0801b1a1
 8018068:	0801b1b2 	.word	0x0801b1b2

0801806c <__s2b>:
 801806c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018070:	460c      	mov	r4, r1
 8018072:	4615      	mov	r5, r2
 8018074:	461f      	mov	r7, r3
 8018076:	2209      	movs	r2, #9
 8018078:	3308      	adds	r3, #8
 801807a:	4606      	mov	r6, r0
 801807c:	fb93 f3f2 	sdiv	r3, r3, r2
 8018080:	2100      	movs	r1, #0
 8018082:	2201      	movs	r2, #1
 8018084:	429a      	cmp	r2, r3
 8018086:	db09      	blt.n	801809c <__s2b+0x30>
 8018088:	4630      	mov	r0, r6
 801808a:	f7ff ff47 	bl	8017f1c <_Balloc>
 801808e:	b940      	cbnz	r0, 80180a2 <__s2b+0x36>
 8018090:	4602      	mov	r2, r0
 8018092:	4b19      	ldr	r3, [pc, #100]	@ (80180f8 <__s2b+0x8c>)
 8018094:	4819      	ldr	r0, [pc, #100]	@ (80180fc <__s2b+0x90>)
 8018096:	21d3      	movs	r1, #211	@ 0xd3
 8018098:	f001 fdaa 	bl	8019bf0 <__assert_func>
 801809c:	0052      	lsls	r2, r2, #1
 801809e:	3101      	adds	r1, #1
 80180a0:	e7f0      	b.n	8018084 <__s2b+0x18>
 80180a2:	9b08      	ldr	r3, [sp, #32]
 80180a4:	6143      	str	r3, [r0, #20]
 80180a6:	2d09      	cmp	r5, #9
 80180a8:	f04f 0301 	mov.w	r3, #1
 80180ac:	6103      	str	r3, [r0, #16]
 80180ae:	dd16      	ble.n	80180de <__s2b+0x72>
 80180b0:	f104 0909 	add.w	r9, r4, #9
 80180b4:	46c8      	mov	r8, r9
 80180b6:	442c      	add	r4, r5
 80180b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80180bc:	4601      	mov	r1, r0
 80180be:	3b30      	subs	r3, #48	@ 0x30
 80180c0:	220a      	movs	r2, #10
 80180c2:	4630      	mov	r0, r6
 80180c4:	f7ff ff8c 	bl	8017fe0 <__multadd>
 80180c8:	45a0      	cmp	r8, r4
 80180ca:	d1f5      	bne.n	80180b8 <__s2b+0x4c>
 80180cc:	f1a5 0408 	sub.w	r4, r5, #8
 80180d0:	444c      	add	r4, r9
 80180d2:	1b2d      	subs	r5, r5, r4
 80180d4:	1963      	adds	r3, r4, r5
 80180d6:	42bb      	cmp	r3, r7
 80180d8:	db04      	blt.n	80180e4 <__s2b+0x78>
 80180da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180de:	340a      	adds	r4, #10
 80180e0:	2509      	movs	r5, #9
 80180e2:	e7f6      	b.n	80180d2 <__s2b+0x66>
 80180e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80180e8:	4601      	mov	r1, r0
 80180ea:	3b30      	subs	r3, #48	@ 0x30
 80180ec:	220a      	movs	r2, #10
 80180ee:	4630      	mov	r0, r6
 80180f0:	f7ff ff76 	bl	8017fe0 <__multadd>
 80180f4:	e7ee      	b.n	80180d4 <__s2b+0x68>
 80180f6:	bf00      	nop
 80180f8:	0801b1a1 	.word	0x0801b1a1
 80180fc:	0801b1b2 	.word	0x0801b1b2

08018100 <__hi0bits>:
 8018100:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018104:	4603      	mov	r3, r0
 8018106:	bf36      	itet	cc
 8018108:	0403      	lslcc	r3, r0, #16
 801810a:	2000      	movcs	r0, #0
 801810c:	2010      	movcc	r0, #16
 801810e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018112:	bf3c      	itt	cc
 8018114:	021b      	lslcc	r3, r3, #8
 8018116:	3008      	addcc	r0, #8
 8018118:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801811c:	bf3c      	itt	cc
 801811e:	011b      	lslcc	r3, r3, #4
 8018120:	3004      	addcc	r0, #4
 8018122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018126:	bf3c      	itt	cc
 8018128:	009b      	lslcc	r3, r3, #2
 801812a:	3002      	addcc	r0, #2
 801812c:	2b00      	cmp	r3, #0
 801812e:	db05      	blt.n	801813c <__hi0bits+0x3c>
 8018130:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018134:	f100 0001 	add.w	r0, r0, #1
 8018138:	bf08      	it	eq
 801813a:	2020      	moveq	r0, #32
 801813c:	4770      	bx	lr

0801813e <__lo0bits>:
 801813e:	6803      	ldr	r3, [r0, #0]
 8018140:	4602      	mov	r2, r0
 8018142:	f013 0007 	ands.w	r0, r3, #7
 8018146:	d00b      	beq.n	8018160 <__lo0bits+0x22>
 8018148:	07d9      	lsls	r1, r3, #31
 801814a:	d421      	bmi.n	8018190 <__lo0bits+0x52>
 801814c:	0798      	lsls	r0, r3, #30
 801814e:	bf49      	itett	mi
 8018150:	085b      	lsrmi	r3, r3, #1
 8018152:	089b      	lsrpl	r3, r3, #2
 8018154:	2001      	movmi	r0, #1
 8018156:	6013      	strmi	r3, [r2, #0]
 8018158:	bf5c      	itt	pl
 801815a:	6013      	strpl	r3, [r2, #0]
 801815c:	2002      	movpl	r0, #2
 801815e:	4770      	bx	lr
 8018160:	b299      	uxth	r1, r3
 8018162:	b909      	cbnz	r1, 8018168 <__lo0bits+0x2a>
 8018164:	0c1b      	lsrs	r3, r3, #16
 8018166:	2010      	movs	r0, #16
 8018168:	b2d9      	uxtb	r1, r3
 801816a:	b909      	cbnz	r1, 8018170 <__lo0bits+0x32>
 801816c:	3008      	adds	r0, #8
 801816e:	0a1b      	lsrs	r3, r3, #8
 8018170:	0719      	lsls	r1, r3, #28
 8018172:	bf04      	itt	eq
 8018174:	091b      	lsreq	r3, r3, #4
 8018176:	3004      	addeq	r0, #4
 8018178:	0799      	lsls	r1, r3, #30
 801817a:	bf04      	itt	eq
 801817c:	089b      	lsreq	r3, r3, #2
 801817e:	3002      	addeq	r0, #2
 8018180:	07d9      	lsls	r1, r3, #31
 8018182:	d403      	bmi.n	801818c <__lo0bits+0x4e>
 8018184:	085b      	lsrs	r3, r3, #1
 8018186:	f100 0001 	add.w	r0, r0, #1
 801818a:	d003      	beq.n	8018194 <__lo0bits+0x56>
 801818c:	6013      	str	r3, [r2, #0]
 801818e:	4770      	bx	lr
 8018190:	2000      	movs	r0, #0
 8018192:	4770      	bx	lr
 8018194:	2020      	movs	r0, #32
 8018196:	4770      	bx	lr

08018198 <__i2b>:
 8018198:	b510      	push	{r4, lr}
 801819a:	460c      	mov	r4, r1
 801819c:	2101      	movs	r1, #1
 801819e:	f7ff febd 	bl	8017f1c <_Balloc>
 80181a2:	4602      	mov	r2, r0
 80181a4:	b928      	cbnz	r0, 80181b2 <__i2b+0x1a>
 80181a6:	4b05      	ldr	r3, [pc, #20]	@ (80181bc <__i2b+0x24>)
 80181a8:	4805      	ldr	r0, [pc, #20]	@ (80181c0 <__i2b+0x28>)
 80181aa:	f240 1145 	movw	r1, #325	@ 0x145
 80181ae:	f001 fd1f 	bl	8019bf0 <__assert_func>
 80181b2:	2301      	movs	r3, #1
 80181b4:	6144      	str	r4, [r0, #20]
 80181b6:	6103      	str	r3, [r0, #16]
 80181b8:	bd10      	pop	{r4, pc}
 80181ba:	bf00      	nop
 80181bc:	0801b1a1 	.word	0x0801b1a1
 80181c0:	0801b1b2 	.word	0x0801b1b2

080181c4 <__multiply>:
 80181c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181c8:	4617      	mov	r7, r2
 80181ca:	690a      	ldr	r2, [r1, #16]
 80181cc:	693b      	ldr	r3, [r7, #16]
 80181ce:	429a      	cmp	r2, r3
 80181d0:	bfa8      	it	ge
 80181d2:	463b      	movge	r3, r7
 80181d4:	4689      	mov	r9, r1
 80181d6:	bfa4      	itt	ge
 80181d8:	460f      	movge	r7, r1
 80181da:	4699      	movge	r9, r3
 80181dc:	693d      	ldr	r5, [r7, #16]
 80181de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80181e2:	68bb      	ldr	r3, [r7, #8]
 80181e4:	6879      	ldr	r1, [r7, #4]
 80181e6:	eb05 060a 	add.w	r6, r5, sl
 80181ea:	42b3      	cmp	r3, r6
 80181ec:	b085      	sub	sp, #20
 80181ee:	bfb8      	it	lt
 80181f0:	3101      	addlt	r1, #1
 80181f2:	f7ff fe93 	bl	8017f1c <_Balloc>
 80181f6:	b930      	cbnz	r0, 8018206 <__multiply+0x42>
 80181f8:	4602      	mov	r2, r0
 80181fa:	4b41      	ldr	r3, [pc, #260]	@ (8018300 <__multiply+0x13c>)
 80181fc:	4841      	ldr	r0, [pc, #260]	@ (8018304 <__multiply+0x140>)
 80181fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018202:	f001 fcf5 	bl	8019bf0 <__assert_func>
 8018206:	f100 0414 	add.w	r4, r0, #20
 801820a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801820e:	4623      	mov	r3, r4
 8018210:	2200      	movs	r2, #0
 8018212:	4573      	cmp	r3, lr
 8018214:	d320      	bcc.n	8018258 <__multiply+0x94>
 8018216:	f107 0814 	add.w	r8, r7, #20
 801821a:	f109 0114 	add.w	r1, r9, #20
 801821e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8018222:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8018226:	9302      	str	r3, [sp, #8]
 8018228:	1beb      	subs	r3, r5, r7
 801822a:	3b15      	subs	r3, #21
 801822c:	f023 0303 	bic.w	r3, r3, #3
 8018230:	3304      	adds	r3, #4
 8018232:	3715      	adds	r7, #21
 8018234:	42bd      	cmp	r5, r7
 8018236:	bf38      	it	cc
 8018238:	2304      	movcc	r3, #4
 801823a:	9301      	str	r3, [sp, #4]
 801823c:	9b02      	ldr	r3, [sp, #8]
 801823e:	9103      	str	r1, [sp, #12]
 8018240:	428b      	cmp	r3, r1
 8018242:	d80c      	bhi.n	801825e <__multiply+0x9a>
 8018244:	2e00      	cmp	r6, #0
 8018246:	dd03      	ble.n	8018250 <__multiply+0x8c>
 8018248:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801824c:	2b00      	cmp	r3, #0
 801824e:	d055      	beq.n	80182fc <__multiply+0x138>
 8018250:	6106      	str	r6, [r0, #16]
 8018252:	b005      	add	sp, #20
 8018254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018258:	f843 2b04 	str.w	r2, [r3], #4
 801825c:	e7d9      	b.n	8018212 <__multiply+0x4e>
 801825e:	f8b1 a000 	ldrh.w	sl, [r1]
 8018262:	f1ba 0f00 	cmp.w	sl, #0
 8018266:	d01f      	beq.n	80182a8 <__multiply+0xe4>
 8018268:	46c4      	mov	ip, r8
 801826a:	46a1      	mov	r9, r4
 801826c:	2700      	movs	r7, #0
 801826e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8018272:	f8d9 3000 	ldr.w	r3, [r9]
 8018276:	fa1f fb82 	uxth.w	fp, r2
 801827a:	b29b      	uxth	r3, r3
 801827c:	fb0a 330b 	mla	r3, sl, fp, r3
 8018280:	443b      	add	r3, r7
 8018282:	f8d9 7000 	ldr.w	r7, [r9]
 8018286:	0c12      	lsrs	r2, r2, #16
 8018288:	0c3f      	lsrs	r7, r7, #16
 801828a:	fb0a 7202 	mla	r2, sl, r2, r7
 801828e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8018292:	b29b      	uxth	r3, r3
 8018294:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018298:	4565      	cmp	r5, ip
 801829a:	f849 3b04 	str.w	r3, [r9], #4
 801829e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80182a2:	d8e4      	bhi.n	801826e <__multiply+0xaa>
 80182a4:	9b01      	ldr	r3, [sp, #4]
 80182a6:	50e7      	str	r7, [r4, r3]
 80182a8:	9b03      	ldr	r3, [sp, #12]
 80182aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80182ae:	3104      	adds	r1, #4
 80182b0:	f1b9 0f00 	cmp.w	r9, #0
 80182b4:	d020      	beq.n	80182f8 <__multiply+0x134>
 80182b6:	6823      	ldr	r3, [r4, #0]
 80182b8:	4647      	mov	r7, r8
 80182ba:	46a4      	mov	ip, r4
 80182bc:	f04f 0a00 	mov.w	sl, #0
 80182c0:	f8b7 b000 	ldrh.w	fp, [r7]
 80182c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80182c8:	fb09 220b 	mla	r2, r9, fp, r2
 80182cc:	4452      	add	r2, sl
 80182ce:	b29b      	uxth	r3, r3
 80182d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80182d4:	f84c 3b04 	str.w	r3, [ip], #4
 80182d8:	f857 3b04 	ldr.w	r3, [r7], #4
 80182dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80182e0:	f8bc 3000 	ldrh.w	r3, [ip]
 80182e4:	fb09 330a 	mla	r3, r9, sl, r3
 80182e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80182ec:	42bd      	cmp	r5, r7
 80182ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80182f2:	d8e5      	bhi.n	80182c0 <__multiply+0xfc>
 80182f4:	9a01      	ldr	r2, [sp, #4]
 80182f6:	50a3      	str	r3, [r4, r2]
 80182f8:	3404      	adds	r4, #4
 80182fa:	e79f      	b.n	801823c <__multiply+0x78>
 80182fc:	3e01      	subs	r6, #1
 80182fe:	e7a1      	b.n	8018244 <__multiply+0x80>
 8018300:	0801b1a1 	.word	0x0801b1a1
 8018304:	0801b1b2 	.word	0x0801b1b2

08018308 <__pow5mult>:
 8018308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801830c:	4615      	mov	r5, r2
 801830e:	f012 0203 	ands.w	r2, r2, #3
 8018312:	4607      	mov	r7, r0
 8018314:	460e      	mov	r6, r1
 8018316:	d007      	beq.n	8018328 <__pow5mult+0x20>
 8018318:	4c25      	ldr	r4, [pc, #148]	@ (80183b0 <__pow5mult+0xa8>)
 801831a:	3a01      	subs	r2, #1
 801831c:	2300      	movs	r3, #0
 801831e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018322:	f7ff fe5d 	bl	8017fe0 <__multadd>
 8018326:	4606      	mov	r6, r0
 8018328:	10ad      	asrs	r5, r5, #2
 801832a:	d03d      	beq.n	80183a8 <__pow5mult+0xa0>
 801832c:	69fc      	ldr	r4, [r7, #28]
 801832e:	b97c      	cbnz	r4, 8018350 <__pow5mult+0x48>
 8018330:	2010      	movs	r0, #16
 8018332:	f7fd fc3b 	bl	8015bac <malloc>
 8018336:	4602      	mov	r2, r0
 8018338:	61f8      	str	r0, [r7, #28]
 801833a:	b928      	cbnz	r0, 8018348 <__pow5mult+0x40>
 801833c:	4b1d      	ldr	r3, [pc, #116]	@ (80183b4 <__pow5mult+0xac>)
 801833e:	481e      	ldr	r0, [pc, #120]	@ (80183b8 <__pow5mult+0xb0>)
 8018340:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018344:	f001 fc54 	bl	8019bf0 <__assert_func>
 8018348:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801834c:	6004      	str	r4, [r0, #0]
 801834e:	60c4      	str	r4, [r0, #12]
 8018350:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018354:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018358:	b94c      	cbnz	r4, 801836e <__pow5mult+0x66>
 801835a:	f240 2171 	movw	r1, #625	@ 0x271
 801835e:	4638      	mov	r0, r7
 8018360:	f7ff ff1a 	bl	8018198 <__i2b>
 8018364:	2300      	movs	r3, #0
 8018366:	f8c8 0008 	str.w	r0, [r8, #8]
 801836a:	4604      	mov	r4, r0
 801836c:	6003      	str	r3, [r0, #0]
 801836e:	f04f 0900 	mov.w	r9, #0
 8018372:	07eb      	lsls	r3, r5, #31
 8018374:	d50a      	bpl.n	801838c <__pow5mult+0x84>
 8018376:	4631      	mov	r1, r6
 8018378:	4622      	mov	r2, r4
 801837a:	4638      	mov	r0, r7
 801837c:	f7ff ff22 	bl	80181c4 <__multiply>
 8018380:	4631      	mov	r1, r6
 8018382:	4680      	mov	r8, r0
 8018384:	4638      	mov	r0, r7
 8018386:	f7ff fe09 	bl	8017f9c <_Bfree>
 801838a:	4646      	mov	r6, r8
 801838c:	106d      	asrs	r5, r5, #1
 801838e:	d00b      	beq.n	80183a8 <__pow5mult+0xa0>
 8018390:	6820      	ldr	r0, [r4, #0]
 8018392:	b938      	cbnz	r0, 80183a4 <__pow5mult+0x9c>
 8018394:	4622      	mov	r2, r4
 8018396:	4621      	mov	r1, r4
 8018398:	4638      	mov	r0, r7
 801839a:	f7ff ff13 	bl	80181c4 <__multiply>
 801839e:	6020      	str	r0, [r4, #0]
 80183a0:	f8c0 9000 	str.w	r9, [r0]
 80183a4:	4604      	mov	r4, r0
 80183a6:	e7e4      	b.n	8018372 <__pow5mult+0x6a>
 80183a8:	4630      	mov	r0, r6
 80183aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183ae:	bf00      	nop
 80183b0:	0801b2c4 	.word	0x0801b2c4
 80183b4:	0801b132 	.word	0x0801b132
 80183b8:	0801b1b2 	.word	0x0801b1b2

080183bc <__lshift>:
 80183bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183c0:	460c      	mov	r4, r1
 80183c2:	6849      	ldr	r1, [r1, #4]
 80183c4:	6923      	ldr	r3, [r4, #16]
 80183c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80183ca:	68a3      	ldr	r3, [r4, #8]
 80183cc:	4607      	mov	r7, r0
 80183ce:	4691      	mov	r9, r2
 80183d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80183d4:	f108 0601 	add.w	r6, r8, #1
 80183d8:	42b3      	cmp	r3, r6
 80183da:	db0b      	blt.n	80183f4 <__lshift+0x38>
 80183dc:	4638      	mov	r0, r7
 80183de:	f7ff fd9d 	bl	8017f1c <_Balloc>
 80183e2:	4605      	mov	r5, r0
 80183e4:	b948      	cbnz	r0, 80183fa <__lshift+0x3e>
 80183e6:	4602      	mov	r2, r0
 80183e8:	4b28      	ldr	r3, [pc, #160]	@ (801848c <__lshift+0xd0>)
 80183ea:	4829      	ldr	r0, [pc, #164]	@ (8018490 <__lshift+0xd4>)
 80183ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80183f0:	f001 fbfe 	bl	8019bf0 <__assert_func>
 80183f4:	3101      	adds	r1, #1
 80183f6:	005b      	lsls	r3, r3, #1
 80183f8:	e7ee      	b.n	80183d8 <__lshift+0x1c>
 80183fa:	2300      	movs	r3, #0
 80183fc:	f100 0114 	add.w	r1, r0, #20
 8018400:	f100 0210 	add.w	r2, r0, #16
 8018404:	4618      	mov	r0, r3
 8018406:	4553      	cmp	r3, sl
 8018408:	db33      	blt.n	8018472 <__lshift+0xb6>
 801840a:	6920      	ldr	r0, [r4, #16]
 801840c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018410:	f104 0314 	add.w	r3, r4, #20
 8018414:	f019 091f 	ands.w	r9, r9, #31
 8018418:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801841c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018420:	d02b      	beq.n	801847a <__lshift+0xbe>
 8018422:	f1c9 0e20 	rsb	lr, r9, #32
 8018426:	468a      	mov	sl, r1
 8018428:	2200      	movs	r2, #0
 801842a:	6818      	ldr	r0, [r3, #0]
 801842c:	fa00 f009 	lsl.w	r0, r0, r9
 8018430:	4310      	orrs	r0, r2
 8018432:	f84a 0b04 	str.w	r0, [sl], #4
 8018436:	f853 2b04 	ldr.w	r2, [r3], #4
 801843a:	459c      	cmp	ip, r3
 801843c:	fa22 f20e 	lsr.w	r2, r2, lr
 8018440:	d8f3      	bhi.n	801842a <__lshift+0x6e>
 8018442:	ebac 0304 	sub.w	r3, ip, r4
 8018446:	3b15      	subs	r3, #21
 8018448:	f023 0303 	bic.w	r3, r3, #3
 801844c:	3304      	adds	r3, #4
 801844e:	f104 0015 	add.w	r0, r4, #21
 8018452:	4560      	cmp	r0, ip
 8018454:	bf88      	it	hi
 8018456:	2304      	movhi	r3, #4
 8018458:	50ca      	str	r2, [r1, r3]
 801845a:	b10a      	cbz	r2, 8018460 <__lshift+0xa4>
 801845c:	f108 0602 	add.w	r6, r8, #2
 8018460:	3e01      	subs	r6, #1
 8018462:	4638      	mov	r0, r7
 8018464:	612e      	str	r6, [r5, #16]
 8018466:	4621      	mov	r1, r4
 8018468:	f7ff fd98 	bl	8017f9c <_Bfree>
 801846c:	4628      	mov	r0, r5
 801846e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018472:	f842 0f04 	str.w	r0, [r2, #4]!
 8018476:	3301      	adds	r3, #1
 8018478:	e7c5      	b.n	8018406 <__lshift+0x4a>
 801847a:	3904      	subs	r1, #4
 801847c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018480:	f841 2f04 	str.w	r2, [r1, #4]!
 8018484:	459c      	cmp	ip, r3
 8018486:	d8f9      	bhi.n	801847c <__lshift+0xc0>
 8018488:	e7ea      	b.n	8018460 <__lshift+0xa4>
 801848a:	bf00      	nop
 801848c:	0801b1a1 	.word	0x0801b1a1
 8018490:	0801b1b2 	.word	0x0801b1b2

08018494 <__mcmp>:
 8018494:	690a      	ldr	r2, [r1, #16]
 8018496:	4603      	mov	r3, r0
 8018498:	6900      	ldr	r0, [r0, #16]
 801849a:	1a80      	subs	r0, r0, r2
 801849c:	b530      	push	{r4, r5, lr}
 801849e:	d10e      	bne.n	80184be <__mcmp+0x2a>
 80184a0:	3314      	adds	r3, #20
 80184a2:	3114      	adds	r1, #20
 80184a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80184a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80184ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80184b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80184b4:	4295      	cmp	r5, r2
 80184b6:	d003      	beq.n	80184c0 <__mcmp+0x2c>
 80184b8:	d205      	bcs.n	80184c6 <__mcmp+0x32>
 80184ba:	f04f 30ff 	mov.w	r0, #4294967295
 80184be:	bd30      	pop	{r4, r5, pc}
 80184c0:	42a3      	cmp	r3, r4
 80184c2:	d3f3      	bcc.n	80184ac <__mcmp+0x18>
 80184c4:	e7fb      	b.n	80184be <__mcmp+0x2a>
 80184c6:	2001      	movs	r0, #1
 80184c8:	e7f9      	b.n	80184be <__mcmp+0x2a>
	...

080184cc <__mdiff>:
 80184cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184d0:	4689      	mov	r9, r1
 80184d2:	4606      	mov	r6, r0
 80184d4:	4611      	mov	r1, r2
 80184d6:	4648      	mov	r0, r9
 80184d8:	4614      	mov	r4, r2
 80184da:	f7ff ffdb 	bl	8018494 <__mcmp>
 80184de:	1e05      	subs	r5, r0, #0
 80184e0:	d112      	bne.n	8018508 <__mdiff+0x3c>
 80184e2:	4629      	mov	r1, r5
 80184e4:	4630      	mov	r0, r6
 80184e6:	f7ff fd19 	bl	8017f1c <_Balloc>
 80184ea:	4602      	mov	r2, r0
 80184ec:	b928      	cbnz	r0, 80184fa <__mdiff+0x2e>
 80184ee:	4b3f      	ldr	r3, [pc, #252]	@ (80185ec <__mdiff+0x120>)
 80184f0:	f240 2137 	movw	r1, #567	@ 0x237
 80184f4:	483e      	ldr	r0, [pc, #248]	@ (80185f0 <__mdiff+0x124>)
 80184f6:	f001 fb7b 	bl	8019bf0 <__assert_func>
 80184fa:	2301      	movs	r3, #1
 80184fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018500:	4610      	mov	r0, r2
 8018502:	b003      	add	sp, #12
 8018504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018508:	bfbc      	itt	lt
 801850a:	464b      	movlt	r3, r9
 801850c:	46a1      	movlt	r9, r4
 801850e:	4630      	mov	r0, r6
 8018510:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018514:	bfba      	itte	lt
 8018516:	461c      	movlt	r4, r3
 8018518:	2501      	movlt	r5, #1
 801851a:	2500      	movge	r5, #0
 801851c:	f7ff fcfe 	bl	8017f1c <_Balloc>
 8018520:	4602      	mov	r2, r0
 8018522:	b918      	cbnz	r0, 801852c <__mdiff+0x60>
 8018524:	4b31      	ldr	r3, [pc, #196]	@ (80185ec <__mdiff+0x120>)
 8018526:	f240 2145 	movw	r1, #581	@ 0x245
 801852a:	e7e3      	b.n	80184f4 <__mdiff+0x28>
 801852c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018530:	6926      	ldr	r6, [r4, #16]
 8018532:	60c5      	str	r5, [r0, #12]
 8018534:	f109 0310 	add.w	r3, r9, #16
 8018538:	f109 0514 	add.w	r5, r9, #20
 801853c:	f104 0e14 	add.w	lr, r4, #20
 8018540:	f100 0b14 	add.w	fp, r0, #20
 8018544:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018548:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801854c:	9301      	str	r3, [sp, #4]
 801854e:	46d9      	mov	r9, fp
 8018550:	f04f 0c00 	mov.w	ip, #0
 8018554:	9b01      	ldr	r3, [sp, #4]
 8018556:	f85e 0b04 	ldr.w	r0, [lr], #4
 801855a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801855e:	9301      	str	r3, [sp, #4]
 8018560:	fa1f f38a 	uxth.w	r3, sl
 8018564:	4619      	mov	r1, r3
 8018566:	b283      	uxth	r3, r0
 8018568:	1acb      	subs	r3, r1, r3
 801856a:	0c00      	lsrs	r0, r0, #16
 801856c:	4463      	add	r3, ip
 801856e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018572:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8018576:	b29b      	uxth	r3, r3
 8018578:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801857c:	4576      	cmp	r6, lr
 801857e:	f849 3b04 	str.w	r3, [r9], #4
 8018582:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018586:	d8e5      	bhi.n	8018554 <__mdiff+0x88>
 8018588:	1b33      	subs	r3, r6, r4
 801858a:	3b15      	subs	r3, #21
 801858c:	f023 0303 	bic.w	r3, r3, #3
 8018590:	3415      	adds	r4, #21
 8018592:	3304      	adds	r3, #4
 8018594:	42a6      	cmp	r6, r4
 8018596:	bf38      	it	cc
 8018598:	2304      	movcc	r3, #4
 801859a:	441d      	add	r5, r3
 801859c:	445b      	add	r3, fp
 801859e:	461e      	mov	r6, r3
 80185a0:	462c      	mov	r4, r5
 80185a2:	4544      	cmp	r4, r8
 80185a4:	d30e      	bcc.n	80185c4 <__mdiff+0xf8>
 80185a6:	f108 0103 	add.w	r1, r8, #3
 80185aa:	1b49      	subs	r1, r1, r5
 80185ac:	f021 0103 	bic.w	r1, r1, #3
 80185b0:	3d03      	subs	r5, #3
 80185b2:	45a8      	cmp	r8, r5
 80185b4:	bf38      	it	cc
 80185b6:	2100      	movcc	r1, #0
 80185b8:	440b      	add	r3, r1
 80185ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80185be:	b191      	cbz	r1, 80185e6 <__mdiff+0x11a>
 80185c0:	6117      	str	r7, [r2, #16]
 80185c2:	e79d      	b.n	8018500 <__mdiff+0x34>
 80185c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80185c8:	46e6      	mov	lr, ip
 80185ca:	0c08      	lsrs	r0, r1, #16
 80185cc:	fa1c fc81 	uxtah	ip, ip, r1
 80185d0:	4471      	add	r1, lr
 80185d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80185d6:	b289      	uxth	r1, r1
 80185d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80185dc:	f846 1b04 	str.w	r1, [r6], #4
 80185e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80185e4:	e7dd      	b.n	80185a2 <__mdiff+0xd6>
 80185e6:	3f01      	subs	r7, #1
 80185e8:	e7e7      	b.n	80185ba <__mdiff+0xee>
 80185ea:	bf00      	nop
 80185ec:	0801b1a1 	.word	0x0801b1a1
 80185f0:	0801b1b2 	.word	0x0801b1b2

080185f4 <__ulp>:
 80185f4:	b082      	sub	sp, #8
 80185f6:	ed8d 0b00 	vstr	d0, [sp]
 80185fa:	9a01      	ldr	r2, [sp, #4]
 80185fc:	4b0f      	ldr	r3, [pc, #60]	@ (801863c <__ulp+0x48>)
 80185fe:	4013      	ands	r3, r2
 8018600:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8018604:	2b00      	cmp	r3, #0
 8018606:	dc08      	bgt.n	801861a <__ulp+0x26>
 8018608:	425b      	negs	r3, r3
 801860a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801860e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018612:	da04      	bge.n	801861e <__ulp+0x2a>
 8018614:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8018618:	4113      	asrs	r3, r2
 801861a:	2200      	movs	r2, #0
 801861c:	e008      	b.n	8018630 <__ulp+0x3c>
 801861e:	f1a2 0314 	sub.w	r3, r2, #20
 8018622:	2b1e      	cmp	r3, #30
 8018624:	bfda      	itte	le
 8018626:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801862a:	40da      	lsrle	r2, r3
 801862c:	2201      	movgt	r2, #1
 801862e:	2300      	movs	r3, #0
 8018630:	4619      	mov	r1, r3
 8018632:	4610      	mov	r0, r2
 8018634:	ec41 0b10 	vmov	d0, r0, r1
 8018638:	b002      	add	sp, #8
 801863a:	4770      	bx	lr
 801863c:	7ff00000 	.word	0x7ff00000

08018640 <__b2d>:
 8018640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018644:	6906      	ldr	r6, [r0, #16]
 8018646:	f100 0814 	add.w	r8, r0, #20
 801864a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801864e:	1f37      	subs	r7, r6, #4
 8018650:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018654:	4610      	mov	r0, r2
 8018656:	f7ff fd53 	bl	8018100 <__hi0bits>
 801865a:	f1c0 0320 	rsb	r3, r0, #32
 801865e:	280a      	cmp	r0, #10
 8018660:	600b      	str	r3, [r1, #0]
 8018662:	491b      	ldr	r1, [pc, #108]	@ (80186d0 <__b2d+0x90>)
 8018664:	dc15      	bgt.n	8018692 <__b2d+0x52>
 8018666:	f1c0 0c0b 	rsb	ip, r0, #11
 801866a:	fa22 f30c 	lsr.w	r3, r2, ip
 801866e:	45b8      	cmp	r8, r7
 8018670:	ea43 0501 	orr.w	r5, r3, r1
 8018674:	bf34      	ite	cc
 8018676:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801867a:	2300      	movcs	r3, #0
 801867c:	3015      	adds	r0, #21
 801867e:	fa02 f000 	lsl.w	r0, r2, r0
 8018682:	fa23 f30c 	lsr.w	r3, r3, ip
 8018686:	4303      	orrs	r3, r0
 8018688:	461c      	mov	r4, r3
 801868a:	ec45 4b10 	vmov	d0, r4, r5
 801868e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018692:	45b8      	cmp	r8, r7
 8018694:	bf3a      	itte	cc
 8018696:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801869a:	f1a6 0708 	subcc.w	r7, r6, #8
 801869e:	2300      	movcs	r3, #0
 80186a0:	380b      	subs	r0, #11
 80186a2:	d012      	beq.n	80186ca <__b2d+0x8a>
 80186a4:	f1c0 0120 	rsb	r1, r0, #32
 80186a8:	fa23 f401 	lsr.w	r4, r3, r1
 80186ac:	4082      	lsls	r2, r0
 80186ae:	4322      	orrs	r2, r4
 80186b0:	4547      	cmp	r7, r8
 80186b2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80186b6:	bf8c      	ite	hi
 80186b8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80186bc:	2200      	movls	r2, #0
 80186be:	4083      	lsls	r3, r0
 80186c0:	40ca      	lsrs	r2, r1
 80186c2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80186c6:	4313      	orrs	r3, r2
 80186c8:	e7de      	b.n	8018688 <__b2d+0x48>
 80186ca:	ea42 0501 	orr.w	r5, r2, r1
 80186ce:	e7db      	b.n	8018688 <__b2d+0x48>
 80186d0:	3ff00000 	.word	0x3ff00000

080186d4 <__d2b>:
 80186d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80186d8:	460f      	mov	r7, r1
 80186da:	2101      	movs	r1, #1
 80186dc:	ec59 8b10 	vmov	r8, r9, d0
 80186e0:	4616      	mov	r6, r2
 80186e2:	f7ff fc1b 	bl	8017f1c <_Balloc>
 80186e6:	4604      	mov	r4, r0
 80186e8:	b930      	cbnz	r0, 80186f8 <__d2b+0x24>
 80186ea:	4602      	mov	r2, r0
 80186ec:	4b23      	ldr	r3, [pc, #140]	@ (801877c <__d2b+0xa8>)
 80186ee:	4824      	ldr	r0, [pc, #144]	@ (8018780 <__d2b+0xac>)
 80186f0:	f240 310f 	movw	r1, #783	@ 0x30f
 80186f4:	f001 fa7c 	bl	8019bf0 <__assert_func>
 80186f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80186fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018700:	b10d      	cbz	r5, 8018706 <__d2b+0x32>
 8018702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018706:	9301      	str	r3, [sp, #4]
 8018708:	f1b8 0300 	subs.w	r3, r8, #0
 801870c:	d023      	beq.n	8018756 <__d2b+0x82>
 801870e:	4668      	mov	r0, sp
 8018710:	9300      	str	r3, [sp, #0]
 8018712:	f7ff fd14 	bl	801813e <__lo0bits>
 8018716:	e9dd 1200 	ldrd	r1, r2, [sp]
 801871a:	b1d0      	cbz	r0, 8018752 <__d2b+0x7e>
 801871c:	f1c0 0320 	rsb	r3, r0, #32
 8018720:	fa02 f303 	lsl.w	r3, r2, r3
 8018724:	430b      	orrs	r3, r1
 8018726:	40c2      	lsrs	r2, r0
 8018728:	6163      	str	r3, [r4, #20]
 801872a:	9201      	str	r2, [sp, #4]
 801872c:	9b01      	ldr	r3, [sp, #4]
 801872e:	61a3      	str	r3, [r4, #24]
 8018730:	2b00      	cmp	r3, #0
 8018732:	bf0c      	ite	eq
 8018734:	2201      	moveq	r2, #1
 8018736:	2202      	movne	r2, #2
 8018738:	6122      	str	r2, [r4, #16]
 801873a:	b1a5      	cbz	r5, 8018766 <__d2b+0x92>
 801873c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018740:	4405      	add	r5, r0
 8018742:	603d      	str	r5, [r7, #0]
 8018744:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018748:	6030      	str	r0, [r6, #0]
 801874a:	4620      	mov	r0, r4
 801874c:	b003      	add	sp, #12
 801874e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018752:	6161      	str	r1, [r4, #20]
 8018754:	e7ea      	b.n	801872c <__d2b+0x58>
 8018756:	a801      	add	r0, sp, #4
 8018758:	f7ff fcf1 	bl	801813e <__lo0bits>
 801875c:	9b01      	ldr	r3, [sp, #4]
 801875e:	6163      	str	r3, [r4, #20]
 8018760:	3020      	adds	r0, #32
 8018762:	2201      	movs	r2, #1
 8018764:	e7e8      	b.n	8018738 <__d2b+0x64>
 8018766:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801876a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801876e:	6038      	str	r0, [r7, #0]
 8018770:	6918      	ldr	r0, [r3, #16]
 8018772:	f7ff fcc5 	bl	8018100 <__hi0bits>
 8018776:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801877a:	e7e5      	b.n	8018748 <__d2b+0x74>
 801877c:	0801b1a1 	.word	0x0801b1a1
 8018780:	0801b1b2 	.word	0x0801b1b2

08018784 <__ratio>:
 8018784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018788:	b085      	sub	sp, #20
 801878a:	e9cd 1000 	strd	r1, r0, [sp]
 801878e:	a902      	add	r1, sp, #8
 8018790:	f7ff ff56 	bl	8018640 <__b2d>
 8018794:	9800      	ldr	r0, [sp, #0]
 8018796:	a903      	add	r1, sp, #12
 8018798:	ec55 4b10 	vmov	r4, r5, d0
 801879c:	f7ff ff50 	bl	8018640 <__b2d>
 80187a0:	9b01      	ldr	r3, [sp, #4]
 80187a2:	6919      	ldr	r1, [r3, #16]
 80187a4:	9b00      	ldr	r3, [sp, #0]
 80187a6:	691b      	ldr	r3, [r3, #16]
 80187a8:	1ac9      	subs	r1, r1, r3
 80187aa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80187ae:	1a9b      	subs	r3, r3, r2
 80187b0:	ec5b ab10 	vmov	sl, fp, d0
 80187b4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	bfce      	itee	gt
 80187bc:	462a      	movgt	r2, r5
 80187be:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80187c2:	465a      	movle	r2, fp
 80187c4:	462f      	mov	r7, r5
 80187c6:	46d9      	mov	r9, fp
 80187c8:	bfcc      	ite	gt
 80187ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80187ce:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80187d2:	464b      	mov	r3, r9
 80187d4:	4652      	mov	r2, sl
 80187d6:	4620      	mov	r0, r4
 80187d8:	4639      	mov	r1, r7
 80187da:	f7e8 f857 	bl	800088c <__aeabi_ddiv>
 80187de:	ec41 0b10 	vmov	d0, r0, r1
 80187e2:	b005      	add	sp, #20
 80187e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080187e8 <__copybits>:
 80187e8:	3901      	subs	r1, #1
 80187ea:	b570      	push	{r4, r5, r6, lr}
 80187ec:	1149      	asrs	r1, r1, #5
 80187ee:	6914      	ldr	r4, [r2, #16]
 80187f0:	3101      	adds	r1, #1
 80187f2:	f102 0314 	add.w	r3, r2, #20
 80187f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80187fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80187fe:	1f05      	subs	r5, r0, #4
 8018800:	42a3      	cmp	r3, r4
 8018802:	d30c      	bcc.n	801881e <__copybits+0x36>
 8018804:	1aa3      	subs	r3, r4, r2
 8018806:	3b11      	subs	r3, #17
 8018808:	f023 0303 	bic.w	r3, r3, #3
 801880c:	3211      	adds	r2, #17
 801880e:	42a2      	cmp	r2, r4
 8018810:	bf88      	it	hi
 8018812:	2300      	movhi	r3, #0
 8018814:	4418      	add	r0, r3
 8018816:	2300      	movs	r3, #0
 8018818:	4288      	cmp	r0, r1
 801881a:	d305      	bcc.n	8018828 <__copybits+0x40>
 801881c:	bd70      	pop	{r4, r5, r6, pc}
 801881e:	f853 6b04 	ldr.w	r6, [r3], #4
 8018822:	f845 6f04 	str.w	r6, [r5, #4]!
 8018826:	e7eb      	b.n	8018800 <__copybits+0x18>
 8018828:	f840 3b04 	str.w	r3, [r0], #4
 801882c:	e7f4      	b.n	8018818 <__copybits+0x30>

0801882e <__any_on>:
 801882e:	f100 0214 	add.w	r2, r0, #20
 8018832:	6900      	ldr	r0, [r0, #16]
 8018834:	114b      	asrs	r3, r1, #5
 8018836:	4298      	cmp	r0, r3
 8018838:	b510      	push	{r4, lr}
 801883a:	db11      	blt.n	8018860 <__any_on+0x32>
 801883c:	dd0a      	ble.n	8018854 <__any_on+0x26>
 801883e:	f011 011f 	ands.w	r1, r1, #31
 8018842:	d007      	beq.n	8018854 <__any_on+0x26>
 8018844:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018848:	fa24 f001 	lsr.w	r0, r4, r1
 801884c:	fa00 f101 	lsl.w	r1, r0, r1
 8018850:	428c      	cmp	r4, r1
 8018852:	d10b      	bne.n	801886c <__any_on+0x3e>
 8018854:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018858:	4293      	cmp	r3, r2
 801885a:	d803      	bhi.n	8018864 <__any_on+0x36>
 801885c:	2000      	movs	r0, #0
 801885e:	bd10      	pop	{r4, pc}
 8018860:	4603      	mov	r3, r0
 8018862:	e7f7      	b.n	8018854 <__any_on+0x26>
 8018864:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018868:	2900      	cmp	r1, #0
 801886a:	d0f5      	beq.n	8018858 <__any_on+0x2a>
 801886c:	2001      	movs	r0, #1
 801886e:	e7f6      	b.n	801885e <__any_on+0x30>

08018870 <sulp>:
 8018870:	b570      	push	{r4, r5, r6, lr}
 8018872:	4604      	mov	r4, r0
 8018874:	460d      	mov	r5, r1
 8018876:	ec45 4b10 	vmov	d0, r4, r5
 801887a:	4616      	mov	r6, r2
 801887c:	f7ff feba 	bl	80185f4 <__ulp>
 8018880:	ec51 0b10 	vmov	r0, r1, d0
 8018884:	b17e      	cbz	r6, 80188a6 <sulp+0x36>
 8018886:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801888a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801888e:	2b00      	cmp	r3, #0
 8018890:	dd09      	ble.n	80188a6 <sulp+0x36>
 8018892:	051b      	lsls	r3, r3, #20
 8018894:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8018898:	2400      	movs	r4, #0
 801889a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801889e:	4622      	mov	r2, r4
 80188a0:	462b      	mov	r3, r5
 80188a2:	f7e7 fec9 	bl	8000638 <__aeabi_dmul>
 80188a6:	ec41 0b10 	vmov	d0, r0, r1
 80188aa:	bd70      	pop	{r4, r5, r6, pc}
 80188ac:	0000      	movs	r0, r0
	...

080188b0 <_strtod_l>:
 80188b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188b4:	b09f      	sub	sp, #124	@ 0x7c
 80188b6:	460c      	mov	r4, r1
 80188b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80188ba:	2200      	movs	r2, #0
 80188bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80188be:	9005      	str	r0, [sp, #20]
 80188c0:	f04f 0a00 	mov.w	sl, #0
 80188c4:	f04f 0b00 	mov.w	fp, #0
 80188c8:	460a      	mov	r2, r1
 80188ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80188cc:	7811      	ldrb	r1, [r2, #0]
 80188ce:	292b      	cmp	r1, #43	@ 0x2b
 80188d0:	d04a      	beq.n	8018968 <_strtod_l+0xb8>
 80188d2:	d838      	bhi.n	8018946 <_strtod_l+0x96>
 80188d4:	290d      	cmp	r1, #13
 80188d6:	d832      	bhi.n	801893e <_strtod_l+0x8e>
 80188d8:	2908      	cmp	r1, #8
 80188da:	d832      	bhi.n	8018942 <_strtod_l+0x92>
 80188dc:	2900      	cmp	r1, #0
 80188de:	d03b      	beq.n	8018958 <_strtod_l+0xa8>
 80188e0:	2200      	movs	r2, #0
 80188e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80188e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80188e6:	782a      	ldrb	r2, [r5, #0]
 80188e8:	2a30      	cmp	r2, #48	@ 0x30
 80188ea:	f040 80b2 	bne.w	8018a52 <_strtod_l+0x1a2>
 80188ee:	786a      	ldrb	r2, [r5, #1]
 80188f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80188f4:	2a58      	cmp	r2, #88	@ 0x58
 80188f6:	d16e      	bne.n	80189d6 <_strtod_l+0x126>
 80188f8:	9302      	str	r3, [sp, #8]
 80188fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80188fc:	9301      	str	r3, [sp, #4]
 80188fe:	ab1a      	add	r3, sp, #104	@ 0x68
 8018900:	9300      	str	r3, [sp, #0]
 8018902:	4a8f      	ldr	r2, [pc, #572]	@ (8018b40 <_strtod_l+0x290>)
 8018904:	9805      	ldr	r0, [sp, #20]
 8018906:	ab1b      	add	r3, sp, #108	@ 0x6c
 8018908:	a919      	add	r1, sp, #100	@ 0x64
 801890a:	f001 f9f7 	bl	8019cfc <__gethex>
 801890e:	f010 060f 	ands.w	r6, r0, #15
 8018912:	4604      	mov	r4, r0
 8018914:	d005      	beq.n	8018922 <_strtod_l+0x72>
 8018916:	2e06      	cmp	r6, #6
 8018918:	d128      	bne.n	801896c <_strtod_l+0xbc>
 801891a:	3501      	adds	r5, #1
 801891c:	2300      	movs	r3, #0
 801891e:	9519      	str	r5, [sp, #100]	@ 0x64
 8018920:	930e      	str	r3, [sp, #56]	@ 0x38
 8018922:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8018924:	2b00      	cmp	r3, #0
 8018926:	f040 858e 	bne.w	8019446 <_strtod_l+0xb96>
 801892a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801892c:	b1cb      	cbz	r3, 8018962 <_strtod_l+0xb2>
 801892e:	4652      	mov	r2, sl
 8018930:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8018934:	ec43 2b10 	vmov	d0, r2, r3
 8018938:	b01f      	add	sp, #124	@ 0x7c
 801893a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801893e:	2920      	cmp	r1, #32
 8018940:	d1ce      	bne.n	80188e0 <_strtod_l+0x30>
 8018942:	3201      	adds	r2, #1
 8018944:	e7c1      	b.n	80188ca <_strtod_l+0x1a>
 8018946:	292d      	cmp	r1, #45	@ 0x2d
 8018948:	d1ca      	bne.n	80188e0 <_strtod_l+0x30>
 801894a:	2101      	movs	r1, #1
 801894c:	910e      	str	r1, [sp, #56]	@ 0x38
 801894e:	1c51      	adds	r1, r2, #1
 8018950:	9119      	str	r1, [sp, #100]	@ 0x64
 8018952:	7852      	ldrb	r2, [r2, #1]
 8018954:	2a00      	cmp	r2, #0
 8018956:	d1c5      	bne.n	80188e4 <_strtod_l+0x34>
 8018958:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801895a:	9419      	str	r4, [sp, #100]	@ 0x64
 801895c:	2b00      	cmp	r3, #0
 801895e:	f040 8570 	bne.w	8019442 <_strtod_l+0xb92>
 8018962:	4652      	mov	r2, sl
 8018964:	465b      	mov	r3, fp
 8018966:	e7e5      	b.n	8018934 <_strtod_l+0x84>
 8018968:	2100      	movs	r1, #0
 801896a:	e7ef      	b.n	801894c <_strtod_l+0x9c>
 801896c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801896e:	b13a      	cbz	r2, 8018980 <_strtod_l+0xd0>
 8018970:	2135      	movs	r1, #53	@ 0x35
 8018972:	a81c      	add	r0, sp, #112	@ 0x70
 8018974:	f7ff ff38 	bl	80187e8 <__copybits>
 8018978:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801897a:	9805      	ldr	r0, [sp, #20]
 801897c:	f7ff fb0e 	bl	8017f9c <_Bfree>
 8018980:	3e01      	subs	r6, #1
 8018982:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8018984:	2e04      	cmp	r6, #4
 8018986:	d806      	bhi.n	8018996 <_strtod_l+0xe6>
 8018988:	e8df f006 	tbb	[pc, r6]
 801898c:	201d0314 	.word	0x201d0314
 8018990:	14          	.byte	0x14
 8018991:	00          	.byte	0x00
 8018992:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8018996:	05e1      	lsls	r1, r4, #23
 8018998:	bf48      	it	mi
 801899a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801899e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80189a2:	0d1b      	lsrs	r3, r3, #20
 80189a4:	051b      	lsls	r3, r3, #20
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d1bb      	bne.n	8018922 <_strtod_l+0x72>
 80189aa:	f7fe fbd3 	bl	8017154 <__errno>
 80189ae:	2322      	movs	r3, #34	@ 0x22
 80189b0:	6003      	str	r3, [r0, #0]
 80189b2:	e7b6      	b.n	8018922 <_strtod_l+0x72>
 80189b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80189b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80189bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80189c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80189c4:	e7e7      	b.n	8018996 <_strtod_l+0xe6>
 80189c6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8018b48 <_strtod_l+0x298>
 80189ca:	e7e4      	b.n	8018996 <_strtod_l+0xe6>
 80189cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80189d0:	f04f 3aff 	mov.w	sl, #4294967295
 80189d4:	e7df      	b.n	8018996 <_strtod_l+0xe6>
 80189d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80189d8:	1c5a      	adds	r2, r3, #1
 80189da:	9219      	str	r2, [sp, #100]	@ 0x64
 80189dc:	785b      	ldrb	r3, [r3, #1]
 80189de:	2b30      	cmp	r3, #48	@ 0x30
 80189e0:	d0f9      	beq.n	80189d6 <_strtod_l+0x126>
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d09d      	beq.n	8018922 <_strtod_l+0x72>
 80189e6:	2301      	movs	r3, #1
 80189e8:	2700      	movs	r7, #0
 80189ea:	9308      	str	r3, [sp, #32]
 80189ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80189ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80189f0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80189f2:	46b9      	mov	r9, r7
 80189f4:	220a      	movs	r2, #10
 80189f6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80189f8:	7805      	ldrb	r5, [r0, #0]
 80189fa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80189fe:	b2d9      	uxtb	r1, r3
 8018a00:	2909      	cmp	r1, #9
 8018a02:	d928      	bls.n	8018a56 <_strtod_l+0x1a6>
 8018a04:	494f      	ldr	r1, [pc, #316]	@ (8018b44 <_strtod_l+0x294>)
 8018a06:	2201      	movs	r2, #1
 8018a08:	f001 f8b4 	bl	8019b74 <strncmp>
 8018a0c:	2800      	cmp	r0, #0
 8018a0e:	d032      	beq.n	8018a76 <_strtod_l+0x1c6>
 8018a10:	2000      	movs	r0, #0
 8018a12:	462a      	mov	r2, r5
 8018a14:	900a      	str	r0, [sp, #40]	@ 0x28
 8018a16:	464d      	mov	r5, r9
 8018a18:	4603      	mov	r3, r0
 8018a1a:	2a65      	cmp	r2, #101	@ 0x65
 8018a1c:	d001      	beq.n	8018a22 <_strtod_l+0x172>
 8018a1e:	2a45      	cmp	r2, #69	@ 0x45
 8018a20:	d114      	bne.n	8018a4c <_strtod_l+0x19c>
 8018a22:	b91d      	cbnz	r5, 8018a2c <_strtod_l+0x17c>
 8018a24:	9a08      	ldr	r2, [sp, #32]
 8018a26:	4302      	orrs	r2, r0
 8018a28:	d096      	beq.n	8018958 <_strtod_l+0xa8>
 8018a2a:	2500      	movs	r5, #0
 8018a2c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8018a2e:	1c62      	adds	r2, r4, #1
 8018a30:	9219      	str	r2, [sp, #100]	@ 0x64
 8018a32:	7862      	ldrb	r2, [r4, #1]
 8018a34:	2a2b      	cmp	r2, #43	@ 0x2b
 8018a36:	d07a      	beq.n	8018b2e <_strtod_l+0x27e>
 8018a38:	2a2d      	cmp	r2, #45	@ 0x2d
 8018a3a:	d07e      	beq.n	8018b3a <_strtod_l+0x28a>
 8018a3c:	f04f 0c00 	mov.w	ip, #0
 8018a40:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8018a44:	2909      	cmp	r1, #9
 8018a46:	f240 8085 	bls.w	8018b54 <_strtod_l+0x2a4>
 8018a4a:	9419      	str	r4, [sp, #100]	@ 0x64
 8018a4c:	f04f 0800 	mov.w	r8, #0
 8018a50:	e0a5      	b.n	8018b9e <_strtod_l+0x2ee>
 8018a52:	2300      	movs	r3, #0
 8018a54:	e7c8      	b.n	80189e8 <_strtod_l+0x138>
 8018a56:	f1b9 0f08 	cmp.w	r9, #8
 8018a5a:	bfd8      	it	le
 8018a5c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8018a5e:	f100 0001 	add.w	r0, r0, #1
 8018a62:	bfda      	itte	le
 8018a64:	fb02 3301 	mlale	r3, r2, r1, r3
 8018a68:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8018a6a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8018a6e:	f109 0901 	add.w	r9, r9, #1
 8018a72:	9019      	str	r0, [sp, #100]	@ 0x64
 8018a74:	e7bf      	b.n	80189f6 <_strtod_l+0x146>
 8018a76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018a78:	1c5a      	adds	r2, r3, #1
 8018a7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8018a7c:	785a      	ldrb	r2, [r3, #1]
 8018a7e:	f1b9 0f00 	cmp.w	r9, #0
 8018a82:	d03b      	beq.n	8018afc <_strtod_l+0x24c>
 8018a84:	900a      	str	r0, [sp, #40]	@ 0x28
 8018a86:	464d      	mov	r5, r9
 8018a88:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8018a8c:	2b09      	cmp	r3, #9
 8018a8e:	d912      	bls.n	8018ab6 <_strtod_l+0x206>
 8018a90:	2301      	movs	r3, #1
 8018a92:	e7c2      	b.n	8018a1a <_strtod_l+0x16a>
 8018a94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018a96:	1c5a      	adds	r2, r3, #1
 8018a98:	9219      	str	r2, [sp, #100]	@ 0x64
 8018a9a:	785a      	ldrb	r2, [r3, #1]
 8018a9c:	3001      	adds	r0, #1
 8018a9e:	2a30      	cmp	r2, #48	@ 0x30
 8018aa0:	d0f8      	beq.n	8018a94 <_strtod_l+0x1e4>
 8018aa2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8018aa6:	2b08      	cmp	r3, #8
 8018aa8:	f200 84d2 	bhi.w	8019450 <_strtod_l+0xba0>
 8018aac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018aae:	900a      	str	r0, [sp, #40]	@ 0x28
 8018ab0:	2000      	movs	r0, #0
 8018ab2:	930c      	str	r3, [sp, #48]	@ 0x30
 8018ab4:	4605      	mov	r5, r0
 8018ab6:	3a30      	subs	r2, #48	@ 0x30
 8018ab8:	f100 0301 	add.w	r3, r0, #1
 8018abc:	d018      	beq.n	8018af0 <_strtod_l+0x240>
 8018abe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018ac0:	4419      	add	r1, r3
 8018ac2:	910a      	str	r1, [sp, #40]	@ 0x28
 8018ac4:	462e      	mov	r6, r5
 8018ac6:	f04f 0e0a 	mov.w	lr, #10
 8018aca:	1c71      	adds	r1, r6, #1
 8018acc:	eba1 0c05 	sub.w	ip, r1, r5
 8018ad0:	4563      	cmp	r3, ip
 8018ad2:	dc15      	bgt.n	8018b00 <_strtod_l+0x250>
 8018ad4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8018ad8:	182b      	adds	r3, r5, r0
 8018ada:	2b08      	cmp	r3, #8
 8018adc:	f105 0501 	add.w	r5, r5, #1
 8018ae0:	4405      	add	r5, r0
 8018ae2:	dc1a      	bgt.n	8018b1a <_strtod_l+0x26a>
 8018ae4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018ae6:	230a      	movs	r3, #10
 8018ae8:	fb03 2301 	mla	r3, r3, r1, r2
 8018aec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018aee:	2300      	movs	r3, #0
 8018af0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018af2:	1c51      	adds	r1, r2, #1
 8018af4:	9119      	str	r1, [sp, #100]	@ 0x64
 8018af6:	7852      	ldrb	r2, [r2, #1]
 8018af8:	4618      	mov	r0, r3
 8018afa:	e7c5      	b.n	8018a88 <_strtod_l+0x1d8>
 8018afc:	4648      	mov	r0, r9
 8018afe:	e7ce      	b.n	8018a9e <_strtod_l+0x1ee>
 8018b00:	2e08      	cmp	r6, #8
 8018b02:	dc05      	bgt.n	8018b10 <_strtod_l+0x260>
 8018b04:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8018b06:	fb0e f606 	mul.w	r6, lr, r6
 8018b0a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8018b0c:	460e      	mov	r6, r1
 8018b0e:	e7dc      	b.n	8018aca <_strtod_l+0x21a>
 8018b10:	2910      	cmp	r1, #16
 8018b12:	bfd8      	it	le
 8018b14:	fb0e f707 	mulle.w	r7, lr, r7
 8018b18:	e7f8      	b.n	8018b0c <_strtod_l+0x25c>
 8018b1a:	2b0f      	cmp	r3, #15
 8018b1c:	bfdc      	itt	le
 8018b1e:	230a      	movle	r3, #10
 8018b20:	fb03 2707 	mlale	r7, r3, r7, r2
 8018b24:	e7e3      	b.n	8018aee <_strtod_l+0x23e>
 8018b26:	2300      	movs	r3, #0
 8018b28:	930a      	str	r3, [sp, #40]	@ 0x28
 8018b2a:	2301      	movs	r3, #1
 8018b2c:	e77a      	b.n	8018a24 <_strtod_l+0x174>
 8018b2e:	f04f 0c00 	mov.w	ip, #0
 8018b32:	1ca2      	adds	r2, r4, #2
 8018b34:	9219      	str	r2, [sp, #100]	@ 0x64
 8018b36:	78a2      	ldrb	r2, [r4, #2]
 8018b38:	e782      	b.n	8018a40 <_strtod_l+0x190>
 8018b3a:	f04f 0c01 	mov.w	ip, #1
 8018b3e:	e7f8      	b.n	8018b32 <_strtod_l+0x282>
 8018b40:	0801b3d4 	.word	0x0801b3d4
 8018b44:	0801b20b 	.word	0x0801b20b
 8018b48:	7ff00000 	.word	0x7ff00000
 8018b4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018b4e:	1c51      	adds	r1, r2, #1
 8018b50:	9119      	str	r1, [sp, #100]	@ 0x64
 8018b52:	7852      	ldrb	r2, [r2, #1]
 8018b54:	2a30      	cmp	r2, #48	@ 0x30
 8018b56:	d0f9      	beq.n	8018b4c <_strtod_l+0x29c>
 8018b58:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8018b5c:	2908      	cmp	r1, #8
 8018b5e:	f63f af75 	bhi.w	8018a4c <_strtod_l+0x19c>
 8018b62:	3a30      	subs	r2, #48	@ 0x30
 8018b64:	9209      	str	r2, [sp, #36]	@ 0x24
 8018b66:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018b68:	920f      	str	r2, [sp, #60]	@ 0x3c
 8018b6a:	f04f 080a 	mov.w	r8, #10
 8018b6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018b70:	1c56      	adds	r6, r2, #1
 8018b72:	9619      	str	r6, [sp, #100]	@ 0x64
 8018b74:	7852      	ldrb	r2, [r2, #1]
 8018b76:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8018b7a:	f1be 0f09 	cmp.w	lr, #9
 8018b7e:	d939      	bls.n	8018bf4 <_strtod_l+0x344>
 8018b80:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8018b82:	1a76      	subs	r6, r6, r1
 8018b84:	2e08      	cmp	r6, #8
 8018b86:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8018b8a:	dc03      	bgt.n	8018b94 <_strtod_l+0x2e4>
 8018b8c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018b8e:	4588      	cmp	r8, r1
 8018b90:	bfa8      	it	ge
 8018b92:	4688      	movge	r8, r1
 8018b94:	f1bc 0f00 	cmp.w	ip, #0
 8018b98:	d001      	beq.n	8018b9e <_strtod_l+0x2ee>
 8018b9a:	f1c8 0800 	rsb	r8, r8, #0
 8018b9e:	2d00      	cmp	r5, #0
 8018ba0:	d14e      	bne.n	8018c40 <_strtod_l+0x390>
 8018ba2:	9908      	ldr	r1, [sp, #32]
 8018ba4:	4308      	orrs	r0, r1
 8018ba6:	f47f aebc 	bne.w	8018922 <_strtod_l+0x72>
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	f47f aed4 	bne.w	8018958 <_strtod_l+0xa8>
 8018bb0:	2a69      	cmp	r2, #105	@ 0x69
 8018bb2:	d028      	beq.n	8018c06 <_strtod_l+0x356>
 8018bb4:	dc25      	bgt.n	8018c02 <_strtod_l+0x352>
 8018bb6:	2a49      	cmp	r2, #73	@ 0x49
 8018bb8:	d025      	beq.n	8018c06 <_strtod_l+0x356>
 8018bba:	2a4e      	cmp	r2, #78	@ 0x4e
 8018bbc:	f47f aecc 	bne.w	8018958 <_strtod_l+0xa8>
 8018bc0:	499a      	ldr	r1, [pc, #616]	@ (8018e2c <_strtod_l+0x57c>)
 8018bc2:	a819      	add	r0, sp, #100	@ 0x64
 8018bc4:	f001 fabc 	bl	801a140 <__match>
 8018bc8:	2800      	cmp	r0, #0
 8018bca:	f43f aec5 	beq.w	8018958 <_strtod_l+0xa8>
 8018bce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018bd0:	781b      	ldrb	r3, [r3, #0]
 8018bd2:	2b28      	cmp	r3, #40	@ 0x28
 8018bd4:	d12e      	bne.n	8018c34 <_strtod_l+0x384>
 8018bd6:	4996      	ldr	r1, [pc, #600]	@ (8018e30 <_strtod_l+0x580>)
 8018bd8:	aa1c      	add	r2, sp, #112	@ 0x70
 8018bda:	a819      	add	r0, sp, #100	@ 0x64
 8018bdc:	f001 fac4 	bl	801a168 <__hexnan>
 8018be0:	2805      	cmp	r0, #5
 8018be2:	d127      	bne.n	8018c34 <_strtod_l+0x384>
 8018be4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018be6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8018bea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8018bee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8018bf2:	e696      	b.n	8018922 <_strtod_l+0x72>
 8018bf4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018bf6:	fb08 2101 	mla	r1, r8, r1, r2
 8018bfa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8018bfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8018c00:	e7b5      	b.n	8018b6e <_strtod_l+0x2be>
 8018c02:	2a6e      	cmp	r2, #110	@ 0x6e
 8018c04:	e7da      	b.n	8018bbc <_strtod_l+0x30c>
 8018c06:	498b      	ldr	r1, [pc, #556]	@ (8018e34 <_strtod_l+0x584>)
 8018c08:	a819      	add	r0, sp, #100	@ 0x64
 8018c0a:	f001 fa99 	bl	801a140 <__match>
 8018c0e:	2800      	cmp	r0, #0
 8018c10:	f43f aea2 	beq.w	8018958 <_strtod_l+0xa8>
 8018c14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018c16:	4988      	ldr	r1, [pc, #544]	@ (8018e38 <_strtod_l+0x588>)
 8018c18:	3b01      	subs	r3, #1
 8018c1a:	a819      	add	r0, sp, #100	@ 0x64
 8018c1c:	9319      	str	r3, [sp, #100]	@ 0x64
 8018c1e:	f001 fa8f 	bl	801a140 <__match>
 8018c22:	b910      	cbnz	r0, 8018c2a <_strtod_l+0x37a>
 8018c24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018c26:	3301      	adds	r3, #1
 8018c28:	9319      	str	r3, [sp, #100]	@ 0x64
 8018c2a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8018e48 <_strtod_l+0x598>
 8018c2e:	f04f 0a00 	mov.w	sl, #0
 8018c32:	e676      	b.n	8018922 <_strtod_l+0x72>
 8018c34:	4881      	ldr	r0, [pc, #516]	@ (8018e3c <_strtod_l+0x58c>)
 8018c36:	f000 ffd3 	bl	8019be0 <nan>
 8018c3a:	ec5b ab10 	vmov	sl, fp, d0
 8018c3e:	e670      	b.n	8018922 <_strtod_l+0x72>
 8018c40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018c42:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8018c44:	eba8 0303 	sub.w	r3, r8, r3
 8018c48:	f1b9 0f00 	cmp.w	r9, #0
 8018c4c:	bf08      	it	eq
 8018c4e:	46a9      	moveq	r9, r5
 8018c50:	2d10      	cmp	r5, #16
 8018c52:	9309      	str	r3, [sp, #36]	@ 0x24
 8018c54:	462c      	mov	r4, r5
 8018c56:	bfa8      	it	ge
 8018c58:	2410      	movge	r4, #16
 8018c5a:	f7e7 fc73 	bl	8000544 <__aeabi_ui2d>
 8018c5e:	2d09      	cmp	r5, #9
 8018c60:	4682      	mov	sl, r0
 8018c62:	468b      	mov	fp, r1
 8018c64:	dc13      	bgt.n	8018c8e <_strtod_l+0x3de>
 8018c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	f43f ae5a 	beq.w	8018922 <_strtod_l+0x72>
 8018c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c70:	dd78      	ble.n	8018d64 <_strtod_l+0x4b4>
 8018c72:	2b16      	cmp	r3, #22
 8018c74:	dc5f      	bgt.n	8018d36 <_strtod_l+0x486>
 8018c76:	4972      	ldr	r1, [pc, #456]	@ (8018e40 <_strtod_l+0x590>)
 8018c78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018c80:	4652      	mov	r2, sl
 8018c82:	465b      	mov	r3, fp
 8018c84:	f7e7 fcd8 	bl	8000638 <__aeabi_dmul>
 8018c88:	4682      	mov	sl, r0
 8018c8a:	468b      	mov	fp, r1
 8018c8c:	e649      	b.n	8018922 <_strtod_l+0x72>
 8018c8e:	4b6c      	ldr	r3, [pc, #432]	@ (8018e40 <_strtod_l+0x590>)
 8018c90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018c94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8018c98:	f7e7 fcce 	bl	8000638 <__aeabi_dmul>
 8018c9c:	4682      	mov	sl, r0
 8018c9e:	4638      	mov	r0, r7
 8018ca0:	468b      	mov	fp, r1
 8018ca2:	f7e7 fc4f 	bl	8000544 <__aeabi_ui2d>
 8018ca6:	4602      	mov	r2, r0
 8018ca8:	460b      	mov	r3, r1
 8018caa:	4650      	mov	r0, sl
 8018cac:	4659      	mov	r1, fp
 8018cae:	f7e7 fb0d 	bl	80002cc <__adddf3>
 8018cb2:	2d0f      	cmp	r5, #15
 8018cb4:	4682      	mov	sl, r0
 8018cb6:	468b      	mov	fp, r1
 8018cb8:	ddd5      	ble.n	8018c66 <_strtod_l+0x3b6>
 8018cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018cbc:	1b2c      	subs	r4, r5, r4
 8018cbe:	441c      	add	r4, r3
 8018cc0:	2c00      	cmp	r4, #0
 8018cc2:	f340 8093 	ble.w	8018dec <_strtod_l+0x53c>
 8018cc6:	f014 030f 	ands.w	r3, r4, #15
 8018cca:	d00a      	beq.n	8018ce2 <_strtod_l+0x432>
 8018ccc:	495c      	ldr	r1, [pc, #368]	@ (8018e40 <_strtod_l+0x590>)
 8018cce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018cd2:	4652      	mov	r2, sl
 8018cd4:	465b      	mov	r3, fp
 8018cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018cda:	f7e7 fcad 	bl	8000638 <__aeabi_dmul>
 8018cde:	4682      	mov	sl, r0
 8018ce0:	468b      	mov	fp, r1
 8018ce2:	f034 040f 	bics.w	r4, r4, #15
 8018ce6:	d073      	beq.n	8018dd0 <_strtod_l+0x520>
 8018ce8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8018cec:	dd49      	ble.n	8018d82 <_strtod_l+0x4d2>
 8018cee:	2400      	movs	r4, #0
 8018cf0:	46a0      	mov	r8, r4
 8018cf2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018cf4:	46a1      	mov	r9, r4
 8018cf6:	9a05      	ldr	r2, [sp, #20]
 8018cf8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8018e48 <_strtod_l+0x598>
 8018cfc:	2322      	movs	r3, #34	@ 0x22
 8018cfe:	6013      	str	r3, [r2, #0]
 8018d00:	f04f 0a00 	mov.w	sl, #0
 8018d04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	f43f ae0b 	beq.w	8018922 <_strtod_l+0x72>
 8018d0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018d0e:	9805      	ldr	r0, [sp, #20]
 8018d10:	f7ff f944 	bl	8017f9c <_Bfree>
 8018d14:	9805      	ldr	r0, [sp, #20]
 8018d16:	4649      	mov	r1, r9
 8018d18:	f7ff f940 	bl	8017f9c <_Bfree>
 8018d1c:	9805      	ldr	r0, [sp, #20]
 8018d1e:	4641      	mov	r1, r8
 8018d20:	f7ff f93c 	bl	8017f9c <_Bfree>
 8018d24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018d26:	9805      	ldr	r0, [sp, #20]
 8018d28:	f7ff f938 	bl	8017f9c <_Bfree>
 8018d2c:	9805      	ldr	r0, [sp, #20]
 8018d2e:	4621      	mov	r1, r4
 8018d30:	f7ff f934 	bl	8017f9c <_Bfree>
 8018d34:	e5f5      	b.n	8018922 <_strtod_l+0x72>
 8018d36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018d38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8018d3c:	4293      	cmp	r3, r2
 8018d3e:	dbbc      	blt.n	8018cba <_strtod_l+0x40a>
 8018d40:	4c3f      	ldr	r4, [pc, #252]	@ (8018e40 <_strtod_l+0x590>)
 8018d42:	f1c5 050f 	rsb	r5, r5, #15
 8018d46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8018d4a:	4652      	mov	r2, sl
 8018d4c:	465b      	mov	r3, fp
 8018d4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d52:	f7e7 fc71 	bl	8000638 <__aeabi_dmul>
 8018d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d58:	1b5d      	subs	r5, r3, r5
 8018d5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8018d5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018d62:	e78f      	b.n	8018c84 <_strtod_l+0x3d4>
 8018d64:	3316      	adds	r3, #22
 8018d66:	dba8      	blt.n	8018cba <_strtod_l+0x40a>
 8018d68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018d6a:	eba3 0808 	sub.w	r8, r3, r8
 8018d6e:	4b34      	ldr	r3, [pc, #208]	@ (8018e40 <_strtod_l+0x590>)
 8018d70:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8018d74:	e9d8 2300 	ldrd	r2, r3, [r8]
 8018d78:	4650      	mov	r0, sl
 8018d7a:	4659      	mov	r1, fp
 8018d7c:	f7e7 fd86 	bl	800088c <__aeabi_ddiv>
 8018d80:	e782      	b.n	8018c88 <_strtod_l+0x3d8>
 8018d82:	2300      	movs	r3, #0
 8018d84:	4f2f      	ldr	r7, [pc, #188]	@ (8018e44 <_strtod_l+0x594>)
 8018d86:	1124      	asrs	r4, r4, #4
 8018d88:	4650      	mov	r0, sl
 8018d8a:	4659      	mov	r1, fp
 8018d8c:	461e      	mov	r6, r3
 8018d8e:	2c01      	cmp	r4, #1
 8018d90:	dc21      	bgt.n	8018dd6 <_strtod_l+0x526>
 8018d92:	b10b      	cbz	r3, 8018d98 <_strtod_l+0x4e8>
 8018d94:	4682      	mov	sl, r0
 8018d96:	468b      	mov	fp, r1
 8018d98:	492a      	ldr	r1, [pc, #168]	@ (8018e44 <_strtod_l+0x594>)
 8018d9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8018d9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8018da2:	4652      	mov	r2, sl
 8018da4:	465b      	mov	r3, fp
 8018da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018daa:	f7e7 fc45 	bl	8000638 <__aeabi_dmul>
 8018dae:	4b26      	ldr	r3, [pc, #152]	@ (8018e48 <_strtod_l+0x598>)
 8018db0:	460a      	mov	r2, r1
 8018db2:	400b      	ands	r3, r1
 8018db4:	4925      	ldr	r1, [pc, #148]	@ (8018e4c <_strtod_l+0x59c>)
 8018db6:	428b      	cmp	r3, r1
 8018db8:	4682      	mov	sl, r0
 8018dba:	d898      	bhi.n	8018cee <_strtod_l+0x43e>
 8018dbc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8018dc0:	428b      	cmp	r3, r1
 8018dc2:	bf86      	itte	hi
 8018dc4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8018e50 <_strtod_l+0x5a0>
 8018dc8:	f04f 3aff 	movhi.w	sl, #4294967295
 8018dcc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	9308      	str	r3, [sp, #32]
 8018dd4:	e076      	b.n	8018ec4 <_strtod_l+0x614>
 8018dd6:	07e2      	lsls	r2, r4, #31
 8018dd8:	d504      	bpl.n	8018de4 <_strtod_l+0x534>
 8018dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018dde:	f7e7 fc2b 	bl	8000638 <__aeabi_dmul>
 8018de2:	2301      	movs	r3, #1
 8018de4:	3601      	adds	r6, #1
 8018de6:	1064      	asrs	r4, r4, #1
 8018de8:	3708      	adds	r7, #8
 8018dea:	e7d0      	b.n	8018d8e <_strtod_l+0x4de>
 8018dec:	d0f0      	beq.n	8018dd0 <_strtod_l+0x520>
 8018dee:	4264      	negs	r4, r4
 8018df0:	f014 020f 	ands.w	r2, r4, #15
 8018df4:	d00a      	beq.n	8018e0c <_strtod_l+0x55c>
 8018df6:	4b12      	ldr	r3, [pc, #72]	@ (8018e40 <_strtod_l+0x590>)
 8018df8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018dfc:	4650      	mov	r0, sl
 8018dfe:	4659      	mov	r1, fp
 8018e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e04:	f7e7 fd42 	bl	800088c <__aeabi_ddiv>
 8018e08:	4682      	mov	sl, r0
 8018e0a:	468b      	mov	fp, r1
 8018e0c:	1124      	asrs	r4, r4, #4
 8018e0e:	d0df      	beq.n	8018dd0 <_strtod_l+0x520>
 8018e10:	2c1f      	cmp	r4, #31
 8018e12:	dd1f      	ble.n	8018e54 <_strtod_l+0x5a4>
 8018e14:	2400      	movs	r4, #0
 8018e16:	46a0      	mov	r8, r4
 8018e18:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018e1a:	46a1      	mov	r9, r4
 8018e1c:	9a05      	ldr	r2, [sp, #20]
 8018e1e:	2322      	movs	r3, #34	@ 0x22
 8018e20:	f04f 0a00 	mov.w	sl, #0
 8018e24:	f04f 0b00 	mov.w	fp, #0
 8018e28:	6013      	str	r3, [r2, #0]
 8018e2a:	e76b      	b.n	8018d04 <_strtod_l+0x454>
 8018e2c:	0801b0f9 	.word	0x0801b0f9
 8018e30:	0801b3c0 	.word	0x0801b3c0
 8018e34:	0801b0f1 	.word	0x0801b0f1
 8018e38:	0801b128 	.word	0x0801b128
 8018e3c:	0801b261 	.word	0x0801b261
 8018e40:	0801b2f8 	.word	0x0801b2f8
 8018e44:	0801b2d0 	.word	0x0801b2d0
 8018e48:	7ff00000 	.word	0x7ff00000
 8018e4c:	7ca00000 	.word	0x7ca00000
 8018e50:	7fefffff 	.word	0x7fefffff
 8018e54:	f014 0310 	ands.w	r3, r4, #16
 8018e58:	bf18      	it	ne
 8018e5a:	236a      	movne	r3, #106	@ 0x6a
 8018e5c:	4ea9      	ldr	r6, [pc, #676]	@ (8019104 <_strtod_l+0x854>)
 8018e5e:	9308      	str	r3, [sp, #32]
 8018e60:	4650      	mov	r0, sl
 8018e62:	4659      	mov	r1, fp
 8018e64:	2300      	movs	r3, #0
 8018e66:	07e7      	lsls	r7, r4, #31
 8018e68:	d504      	bpl.n	8018e74 <_strtod_l+0x5c4>
 8018e6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018e6e:	f7e7 fbe3 	bl	8000638 <__aeabi_dmul>
 8018e72:	2301      	movs	r3, #1
 8018e74:	1064      	asrs	r4, r4, #1
 8018e76:	f106 0608 	add.w	r6, r6, #8
 8018e7a:	d1f4      	bne.n	8018e66 <_strtod_l+0x5b6>
 8018e7c:	b10b      	cbz	r3, 8018e82 <_strtod_l+0x5d2>
 8018e7e:	4682      	mov	sl, r0
 8018e80:	468b      	mov	fp, r1
 8018e82:	9b08      	ldr	r3, [sp, #32]
 8018e84:	b1b3      	cbz	r3, 8018eb4 <_strtod_l+0x604>
 8018e86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8018e8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	4659      	mov	r1, fp
 8018e92:	dd0f      	ble.n	8018eb4 <_strtod_l+0x604>
 8018e94:	2b1f      	cmp	r3, #31
 8018e96:	dd56      	ble.n	8018f46 <_strtod_l+0x696>
 8018e98:	2b34      	cmp	r3, #52	@ 0x34
 8018e9a:	bfde      	ittt	le
 8018e9c:	f04f 33ff 	movle.w	r3, #4294967295
 8018ea0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8018ea4:	4093      	lslle	r3, r2
 8018ea6:	f04f 0a00 	mov.w	sl, #0
 8018eaa:	bfcc      	ite	gt
 8018eac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8018eb0:	ea03 0b01 	andle.w	fp, r3, r1
 8018eb4:	2200      	movs	r2, #0
 8018eb6:	2300      	movs	r3, #0
 8018eb8:	4650      	mov	r0, sl
 8018eba:	4659      	mov	r1, fp
 8018ebc:	f7e7 fe24 	bl	8000b08 <__aeabi_dcmpeq>
 8018ec0:	2800      	cmp	r0, #0
 8018ec2:	d1a7      	bne.n	8018e14 <_strtod_l+0x564>
 8018ec4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018ec6:	9300      	str	r3, [sp, #0]
 8018ec8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018eca:	9805      	ldr	r0, [sp, #20]
 8018ecc:	462b      	mov	r3, r5
 8018ece:	464a      	mov	r2, r9
 8018ed0:	f7ff f8cc 	bl	801806c <__s2b>
 8018ed4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8018ed6:	2800      	cmp	r0, #0
 8018ed8:	f43f af09 	beq.w	8018cee <_strtod_l+0x43e>
 8018edc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018ede:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018ee0:	2a00      	cmp	r2, #0
 8018ee2:	eba3 0308 	sub.w	r3, r3, r8
 8018ee6:	bfa8      	it	ge
 8018ee8:	2300      	movge	r3, #0
 8018eea:	9312      	str	r3, [sp, #72]	@ 0x48
 8018eec:	2400      	movs	r4, #0
 8018eee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8018ef2:	9316      	str	r3, [sp, #88]	@ 0x58
 8018ef4:	46a0      	mov	r8, r4
 8018ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018ef8:	9805      	ldr	r0, [sp, #20]
 8018efa:	6859      	ldr	r1, [r3, #4]
 8018efc:	f7ff f80e 	bl	8017f1c <_Balloc>
 8018f00:	4681      	mov	r9, r0
 8018f02:	2800      	cmp	r0, #0
 8018f04:	f43f aef7 	beq.w	8018cf6 <_strtod_l+0x446>
 8018f08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018f0a:	691a      	ldr	r2, [r3, #16]
 8018f0c:	3202      	adds	r2, #2
 8018f0e:	f103 010c 	add.w	r1, r3, #12
 8018f12:	0092      	lsls	r2, r2, #2
 8018f14:	300c      	adds	r0, #12
 8018f16:	f7fe f94a 	bl	80171ae <memcpy>
 8018f1a:	ec4b ab10 	vmov	d0, sl, fp
 8018f1e:	9805      	ldr	r0, [sp, #20]
 8018f20:	aa1c      	add	r2, sp, #112	@ 0x70
 8018f22:	a91b      	add	r1, sp, #108	@ 0x6c
 8018f24:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8018f28:	f7ff fbd4 	bl	80186d4 <__d2b>
 8018f2c:	901a      	str	r0, [sp, #104]	@ 0x68
 8018f2e:	2800      	cmp	r0, #0
 8018f30:	f43f aee1 	beq.w	8018cf6 <_strtod_l+0x446>
 8018f34:	9805      	ldr	r0, [sp, #20]
 8018f36:	2101      	movs	r1, #1
 8018f38:	f7ff f92e 	bl	8018198 <__i2b>
 8018f3c:	4680      	mov	r8, r0
 8018f3e:	b948      	cbnz	r0, 8018f54 <_strtod_l+0x6a4>
 8018f40:	f04f 0800 	mov.w	r8, #0
 8018f44:	e6d7      	b.n	8018cf6 <_strtod_l+0x446>
 8018f46:	f04f 32ff 	mov.w	r2, #4294967295
 8018f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8018f4e:	ea03 0a0a 	and.w	sl, r3, sl
 8018f52:	e7af      	b.n	8018eb4 <_strtod_l+0x604>
 8018f54:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8018f56:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8018f58:	2d00      	cmp	r5, #0
 8018f5a:	bfab      	itete	ge
 8018f5c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8018f5e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8018f60:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8018f62:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8018f64:	bfac      	ite	ge
 8018f66:	18ef      	addge	r7, r5, r3
 8018f68:	1b5e      	sublt	r6, r3, r5
 8018f6a:	9b08      	ldr	r3, [sp, #32]
 8018f6c:	1aed      	subs	r5, r5, r3
 8018f6e:	4415      	add	r5, r2
 8018f70:	4b65      	ldr	r3, [pc, #404]	@ (8019108 <_strtod_l+0x858>)
 8018f72:	3d01      	subs	r5, #1
 8018f74:	429d      	cmp	r5, r3
 8018f76:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8018f7a:	da50      	bge.n	801901e <_strtod_l+0x76e>
 8018f7c:	1b5b      	subs	r3, r3, r5
 8018f7e:	2b1f      	cmp	r3, #31
 8018f80:	eba2 0203 	sub.w	r2, r2, r3
 8018f84:	f04f 0101 	mov.w	r1, #1
 8018f88:	dc3d      	bgt.n	8019006 <_strtod_l+0x756>
 8018f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8018f8e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018f90:	2300      	movs	r3, #0
 8018f92:	9310      	str	r3, [sp, #64]	@ 0x40
 8018f94:	18bd      	adds	r5, r7, r2
 8018f96:	9b08      	ldr	r3, [sp, #32]
 8018f98:	42af      	cmp	r7, r5
 8018f9a:	4416      	add	r6, r2
 8018f9c:	441e      	add	r6, r3
 8018f9e:	463b      	mov	r3, r7
 8018fa0:	bfa8      	it	ge
 8018fa2:	462b      	movge	r3, r5
 8018fa4:	42b3      	cmp	r3, r6
 8018fa6:	bfa8      	it	ge
 8018fa8:	4633      	movge	r3, r6
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	bfc2      	ittt	gt
 8018fae:	1aed      	subgt	r5, r5, r3
 8018fb0:	1af6      	subgt	r6, r6, r3
 8018fb2:	1aff      	subgt	r7, r7, r3
 8018fb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	dd16      	ble.n	8018fe8 <_strtod_l+0x738>
 8018fba:	4641      	mov	r1, r8
 8018fbc:	9805      	ldr	r0, [sp, #20]
 8018fbe:	461a      	mov	r2, r3
 8018fc0:	f7ff f9a2 	bl	8018308 <__pow5mult>
 8018fc4:	4680      	mov	r8, r0
 8018fc6:	2800      	cmp	r0, #0
 8018fc8:	d0ba      	beq.n	8018f40 <_strtod_l+0x690>
 8018fca:	4601      	mov	r1, r0
 8018fcc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8018fce:	9805      	ldr	r0, [sp, #20]
 8018fd0:	f7ff f8f8 	bl	80181c4 <__multiply>
 8018fd4:	900a      	str	r0, [sp, #40]	@ 0x28
 8018fd6:	2800      	cmp	r0, #0
 8018fd8:	f43f ae8d 	beq.w	8018cf6 <_strtod_l+0x446>
 8018fdc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018fde:	9805      	ldr	r0, [sp, #20]
 8018fe0:	f7fe ffdc 	bl	8017f9c <_Bfree>
 8018fe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018fe6:	931a      	str	r3, [sp, #104]	@ 0x68
 8018fe8:	2d00      	cmp	r5, #0
 8018fea:	dc1d      	bgt.n	8019028 <_strtod_l+0x778>
 8018fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	dd23      	ble.n	801903a <_strtod_l+0x78a>
 8018ff2:	4649      	mov	r1, r9
 8018ff4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8018ff6:	9805      	ldr	r0, [sp, #20]
 8018ff8:	f7ff f986 	bl	8018308 <__pow5mult>
 8018ffc:	4681      	mov	r9, r0
 8018ffe:	b9e0      	cbnz	r0, 801903a <_strtod_l+0x78a>
 8019000:	f04f 0900 	mov.w	r9, #0
 8019004:	e677      	b.n	8018cf6 <_strtod_l+0x446>
 8019006:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801900a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801900e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8019012:	35e2      	adds	r5, #226	@ 0xe2
 8019014:	fa01 f305 	lsl.w	r3, r1, r5
 8019018:	9310      	str	r3, [sp, #64]	@ 0x40
 801901a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801901c:	e7ba      	b.n	8018f94 <_strtod_l+0x6e4>
 801901e:	2300      	movs	r3, #0
 8019020:	9310      	str	r3, [sp, #64]	@ 0x40
 8019022:	2301      	movs	r3, #1
 8019024:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019026:	e7b5      	b.n	8018f94 <_strtod_l+0x6e4>
 8019028:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801902a:	9805      	ldr	r0, [sp, #20]
 801902c:	462a      	mov	r2, r5
 801902e:	f7ff f9c5 	bl	80183bc <__lshift>
 8019032:	901a      	str	r0, [sp, #104]	@ 0x68
 8019034:	2800      	cmp	r0, #0
 8019036:	d1d9      	bne.n	8018fec <_strtod_l+0x73c>
 8019038:	e65d      	b.n	8018cf6 <_strtod_l+0x446>
 801903a:	2e00      	cmp	r6, #0
 801903c:	dd07      	ble.n	801904e <_strtod_l+0x79e>
 801903e:	4649      	mov	r1, r9
 8019040:	9805      	ldr	r0, [sp, #20]
 8019042:	4632      	mov	r2, r6
 8019044:	f7ff f9ba 	bl	80183bc <__lshift>
 8019048:	4681      	mov	r9, r0
 801904a:	2800      	cmp	r0, #0
 801904c:	d0d8      	beq.n	8019000 <_strtod_l+0x750>
 801904e:	2f00      	cmp	r7, #0
 8019050:	dd08      	ble.n	8019064 <_strtod_l+0x7b4>
 8019052:	4641      	mov	r1, r8
 8019054:	9805      	ldr	r0, [sp, #20]
 8019056:	463a      	mov	r2, r7
 8019058:	f7ff f9b0 	bl	80183bc <__lshift>
 801905c:	4680      	mov	r8, r0
 801905e:	2800      	cmp	r0, #0
 8019060:	f43f ae49 	beq.w	8018cf6 <_strtod_l+0x446>
 8019064:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019066:	9805      	ldr	r0, [sp, #20]
 8019068:	464a      	mov	r2, r9
 801906a:	f7ff fa2f 	bl	80184cc <__mdiff>
 801906e:	4604      	mov	r4, r0
 8019070:	2800      	cmp	r0, #0
 8019072:	f43f ae40 	beq.w	8018cf6 <_strtod_l+0x446>
 8019076:	68c3      	ldr	r3, [r0, #12]
 8019078:	930f      	str	r3, [sp, #60]	@ 0x3c
 801907a:	2300      	movs	r3, #0
 801907c:	60c3      	str	r3, [r0, #12]
 801907e:	4641      	mov	r1, r8
 8019080:	f7ff fa08 	bl	8018494 <__mcmp>
 8019084:	2800      	cmp	r0, #0
 8019086:	da45      	bge.n	8019114 <_strtod_l+0x864>
 8019088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801908a:	ea53 030a 	orrs.w	r3, r3, sl
 801908e:	d16b      	bne.n	8019168 <_strtod_l+0x8b8>
 8019090:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019094:	2b00      	cmp	r3, #0
 8019096:	d167      	bne.n	8019168 <_strtod_l+0x8b8>
 8019098:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801909c:	0d1b      	lsrs	r3, r3, #20
 801909e:	051b      	lsls	r3, r3, #20
 80190a0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80190a4:	d960      	bls.n	8019168 <_strtod_l+0x8b8>
 80190a6:	6963      	ldr	r3, [r4, #20]
 80190a8:	b913      	cbnz	r3, 80190b0 <_strtod_l+0x800>
 80190aa:	6923      	ldr	r3, [r4, #16]
 80190ac:	2b01      	cmp	r3, #1
 80190ae:	dd5b      	ble.n	8019168 <_strtod_l+0x8b8>
 80190b0:	4621      	mov	r1, r4
 80190b2:	2201      	movs	r2, #1
 80190b4:	9805      	ldr	r0, [sp, #20]
 80190b6:	f7ff f981 	bl	80183bc <__lshift>
 80190ba:	4641      	mov	r1, r8
 80190bc:	4604      	mov	r4, r0
 80190be:	f7ff f9e9 	bl	8018494 <__mcmp>
 80190c2:	2800      	cmp	r0, #0
 80190c4:	dd50      	ble.n	8019168 <_strtod_l+0x8b8>
 80190c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80190ca:	9a08      	ldr	r2, [sp, #32]
 80190cc:	0d1b      	lsrs	r3, r3, #20
 80190ce:	051b      	lsls	r3, r3, #20
 80190d0:	2a00      	cmp	r2, #0
 80190d2:	d06a      	beq.n	80191aa <_strtod_l+0x8fa>
 80190d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80190d8:	d867      	bhi.n	80191aa <_strtod_l+0x8fa>
 80190da:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80190de:	f67f ae9d 	bls.w	8018e1c <_strtod_l+0x56c>
 80190e2:	4b0a      	ldr	r3, [pc, #40]	@ (801910c <_strtod_l+0x85c>)
 80190e4:	4650      	mov	r0, sl
 80190e6:	4659      	mov	r1, fp
 80190e8:	2200      	movs	r2, #0
 80190ea:	f7e7 faa5 	bl	8000638 <__aeabi_dmul>
 80190ee:	4b08      	ldr	r3, [pc, #32]	@ (8019110 <_strtod_l+0x860>)
 80190f0:	400b      	ands	r3, r1
 80190f2:	4682      	mov	sl, r0
 80190f4:	468b      	mov	fp, r1
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	f47f ae08 	bne.w	8018d0c <_strtod_l+0x45c>
 80190fc:	9a05      	ldr	r2, [sp, #20]
 80190fe:	2322      	movs	r3, #34	@ 0x22
 8019100:	6013      	str	r3, [r2, #0]
 8019102:	e603      	b.n	8018d0c <_strtod_l+0x45c>
 8019104:	0801b3e8 	.word	0x0801b3e8
 8019108:	fffffc02 	.word	0xfffffc02
 801910c:	39500000 	.word	0x39500000
 8019110:	7ff00000 	.word	0x7ff00000
 8019114:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8019118:	d165      	bne.n	80191e6 <_strtod_l+0x936>
 801911a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801911c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019120:	b35a      	cbz	r2, 801917a <_strtod_l+0x8ca>
 8019122:	4a9f      	ldr	r2, [pc, #636]	@ (80193a0 <_strtod_l+0xaf0>)
 8019124:	4293      	cmp	r3, r2
 8019126:	d12b      	bne.n	8019180 <_strtod_l+0x8d0>
 8019128:	9b08      	ldr	r3, [sp, #32]
 801912a:	4651      	mov	r1, sl
 801912c:	b303      	cbz	r3, 8019170 <_strtod_l+0x8c0>
 801912e:	4b9d      	ldr	r3, [pc, #628]	@ (80193a4 <_strtod_l+0xaf4>)
 8019130:	465a      	mov	r2, fp
 8019132:	4013      	ands	r3, r2
 8019134:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8019138:	f04f 32ff 	mov.w	r2, #4294967295
 801913c:	d81b      	bhi.n	8019176 <_strtod_l+0x8c6>
 801913e:	0d1b      	lsrs	r3, r3, #20
 8019140:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019144:	fa02 f303 	lsl.w	r3, r2, r3
 8019148:	4299      	cmp	r1, r3
 801914a:	d119      	bne.n	8019180 <_strtod_l+0x8d0>
 801914c:	4b96      	ldr	r3, [pc, #600]	@ (80193a8 <_strtod_l+0xaf8>)
 801914e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019150:	429a      	cmp	r2, r3
 8019152:	d102      	bne.n	801915a <_strtod_l+0x8aa>
 8019154:	3101      	adds	r1, #1
 8019156:	f43f adce 	beq.w	8018cf6 <_strtod_l+0x446>
 801915a:	4b92      	ldr	r3, [pc, #584]	@ (80193a4 <_strtod_l+0xaf4>)
 801915c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801915e:	401a      	ands	r2, r3
 8019160:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8019164:	f04f 0a00 	mov.w	sl, #0
 8019168:	9b08      	ldr	r3, [sp, #32]
 801916a:	2b00      	cmp	r3, #0
 801916c:	d1b9      	bne.n	80190e2 <_strtod_l+0x832>
 801916e:	e5cd      	b.n	8018d0c <_strtod_l+0x45c>
 8019170:	f04f 33ff 	mov.w	r3, #4294967295
 8019174:	e7e8      	b.n	8019148 <_strtod_l+0x898>
 8019176:	4613      	mov	r3, r2
 8019178:	e7e6      	b.n	8019148 <_strtod_l+0x898>
 801917a:	ea53 030a 	orrs.w	r3, r3, sl
 801917e:	d0a2      	beq.n	80190c6 <_strtod_l+0x816>
 8019180:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019182:	b1db      	cbz	r3, 80191bc <_strtod_l+0x90c>
 8019184:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019186:	4213      	tst	r3, r2
 8019188:	d0ee      	beq.n	8019168 <_strtod_l+0x8b8>
 801918a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801918c:	9a08      	ldr	r2, [sp, #32]
 801918e:	4650      	mov	r0, sl
 8019190:	4659      	mov	r1, fp
 8019192:	b1bb      	cbz	r3, 80191c4 <_strtod_l+0x914>
 8019194:	f7ff fb6c 	bl	8018870 <sulp>
 8019198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801919c:	ec53 2b10 	vmov	r2, r3, d0
 80191a0:	f7e7 f894 	bl	80002cc <__adddf3>
 80191a4:	4682      	mov	sl, r0
 80191a6:	468b      	mov	fp, r1
 80191a8:	e7de      	b.n	8019168 <_strtod_l+0x8b8>
 80191aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80191ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80191b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80191b6:	f04f 3aff 	mov.w	sl, #4294967295
 80191ba:	e7d5      	b.n	8019168 <_strtod_l+0x8b8>
 80191bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80191be:	ea13 0f0a 	tst.w	r3, sl
 80191c2:	e7e1      	b.n	8019188 <_strtod_l+0x8d8>
 80191c4:	f7ff fb54 	bl	8018870 <sulp>
 80191c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80191cc:	ec53 2b10 	vmov	r2, r3, d0
 80191d0:	f7e7 f87a 	bl	80002c8 <__aeabi_dsub>
 80191d4:	2200      	movs	r2, #0
 80191d6:	2300      	movs	r3, #0
 80191d8:	4682      	mov	sl, r0
 80191da:	468b      	mov	fp, r1
 80191dc:	f7e7 fc94 	bl	8000b08 <__aeabi_dcmpeq>
 80191e0:	2800      	cmp	r0, #0
 80191e2:	d0c1      	beq.n	8019168 <_strtod_l+0x8b8>
 80191e4:	e61a      	b.n	8018e1c <_strtod_l+0x56c>
 80191e6:	4641      	mov	r1, r8
 80191e8:	4620      	mov	r0, r4
 80191ea:	f7ff facb 	bl	8018784 <__ratio>
 80191ee:	ec57 6b10 	vmov	r6, r7, d0
 80191f2:	2200      	movs	r2, #0
 80191f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80191f8:	4630      	mov	r0, r6
 80191fa:	4639      	mov	r1, r7
 80191fc:	f7e7 fc98 	bl	8000b30 <__aeabi_dcmple>
 8019200:	2800      	cmp	r0, #0
 8019202:	d06f      	beq.n	80192e4 <_strtod_l+0xa34>
 8019204:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019206:	2b00      	cmp	r3, #0
 8019208:	d17a      	bne.n	8019300 <_strtod_l+0xa50>
 801920a:	f1ba 0f00 	cmp.w	sl, #0
 801920e:	d158      	bne.n	80192c2 <_strtod_l+0xa12>
 8019210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019212:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019216:	2b00      	cmp	r3, #0
 8019218:	d15a      	bne.n	80192d0 <_strtod_l+0xa20>
 801921a:	4b64      	ldr	r3, [pc, #400]	@ (80193ac <_strtod_l+0xafc>)
 801921c:	2200      	movs	r2, #0
 801921e:	4630      	mov	r0, r6
 8019220:	4639      	mov	r1, r7
 8019222:	f7e7 fc7b 	bl	8000b1c <__aeabi_dcmplt>
 8019226:	2800      	cmp	r0, #0
 8019228:	d159      	bne.n	80192de <_strtod_l+0xa2e>
 801922a:	4630      	mov	r0, r6
 801922c:	4639      	mov	r1, r7
 801922e:	4b60      	ldr	r3, [pc, #384]	@ (80193b0 <_strtod_l+0xb00>)
 8019230:	2200      	movs	r2, #0
 8019232:	f7e7 fa01 	bl	8000638 <__aeabi_dmul>
 8019236:	4606      	mov	r6, r0
 8019238:	460f      	mov	r7, r1
 801923a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801923e:	9606      	str	r6, [sp, #24]
 8019240:	9307      	str	r3, [sp, #28]
 8019242:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019246:	4d57      	ldr	r5, [pc, #348]	@ (80193a4 <_strtod_l+0xaf4>)
 8019248:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801924c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801924e:	401d      	ands	r5, r3
 8019250:	4b58      	ldr	r3, [pc, #352]	@ (80193b4 <_strtod_l+0xb04>)
 8019252:	429d      	cmp	r5, r3
 8019254:	f040 80b2 	bne.w	80193bc <_strtod_l+0xb0c>
 8019258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801925a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801925e:	ec4b ab10 	vmov	d0, sl, fp
 8019262:	f7ff f9c7 	bl	80185f4 <__ulp>
 8019266:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801926a:	ec51 0b10 	vmov	r0, r1, d0
 801926e:	f7e7 f9e3 	bl	8000638 <__aeabi_dmul>
 8019272:	4652      	mov	r2, sl
 8019274:	465b      	mov	r3, fp
 8019276:	f7e7 f829 	bl	80002cc <__adddf3>
 801927a:	460b      	mov	r3, r1
 801927c:	4949      	ldr	r1, [pc, #292]	@ (80193a4 <_strtod_l+0xaf4>)
 801927e:	4a4e      	ldr	r2, [pc, #312]	@ (80193b8 <_strtod_l+0xb08>)
 8019280:	4019      	ands	r1, r3
 8019282:	4291      	cmp	r1, r2
 8019284:	4682      	mov	sl, r0
 8019286:	d942      	bls.n	801930e <_strtod_l+0xa5e>
 8019288:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801928a:	4b47      	ldr	r3, [pc, #284]	@ (80193a8 <_strtod_l+0xaf8>)
 801928c:	429a      	cmp	r2, r3
 801928e:	d103      	bne.n	8019298 <_strtod_l+0x9e8>
 8019290:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019292:	3301      	adds	r3, #1
 8019294:	f43f ad2f 	beq.w	8018cf6 <_strtod_l+0x446>
 8019298:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80193a8 <_strtod_l+0xaf8>
 801929c:	f04f 3aff 	mov.w	sl, #4294967295
 80192a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80192a2:	9805      	ldr	r0, [sp, #20]
 80192a4:	f7fe fe7a 	bl	8017f9c <_Bfree>
 80192a8:	9805      	ldr	r0, [sp, #20]
 80192aa:	4649      	mov	r1, r9
 80192ac:	f7fe fe76 	bl	8017f9c <_Bfree>
 80192b0:	9805      	ldr	r0, [sp, #20]
 80192b2:	4641      	mov	r1, r8
 80192b4:	f7fe fe72 	bl	8017f9c <_Bfree>
 80192b8:	9805      	ldr	r0, [sp, #20]
 80192ba:	4621      	mov	r1, r4
 80192bc:	f7fe fe6e 	bl	8017f9c <_Bfree>
 80192c0:	e619      	b.n	8018ef6 <_strtod_l+0x646>
 80192c2:	f1ba 0f01 	cmp.w	sl, #1
 80192c6:	d103      	bne.n	80192d0 <_strtod_l+0xa20>
 80192c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	f43f ada6 	beq.w	8018e1c <_strtod_l+0x56c>
 80192d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8019380 <_strtod_l+0xad0>
 80192d4:	4f35      	ldr	r7, [pc, #212]	@ (80193ac <_strtod_l+0xafc>)
 80192d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80192da:	2600      	movs	r6, #0
 80192dc:	e7b1      	b.n	8019242 <_strtod_l+0x992>
 80192de:	4f34      	ldr	r7, [pc, #208]	@ (80193b0 <_strtod_l+0xb00>)
 80192e0:	2600      	movs	r6, #0
 80192e2:	e7aa      	b.n	801923a <_strtod_l+0x98a>
 80192e4:	4b32      	ldr	r3, [pc, #200]	@ (80193b0 <_strtod_l+0xb00>)
 80192e6:	4630      	mov	r0, r6
 80192e8:	4639      	mov	r1, r7
 80192ea:	2200      	movs	r2, #0
 80192ec:	f7e7 f9a4 	bl	8000638 <__aeabi_dmul>
 80192f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80192f2:	4606      	mov	r6, r0
 80192f4:	460f      	mov	r7, r1
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d09f      	beq.n	801923a <_strtod_l+0x98a>
 80192fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80192fe:	e7a0      	b.n	8019242 <_strtod_l+0x992>
 8019300:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8019388 <_strtod_l+0xad8>
 8019304:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019308:	ec57 6b17 	vmov	r6, r7, d7
 801930c:	e799      	b.n	8019242 <_strtod_l+0x992>
 801930e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8019312:	9b08      	ldr	r3, [sp, #32]
 8019314:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8019318:	2b00      	cmp	r3, #0
 801931a:	d1c1      	bne.n	80192a0 <_strtod_l+0x9f0>
 801931c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019320:	0d1b      	lsrs	r3, r3, #20
 8019322:	051b      	lsls	r3, r3, #20
 8019324:	429d      	cmp	r5, r3
 8019326:	d1bb      	bne.n	80192a0 <_strtod_l+0x9f0>
 8019328:	4630      	mov	r0, r6
 801932a:	4639      	mov	r1, r7
 801932c:	f7e7 fce4 	bl	8000cf8 <__aeabi_d2lz>
 8019330:	f7e7 f954 	bl	80005dc <__aeabi_l2d>
 8019334:	4602      	mov	r2, r0
 8019336:	460b      	mov	r3, r1
 8019338:	4630      	mov	r0, r6
 801933a:	4639      	mov	r1, r7
 801933c:	f7e6 ffc4 	bl	80002c8 <__aeabi_dsub>
 8019340:	460b      	mov	r3, r1
 8019342:	4602      	mov	r2, r0
 8019344:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8019348:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801934c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801934e:	ea46 060a 	orr.w	r6, r6, sl
 8019352:	431e      	orrs	r6, r3
 8019354:	d06f      	beq.n	8019436 <_strtod_l+0xb86>
 8019356:	a30e      	add	r3, pc, #56	@ (adr r3, 8019390 <_strtod_l+0xae0>)
 8019358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801935c:	f7e7 fbde 	bl	8000b1c <__aeabi_dcmplt>
 8019360:	2800      	cmp	r0, #0
 8019362:	f47f acd3 	bne.w	8018d0c <_strtod_l+0x45c>
 8019366:	a30c      	add	r3, pc, #48	@ (adr r3, 8019398 <_strtod_l+0xae8>)
 8019368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801936c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8019370:	f7e7 fbf2 	bl	8000b58 <__aeabi_dcmpgt>
 8019374:	2800      	cmp	r0, #0
 8019376:	d093      	beq.n	80192a0 <_strtod_l+0x9f0>
 8019378:	e4c8      	b.n	8018d0c <_strtod_l+0x45c>
 801937a:	bf00      	nop
 801937c:	f3af 8000 	nop.w
 8019380:	00000000 	.word	0x00000000
 8019384:	bff00000 	.word	0xbff00000
 8019388:	00000000 	.word	0x00000000
 801938c:	3ff00000 	.word	0x3ff00000
 8019390:	94a03595 	.word	0x94a03595
 8019394:	3fdfffff 	.word	0x3fdfffff
 8019398:	35afe535 	.word	0x35afe535
 801939c:	3fe00000 	.word	0x3fe00000
 80193a0:	000fffff 	.word	0x000fffff
 80193a4:	7ff00000 	.word	0x7ff00000
 80193a8:	7fefffff 	.word	0x7fefffff
 80193ac:	3ff00000 	.word	0x3ff00000
 80193b0:	3fe00000 	.word	0x3fe00000
 80193b4:	7fe00000 	.word	0x7fe00000
 80193b8:	7c9fffff 	.word	0x7c9fffff
 80193bc:	9b08      	ldr	r3, [sp, #32]
 80193be:	b323      	cbz	r3, 801940a <_strtod_l+0xb5a>
 80193c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80193c4:	d821      	bhi.n	801940a <_strtod_l+0xb5a>
 80193c6:	a328      	add	r3, pc, #160	@ (adr r3, 8019468 <_strtod_l+0xbb8>)
 80193c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193cc:	4630      	mov	r0, r6
 80193ce:	4639      	mov	r1, r7
 80193d0:	f7e7 fbae 	bl	8000b30 <__aeabi_dcmple>
 80193d4:	b1a0      	cbz	r0, 8019400 <_strtod_l+0xb50>
 80193d6:	4639      	mov	r1, r7
 80193d8:	4630      	mov	r0, r6
 80193da:	f7e7 fc05 	bl	8000be8 <__aeabi_d2uiz>
 80193de:	2801      	cmp	r0, #1
 80193e0:	bf38      	it	cc
 80193e2:	2001      	movcc	r0, #1
 80193e4:	f7e7 f8ae 	bl	8000544 <__aeabi_ui2d>
 80193e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80193ea:	4606      	mov	r6, r0
 80193ec:	460f      	mov	r7, r1
 80193ee:	b9fb      	cbnz	r3, 8019430 <_strtod_l+0xb80>
 80193f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80193f4:	9014      	str	r0, [sp, #80]	@ 0x50
 80193f6:	9315      	str	r3, [sp, #84]	@ 0x54
 80193f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80193fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8019400:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019402:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8019406:	1b5b      	subs	r3, r3, r5
 8019408:	9311      	str	r3, [sp, #68]	@ 0x44
 801940a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801940e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8019412:	f7ff f8ef 	bl	80185f4 <__ulp>
 8019416:	4650      	mov	r0, sl
 8019418:	ec53 2b10 	vmov	r2, r3, d0
 801941c:	4659      	mov	r1, fp
 801941e:	f7e7 f90b 	bl	8000638 <__aeabi_dmul>
 8019422:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8019426:	f7e6 ff51 	bl	80002cc <__adddf3>
 801942a:	4682      	mov	sl, r0
 801942c:	468b      	mov	fp, r1
 801942e:	e770      	b.n	8019312 <_strtod_l+0xa62>
 8019430:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8019434:	e7e0      	b.n	80193f8 <_strtod_l+0xb48>
 8019436:	a30e      	add	r3, pc, #56	@ (adr r3, 8019470 <_strtod_l+0xbc0>)
 8019438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801943c:	f7e7 fb6e 	bl	8000b1c <__aeabi_dcmplt>
 8019440:	e798      	b.n	8019374 <_strtod_l+0xac4>
 8019442:	2300      	movs	r3, #0
 8019444:	930e      	str	r3, [sp, #56]	@ 0x38
 8019446:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8019448:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801944a:	6013      	str	r3, [r2, #0]
 801944c:	f7ff ba6d 	b.w	801892a <_strtod_l+0x7a>
 8019450:	2a65      	cmp	r2, #101	@ 0x65
 8019452:	f43f ab68 	beq.w	8018b26 <_strtod_l+0x276>
 8019456:	2a45      	cmp	r2, #69	@ 0x45
 8019458:	f43f ab65 	beq.w	8018b26 <_strtod_l+0x276>
 801945c:	2301      	movs	r3, #1
 801945e:	f7ff bba0 	b.w	8018ba2 <_strtod_l+0x2f2>
 8019462:	bf00      	nop
 8019464:	f3af 8000 	nop.w
 8019468:	ffc00000 	.word	0xffc00000
 801946c:	41dfffff 	.word	0x41dfffff
 8019470:	94a03595 	.word	0x94a03595
 8019474:	3fcfffff 	.word	0x3fcfffff

08019478 <_strtod_r>:
 8019478:	4b01      	ldr	r3, [pc, #4]	@ (8019480 <_strtod_r+0x8>)
 801947a:	f7ff ba19 	b.w	80188b0 <_strtod_l>
 801947e:	bf00      	nop
 8019480:	20000268 	.word	0x20000268

08019484 <_strtol_l.isra.0>:
 8019484:	2b24      	cmp	r3, #36	@ 0x24
 8019486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801948a:	4686      	mov	lr, r0
 801948c:	4690      	mov	r8, r2
 801948e:	d801      	bhi.n	8019494 <_strtol_l.isra.0+0x10>
 8019490:	2b01      	cmp	r3, #1
 8019492:	d106      	bne.n	80194a2 <_strtol_l.isra.0+0x1e>
 8019494:	f7fd fe5e 	bl	8017154 <__errno>
 8019498:	2316      	movs	r3, #22
 801949a:	6003      	str	r3, [r0, #0]
 801949c:	2000      	movs	r0, #0
 801949e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194a2:	4834      	ldr	r0, [pc, #208]	@ (8019574 <_strtol_l.isra.0+0xf0>)
 80194a4:	460d      	mov	r5, r1
 80194a6:	462a      	mov	r2, r5
 80194a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80194ac:	5d06      	ldrb	r6, [r0, r4]
 80194ae:	f016 0608 	ands.w	r6, r6, #8
 80194b2:	d1f8      	bne.n	80194a6 <_strtol_l.isra.0+0x22>
 80194b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80194b6:	d110      	bne.n	80194da <_strtol_l.isra.0+0x56>
 80194b8:	782c      	ldrb	r4, [r5, #0]
 80194ba:	2601      	movs	r6, #1
 80194bc:	1c95      	adds	r5, r2, #2
 80194be:	f033 0210 	bics.w	r2, r3, #16
 80194c2:	d115      	bne.n	80194f0 <_strtol_l.isra.0+0x6c>
 80194c4:	2c30      	cmp	r4, #48	@ 0x30
 80194c6:	d10d      	bne.n	80194e4 <_strtol_l.isra.0+0x60>
 80194c8:	782a      	ldrb	r2, [r5, #0]
 80194ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80194ce:	2a58      	cmp	r2, #88	@ 0x58
 80194d0:	d108      	bne.n	80194e4 <_strtol_l.isra.0+0x60>
 80194d2:	786c      	ldrb	r4, [r5, #1]
 80194d4:	3502      	adds	r5, #2
 80194d6:	2310      	movs	r3, #16
 80194d8:	e00a      	b.n	80194f0 <_strtol_l.isra.0+0x6c>
 80194da:	2c2b      	cmp	r4, #43	@ 0x2b
 80194dc:	bf04      	itt	eq
 80194de:	782c      	ldrbeq	r4, [r5, #0]
 80194e0:	1c95      	addeq	r5, r2, #2
 80194e2:	e7ec      	b.n	80194be <_strtol_l.isra.0+0x3a>
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d1f6      	bne.n	80194d6 <_strtol_l.isra.0+0x52>
 80194e8:	2c30      	cmp	r4, #48	@ 0x30
 80194ea:	bf14      	ite	ne
 80194ec:	230a      	movne	r3, #10
 80194ee:	2308      	moveq	r3, #8
 80194f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80194f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80194f8:	2200      	movs	r2, #0
 80194fa:	fbbc f9f3 	udiv	r9, ip, r3
 80194fe:	4610      	mov	r0, r2
 8019500:	fb03 ca19 	mls	sl, r3, r9, ip
 8019504:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8019508:	2f09      	cmp	r7, #9
 801950a:	d80f      	bhi.n	801952c <_strtol_l.isra.0+0xa8>
 801950c:	463c      	mov	r4, r7
 801950e:	42a3      	cmp	r3, r4
 8019510:	dd1b      	ble.n	801954a <_strtol_l.isra.0+0xc6>
 8019512:	1c57      	adds	r7, r2, #1
 8019514:	d007      	beq.n	8019526 <_strtol_l.isra.0+0xa2>
 8019516:	4581      	cmp	r9, r0
 8019518:	d314      	bcc.n	8019544 <_strtol_l.isra.0+0xc0>
 801951a:	d101      	bne.n	8019520 <_strtol_l.isra.0+0x9c>
 801951c:	45a2      	cmp	sl, r4
 801951e:	db11      	blt.n	8019544 <_strtol_l.isra.0+0xc0>
 8019520:	fb00 4003 	mla	r0, r0, r3, r4
 8019524:	2201      	movs	r2, #1
 8019526:	f815 4b01 	ldrb.w	r4, [r5], #1
 801952a:	e7eb      	b.n	8019504 <_strtol_l.isra.0+0x80>
 801952c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8019530:	2f19      	cmp	r7, #25
 8019532:	d801      	bhi.n	8019538 <_strtol_l.isra.0+0xb4>
 8019534:	3c37      	subs	r4, #55	@ 0x37
 8019536:	e7ea      	b.n	801950e <_strtol_l.isra.0+0x8a>
 8019538:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801953c:	2f19      	cmp	r7, #25
 801953e:	d804      	bhi.n	801954a <_strtol_l.isra.0+0xc6>
 8019540:	3c57      	subs	r4, #87	@ 0x57
 8019542:	e7e4      	b.n	801950e <_strtol_l.isra.0+0x8a>
 8019544:	f04f 32ff 	mov.w	r2, #4294967295
 8019548:	e7ed      	b.n	8019526 <_strtol_l.isra.0+0xa2>
 801954a:	1c53      	adds	r3, r2, #1
 801954c:	d108      	bne.n	8019560 <_strtol_l.isra.0+0xdc>
 801954e:	2322      	movs	r3, #34	@ 0x22
 8019550:	f8ce 3000 	str.w	r3, [lr]
 8019554:	4660      	mov	r0, ip
 8019556:	f1b8 0f00 	cmp.w	r8, #0
 801955a:	d0a0      	beq.n	801949e <_strtol_l.isra.0+0x1a>
 801955c:	1e69      	subs	r1, r5, #1
 801955e:	e006      	b.n	801956e <_strtol_l.isra.0+0xea>
 8019560:	b106      	cbz	r6, 8019564 <_strtol_l.isra.0+0xe0>
 8019562:	4240      	negs	r0, r0
 8019564:	f1b8 0f00 	cmp.w	r8, #0
 8019568:	d099      	beq.n	801949e <_strtol_l.isra.0+0x1a>
 801956a:	2a00      	cmp	r2, #0
 801956c:	d1f6      	bne.n	801955c <_strtol_l.isra.0+0xd8>
 801956e:	f8c8 1000 	str.w	r1, [r8]
 8019572:	e794      	b.n	801949e <_strtol_l.isra.0+0x1a>
 8019574:	0801b411 	.word	0x0801b411

08019578 <_strtol_r>:
 8019578:	f7ff bf84 	b.w	8019484 <_strtol_l.isra.0>

0801957c <__ssputs_r>:
 801957c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019580:	688e      	ldr	r6, [r1, #8]
 8019582:	461f      	mov	r7, r3
 8019584:	42be      	cmp	r6, r7
 8019586:	680b      	ldr	r3, [r1, #0]
 8019588:	4682      	mov	sl, r0
 801958a:	460c      	mov	r4, r1
 801958c:	4690      	mov	r8, r2
 801958e:	d82d      	bhi.n	80195ec <__ssputs_r+0x70>
 8019590:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019594:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019598:	d026      	beq.n	80195e8 <__ssputs_r+0x6c>
 801959a:	6965      	ldr	r5, [r4, #20]
 801959c:	6909      	ldr	r1, [r1, #16]
 801959e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80195a2:	eba3 0901 	sub.w	r9, r3, r1
 80195a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80195aa:	1c7b      	adds	r3, r7, #1
 80195ac:	444b      	add	r3, r9
 80195ae:	106d      	asrs	r5, r5, #1
 80195b0:	429d      	cmp	r5, r3
 80195b2:	bf38      	it	cc
 80195b4:	461d      	movcc	r5, r3
 80195b6:	0553      	lsls	r3, r2, #21
 80195b8:	d527      	bpl.n	801960a <__ssputs_r+0x8e>
 80195ba:	4629      	mov	r1, r5
 80195bc:	f7fc fb28 	bl	8015c10 <_malloc_r>
 80195c0:	4606      	mov	r6, r0
 80195c2:	b360      	cbz	r0, 801961e <__ssputs_r+0xa2>
 80195c4:	6921      	ldr	r1, [r4, #16]
 80195c6:	464a      	mov	r2, r9
 80195c8:	f7fd fdf1 	bl	80171ae <memcpy>
 80195cc:	89a3      	ldrh	r3, [r4, #12]
 80195ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80195d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80195d6:	81a3      	strh	r3, [r4, #12]
 80195d8:	6126      	str	r6, [r4, #16]
 80195da:	6165      	str	r5, [r4, #20]
 80195dc:	444e      	add	r6, r9
 80195de:	eba5 0509 	sub.w	r5, r5, r9
 80195e2:	6026      	str	r6, [r4, #0]
 80195e4:	60a5      	str	r5, [r4, #8]
 80195e6:	463e      	mov	r6, r7
 80195e8:	42be      	cmp	r6, r7
 80195ea:	d900      	bls.n	80195ee <__ssputs_r+0x72>
 80195ec:	463e      	mov	r6, r7
 80195ee:	6820      	ldr	r0, [r4, #0]
 80195f0:	4632      	mov	r2, r6
 80195f2:	4641      	mov	r1, r8
 80195f4:	f7fd fd1e 	bl	8017034 <memmove>
 80195f8:	68a3      	ldr	r3, [r4, #8]
 80195fa:	1b9b      	subs	r3, r3, r6
 80195fc:	60a3      	str	r3, [r4, #8]
 80195fe:	6823      	ldr	r3, [r4, #0]
 8019600:	4433      	add	r3, r6
 8019602:	6023      	str	r3, [r4, #0]
 8019604:	2000      	movs	r0, #0
 8019606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801960a:	462a      	mov	r2, r5
 801960c:	f000 fe59 	bl	801a2c2 <_realloc_r>
 8019610:	4606      	mov	r6, r0
 8019612:	2800      	cmp	r0, #0
 8019614:	d1e0      	bne.n	80195d8 <__ssputs_r+0x5c>
 8019616:	6921      	ldr	r1, [r4, #16]
 8019618:	4650      	mov	r0, sl
 801961a:	f7fe fc35 	bl	8017e88 <_free_r>
 801961e:	230c      	movs	r3, #12
 8019620:	f8ca 3000 	str.w	r3, [sl]
 8019624:	89a3      	ldrh	r3, [r4, #12]
 8019626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801962a:	81a3      	strh	r3, [r4, #12]
 801962c:	f04f 30ff 	mov.w	r0, #4294967295
 8019630:	e7e9      	b.n	8019606 <__ssputs_r+0x8a>
	...

08019634 <_svfiprintf_r>:
 8019634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019638:	4698      	mov	r8, r3
 801963a:	898b      	ldrh	r3, [r1, #12]
 801963c:	061b      	lsls	r3, r3, #24
 801963e:	b09d      	sub	sp, #116	@ 0x74
 8019640:	4607      	mov	r7, r0
 8019642:	460d      	mov	r5, r1
 8019644:	4614      	mov	r4, r2
 8019646:	d510      	bpl.n	801966a <_svfiprintf_r+0x36>
 8019648:	690b      	ldr	r3, [r1, #16]
 801964a:	b973      	cbnz	r3, 801966a <_svfiprintf_r+0x36>
 801964c:	2140      	movs	r1, #64	@ 0x40
 801964e:	f7fc fadf 	bl	8015c10 <_malloc_r>
 8019652:	6028      	str	r0, [r5, #0]
 8019654:	6128      	str	r0, [r5, #16]
 8019656:	b930      	cbnz	r0, 8019666 <_svfiprintf_r+0x32>
 8019658:	230c      	movs	r3, #12
 801965a:	603b      	str	r3, [r7, #0]
 801965c:	f04f 30ff 	mov.w	r0, #4294967295
 8019660:	b01d      	add	sp, #116	@ 0x74
 8019662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019666:	2340      	movs	r3, #64	@ 0x40
 8019668:	616b      	str	r3, [r5, #20]
 801966a:	2300      	movs	r3, #0
 801966c:	9309      	str	r3, [sp, #36]	@ 0x24
 801966e:	2320      	movs	r3, #32
 8019670:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019674:	f8cd 800c 	str.w	r8, [sp, #12]
 8019678:	2330      	movs	r3, #48	@ 0x30
 801967a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019818 <_svfiprintf_r+0x1e4>
 801967e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019682:	f04f 0901 	mov.w	r9, #1
 8019686:	4623      	mov	r3, r4
 8019688:	469a      	mov	sl, r3
 801968a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801968e:	b10a      	cbz	r2, 8019694 <_svfiprintf_r+0x60>
 8019690:	2a25      	cmp	r2, #37	@ 0x25
 8019692:	d1f9      	bne.n	8019688 <_svfiprintf_r+0x54>
 8019694:	ebba 0b04 	subs.w	fp, sl, r4
 8019698:	d00b      	beq.n	80196b2 <_svfiprintf_r+0x7e>
 801969a:	465b      	mov	r3, fp
 801969c:	4622      	mov	r2, r4
 801969e:	4629      	mov	r1, r5
 80196a0:	4638      	mov	r0, r7
 80196a2:	f7ff ff6b 	bl	801957c <__ssputs_r>
 80196a6:	3001      	adds	r0, #1
 80196a8:	f000 80a7 	beq.w	80197fa <_svfiprintf_r+0x1c6>
 80196ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80196ae:	445a      	add	r2, fp
 80196b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80196b2:	f89a 3000 	ldrb.w	r3, [sl]
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	f000 809f 	beq.w	80197fa <_svfiprintf_r+0x1c6>
 80196bc:	2300      	movs	r3, #0
 80196be:	f04f 32ff 	mov.w	r2, #4294967295
 80196c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80196c6:	f10a 0a01 	add.w	sl, sl, #1
 80196ca:	9304      	str	r3, [sp, #16]
 80196cc:	9307      	str	r3, [sp, #28]
 80196ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80196d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80196d4:	4654      	mov	r4, sl
 80196d6:	2205      	movs	r2, #5
 80196d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196dc:	484e      	ldr	r0, [pc, #312]	@ (8019818 <_svfiprintf_r+0x1e4>)
 80196de:	f7e6 fd97 	bl	8000210 <memchr>
 80196e2:	9a04      	ldr	r2, [sp, #16]
 80196e4:	b9d8      	cbnz	r0, 801971e <_svfiprintf_r+0xea>
 80196e6:	06d0      	lsls	r0, r2, #27
 80196e8:	bf44      	itt	mi
 80196ea:	2320      	movmi	r3, #32
 80196ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80196f0:	0711      	lsls	r1, r2, #28
 80196f2:	bf44      	itt	mi
 80196f4:	232b      	movmi	r3, #43	@ 0x2b
 80196f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80196fa:	f89a 3000 	ldrb.w	r3, [sl]
 80196fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8019700:	d015      	beq.n	801972e <_svfiprintf_r+0xfa>
 8019702:	9a07      	ldr	r2, [sp, #28]
 8019704:	4654      	mov	r4, sl
 8019706:	2000      	movs	r0, #0
 8019708:	f04f 0c0a 	mov.w	ip, #10
 801970c:	4621      	mov	r1, r4
 801970e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019712:	3b30      	subs	r3, #48	@ 0x30
 8019714:	2b09      	cmp	r3, #9
 8019716:	d94b      	bls.n	80197b0 <_svfiprintf_r+0x17c>
 8019718:	b1b0      	cbz	r0, 8019748 <_svfiprintf_r+0x114>
 801971a:	9207      	str	r2, [sp, #28]
 801971c:	e014      	b.n	8019748 <_svfiprintf_r+0x114>
 801971e:	eba0 0308 	sub.w	r3, r0, r8
 8019722:	fa09 f303 	lsl.w	r3, r9, r3
 8019726:	4313      	orrs	r3, r2
 8019728:	9304      	str	r3, [sp, #16]
 801972a:	46a2      	mov	sl, r4
 801972c:	e7d2      	b.n	80196d4 <_svfiprintf_r+0xa0>
 801972e:	9b03      	ldr	r3, [sp, #12]
 8019730:	1d19      	adds	r1, r3, #4
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	9103      	str	r1, [sp, #12]
 8019736:	2b00      	cmp	r3, #0
 8019738:	bfbb      	ittet	lt
 801973a:	425b      	neglt	r3, r3
 801973c:	f042 0202 	orrlt.w	r2, r2, #2
 8019740:	9307      	strge	r3, [sp, #28]
 8019742:	9307      	strlt	r3, [sp, #28]
 8019744:	bfb8      	it	lt
 8019746:	9204      	strlt	r2, [sp, #16]
 8019748:	7823      	ldrb	r3, [r4, #0]
 801974a:	2b2e      	cmp	r3, #46	@ 0x2e
 801974c:	d10a      	bne.n	8019764 <_svfiprintf_r+0x130>
 801974e:	7863      	ldrb	r3, [r4, #1]
 8019750:	2b2a      	cmp	r3, #42	@ 0x2a
 8019752:	d132      	bne.n	80197ba <_svfiprintf_r+0x186>
 8019754:	9b03      	ldr	r3, [sp, #12]
 8019756:	1d1a      	adds	r2, r3, #4
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	9203      	str	r2, [sp, #12]
 801975c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019760:	3402      	adds	r4, #2
 8019762:	9305      	str	r3, [sp, #20]
 8019764:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019828 <_svfiprintf_r+0x1f4>
 8019768:	7821      	ldrb	r1, [r4, #0]
 801976a:	2203      	movs	r2, #3
 801976c:	4650      	mov	r0, sl
 801976e:	f7e6 fd4f 	bl	8000210 <memchr>
 8019772:	b138      	cbz	r0, 8019784 <_svfiprintf_r+0x150>
 8019774:	9b04      	ldr	r3, [sp, #16]
 8019776:	eba0 000a 	sub.w	r0, r0, sl
 801977a:	2240      	movs	r2, #64	@ 0x40
 801977c:	4082      	lsls	r2, r0
 801977e:	4313      	orrs	r3, r2
 8019780:	3401      	adds	r4, #1
 8019782:	9304      	str	r3, [sp, #16]
 8019784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019788:	4824      	ldr	r0, [pc, #144]	@ (801981c <_svfiprintf_r+0x1e8>)
 801978a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801978e:	2206      	movs	r2, #6
 8019790:	f7e6 fd3e 	bl	8000210 <memchr>
 8019794:	2800      	cmp	r0, #0
 8019796:	d036      	beq.n	8019806 <_svfiprintf_r+0x1d2>
 8019798:	4b21      	ldr	r3, [pc, #132]	@ (8019820 <_svfiprintf_r+0x1ec>)
 801979a:	bb1b      	cbnz	r3, 80197e4 <_svfiprintf_r+0x1b0>
 801979c:	9b03      	ldr	r3, [sp, #12]
 801979e:	3307      	adds	r3, #7
 80197a0:	f023 0307 	bic.w	r3, r3, #7
 80197a4:	3308      	adds	r3, #8
 80197a6:	9303      	str	r3, [sp, #12]
 80197a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80197aa:	4433      	add	r3, r6
 80197ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80197ae:	e76a      	b.n	8019686 <_svfiprintf_r+0x52>
 80197b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80197b4:	460c      	mov	r4, r1
 80197b6:	2001      	movs	r0, #1
 80197b8:	e7a8      	b.n	801970c <_svfiprintf_r+0xd8>
 80197ba:	2300      	movs	r3, #0
 80197bc:	3401      	adds	r4, #1
 80197be:	9305      	str	r3, [sp, #20]
 80197c0:	4619      	mov	r1, r3
 80197c2:	f04f 0c0a 	mov.w	ip, #10
 80197c6:	4620      	mov	r0, r4
 80197c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80197cc:	3a30      	subs	r2, #48	@ 0x30
 80197ce:	2a09      	cmp	r2, #9
 80197d0:	d903      	bls.n	80197da <_svfiprintf_r+0x1a6>
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d0c6      	beq.n	8019764 <_svfiprintf_r+0x130>
 80197d6:	9105      	str	r1, [sp, #20]
 80197d8:	e7c4      	b.n	8019764 <_svfiprintf_r+0x130>
 80197da:	fb0c 2101 	mla	r1, ip, r1, r2
 80197de:	4604      	mov	r4, r0
 80197e0:	2301      	movs	r3, #1
 80197e2:	e7f0      	b.n	80197c6 <_svfiprintf_r+0x192>
 80197e4:	ab03      	add	r3, sp, #12
 80197e6:	9300      	str	r3, [sp, #0]
 80197e8:	462a      	mov	r2, r5
 80197ea:	4b0e      	ldr	r3, [pc, #56]	@ (8019824 <_svfiprintf_r+0x1f0>)
 80197ec:	a904      	add	r1, sp, #16
 80197ee:	4638      	mov	r0, r7
 80197f0:	f7fc fb3a 	bl	8015e68 <_printf_float>
 80197f4:	1c42      	adds	r2, r0, #1
 80197f6:	4606      	mov	r6, r0
 80197f8:	d1d6      	bne.n	80197a8 <_svfiprintf_r+0x174>
 80197fa:	89ab      	ldrh	r3, [r5, #12]
 80197fc:	065b      	lsls	r3, r3, #25
 80197fe:	f53f af2d 	bmi.w	801965c <_svfiprintf_r+0x28>
 8019802:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019804:	e72c      	b.n	8019660 <_svfiprintf_r+0x2c>
 8019806:	ab03      	add	r3, sp, #12
 8019808:	9300      	str	r3, [sp, #0]
 801980a:	462a      	mov	r2, r5
 801980c:	4b05      	ldr	r3, [pc, #20]	@ (8019824 <_svfiprintf_r+0x1f0>)
 801980e:	a904      	add	r1, sp, #16
 8019810:	4638      	mov	r0, r7
 8019812:	f7fc fdc1 	bl	8016398 <_printf_i>
 8019816:	e7ed      	b.n	80197f4 <_svfiprintf_r+0x1c0>
 8019818:	0801b20d 	.word	0x0801b20d
 801981c:	0801b217 	.word	0x0801b217
 8019820:	08015e69 	.word	0x08015e69
 8019824:	0801957d 	.word	0x0801957d
 8019828:	0801b213 	.word	0x0801b213

0801982c <__sfputc_r>:
 801982c:	6893      	ldr	r3, [r2, #8]
 801982e:	3b01      	subs	r3, #1
 8019830:	2b00      	cmp	r3, #0
 8019832:	b410      	push	{r4}
 8019834:	6093      	str	r3, [r2, #8]
 8019836:	da08      	bge.n	801984a <__sfputc_r+0x1e>
 8019838:	6994      	ldr	r4, [r2, #24]
 801983a:	42a3      	cmp	r3, r4
 801983c:	db01      	blt.n	8019842 <__sfputc_r+0x16>
 801983e:	290a      	cmp	r1, #10
 8019840:	d103      	bne.n	801984a <__sfputc_r+0x1e>
 8019842:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019846:	f7fd bb60 	b.w	8016f0a <__swbuf_r>
 801984a:	6813      	ldr	r3, [r2, #0]
 801984c:	1c58      	adds	r0, r3, #1
 801984e:	6010      	str	r0, [r2, #0]
 8019850:	7019      	strb	r1, [r3, #0]
 8019852:	4608      	mov	r0, r1
 8019854:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019858:	4770      	bx	lr

0801985a <__sfputs_r>:
 801985a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801985c:	4606      	mov	r6, r0
 801985e:	460f      	mov	r7, r1
 8019860:	4614      	mov	r4, r2
 8019862:	18d5      	adds	r5, r2, r3
 8019864:	42ac      	cmp	r4, r5
 8019866:	d101      	bne.n	801986c <__sfputs_r+0x12>
 8019868:	2000      	movs	r0, #0
 801986a:	e007      	b.n	801987c <__sfputs_r+0x22>
 801986c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019870:	463a      	mov	r2, r7
 8019872:	4630      	mov	r0, r6
 8019874:	f7ff ffda 	bl	801982c <__sfputc_r>
 8019878:	1c43      	adds	r3, r0, #1
 801987a:	d1f3      	bne.n	8019864 <__sfputs_r+0xa>
 801987c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019880 <_vfiprintf_r>:
 8019880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019884:	460d      	mov	r5, r1
 8019886:	b09d      	sub	sp, #116	@ 0x74
 8019888:	4614      	mov	r4, r2
 801988a:	4698      	mov	r8, r3
 801988c:	4606      	mov	r6, r0
 801988e:	b118      	cbz	r0, 8019898 <_vfiprintf_r+0x18>
 8019890:	6a03      	ldr	r3, [r0, #32]
 8019892:	b90b      	cbnz	r3, 8019898 <_vfiprintf_r+0x18>
 8019894:	f7fd f9f8 	bl	8016c88 <__sinit>
 8019898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801989a:	07d9      	lsls	r1, r3, #31
 801989c:	d405      	bmi.n	80198aa <_vfiprintf_r+0x2a>
 801989e:	89ab      	ldrh	r3, [r5, #12]
 80198a0:	059a      	lsls	r2, r3, #22
 80198a2:	d402      	bmi.n	80198aa <_vfiprintf_r+0x2a>
 80198a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80198a6:	f7fd fc80 	bl	80171aa <__retarget_lock_acquire_recursive>
 80198aa:	89ab      	ldrh	r3, [r5, #12]
 80198ac:	071b      	lsls	r3, r3, #28
 80198ae:	d501      	bpl.n	80198b4 <_vfiprintf_r+0x34>
 80198b0:	692b      	ldr	r3, [r5, #16]
 80198b2:	b99b      	cbnz	r3, 80198dc <_vfiprintf_r+0x5c>
 80198b4:	4629      	mov	r1, r5
 80198b6:	4630      	mov	r0, r6
 80198b8:	f7fd fb66 	bl	8016f88 <__swsetup_r>
 80198bc:	b170      	cbz	r0, 80198dc <_vfiprintf_r+0x5c>
 80198be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80198c0:	07dc      	lsls	r4, r3, #31
 80198c2:	d504      	bpl.n	80198ce <_vfiprintf_r+0x4e>
 80198c4:	f04f 30ff 	mov.w	r0, #4294967295
 80198c8:	b01d      	add	sp, #116	@ 0x74
 80198ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198ce:	89ab      	ldrh	r3, [r5, #12]
 80198d0:	0598      	lsls	r0, r3, #22
 80198d2:	d4f7      	bmi.n	80198c4 <_vfiprintf_r+0x44>
 80198d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80198d6:	f7fd fc69 	bl	80171ac <__retarget_lock_release_recursive>
 80198da:	e7f3      	b.n	80198c4 <_vfiprintf_r+0x44>
 80198dc:	2300      	movs	r3, #0
 80198de:	9309      	str	r3, [sp, #36]	@ 0x24
 80198e0:	2320      	movs	r3, #32
 80198e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80198e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80198ea:	2330      	movs	r3, #48	@ 0x30
 80198ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019a9c <_vfiprintf_r+0x21c>
 80198f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80198f4:	f04f 0901 	mov.w	r9, #1
 80198f8:	4623      	mov	r3, r4
 80198fa:	469a      	mov	sl, r3
 80198fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019900:	b10a      	cbz	r2, 8019906 <_vfiprintf_r+0x86>
 8019902:	2a25      	cmp	r2, #37	@ 0x25
 8019904:	d1f9      	bne.n	80198fa <_vfiprintf_r+0x7a>
 8019906:	ebba 0b04 	subs.w	fp, sl, r4
 801990a:	d00b      	beq.n	8019924 <_vfiprintf_r+0xa4>
 801990c:	465b      	mov	r3, fp
 801990e:	4622      	mov	r2, r4
 8019910:	4629      	mov	r1, r5
 8019912:	4630      	mov	r0, r6
 8019914:	f7ff ffa1 	bl	801985a <__sfputs_r>
 8019918:	3001      	adds	r0, #1
 801991a:	f000 80a7 	beq.w	8019a6c <_vfiprintf_r+0x1ec>
 801991e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019920:	445a      	add	r2, fp
 8019922:	9209      	str	r2, [sp, #36]	@ 0x24
 8019924:	f89a 3000 	ldrb.w	r3, [sl]
 8019928:	2b00      	cmp	r3, #0
 801992a:	f000 809f 	beq.w	8019a6c <_vfiprintf_r+0x1ec>
 801992e:	2300      	movs	r3, #0
 8019930:	f04f 32ff 	mov.w	r2, #4294967295
 8019934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019938:	f10a 0a01 	add.w	sl, sl, #1
 801993c:	9304      	str	r3, [sp, #16]
 801993e:	9307      	str	r3, [sp, #28]
 8019940:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019944:	931a      	str	r3, [sp, #104]	@ 0x68
 8019946:	4654      	mov	r4, sl
 8019948:	2205      	movs	r2, #5
 801994a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801994e:	4853      	ldr	r0, [pc, #332]	@ (8019a9c <_vfiprintf_r+0x21c>)
 8019950:	f7e6 fc5e 	bl	8000210 <memchr>
 8019954:	9a04      	ldr	r2, [sp, #16]
 8019956:	b9d8      	cbnz	r0, 8019990 <_vfiprintf_r+0x110>
 8019958:	06d1      	lsls	r1, r2, #27
 801995a:	bf44      	itt	mi
 801995c:	2320      	movmi	r3, #32
 801995e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019962:	0713      	lsls	r3, r2, #28
 8019964:	bf44      	itt	mi
 8019966:	232b      	movmi	r3, #43	@ 0x2b
 8019968:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801996c:	f89a 3000 	ldrb.w	r3, [sl]
 8019970:	2b2a      	cmp	r3, #42	@ 0x2a
 8019972:	d015      	beq.n	80199a0 <_vfiprintf_r+0x120>
 8019974:	9a07      	ldr	r2, [sp, #28]
 8019976:	4654      	mov	r4, sl
 8019978:	2000      	movs	r0, #0
 801997a:	f04f 0c0a 	mov.w	ip, #10
 801997e:	4621      	mov	r1, r4
 8019980:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019984:	3b30      	subs	r3, #48	@ 0x30
 8019986:	2b09      	cmp	r3, #9
 8019988:	d94b      	bls.n	8019a22 <_vfiprintf_r+0x1a2>
 801998a:	b1b0      	cbz	r0, 80199ba <_vfiprintf_r+0x13a>
 801998c:	9207      	str	r2, [sp, #28]
 801998e:	e014      	b.n	80199ba <_vfiprintf_r+0x13a>
 8019990:	eba0 0308 	sub.w	r3, r0, r8
 8019994:	fa09 f303 	lsl.w	r3, r9, r3
 8019998:	4313      	orrs	r3, r2
 801999a:	9304      	str	r3, [sp, #16]
 801999c:	46a2      	mov	sl, r4
 801999e:	e7d2      	b.n	8019946 <_vfiprintf_r+0xc6>
 80199a0:	9b03      	ldr	r3, [sp, #12]
 80199a2:	1d19      	adds	r1, r3, #4
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	9103      	str	r1, [sp, #12]
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	bfbb      	ittet	lt
 80199ac:	425b      	neglt	r3, r3
 80199ae:	f042 0202 	orrlt.w	r2, r2, #2
 80199b2:	9307      	strge	r3, [sp, #28]
 80199b4:	9307      	strlt	r3, [sp, #28]
 80199b6:	bfb8      	it	lt
 80199b8:	9204      	strlt	r2, [sp, #16]
 80199ba:	7823      	ldrb	r3, [r4, #0]
 80199bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80199be:	d10a      	bne.n	80199d6 <_vfiprintf_r+0x156>
 80199c0:	7863      	ldrb	r3, [r4, #1]
 80199c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80199c4:	d132      	bne.n	8019a2c <_vfiprintf_r+0x1ac>
 80199c6:	9b03      	ldr	r3, [sp, #12]
 80199c8:	1d1a      	adds	r2, r3, #4
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	9203      	str	r2, [sp, #12]
 80199ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80199d2:	3402      	adds	r4, #2
 80199d4:	9305      	str	r3, [sp, #20]
 80199d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019aac <_vfiprintf_r+0x22c>
 80199da:	7821      	ldrb	r1, [r4, #0]
 80199dc:	2203      	movs	r2, #3
 80199de:	4650      	mov	r0, sl
 80199e0:	f7e6 fc16 	bl	8000210 <memchr>
 80199e4:	b138      	cbz	r0, 80199f6 <_vfiprintf_r+0x176>
 80199e6:	9b04      	ldr	r3, [sp, #16]
 80199e8:	eba0 000a 	sub.w	r0, r0, sl
 80199ec:	2240      	movs	r2, #64	@ 0x40
 80199ee:	4082      	lsls	r2, r0
 80199f0:	4313      	orrs	r3, r2
 80199f2:	3401      	adds	r4, #1
 80199f4:	9304      	str	r3, [sp, #16]
 80199f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199fa:	4829      	ldr	r0, [pc, #164]	@ (8019aa0 <_vfiprintf_r+0x220>)
 80199fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019a00:	2206      	movs	r2, #6
 8019a02:	f7e6 fc05 	bl	8000210 <memchr>
 8019a06:	2800      	cmp	r0, #0
 8019a08:	d03f      	beq.n	8019a8a <_vfiprintf_r+0x20a>
 8019a0a:	4b26      	ldr	r3, [pc, #152]	@ (8019aa4 <_vfiprintf_r+0x224>)
 8019a0c:	bb1b      	cbnz	r3, 8019a56 <_vfiprintf_r+0x1d6>
 8019a0e:	9b03      	ldr	r3, [sp, #12]
 8019a10:	3307      	adds	r3, #7
 8019a12:	f023 0307 	bic.w	r3, r3, #7
 8019a16:	3308      	adds	r3, #8
 8019a18:	9303      	str	r3, [sp, #12]
 8019a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a1c:	443b      	add	r3, r7
 8019a1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019a20:	e76a      	b.n	80198f8 <_vfiprintf_r+0x78>
 8019a22:	fb0c 3202 	mla	r2, ip, r2, r3
 8019a26:	460c      	mov	r4, r1
 8019a28:	2001      	movs	r0, #1
 8019a2a:	e7a8      	b.n	801997e <_vfiprintf_r+0xfe>
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	3401      	adds	r4, #1
 8019a30:	9305      	str	r3, [sp, #20]
 8019a32:	4619      	mov	r1, r3
 8019a34:	f04f 0c0a 	mov.w	ip, #10
 8019a38:	4620      	mov	r0, r4
 8019a3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019a3e:	3a30      	subs	r2, #48	@ 0x30
 8019a40:	2a09      	cmp	r2, #9
 8019a42:	d903      	bls.n	8019a4c <_vfiprintf_r+0x1cc>
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d0c6      	beq.n	80199d6 <_vfiprintf_r+0x156>
 8019a48:	9105      	str	r1, [sp, #20]
 8019a4a:	e7c4      	b.n	80199d6 <_vfiprintf_r+0x156>
 8019a4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8019a50:	4604      	mov	r4, r0
 8019a52:	2301      	movs	r3, #1
 8019a54:	e7f0      	b.n	8019a38 <_vfiprintf_r+0x1b8>
 8019a56:	ab03      	add	r3, sp, #12
 8019a58:	9300      	str	r3, [sp, #0]
 8019a5a:	462a      	mov	r2, r5
 8019a5c:	4b12      	ldr	r3, [pc, #72]	@ (8019aa8 <_vfiprintf_r+0x228>)
 8019a5e:	a904      	add	r1, sp, #16
 8019a60:	4630      	mov	r0, r6
 8019a62:	f7fc fa01 	bl	8015e68 <_printf_float>
 8019a66:	4607      	mov	r7, r0
 8019a68:	1c78      	adds	r0, r7, #1
 8019a6a:	d1d6      	bne.n	8019a1a <_vfiprintf_r+0x19a>
 8019a6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019a6e:	07d9      	lsls	r1, r3, #31
 8019a70:	d405      	bmi.n	8019a7e <_vfiprintf_r+0x1fe>
 8019a72:	89ab      	ldrh	r3, [r5, #12]
 8019a74:	059a      	lsls	r2, r3, #22
 8019a76:	d402      	bmi.n	8019a7e <_vfiprintf_r+0x1fe>
 8019a78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019a7a:	f7fd fb97 	bl	80171ac <__retarget_lock_release_recursive>
 8019a7e:	89ab      	ldrh	r3, [r5, #12]
 8019a80:	065b      	lsls	r3, r3, #25
 8019a82:	f53f af1f 	bmi.w	80198c4 <_vfiprintf_r+0x44>
 8019a86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019a88:	e71e      	b.n	80198c8 <_vfiprintf_r+0x48>
 8019a8a:	ab03      	add	r3, sp, #12
 8019a8c:	9300      	str	r3, [sp, #0]
 8019a8e:	462a      	mov	r2, r5
 8019a90:	4b05      	ldr	r3, [pc, #20]	@ (8019aa8 <_vfiprintf_r+0x228>)
 8019a92:	a904      	add	r1, sp, #16
 8019a94:	4630      	mov	r0, r6
 8019a96:	f7fc fc7f 	bl	8016398 <_printf_i>
 8019a9a:	e7e4      	b.n	8019a66 <_vfiprintf_r+0x1e6>
 8019a9c:	0801b20d 	.word	0x0801b20d
 8019aa0:	0801b217 	.word	0x0801b217
 8019aa4:	08015e69 	.word	0x08015e69
 8019aa8:	0801985b 	.word	0x0801985b
 8019aac:	0801b213 	.word	0x0801b213

08019ab0 <__swhatbuf_r>:
 8019ab0:	b570      	push	{r4, r5, r6, lr}
 8019ab2:	460c      	mov	r4, r1
 8019ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ab8:	2900      	cmp	r1, #0
 8019aba:	b096      	sub	sp, #88	@ 0x58
 8019abc:	4615      	mov	r5, r2
 8019abe:	461e      	mov	r6, r3
 8019ac0:	da0d      	bge.n	8019ade <__swhatbuf_r+0x2e>
 8019ac2:	89a3      	ldrh	r3, [r4, #12]
 8019ac4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019ac8:	f04f 0100 	mov.w	r1, #0
 8019acc:	bf14      	ite	ne
 8019ace:	2340      	movne	r3, #64	@ 0x40
 8019ad0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019ad4:	2000      	movs	r0, #0
 8019ad6:	6031      	str	r1, [r6, #0]
 8019ad8:	602b      	str	r3, [r5, #0]
 8019ada:	b016      	add	sp, #88	@ 0x58
 8019adc:	bd70      	pop	{r4, r5, r6, pc}
 8019ade:	466a      	mov	r2, sp
 8019ae0:	f000 f85a 	bl	8019b98 <_fstat_r>
 8019ae4:	2800      	cmp	r0, #0
 8019ae6:	dbec      	blt.n	8019ac2 <__swhatbuf_r+0x12>
 8019ae8:	9901      	ldr	r1, [sp, #4]
 8019aea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019aee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019af2:	4259      	negs	r1, r3
 8019af4:	4159      	adcs	r1, r3
 8019af6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019afa:	e7eb      	b.n	8019ad4 <__swhatbuf_r+0x24>

08019afc <__smakebuf_r>:
 8019afc:	898b      	ldrh	r3, [r1, #12]
 8019afe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019b00:	079d      	lsls	r5, r3, #30
 8019b02:	4606      	mov	r6, r0
 8019b04:	460c      	mov	r4, r1
 8019b06:	d507      	bpl.n	8019b18 <__smakebuf_r+0x1c>
 8019b08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019b0c:	6023      	str	r3, [r4, #0]
 8019b0e:	6123      	str	r3, [r4, #16]
 8019b10:	2301      	movs	r3, #1
 8019b12:	6163      	str	r3, [r4, #20]
 8019b14:	b003      	add	sp, #12
 8019b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b18:	ab01      	add	r3, sp, #4
 8019b1a:	466a      	mov	r2, sp
 8019b1c:	f7ff ffc8 	bl	8019ab0 <__swhatbuf_r>
 8019b20:	9f00      	ldr	r7, [sp, #0]
 8019b22:	4605      	mov	r5, r0
 8019b24:	4639      	mov	r1, r7
 8019b26:	4630      	mov	r0, r6
 8019b28:	f7fc f872 	bl	8015c10 <_malloc_r>
 8019b2c:	b948      	cbnz	r0, 8019b42 <__smakebuf_r+0x46>
 8019b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b32:	059a      	lsls	r2, r3, #22
 8019b34:	d4ee      	bmi.n	8019b14 <__smakebuf_r+0x18>
 8019b36:	f023 0303 	bic.w	r3, r3, #3
 8019b3a:	f043 0302 	orr.w	r3, r3, #2
 8019b3e:	81a3      	strh	r3, [r4, #12]
 8019b40:	e7e2      	b.n	8019b08 <__smakebuf_r+0xc>
 8019b42:	89a3      	ldrh	r3, [r4, #12]
 8019b44:	6020      	str	r0, [r4, #0]
 8019b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019b4a:	81a3      	strh	r3, [r4, #12]
 8019b4c:	9b01      	ldr	r3, [sp, #4]
 8019b4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019b52:	b15b      	cbz	r3, 8019b6c <__smakebuf_r+0x70>
 8019b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019b58:	4630      	mov	r0, r6
 8019b5a:	f000 f82f 	bl	8019bbc <_isatty_r>
 8019b5e:	b128      	cbz	r0, 8019b6c <__smakebuf_r+0x70>
 8019b60:	89a3      	ldrh	r3, [r4, #12]
 8019b62:	f023 0303 	bic.w	r3, r3, #3
 8019b66:	f043 0301 	orr.w	r3, r3, #1
 8019b6a:	81a3      	strh	r3, [r4, #12]
 8019b6c:	89a3      	ldrh	r3, [r4, #12]
 8019b6e:	431d      	orrs	r5, r3
 8019b70:	81a5      	strh	r5, [r4, #12]
 8019b72:	e7cf      	b.n	8019b14 <__smakebuf_r+0x18>

08019b74 <strncmp>:
 8019b74:	b510      	push	{r4, lr}
 8019b76:	b16a      	cbz	r2, 8019b94 <strncmp+0x20>
 8019b78:	3901      	subs	r1, #1
 8019b7a:	1884      	adds	r4, r0, r2
 8019b7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019b80:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019b84:	429a      	cmp	r2, r3
 8019b86:	d103      	bne.n	8019b90 <strncmp+0x1c>
 8019b88:	42a0      	cmp	r0, r4
 8019b8a:	d001      	beq.n	8019b90 <strncmp+0x1c>
 8019b8c:	2a00      	cmp	r2, #0
 8019b8e:	d1f5      	bne.n	8019b7c <strncmp+0x8>
 8019b90:	1ad0      	subs	r0, r2, r3
 8019b92:	bd10      	pop	{r4, pc}
 8019b94:	4610      	mov	r0, r2
 8019b96:	e7fc      	b.n	8019b92 <strncmp+0x1e>

08019b98 <_fstat_r>:
 8019b98:	b538      	push	{r3, r4, r5, lr}
 8019b9a:	4d07      	ldr	r5, [pc, #28]	@ (8019bb8 <_fstat_r+0x20>)
 8019b9c:	2300      	movs	r3, #0
 8019b9e:	4604      	mov	r4, r0
 8019ba0:	4608      	mov	r0, r1
 8019ba2:	4611      	mov	r1, r2
 8019ba4:	602b      	str	r3, [r5, #0]
 8019ba6:	f7f2 facb 	bl	800c140 <_fstat>
 8019baa:	1c43      	adds	r3, r0, #1
 8019bac:	d102      	bne.n	8019bb4 <_fstat_r+0x1c>
 8019bae:	682b      	ldr	r3, [r5, #0]
 8019bb0:	b103      	cbz	r3, 8019bb4 <_fstat_r+0x1c>
 8019bb2:	6023      	str	r3, [r4, #0]
 8019bb4:	bd38      	pop	{r3, r4, r5, pc}
 8019bb6:	bf00      	nop
 8019bb8:	20004430 	.word	0x20004430

08019bbc <_isatty_r>:
 8019bbc:	b538      	push	{r3, r4, r5, lr}
 8019bbe:	4d06      	ldr	r5, [pc, #24]	@ (8019bd8 <_isatty_r+0x1c>)
 8019bc0:	2300      	movs	r3, #0
 8019bc2:	4604      	mov	r4, r0
 8019bc4:	4608      	mov	r0, r1
 8019bc6:	602b      	str	r3, [r5, #0]
 8019bc8:	f7f2 faca 	bl	800c160 <_isatty>
 8019bcc:	1c43      	adds	r3, r0, #1
 8019bce:	d102      	bne.n	8019bd6 <_isatty_r+0x1a>
 8019bd0:	682b      	ldr	r3, [r5, #0]
 8019bd2:	b103      	cbz	r3, 8019bd6 <_isatty_r+0x1a>
 8019bd4:	6023      	str	r3, [r4, #0]
 8019bd6:	bd38      	pop	{r3, r4, r5, pc}
 8019bd8:	20004430 	.word	0x20004430
 8019bdc:	00000000 	.word	0x00000000

08019be0 <nan>:
 8019be0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8019be8 <nan+0x8>
 8019be4:	4770      	bx	lr
 8019be6:	bf00      	nop
 8019be8:	00000000 	.word	0x00000000
 8019bec:	7ff80000 	.word	0x7ff80000

08019bf0 <__assert_func>:
 8019bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019bf2:	4614      	mov	r4, r2
 8019bf4:	461a      	mov	r2, r3
 8019bf6:	4b09      	ldr	r3, [pc, #36]	@ (8019c1c <__assert_func+0x2c>)
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	4605      	mov	r5, r0
 8019bfc:	68d8      	ldr	r0, [r3, #12]
 8019bfe:	b14c      	cbz	r4, 8019c14 <__assert_func+0x24>
 8019c00:	4b07      	ldr	r3, [pc, #28]	@ (8019c20 <__assert_func+0x30>)
 8019c02:	9100      	str	r1, [sp, #0]
 8019c04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019c08:	4906      	ldr	r1, [pc, #24]	@ (8019c24 <__assert_func+0x34>)
 8019c0a:	462b      	mov	r3, r5
 8019c0c:	f000 fb94 	bl	801a338 <fiprintf>
 8019c10:	f000 fba4 	bl	801a35c <abort>
 8019c14:	4b04      	ldr	r3, [pc, #16]	@ (8019c28 <__assert_func+0x38>)
 8019c16:	461c      	mov	r4, r3
 8019c18:	e7f3      	b.n	8019c02 <__assert_func+0x12>
 8019c1a:	bf00      	nop
 8019c1c:	20000218 	.word	0x20000218
 8019c20:	0801b226 	.word	0x0801b226
 8019c24:	0801b233 	.word	0x0801b233
 8019c28:	0801b261 	.word	0x0801b261

08019c2c <rshift>:
 8019c2c:	6903      	ldr	r3, [r0, #16]
 8019c2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019c32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019c36:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019c3a:	f100 0414 	add.w	r4, r0, #20
 8019c3e:	dd45      	ble.n	8019ccc <rshift+0xa0>
 8019c40:	f011 011f 	ands.w	r1, r1, #31
 8019c44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019c48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019c4c:	d10c      	bne.n	8019c68 <rshift+0x3c>
 8019c4e:	f100 0710 	add.w	r7, r0, #16
 8019c52:	4629      	mov	r1, r5
 8019c54:	42b1      	cmp	r1, r6
 8019c56:	d334      	bcc.n	8019cc2 <rshift+0x96>
 8019c58:	1a9b      	subs	r3, r3, r2
 8019c5a:	009b      	lsls	r3, r3, #2
 8019c5c:	1eea      	subs	r2, r5, #3
 8019c5e:	4296      	cmp	r6, r2
 8019c60:	bf38      	it	cc
 8019c62:	2300      	movcc	r3, #0
 8019c64:	4423      	add	r3, r4
 8019c66:	e015      	b.n	8019c94 <rshift+0x68>
 8019c68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019c6c:	f1c1 0820 	rsb	r8, r1, #32
 8019c70:	40cf      	lsrs	r7, r1
 8019c72:	f105 0e04 	add.w	lr, r5, #4
 8019c76:	46a1      	mov	r9, r4
 8019c78:	4576      	cmp	r6, lr
 8019c7a:	46f4      	mov	ip, lr
 8019c7c:	d815      	bhi.n	8019caa <rshift+0x7e>
 8019c7e:	1a9a      	subs	r2, r3, r2
 8019c80:	0092      	lsls	r2, r2, #2
 8019c82:	3a04      	subs	r2, #4
 8019c84:	3501      	adds	r5, #1
 8019c86:	42ae      	cmp	r6, r5
 8019c88:	bf38      	it	cc
 8019c8a:	2200      	movcc	r2, #0
 8019c8c:	18a3      	adds	r3, r4, r2
 8019c8e:	50a7      	str	r7, [r4, r2]
 8019c90:	b107      	cbz	r7, 8019c94 <rshift+0x68>
 8019c92:	3304      	adds	r3, #4
 8019c94:	1b1a      	subs	r2, r3, r4
 8019c96:	42a3      	cmp	r3, r4
 8019c98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019c9c:	bf08      	it	eq
 8019c9e:	2300      	moveq	r3, #0
 8019ca0:	6102      	str	r2, [r0, #16]
 8019ca2:	bf08      	it	eq
 8019ca4:	6143      	streq	r3, [r0, #20]
 8019ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019caa:	f8dc c000 	ldr.w	ip, [ip]
 8019cae:	fa0c fc08 	lsl.w	ip, ip, r8
 8019cb2:	ea4c 0707 	orr.w	r7, ip, r7
 8019cb6:	f849 7b04 	str.w	r7, [r9], #4
 8019cba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019cbe:	40cf      	lsrs	r7, r1
 8019cc0:	e7da      	b.n	8019c78 <rshift+0x4c>
 8019cc2:	f851 cb04 	ldr.w	ip, [r1], #4
 8019cc6:	f847 cf04 	str.w	ip, [r7, #4]!
 8019cca:	e7c3      	b.n	8019c54 <rshift+0x28>
 8019ccc:	4623      	mov	r3, r4
 8019cce:	e7e1      	b.n	8019c94 <rshift+0x68>

08019cd0 <__hexdig_fun>:
 8019cd0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8019cd4:	2b09      	cmp	r3, #9
 8019cd6:	d802      	bhi.n	8019cde <__hexdig_fun+0xe>
 8019cd8:	3820      	subs	r0, #32
 8019cda:	b2c0      	uxtb	r0, r0
 8019cdc:	4770      	bx	lr
 8019cde:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8019ce2:	2b05      	cmp	r3, #5
 8019ce4:	d801      	bhi.n	8019cea <__hexdig_fun+0x1a>
 8019ce6:	3847      	subs	r0, #71	@ 0x47
 8019ce8:	e7f7      	b.n	8019cda <__hexdig_fun+0xa>
 8019cea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8019cee:	2b05      	cmp	r3, #5
 8019cf0:	d801      	bhi.n	8019cf6 <__hexdig_fun+0x26>
 8019cf2:	3827      	subs	r0, #39	@ 0x27
 8019cf4:	e7f1      	b.n	8019cda <__hexdig_fun+0xa>
 8019cf6:	2000      	movs	r0, #0
 8019cf8:	4770      	bx	lr
	...

08019cfc <__gethex>:
 8019cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d00:	b085      	sub	sp, #20
 8019d02:	468a      	mov	sl, r1
 8019d04:	9302      	str	r3, [sp, #8]
 8019d06:	680b      	ldr	r3, [r1, #0]
 8019d08:	9001      	str	r0, [sp, #4]
 8019d0a:	4690      	mov	r8, r2
 8019d0c:	1c9c      	adds	r4, r3, #2
 8019d0e:	46a1      	mov	r9, r4
 8019d10:	f814 0b01 	ldrb.w	r0, [r4], #1
 8019d14:	2830      	cmp	r0, #48	@ 0x30
 8019d16:	d0fa      	beq.n	8019d0e <__gethex+0x12>
 8019d18:	eba9 0303 	sub.w	r3, r9, r3
 8019d1c:	f1a3 0b02 	sub.w	fp, r3, #2
 8019d20:	f7ff ffd6 	bl	8019cd0 <__hexdig_fun>
 8019d24:	4605      	mov	r5, r0
 8019d26:	2800      	cmp	r0, #0
 8019d28:	d168      	bne.n	8019dfc <__gethex+0x100>
 8019d2a:	49a0      	ldr	r1, [pc, #640]	@ (8019fac <__gethex+0x2b0>)
 8019d2c:	2201      	movs	r2, #1
 8019d2e:	4648      	mov	r0, r9
 8019d30:	f7ff ff20 	bl	8019b74 <strncmp>
 8019d34:	4607      	mov	r7, r0
 8019d36:	2800      	cmp	r0, #0
 8019d38:	d167      	bne.n	8019e0a <__gethex+0x10e>
 8019d3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8019d3e:	4626      	mov	r6, r4
 8019d40:	f7ff ffc6 	bl	8019cd0 <__hexdig_fun>
 8019d44:	2800      	cmp	r0, #0
 8019d46:	d062      	beq.n	8019e0e <__gethex+0x112>
 8019d48:	4623      	mov	r3, r4
 8019d4a:	7818      	ldrb	r0, [r3, #0]
 8019d4c:	2830      	cmp	r0, #48	@ 0x30
 8019d4e:	4699      	mov	r9, r3
 8019d50:	f103 0301 	add.w	r3, r3, #1
 8019d54:	d0f9      	beq.n	8019d4a <__gethex+0x4e>
 8019d56:	f7ff ffbb 	bl	8019cd0 <__hexdig_fun>
 8019d5a:	fab0 f580 	clz	r5, r0
 8019d5e:	096d      	lsrs	r5, r5, #5
 8019d60:	f04f 0b01 	mov.w	fp, #1
 8019d64:	464a      	mov	r2, r9
 8019d66:	4616      	mov	r6, r2
 8019d68:	3201      	adds	r2, #1
 8019d6a:	7830      	ldrb	r0, [r6, #0]
 8019d6c:	f7ff ffb0 	bl	8019cd0 <__hexdig_fun>
 8019d70:	2800      	cmp	r0, #0
 8019d72:	d1f8      	bne.n	8019d66 <__gethex+0x6a>
 8019d74:	498d      	ldr	r1, [pc, #564]	@ (8019fac <__gethex+0x2b0>)
 8019d76:	2201      	movs	r2, #1
 8019d78:	4630      	mov	r0, r6
 8019d7a:	f7ff fefb 	bl	8019b74 <strncmp>
 8019d7e:	2800      	cmp	r0, #0
 8019d80:	d13f      	bne.n	8019e02 <__gethex+0x106>
 8019d82:	b944      	cbnz	r4, 8019d96 <__gethex+0x9a>
 8019d84:	1c74      	adds	r4, r6, #1
 8019d86:	4622      	mov	r2, r4
 8019d88:	4616      	mov	r6, r2
 8019d8a:	3201      	adds	r2, #1
 8019d8c:	7830      	ldrb	r0, [r6, #0]
 8019d8e:	f7ff ff9f 	bl	8019cd0 <__hexdig_fun>
 8019d92:	2800      	cmp	r0, #0
 8019d94:	d1f8      	bne.n	8019d88 <__gethex+0x8c>
 8019d96:	1ba4      	subs	r4, r4, r6
 8019d98:	00a7      	lsls	r7, r4, #2
 8019d9a:	7833      	ldrb	r3, [r6, #0]
 8019d9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8019da0:	2b50      	cmp	r3, #80	@ 0x50
 8019da2:	d13e      	bne.n	8019e22 <__gethex+0x126>
 8019da4:	7873      	ldrb	r3, [r6, #1]
 8019da6:	2b2b      	cmp	r3, #43	@ 0x2b
 8019da8:	d033      	beq.n	8019e12 <__gethex+0x116>
 8019daa:	2b2d      	cmp	r3, #45	@ 0x2d
 8019dac:	d034      	beq.n	8019e18 <__gethex+0x11c>
 8019dae:	1c71      	adds	r1, r6, #1
 8019db0:	2400      	movs	r4, #0
 8019db2:	7808      	ldrb	r0, [r1, #0]
 8019db4:	f7ff ff8c 	bl	8019cd0 <__hexdig_fun>
 8019db8:	1e43      	subs	r3, r0, #1
 8019dba:	b2db      	uxtb	r3, r3
 8019dbc:	2b18      	cmp	r3, #24
 8019dbe:	d830      	bhi.n	8019e22 <__gethex+0x126>
 8019dc0:	f1a0 0210 	sub.w	r2, r0, #16
 8019dc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019dc8:	f7ff ff82 	bl	8019cd0 <__hexdig_fun>
 8019dcc:	f100 3cff 	add.w	ip, r0, #4294967295
 8019dd0:	fa5f fc8c 	uxtb.w	ip, ip
 8019dd4:	f1bc 0f18 	cmp.w	ip, #24
 8019dd8:	f04f 030a 	mov.w	r3, #10
 8019ddc:	d91e      	bls.n	8019e1c <__gethex+0x120>
 8019dde:	b104      	cbz	r4, 8019de2 <__gethex+0xe6>
 8019de0:	4252      	negs	r2, r2
 8019de2:	4417      	add	r7, r2
 8019de4:	f8ca 1000 	str.w	r1, [sl]
 8019de8:	b1ed      	cbz	r5, 8019e26 <__gethex+0x12a>
 8019dea:	f1bb 0f00 	cmp.w	fp, #0
 8019dee:	bf0c      	ite	eq
 8019df0:	2506      	moveq	r5, #6
 8019df2:	2500      	movne	r5, #0
 8019df4:	4628      	mov	r0, r5
 8019df6:	b005      	add	sp, #20
 8019df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dfc:	2500      	movs	r5, #0
 8019dfe:	462c      	mov	r4, r5
 8019e00:	e7b0      	b.n	8019d64 <__gethex+0x68>
 8019e02:	2c00      	cmp	r4, #0
 8019e04:	d1c7      	bne.n	8019d96 <__gethex+0x9a>
 8019e06:	4627      	mov	r7, r4
 8019e08:	e7c7      	b.n	8019d9a <__gethex+0x9e>
 8019e0a:	464e      	mov	r6, r9
 8019e0c:	462f      	mov	r7, r5
 8019e0e:	2501      	movs	r5, #1
 8019e10:	e7c3      	b.n	8019d9a <__gethex+0x9e>
 8019e12:	2400      	movs	r4, #0
 8019e14:	1cb1      	adds	r1, r6, #2
 8019e16:	e7cc      	b.n	8019db2 <__gethex+0xb6>
 8019e18:	2401      	movs	r4, #1
 8019e1a:	e7fb      	b.n	8019e14 <__gethex+0x118>
 8019e1c:	fb03 0002 	mla	r0, r3, r2, r0
 8019e20:	e7ce      	b.n	8019dc0 <__gethex+0xc4>
 8019e22:	4631      	mov	r1, r6
 8019e24:	e7de      	b.n	8019de4 <__gethex+0xe8>
 8019e26:	eba6 0309 	sub.w	r3, r6, r9
 8019e2a:	3b01      	subs	r3, #1
 8019e2c:	4629      	mov	r1, r5
 8019e2e:	2b07      	cmp	r3, #7
 8019e30:	dc0a      	bgt.n	8019e48 <__gethex+0x14c>
 8019e32:	9801      	ldr	r0, [sp, #4]
 8019e34:	f7fe f872 	bl	8017f1c <_Balloc>
 8019e38:	4604      	mov	r4, r0
 8019e3a:	b940      	cbnz	r0, 8019e4e <__gethex+0x152>
 8019e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8019fb0 <__gethex+0x2b4>)
 8019e3e:	4602      	mov	r2, r0
 8019e40:	21e4      	movs	r1, #228	@ 0xe4
 8019e42:	485c      	ldr	r0, [pc, #368]	@ (8019fb4 <__gethex+0x2b8>)
 8019e44:	f7ff fed4 	bl	8019bf0 <__assert_func>
 8019e48:	3101      	adds	r1, #1
 8019e4a:	105b      	asrs	r3, r3, #1
 8019e4c:	e7ef      	b.n	8019e2e <__gethex+0x132>
 8019e4e:	f100 0a14 	add.w	sl, r0, #20
 8019e52:	2300      	movs	r3, #0
 8019e54:	4655      	mov	r5, sl
 8019e56:	469b      	mov	fp, r3
 8019e58:	45b1      	cmp	r9, r6
 8019e5a:	d337      	bcc.n	8019ecc <__gethex+0x1d0>
 8019e5c:	f845 bb04 	str.w	fp, [r5], #4
 8019e60:	eba5 050a 	sub.w	r5, r5, sl
 8019e64:	10ad      	asrs	r5, r5, #2
 8019e66:	6125      	str	r5, [r4, #16]
 8019e68:	4658      	mov	r0, fp
 8019e6a:	f7fe f949 	bl	8018100 <__hi0bits>
 8019e6e:	016d      	lsls	r5, r5, #5
 8019e70:	f8d8 6000 	ldr.w	r6, [r8]
 8019e74:	1a2d      	subs	r5, r5, r0
 8019e76:	42b5      	cmp	r5, r6
 8019e78:	dd54      	ble.n	8019f24 <__gethex+0x228>
 8019e7a:	1bad      	subs	r5, r5, r6
 8019e7c:	4629      	mov	r1, r5
 8019e7e:	4620      	mov	r0, r4
 8019e80:	f7fe fcd5 	bl	801882e <__any_on>
 8019e84:	4681      	mov	r9, r0
 8019e86:	b178      	cbz	r0, 8019ea8 <__gethex+0x1ac>
 8019e88:	1e6b      	subs	r3, r5, #1
 8019e8a:	1159      	asrs	r1, r3, #5
 8019e8c:	f003 021f 	and.w	r2, r3, #31
 8019e90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8019e94:	f04f 0901 	mov.w	r9, #1
 8019e98:	fa09 f202 	lsl.w	r2, r9, r2
 8019e9c:	420a      	tst	r2, r1
 8019e9e:	d003      	beq.n	8019ea8 <__gethex+0x1ac>
 8019ea0:	454b      	cmp	r3, r9
 8019ea2:	dc36      	bgt.n	8019f12 <__gethex+0x216>
 8019ea4:	f04f 0902 	mov.w	r9, #2
 8019ea8:	4629      	mov	r1, r5
 8019eaa:	4620      	mov	r0, r4
 8019eac:	f7ff febe 	bl	8019c2c <rshift>
 8019eb0:	442f      	add	r7, r5
 8019eb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019eb6:	42bb      	cmp	r3, r7
 8019eb8:	da42      	bge.n	8019f40 <__gethex+0x244>
 8019eba:	9801      	ldr	r0, [sp, #4]
 8019ebc:	4621      	mov	r1, r4
 8019ebe:	f7fe f86d 	bl	8017f9c <_Bfree>
 8019ec2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019ec4:	2300      	movs	r3, #0
 8019ec6:	6013      	str	r3, [r2, #0]
 8019ec8:	25a3      	movs	r5, #163	@ 0xa3
 8019eca:	e793      	b.n	8019df4 <__gethex+0xf8>
 8019ecc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8019ed0:	2a2e      	cmp	r2, #46	@ 0x2e
 8019ed2:	d012      	beq.n	8019efa <__gethex+0x1fe>
 8019ed4:	2b20      	cmp	r3, #32
 8019ed6:	d104      	bne.n	8019ee2 <__gethex+0x1e6>
 8019ed8:	f845 bb04 	str.w	fp, [r5], #4
 8019edc:	f04f 0b00 	mov.w	fp, #0
 8019ee0:	465b      	mov	r3, fp
 8019ee2:	7830      	ldrb	r0, [r6, #0]
 8019ee4:	9303      	str	r3, [sp, #12]
 8019ee6:	f7ff fef3 	bl	8019cd0 <__hexdig_fun>
 8019eea:	9b03      	ldr	r3, [sp, #12]
 8019eec:	f000 000f 	and.w	r0, r0, #15
 8019ef0:	4098      	lsls	r0, r3
 8019ef2:	ea4b 0b00 	orr.w	fp, fp, r0
 8019ef6:	3304      	adds	r3, #4
 8019ef8:	e7ae      	b.n	8019e58 <__gethex+0x15c>
 8019efa:	45b1      	cmp	r9, r6
 8019efc:	d8ea      	bhi.n	8019ed4 <__gethex+0x1d8>
 8019efe:	492b      	ldr	r1, [pc, #172]	@ (8019fac <__gethex+0x2b0>)
 8019f00:	9303      	str	r3, [sp, #12]
 8019f02:	2201      	movs	r2, #1
 8019f04:	4630      	mov	r0, r6
 8019f06:	f7ff fe35 	bl	8019b74 <strncmp>
 8019f0a:	9b03      	ldr	r3, [sp, #12]
 8019f0c:	2800      	cmp	r0, #0
 8019f0e:	d1e1      	bne.n	8019ed4 <__gethex+0x1d8>
 8019f10:	e7a2      	b.n	8019e58 <__gethex+0x15c>
 8019f12:	1ea9      	subs	r1, r5, #2
 8019f14:	4620      	mov	r0, r4
 8019f16:	f7fe fc8a 	bl	801882e <__any_on>
 8019f1a:	2800      	cmp	r0, #0
 8019f1c:	d0c2      	beq.n	8019ea4 <__gethex+0x1a8>
 8019f1e:	f04f 0903 	mov.w	r9, #3
 8019f22:	e7c1      	b.n	8019ea8 <__gethex+0x1ac>
 8019f24:	da09      	bge.n	8019f3a <__gethex+0x23e>
 8019f26:	1b75      	subs	r5, r6, r5
 8019f28:	4621      	mov	r1, r4
 8019f2a:	9801      	ldr	r0, [sp, #4]
 8019f2c:	462a      	mov	r2, r5
 8019f2e:	f7fe fa45 	bl	80183bc <__lshift>
 8019f32:	1b7f      	subs	r7, r7, r5
 8019f34:	4604      	mov	r4, r0
 8019f36:	f100 0a14 	add.w	sl, r0, #20
 8019f3a:	f04f 0900 	mov.w	r9, #0
 8019f3e:	e7b8      	b.n	8019eb2 <__gethex+0x1b6>
 8019f40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019f44:	42bd      	cmp	r5, r7
 8019f46:	dd6f      	ble.n	801a028 <__gethex+0x32c>
 8019f48:	1bed      	subs	r5, r5, r7
 8019f4a:	42ae      	cmp	r6, r5
 8019f4c:	dc34      	bgt.n	8019fb8 <__gethex+0x2bc>
 8019f4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019f52:	2b02      	cmp	r3, #2
 8019f54:	d022      	beq.n	8019f9c <__gethex+0x2a0>
 8019f56:	2b03      	cmp	r3, #3
 8019f58:	d024      	beq.n	8019fa4 <__gethex+0x2a8>
 8019f5a:	2b01      	cmp	r3, #1
 8019f5c:	d115      	bne.n	8019f8a <__gethex+0x28e>
 8019f5e:	42ae      	cmp	r6, r5
 8019f60:	d113      	bne.n	8019f8a <__gethex+0x28e>
 8019f62:	2e01      	cmp	r6, #1
 8019f64:	d10b      	bne.n	8019f7e <__gethex+0x282>
 8019f66:	9a02      	ldr	r2, [sp, #8]
 8019f68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019f6c:	6013      	str	r3, [r2, #0]
 8019f6e:	2301      	movs	r3, #1
 8019f70:	6123      	str	r3, [r4, #16]
 8019f72:	f8ca 3000 	str.w	r3, [sl]
 8019f76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f78:	2562      	movs	r5, #98	@ 0x62
 8019f7a:	601c      	str	r4, [r3, #0]
 8019f7c:	e73a      	b.n	8019df4 <__gethex+0xf8>
 8019f7e:	1e71      	subs	r1, r6, #1
 8019f80:	4620      	mov	r0, r4
 8019f82:	f7fe fc54 	bl	801882e <__any_on>
 8019f86:	2800      	cmp	r0, #0
 8019f88:	d1ed      	bne.n	8019f66 <__gethex+0x26a>
 8019f8a:	9801      	ldr	r0, [sp, #4]
 8019f8c:	4621      	mov	r1, r4
 8019f8e:	f7fe f805 	bl	8017f9c <_Bfree>
 8019f92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019f94:	2300      	movs	r3, #0
 8019f96:	6013      	str	r3, [r2, #0]
 8019f98:	2550      	movs	r5, #80	@ 0x50
 8019f9a:	e72b      	b.n	8019df4 <__gethex+0xf8>
 8019f9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d1f3      	bne.n	8019f8a <__gethex+0x28e>
 8019fa2:	e7e0      	b.n	8019f66 <__gethex+0x26a>
 8019fa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d1dd      	bne.n	8019f66 <__gethex+0x26a>
 8019faa:	e7ee      	b.n	8019f8a <__gethex+0x28e>
 8019fac:	0801b20b 	.word	0x0801b20b
 8019fb0:	0801b1a1 	.word	0x0801b1a1
 8019fb4:	0801b262 	.word	0x0801b262
 8019fb8:	1e6f      	subs	r7, r5, #1
 8019fba:	f1b9 0f00 	cmp.w	r9, #0
 8019fbe:	d130      	bne.n	801a022 <__gethex+0x326>
 8019fc0:	b127      	cbz	r7, 8019fcc <__gethex+0x2d0>
 8019fc2:	4639      	mov	r1, r7
 8019fc4:	4620      	mov	r0, r4
 8019fc6:	f7fe fc32 	bl	801882e <__any_on>
 8019fca:	4681      	mov	r9, r0
 8019fcc:	117a      	asrs	r2, r7, #5
 8019fce:	2301      	movs	r3, #1
 8019fd0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8019fd4:	f007 071f 	and.w	r7, r7, #31
 8019fd8:	40bb      	lsls	r3, r7
 8019fda:	4213      	tst	r3, r2
 8019fdc:	4629      	mov	r1, r5
 8019fde:	4620      	mov	r0, r4
 8019fe0:	bf18      	it	ne
 8019fe2:	f049 0902 	orrne.w	r9, r9, #2
 8019fe6:	f7ff fe21 	bl	8019c2c <rshift>
 8019fea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8019fee:	1b76      	subs	r6, r6, r5
 8019ff0:	2502      	movs	r5, #2
 8019ff2:	f1b9 0f00 	cmp.w	r9, #0
 8019ff6:	d047      	beq.n	801a088 <__gethex+0x38c>
 8019ff8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019ffc:	2b02      	cmp	r3, #2
 8019ffe:	d015      	beq.n	801a02c <__gethex+0x330>
 801a000:	2b03      	cmp	r3, #3
 801a002:	d017      	beq.n	801a034 <__gethex+0x338>
 801a004:	2b01      	cmp	r3, #1
 801a006:	d109      	bne.n	801a01c <__gethex+0x320>
 801a008:	f019 0f02 	tst.w	r9, #2
 801a00c:	d006      	beq.n	801a01c <__gethex+0x320>
 801a00e:	f8da 3000 	ldr.w	r3, [sl]
 801a012:	ea49 0903 	orr.w	r9, r9, r3
 801a016:	f019 0f01 	tst.w	r9, #1
 801a01a:	d10e      	bne.n	801a03a <__gethex+0x33e>
 801a01c:	f045 0510 	orr.w	r5, r5, #16
 801a020:	e032      	b.n	801a088 <__gethex+0x38c>
 801a022:	f04f 0901 	mov.w	r9, #1
 801a026:	e7d1      	b.n	8019fcc <__gethex+0x2d0>
 801a028:	2501      	movs	r5, #1
 801a02a:	e7e2      	b.n	8019ff2 <__gethex+0x2f6>
 801a02c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a02e:	f1c3 0301 	rsb	r3, r3, #1
 801a032:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a036:	2b00      	cmp	r3, #0
 801a038:	d0f0      	beq.n	801a01c <__gethex+0x320>
 801a03a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801a03e:	f104 0314 	add.w	r3, r4, #20
 801a042:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801a046:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801a04a:	f04f 0c00 	mov.w	ip, #0
 801a04e:	4618      	mov	r0, r3
 801a050:	f853 2b04 	ldr.w	r2, [r3], #4
 801a054:	f1b2 3fff 	cmp.w	r2, #4294967295
 801a058:	d01b      	beq.n	801a092 <__gethex+0x396>
 801a05a:	3201      	adds	r2, #1
 801a05c:	6002      	str	r2, [r0, #0]
 801a05e:	2d02      	cmp	r5, #2
 801a060:	f104 0314 	add.w	r3, r4, #20
 801a064:	d13c      	bne.n	801a0e0 <__gethex+0x3e4>
 801a066:	f8d8 2000 	ldr.w	r2, [r8]
 801a06a:	3a01      	subs	r2, #1
 801a06c:	42b2      	cmp	r2, r6
 801a06e:	d109      	bne.n	801a084 <__gethex+0x388>
 801a070:	1171      	asrs	r1, r6, #5
 801a072:	2201      	movs	r2, #1
 801a074:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a078:	f006 061f 	and.w	r6, r6, #31
 801a07c:	fa02 f606 	lsl.w	r6, r2, r6
 801a080:	421e      	tst	r6, r3
 801a082:	d13a      	bne.n	801a0fa <__gethex+0x3fe>
 801a084:	f045 0520 	orr.w	r5, r5, #32
 801a088:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a08a:	601c      	str	r4, [r3, #0]
 801a08c:	9b02      	ldr	r3, [sp, #8]
 801a08e:	601f      	str	r7, [r3, #0]
 801a090:	e6b0      	b.n	8019df4 <__gethex+0xf8>
 801a092:	4299      	cmp	r1, r3
 801a094:	f843 cc04 	str.w	ip, [r3, #-4]
 801a098:	d8d9      	bhi.n	801a04e <__gethex+0x352>
 801a09a:	68a3      	ldr	r3, [r4, #8]
 801a09c:	459b      	cmp	fp, r3
 801a09e:	db17      	blt.n	801a0d0 <__gethex+0x3d4>
 801a0a0:	6861      	ldr	r1, [r4, #4]
 801a0a2:	9801      	ldr	r0, [sp, #4]
 801a0a4:	3101      	adds	r1, #1
 801a0a6:	f7fd ff39 	bl	8017f1c <_Balloc>
 801a0aa:	4681      	mov	r9, r0
 801a0ac:	b918      	cbnz	r0, 801a0b6 <__gethex+0x3ba>
 801a0ae:	4b1a      	ldr	r3, [pc, #104]	@ (801a118 <__gethex+0x41c>)
 801a0b0:	4602      	mov	r2, r0
 801a0b2:	2184      	movs	r1, #132	@ 0x84
 801a0b4:	e6c5      	b.n	8019e42 <__gethex+0x146>
 801a0b6:	6922      	ldr	r2, [r4, #16]
 801a0b8:	3202      	adds	r2, #2
 801a0ba:	f104 010c 	add.w	r1, r4, #12
 801a0be:	0092      	lsls	r2, r2, #2
 801a0c0:	300c      	adds	r0, #12
 801a0c2:	f7fd f874 	bl	80171ae <memcpy>
 801a0c6:	4621      	mov	r1, r4
 801a0c8:	9801      	ldr	r0, [sp, #4]
 801a0ca:	f7fd ff67 	bl	8017f9c <_Bfree>
 801a0ce:	464c      	mov	r4, r9
 801a0d0:	6923      	ldr	r3, [r4, #16]
 801a0d2:	1c5a      	adds	r2, r3, #1
 801a0d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a0d8:	6122      	str	r2, [r4, #16]
 801a0da:	2201      	movs	r2, #1
 801a0dc:	615a      	str	r2, [r3, #20]
 801a0de:	e7be      	b.n	801a05e <__gethex+0x362>
 801a0e0:	6922      	ldr	r2, [r4, #16]
 801a0e2:	455a      	cmp	r2, fp
 801a0e4:	dd0b      	ble.n	801a0fe <__gethex+0x402>
 801a0e6:	2101      	movs	r1, #1
 801a0e8:	4620      	mov	r0, r4
 801a0ea:	f7ff fd9f 	bl	8019c2c <rshift>
 801a0ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a0f2:	3701      	adds	r7, #1
 801a0f4:	42bb      	cmp	r3, r7
 801a0f6:	f6ff aee0 	blt.w	8019eba <__gethex+0x1be>
 801a0fa:	2501      	movs	r5, #1
 801a0fc:	e7c2      	b.n	801a084 <__gethex+0x388>
 801a0fe:	f016 061f 	ands.w	r6, r6, #31
 801a102:	d0fa      	beq.n	801a0fa <__gethex+0x3fe>
 801a104:	4453      	add	r3, sl
 801a106:	f1c6 0620 	rsb	r6, r6, #32
 801a10a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801a10e:	f7fd fff7 	bl	8018100 <__hi0bits>
 801a112:	42b0      	cmp	r0, r6
 801a114:	dbe7      	blt.n	801a0e6 <__gethex+0x3ea>
 801a116:	e7f0      	b.n	801a0fa <__gethex+0x3fe>
 801a118:	0801b1a1 	.word	0x0801b1a1

0801a11c <L_shift>:
 801a11c:	f1c2 0208 	rsb	r2, r2, #8
 801a120:	0092      	lsls	r2, r2, #2
 801a122:	b570      	push	{r4, r5, r6, lr}
 801a124:	f1c2 0620 	rsb	r6, r2, #32
 801a128:	6843      	ldr	r3, [r0, #4]
 801a12a:	6804      	ldr	r4, [r0, #0]
 801a12c:	fa03 f506 	lsl.w	r5, r3, r6
 801a130:	432c      	orrs	r4, r5
 801a132:	40d3      	lsrs	r3, r2
 801a134:	6004      	str	r4, [r0, #0]
 801a136:	f840 3f04 	str.w	r3, [r0, #4]!
 801a13a:	4288      	cmp	r0, r1
 801a13c:	d3f4      	bcc.n	801a128 <L_shift+0xc>
 801a13e:	bd70      	pop	{r4, r5, r6, pc}

0801a140 <__match>:
 801a140:	b530      	push	{r4, r5, lr}
 801a142:	6803      	ldr	r3, [r0, #0]
 801a144:	3301      	adds	r3, #1
 801a146:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a14a:	b914      	cbnz	r4, 801a152 <__match+0x12>
 801a14c:	6003      	str	r3, [r0, #0]
 801a14e:	2001      	movs	r0, #1
 801a150:	bd30      	pop	{r4, r5, pc}
 801a152:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a156:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801a15a:	2d19      	cmp	r5, #25
 801a15c:	bf98      	it	ls
 801a15e:	3220      	addls	r2, #32
 801a160:	42a2      	cmp	r2, r4
 801a162:	d0f0      	beq.n	801a146 <__match+0x6>
 801a164:	2000      	movs	r0, #0
 801a166:	e7f3      	b.n	801a150 <__match+0x10>

0801a168 <__hexnan>:
 801a168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a16c:	680b      	ldr	r3, [r1, #0]
 801a16e:	6801      	ldr	r1, [r0, #0]
 801a170:	115e      	asrs	r6, r3, #5
 801a172:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801a176:	f013 031f 	ands.w	r3, r3, #31
 801a17a:	b087      	sub	sp, #28
 801a17c:	bf18      	it	ne
 801a17e:	3604      	addne	r6, #4
 801a180:	2500      	movs	r5, #0
 801a182:	1f37      	subs	r7, r6, #4
 801a184:	4682      	mov	sl, r0
 801a186:	4690      	mov	r8, r2
 801a188:	9301      	str	r3, [sp, #4]
 801a18a:	f846 5c04 	str.w	r5, [r6, #-4]
 801a18e:	46b9      	mov	r9, r7
 801a190:	463c      	mov	r4, r7
 801a192:	9502      	str	r5, [sp, #8]
 801a194:	46ab      	mov	fp, r5
 801a196:	784a      	ldrb	r2, [r1, #1]
 801a198:	1c4b      	adds	r3, r1, #1
 801a19a:	9303      	str	r3, [sp, #12]
 801a19c:	b342      	cbz	r2, 801a1f0 <__hexnan+0x88>
 801a19e:	4610      	mov	r0, r2
 801a1a0:	9105      	str	r1, [sp, #20]
 801a1a2:	9204      	str	r2, [sp, #16]
 801a1a4:	f7ff fd94 	bl	8019cd0 <__hexdig_fun>
 801a1a8:	2800      	cmp	r0, #0
 801a1aa:	d151      	bne.n	801a250 <__hexnan+0xe8>
 801a1ac:	9a04      	ldr	r2, [sp, #16]
 801a1ae:	9905      	ldr	r1, [sp, #20]
 801a1b0:	2a20      	cmp	r2, #32
 801a1b2:	d818      	bhi.n	801a1e6 <__hexnan+0x7e>
 801a1b4:	9b02      	ldr	r3, [sp, #8]
 801a1b6:	459b      	cmp	fp, r3
 801a1b8:	dd13      	ble.n	801a1e2 <__hexnan+0x7a>
 801a1ba:	454c      	cmp	r4, r9
 801a1bc:	d206      	bcs.n	801a1cc <__hexnan+0x64>
 801a1be:	2d07      	cmp	r5, #7
 801a1c0:	dc04      	bgt.n	801a1cc <__hexnan+0x64>
 801a1c2:	462a      	mov	r2, r5
 801a1c4:	4649      	mov	r1, r9
 801a1c6:	4620      	mov	r0, r4
 801a1c8:	f7ff ffa8 	bl	801a11c <L_shift>
 801a1cc:	4544      	cmp	r4, r8
 801a1ce:	d952      	bls.n	801a276 <__hexnan+0x10e>
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	f1a4 0904 	sub.w	r9, r4, #4
 801a1d6:	f844 3c04 	str.w	r3, [r4, #-4]
 801a1da:	f8cd b008 	str.w	fp, [sp, #8]
 801a1de:	464c      	mov	r4, r9
 801a1e0:	461d      	mov	r5, r3
 801a1e2:	9903      	ldr	r1, [sp, #12]
 801a1e4:	e7d7      	b.n	801a196 <__hexnan+0x2e>
 801a1e6:	2a29      	cmp	r2, #41	@ 0x29
 801a1e8:	d157      	bne.n	801a29a <__hexnan+0x132>
 801a1ea:	3102      	adds	r1, #2
 801a1ec:	f8ca 1000 	str.w	r1, [sl]
 801a1f0:	f1bb 0f00 	cmp.w	fp, #0
 801a1f4:	d051      	beq.n	801a29a <__hexnan+0x132>
 801a1f6:	454c      	cmp	r4, r9
 801a1f8:	d206      	bcs.n	801a208 <__hexnan+0xa0>
 801a1fa:	2d07      	cmp	r5, #7
 801a1fc:	dc04      	bgt.n	801a208 <__hexnan+0xa0>
 801a1fe:	462a      	mov	r2, r5
 801a200:	4649      	mov	r1, r9
 801a202:	4620      	mov	r0, r4
 801a204:	f7ff ff8a 	bl	801a11c <L_shift>
 801a208:	4544      	cmp	r4, r8
 801a20a:	d936      	bls.n	801a27a <__hexnan+0x112>
 801a20c:	f1a8 0204 	sub.w	r2, r8, #4
 801a210:	4623      	mov	r3, r4
 801a212:	f853 1b04 	ldr.w	r1, [r3], #4
 801a216:	f842 1f04 	str.w	r1, [r2, #4]!
 801a21a:	429f      	cmp	r7, r3
 801a21c:	d2f9      	bcs.n	801a212 <__hexnan+0xaa>
 801a21e:	1b3b      	subs	r3, r7, r4
 801a220:	f023 0303 	bic.w	r3, r3, #3
 801a224:	3304      	adds	r3, #4
 801a226:	3401      	adds	r4, #1
 801a228:	3e03      	subs	r6, #3
 801a22a:	42b4      	cmp	r4, r6
 801a22c:	bf88      	it	hi
 801a22e:	2304      	movhi	r3, #4
 801a230:	4443      	add	r3, r8
 801a232:	2200      	movs	r2, #0
 801a234:	f843 2b04 	str.w	r2, [r3], #4
 801a238:	429f      	cmp	r7, r3
 801a23a:	d2fb      	bcs.n	801a234 <__hexnan+0xcc>
 801a23c:	683b      	ldr	r3, [r7, #0]
 801a23e:	b91b      	cbnz	r3, 801a248 <__hexnan+0xe0>
 801a240:	4547      	cmp	r7, r8
 801a242:	d128      	bne.n	801a296 <__hexnan+0x12e>
 801a244:	2301      	movs	r3, #1
 801a246:	603b      	str	r3, [r7, #0]
 801a248:	2005      	movs	r0, #5
 801a24a:	b007      	add	sp, #28
 801a24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a250:	3501      	adds	r5, #1
 801a252:	2d08      	cmp	r5, #8
 801a254:	f10b 0b01 	add.w	fp, fp, #1
 801a258:	dd06      	ble.n	801a268 <__hexnan+0x100>
 801a25a:	4544      	cmp	r4, r8
 801a25c:	d9c1      	bls.n	801a1e2 <__hexnan+0x7a>
 801a25e:	2300      	movs	r3, #0
 801a260:	f844 3c04 	str.w	r3, [r4, #-4]
 801a264:	2501      	movs	r5, #1
 801a266:	3c04      	subs	r4, #4
 801a268:	6822      	ldr	r2, [r4, #0]
 801a26a:	f000 000f 	and.w	r0, r0, #15
 801a26e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801a272:	6020      	str	r0, [r4, #0]
 801a274:	e7b5      	b.n	801a1e2 <__hexnan+0x7a>
 801a276:	2508      	movs	r5, #8
 801a278:	e7b3      	b.n	801a1e2 <__hexnan+0x7a>
 801a27a:	9b01      	ldr	r3, [sp, #4]
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d0dd      	beq.n	801a23c <__hexnan+0xd4>
 801a280:	f1c3 0320 	rsb	r3, r3, #32
 801a284:	f04f 32ff 	mov.w	r2, #4294967295
 801a288:	40da      	lsrs	r2, r3
 801a28a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801a28e:	4013      	ands	r3, r2
 801a290:	f846 3c04 	str.w	r3, [r6, #-4]
 801a294:	e7d2      	b.n	801a23c <__hexnan+0xd4>
 801a296:	3f04      	subs	r7, #4
 801a298:	e7d0      	b.n	801a23c <__hexnan+0xd4>
 801a29a:	2004      	movs	r0, #4
 801a29c:	e7d5      	b.n	801a24a <__hexnan+0xe2>

0801a29e <__ascii_mbtowc>:
 801a29e:	b082      	sub	sp, #8
 801a2a0:	b901      	cbnz	r1, 801a2a4 <__ascii_mbtowc+0x6>
 801a2a2:	a901      	add	r1, sp, #4
 801a2a4:	b142      	cbz	r2, 801a2b8 <__ascii_mbtowc+0x1a>
 801a2a6:	b14b      	cbz	r3, 801a2bc <__ascii_mbtowc+0x1e>
 801a2a8:	7813      	ldrb	r3, [r2, #0]
 801a2aa:	600b      	str	r3, [r1, #0]
 801a2ac:	7812      	ldrb	r2, [r2, #0]
 801a2ae:	1e10      	subs	r0, r2, #0
 801a2b0:	bf18      	it	ne
 801a2b2:	2001      	movne	r0, #1
 801a2b4:	b002      	add	sp, #8
 801a2b6:	4770      	bx	lr
 801a2b8:	4610      	mov	r0, r2
 801a2ba:	e7fb      	b.n	801a2b4 <__ascii_mbtowc+0x16>
 801a2bc:	f06f 0001 	mvn.w	r0, #1
 801a2c0:	e7f8      	b.n	801a2b4 <__ascii_mbtowc+0x16>

0801a2c2 <_realloc_r>:
 801a2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2c6:	4607      	mov	r7, r0
 801a2c8:	4614      	mov	r4, r2
 801a2ca:	460d      	mov	r5, r1
 801a2cc:	b921      	cbnz	r1, 801a2d8 <_realloc_r+0x16>
 801a2ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a2d2:	4611      	mov	r1, r2
 801a2d4:	f7fb bc9c 	b.w	8015c10 <_malloc_r>
 801a2d8:	b92a      	cbnz	r2, 801a2e6 <_realloc_r+0x24>
 801a2da:	f7fd fdd5 	bl	8017e88 <_free_r>
 801a2de:	4625      	mov	r5, r4
 801a2e0:	4628      	mov	r0, r5
 801a2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2e6:	f000 f840 	bl	801a36a <_malloc_usable_size_r>
 801a2ea:	4284      	cmp	r4, r0
 801a2ec:	4606      	mov	r6, r0
 801a2ee:	d802      	bhi.n	801a2f6 <_realloc_r+0x34>
 801a2f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a2f4:	d8f4      	bhi.n	801a2e0 <_realloc_r+0x1e>
 801a2f6:	4621      	mov	r1, r4
 801a2f8:	4638      	mov	r0, r7
 801a2fa:	f7fb fc89 	bl	8015c10 <_malloc_r>
 801a2fe:	4680      	mov	r8, r0
 801a300:	b908      	cbnz	r0, 801a306 <_realloc_r+0x44>
 801a302:	4645      	mov	r5, r8
 801a304:	e7ec      	b.n	801a2e0 <_realloc_r+0x1e>
 801a306:	42b4      	cmp	r4, r6
 801a308:	4622      	mov	r2, r4
 801a30a:	4629      	mov	r1, r5
 801a30c:	bf28      	it	cs
 801a30e:	4632      	movcs	r2, r6
 801a310:	f7fc ff4d 	bl	80171ae <memcpy>
 801a314:	4629      	mov	r1, r5
 801a316:	4638      	mov	r0, r7
 801a318:	f7fd fdb6 	bl	8017e88 <_free_r>
 801a31c:	e7f1      	b.n	801a302 <_realloc_r+0x40>

0801a31e <__ascii_wctomb>:
 801a31e:	4603      	mov	r3, r0
 801a320:	4608      	mov	r0, r1
 801a322:	b141      	cbz	r1, 801a336 <__ascii_wctomb+0x18>
 801a324:	2aff      	cmp	r2, #255	@ 0xff
 801a326:	d904      	bls.n	801a332 <__ascii_wctomb+0x14>
 801a328:	228a      	movs	r2, #138	@ 0x8a
 801a32a:	601a      	str	r2, [r3, #0]
 801a32c:	f04f 30ff 	mov.w	r0, #4294967295
 801a330:	4770      	bx	lr
 801a332:	700a      	strb	r2, [r1, #0]
 801a334:	2001      	movs	r0, #1
 801a336:	4770      	bx	lr

0801a338 <fiprintf>:
 801a338:	b40e      	push	{r1, r2, r3}
 801a33a:	b503      	push	{r0, r1, lr}
 801a33c:	4601      	mov	r1, r0
 801a33e:	ab03      	add	r3, sp, #12
 801a340:	4805      	ldr	r0, [pc, #20]	@ (801a358 <fiprintf+0x20>)
 801a342:	f853 2b04 	ldr.w	r2, [r3], #4
 801a346:	6800      	ldr	r0, [r0, #0]
 801a348:	9301      	str	r3, [sp, #4]
 801a34a:	f7ff fa99 	bl	8019880 <_vfiprintf_r>
 801a34e:	b002      	add	sp, #8
 801a350:	f85d eb04 	ldr.w	lr, [sp], #4
 801a354:	b003      	add	sp, #12
 801a356:	4770      	bx	lr
 801a358:	20000218 	.word	0x20000218

0801a35c <abort>:
 801a35c:	b508      	push	{r3, lr}
 801a35e:	2006      	movs	r0, #6
 801a360:	f000 f834 	bl	801a3cc <raise>
 801a364:	2001      	movs	r0, #1
 801a366:	f7f1 fe9b 	bl	800c0a0 <_exit>

0801a36a <_malloc_usable_size_r>:
 801a36a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a36e:	1f18      	subs	r0, r3, #4
 801a370:	2b00      	cmp	r3, #0
 801a372:	bfbc      	itt	lt
 801a374:	580b      	ldrlt	r3, [r1, r0]
 801a376:	18c0      	addlt	r0, r0, r3
 801a378:	4770      	bx	lr

0801a37a <_raise_r>:
 801a37a:	291f      	cmp	r1, #31
 801a37c:	b538      	push	{r3, r4, r5, lr}
 801a37e:	4605      	mov	r5, r0
 801a380:	460c      	mov	r4, r1
 801a382:	d904      	bls.n	801a38e <_raise_r+0x14>
 801a384:	2316      	movs	r3, #22
 801a386:	6003      	str	r3, [r0, #0]
 801a388:	f04f 30ff 	mov.w	r0, #4294967295
 801a38c:	bd38      	pop	{r3, r4, r5, pc}
 801a38e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a390:	b112      	cbz	r2, 801a398 <_raise_r+0x1e>
 801a392:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a396:	b94b      	cbnz	r3, 801a3ac <_raise_r+0x32>
 801a398:	4628      	mov	r0, r5
 801a39a:	f000 f831 	bl	801a400 <_getpid_r>
 801a39e:	4622      	mov	r2, r4
 801a3a0:	4601      	mov	r1, r0
 801a3a2:	4628      	mov	r0, r5
 801a3a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a3a8:	f000 b818 	b.w	801a3dc <_kill_r>
 801a3ac:	2b01      	cmp	r3, #1
 801a3ae:	d00a      	beq.n	801a3c6 <_raise_r+0x4c>
 801a3b0:	1c59      	adds	r1, r3, #1
 801a3b2:	d103      	bne.n	801a3bc <_raise_r+0x42>
 801a3b4:	2316      	movs	r3, #22
 801a3b6:	6003      	str	r3, [r0, #0]
 801a3b8:	2001      	movs	r0, #1
 801a3ba:	e7e7      	b.n	801a38c <_raise_r+0x12>
 801a3bc:	2100      	movs	r1, #0
 801a3be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a3c2:	4620      	mov	r0, r4
 801a3c4:	4798      	blx	r3
 801a3c6:	2000      	movs	r0, #0
 801a3c8:	e7e0      	b.n	801a38c <_raise_r+0x12>
	...

0801a3cc <raise>:
 801a3cc:	4b02      	ldr	r3, [pc, #8]	@ (801a3d8 <raise+0xc>)
 801a3ce:	4601      	mov	r1, r0
 801a3d0:	6818      	ldr	r0, [r3, #0]
 801a3d2:	f7ff bfd2 	b.w	801a37a <_raise_r>
 801a3d6:	bf00      	nop
 801a3d8:	20000218 	.word	0x20000218

0801a3dc <_kill_r>:
 801a3dc:	b538      	push	{r3, r4, r5, lr}
 801a3de:	4d07      	ldr	r5, [pc, #28]	@ (801a3fc <_kill_r+0x20>)
 801a3e0:	2300      	movs	r3, #0
 801a3e2:	4604      	mov	r4, r0
 801a3e4:	4608      	mov	r0, r1
 801a3e6:	4611      	mov	r1, r2
 801a3e8:	602b      	str	r3, [r5, #0]
 801a3ea:	f7f1 fe49 	bl	800c080 <_kill>
 801a3ee:	1c43      	adds	r3, r0, #1
 801a3f0:	d102      	bne.n	801a3f8 <_kill_r+0x1c>
 801a3f2:	682b      	ldr	r3, [r5, #0]
 801a3f4:	b103      	cbz	r3, 801a3f8 <_kill_r+0x1c>
 801a3f6:	6023      	str	r3, [r4, #0]
 801a3f8:	bd38      	pop	{r3, r4, r5, pc}
 801a3fa:	bf00      	nop
 801a3fc:	20004430 	.word	0x20004430

0801a400 <_getpid_r>:
 801a400:	f7f1 be36 	b.w	800c070 <_getpid>

0801a404 <_init>:
 801a404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a406:	bf00      	nop
 801a408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a40a:	bc08      	pop	{r3}
 801a40c:	469e      	mov	lr, r3
 801a40e:	4770      	bx	lr

0801a410 <_fini>:
 801a410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a412:	bf00      	nop
 801a414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a416:	bc08      	pop	{r3}
 801a418:	469e      	mov	lr, r3
 801a41a:	4770      	bx	lr
